cscope 15 $HOME/OS/OSlab/lab6/guestos/src               0001131137
	@bpred.c

20 
	~<m2s.h
>

22 
	#BTB_ENTRY
(
SET
, 
WAY
Ë(&
b¥ed
->
btb
[(SETË* 
b¥ed_btb_assoc
 + (WAY)])

	)

25 
	sbtb_íåy_t
 {

26 
uöt32_t
 
	msour˚
;

27 
uöt32_t
 
	mèrgë
;

28 
	mcou¡î
;

33 
	sb¥ed_t
 {

36 
uöt32_t
 *
	møs
;

37 
	møs_idx
;

41 
btb_íåy_t
 *
	mbtb
;

46 *
	mbimod
;

50 
uöt32_t
 *
	mtwﬁevñ_bht
;

51 *
	mtwﬁevñ_pht
;

56 *
	mchoi˚
;

59 
	m«me
[20];

60 
uöt64_t
 
	mac˚s£s
;

61 
uöt64_t
 
	mhôs
;

66 
	eb¥ed_köd_íum
 {

67 
	mb¥ed_köd_≥r„˘
 = 0,

68 
	mb¥ed_köd_èkí
,

69 
	mb¥ed_köd_nŸèkí
,

70 
	mb¥ed_köd_bimod
,

71 
	mb¥ed_köd_twﬁevñ
,

72 
	mb¥ed_köd_comb


73 } 
	gb¥ed_köd
 = 
b¥ed_köd_twﬁevñ
;

76 *
	gb¥ed_btb
 = "256:4";

77 
uöt32_t
 
	gb¥ed_btb_£ts
;

78 
uöt32_t
 
	gb¥ed_btb_assoc
;

79 
uöt32_t
 
	gb¥ed_bimod_size
 = 1024;

80 
uöt32_t
 
	gb¥ed_choi˚_size
 = 1024;

81 
uöt32_t
 
	gb¥ed_øs_size
 = 32;

83 
uöt32_t
 
	gb¥ed_twﬁevñ_∑øm
[3] = {1, 1024, 8};

84 
uöt32_t
 
	gb¥ed_hi°_size
;

85 
uöt32_t
 
	gb¥ed_Àvñ1_size
;

86 
uöt32_t
 
	gb¥ed_Àvñ2_size
;

87 
uöt32_t
 
	gb¥ed_Àvñ2_height
;

90 
	$b¥ed_ªg_›ti⁄s
()

92 *
b¥ed_köd_m≠
[] = { "perfect", "taken", "nottaken", "bimod", "twolevel", "comb" };

93 
	`›t_ªg_íum
("-bpred", "BranchÖredictor kind {perfect|taken|nottaken|bimod|twolevel|comb}",

94 (*Ë&
b¥ed_köd
, 
b¥ed_köd_m≠
, 6);

95 
	`›t_ªg_°rög
("-b¥ed:btb", "BTB c⁄figuøti⁄ (<£ts>:<assoc>)", &
b¥ed_btb
);

96 
	`›t_ªg_uöt32
("-b¥ed:øs", "Rëu∫áddªs†°ack size", &
b¥ed_øs_size
);

97 
	`›t_ªg_uöt32
("-b¥ed:bimod", "Numbî o‡íåõ†f‹ bimodÆÖªdi˘‹", &
b¥ed_bimod_size
);

98 
	`›t_ªg_uöt32_li°
("-bpred:twolevel", "Two-leveládaptive (<l1size> <l2size> <hist_size>)",

99 
b¥ed_twﬁevñ_∑øm
, 3, 
NULL
);

100 
	`›t_ªg_uöt32
("-b¥ed:choi˚", "Numbî o‡íåõ†f‹ choi˚Öªdi˘‹", &
b¥ed_choi˚_size
);

101 
	}
}

104 
	$b¥ed_öô
()

106 
c‹e
, 
thªad
;

109 
b¥ed_hi°_size
 = 
b¥ed_twﬁevñ_∑øm
[2];

110 
b¥ed_Àvñ1_size
 = 
b¥ed_twﬁevñ_∑øm
[0];

111 
b¥ed_Àvñ2_size
 = 
b¥ed_twﬁevñ_∑øm
[1];

112 
b¥ed_Àvñ2_height
 = 1 << 
b¥ed_hi°_size
;

115 i‡(
b¥ed_bimod_size
 & (bpred_bimod_size - 1))

116 
	`Áèl
("bpred:bimod must beÖower of 2");

117 i‡(
b¥ed_choi˚_size
 & (bpred_choice_size - 1))

118 
	`Áèl
("bpred:choice must beÖower of 2");

119 i‡(
	`ssˇnf
(
b¥ed_btb
, "%d:%d", &
b¥ed_btb_£ts
, &
b¥ed_btb_assoc
) != 2)

120 
	`Áèl
("invalid bpred:btb format");

121 i‡(
b¥ed_btb_£ts
 & (bpred_btb_sets - 1))

122 
	`Áèl
("number of btb sets must beÖower of 2");

123 i‡(
b¥ed_btb_assoc
 & (bpred_btb_assoc - 1))

124 
	`Áèl
("btbássociativity must beÖower of 2");

126 i‡(
b¥ed_hi°_size
 < 1 || bpred_hist_size > 30)

127 
	`Áèl
("predictor history size must be >=1ánd <=30");

128 i‡(
b¥ed_Àvñ1_size
 & (bpred_level1_size - 1))

129 
	`Áèl
("two-levelÖredictor sizes must beÖower of 2");

130 i‡(
b¥ed_Àvñ2_size
 & (bpred_level2_size - 1))

131 
	`Áèl
("two-levelÖredictor sizes must beÖower of 2");

134 
FOREACH_CORE
 
FOREACH_THREAD
 {

135 
THREAD
.
b¥ed
 = 
	`b¥ed_¸óã
();

136 
	`•rötf
(
THREAD
.
b¥ed
->
«me
, "c%dt%d.b¥ed", 
c‹e
, 
thªad
);

138 
	}
}

141 
	$b¥ed_d⁄e
()

143 
c‹e
, 
thªad
;

144 
FOREACH_CORE
 
FOREACH_THREAD


145 
	`b¥ed_‰ì
(
THREAD
.
b¥ed
);

146 
	}
}

149 
b¥ed_t
 *
	$b¥ed_¸óã
()

151 
b¥ed_t
 *
b¥ed
;

152 
i
, 
j
;

155 
b¥ed
 = 
	`ˇŒoc
(1, (
b¥ed_t
));

156 
	`°r˝y
(
b¥ed
->
«me
, "bpred");

157 
b¥ed
->
øs
 = 
	`ˇŒoc
(
b¥ed_øs_size
, (
uöt32_t
));

160 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 || b¥ed_köd =
b¥ed_köd_comb
) {

161 
b¥ed
->
bimod
 = 
	`ˇŒoc
(
b¥ed_bimod_size
, ());

162 
i
 = 0; i < 
b¥ed_bimod_size
; i++)

163 
b¥ed
->
bimod
[
i
] = 2;

167 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 || b¥ed_köd =
b¥ed_köd_comb
) {

168 
b¥ed
->
twﬁevñ_bht
 = 
	`ˇŒoc
(
b¥ed_Àvñ1_size
, (
uöt32_t
));

169 
b¥ed
->
twﬁevñ_pht
 = 
	`ˇŒoc
(
b¥ed_Àvñ2_size
 * 
b¥ed_Àvñ2_height
, ());

170 
i
 = 0; i < 
b¥ed_Àvñ2_size
 * 
b¥ed_Àvñ2_height
; i++)

171 
b¥ed
->
twﬁevñ_pht
[
i
] = 2;

175 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
) {

176 
b¥ed
->
choi˚
 = 
	`ˇŒoc
(
b¥ed_choi˚_size
, ());

177 
i
 = 0; i < 
b¥ed_choi˚_size
; i++)

178 
b¥ed
->
choi˚
[
i
] = 2;

182 
b¥ed
->
btb
 = 
	`ˇŒoc
(
b¥ed_btb_£ts
 * 
b¥ed_btb_assoc
, (
btb_íåy_t
));

183 
i
 = 0; i < 
b¥ed_btb_£ts
; i++)

184 
j
 = 0; j < 
b¥ed_btb_assoc
; j++)

185 
	`BTB_ENTRY
(
i
, 
j
)->
cou¡î
 = j;

188  
b¥ed
;

189 
	}
}

192 
	$b¥ed_‰ì
(
b¥ed_t
 *
b¥ed
)

195 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 || b¥ed_köd =
b¥ed_köd_comb
)

196 
	`‰ì
(
b¥ed
->
bimod
);

199 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 || b¥ed_köd =
b¥ed_köd_comb
) {

200 
	`‰ì
(
b¥ed
->
twﬁevñ_bht
);

201 
	`‰ì
(
b¥ed
->
twﬁevñ_pht
);

205 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
)

206 
	`‰ì
(
b¥ed
->
choi˚
);

209 
	`‰ì
(
b¥ed
->
btb
);

210 
	`‰ì
(
b¥ed
->
øs
);

211 
	`‰ì
(
b¥ed
);

212 
	}
}

216 
	$b¥ed_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

222 
	`as£π
(
u›
->
Êags
 & 
FCTRL
);

223 i‡((
u›
->
Êags
 & 
FCALL
Ë|| (u›->Êag†& 
FRET
Ë|| !(u›->Êag†& 
FCOND
)) {

224 
u›
->
¥ed
 = 1;

229 i‡(
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

230 
u›
->
¥ed
 = u›->
√ù
 !u›->
eù
 + u›->
m›_size
;

233 i‡(
b¥ed_köd
 =
b¥ed_köd_èkí
)

234 
u›
->
¥ed
 = 1;

237 i‡(
b¥ed_köd
 =
b¥ed_köd_nŸèkí
)

238 
u›
->
¥ed
 = 0;

241 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 || b¥ed_köd =
b¥ed_köd_comb
) {

242 
u›
->
bimod_ödex
 = u›->
eù
 & (
b¥ed_bimod_size
 - 1);

243 
u›
->
bimod_¥ed
 = 
b¥ed
->
bimod
[u›->
bimod_ödex
] > 1;

244 
u›
->
¥ed
 = u›->
bimod_¥ed
;

248 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 || b¥ed_köd =
b¥ed_köd_comb
) {

249 
u›
->
twﬁevñ_bht_ödex
 = u›->
eù
 & (
b¥ed_Àvñ1_size
 - 1);

250 
u›
->
twﬁevñ_pht_row
 = 
b¥ed
->
twﬁevñ_bht
[u›->
twﬁevñ_bht_ödex
];

251 
	`as£π
(
u›
->
twﬁevñ_pht_row
 < 
b¥ed_Àvñ2_height
);

252 
u›
->
twﬁevñ_pht_cﬁ
 = u›->
eù
 & (
b¥ed_Àvñ2_size
 - 1);

253 
u›
->
twﬁevñ_¥ed
 = 
b¥ed
->
twﬁevñ_pht
[u›->
twﬁevñ_pht_row
 *

254 
b¥ed_Àvñ2_size
 + 
u›
->
twﬁevñ_pht_cﬁ
] > 1;

255 
u›
->
¥ed
 = u›->
twﬁevñ_¥ed
;

259 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
) {

260 
u›
->
choi˚_ödex
 = u›->
eù
 & (
b¥ed_choi˚_size
 - 1);

261 
u›
->
choi˚_¥ed
 = 
b¥ed
->
choi˚
[u›->
choi˚_ödex
] > 1;

262 
u›
->
¥ed
 = u›->
choi˚_¥ed
 ? u›->
twﬁevñ_¥ed
 : u›->
bimod_¥ed
;

266 
	`as£π
(!
u›
->
¥ed
 || uop->pred == 1);

267  
u›
->
¥ed
;

268 
	}
}

276 
	$b¥ed_lookup_mu…ùÀ
(
b¥ed_t
 *
b¥ed
, 
uöt32_t
 
eù
, 
cou¡
)

278 
i
, 
¥ed
, 
ãmp_¥ed
;

279 
uöt32_t
 
bht_ödex
, 
pht_cﬁ
;

280 
uöt32_t
 
bhr
;

285 
	`as£π
(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
);

286 
bht_ödex
 = 
eù
 & (
b¥ed_Àvñ1_size
 - 1);

287 
bhr
 = 
b¥ed
->
twﬁevñ_bht
[
bht_ödex
];

288 
	`as£π
(
bhr
 < 
b¥ed_Àvñ2_height
);

289 
pht_cﬁ
 = 
eù
 & (
b¥ed_Àvñ2_size
 - 1);

290 
¥ed
 = 
ãmp_¥ed
 = 
b¥ed
->
twﬁevñ_pht
[
bhr
 * 
b¥ed_Àvñ2_size
 + 
pht_cﬁ
] > 1;

293 
i
 = 1; i < 
cou¡
; i++) {

294 
bhr
 = ((bh∏<< 1Ë| 
ãmp_¥ed
Ë& (
b¥ed_Àvñ2_height
 - 1);

295 
ãmp_¥ed
 = 
b¥ed
->
twﬁevñ_pht
[
bhr
 * 
b¥ed_Àvñ2_size
 + 
pht_cﬁ
] > 1;

296 
	`as£π
(!
ãmp_¥ed
 ||Åemp_pred == 1);

297 
¥ed
 |
ãmp_¥ed
 << 
i
;

301  
¥ed
;

302 
	}
}

305 
	$b¥ed_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

307 
èkí
;

308 *
p˘r
;

309 
uöt32_t
 *
pbhr
;

311 
	`as£π
(!
u›
->
•ecmode
);

312 
	`as£π
(
u›
->
Êags
 & 
FCTRL
);

313 
èkí
 = 
u›
->
√ù
 !u›->
eù
 + u›->
m›_size
;

316 
b¥ed
->
ac˚s£s
++;

317 i‡(
u›
->
√ù
 =u›->
¥ed_√ù
)

318 
b¥ed
->
hôs
++;

323 i‡((
u›
->
Êags
 & 
FCALL
Ë|| (u›->Êag†& 
FRET
Ë|| !(u›->Êag†& 
FCOND
)

324 || 
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

328 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 ||

329 (
b¥ed_köd
 =
b¥ed_köd_comb
 && !
u›
->
choi˚_¥ed
))

331 
p˘r
 = &
b¥ed
->
bimod
[
u›
->
bimod_ödex
];

332 *
p˘r
 = 
èkí
 ? 
	`MIN
(*p˘∏+ 1, 3Ë: 
	`MAX
(*pctr - 1, 0);

336 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 ||

337 (
b¥ed_köd
 =
b¥ed_köd_comb
 && 
u›
->
choi˚_¥ed
))

340 
pbhr
 = &
b¥ed
->
twﬁevñ_bht
[
u›
->
twﬁevñ_bht_ödex
];

341 *
pbhr
 = ((*pbh∏<< 1Ë| 
èkí
Ë& (
b¥ed_Àvñ2_height
 - 1);

344 
p˘r
 = &
b¥ed
->
twﬁevñ_pht
[
u›
->
twﬁevñ_pht_row
 *

345 
b¥ed_Àvñ2_size
 + 
u›
->
twﬁevñ_pht_cﬁ
];

346 *
p˘r
 = 
èkí
 ? 
	`MIN
(*p˘∏+ 1, 3Ë: 
	`MAX
(*pctr - 1, 0);

351 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
 && 
u›
->
bimod_¥ed
 !u›->
twﬁevñ_¥ed
) {

352 
p˘r
 = &
b¥ed
->
choi˚
[
u›
->
choi˚_ödex
];

353 *
p˘r
 = 
u›
->
bimod_¥ed
 =
èkí
 ? 
	`MAX
(*p˘∏- 1, 0Ë: 
	`MIN
(*pctr + 1, 3);

355 
	}
}

361 
uöt32_t
 
	$b¥ed_btb_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

363 
btb_íåy_t
 *
íåy
;

364 
uöt32_t
 
way
, 
£t
, 
èrgë
 = 0;

365 
hô
 = 0;

368 
	`as£π
(
u›
->
Êags
 & 
FCTRL
);

369 i‡(
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

370  
u›
->
√ù
;

373 
£t
 = 
u›
->
eù
 & (
b¥ed_btb_£ts
 - 1);

374 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

375 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

376 i‡(
íåy
->
sour˚
 !
u›
->
eù
)

378 
èrgë
 = 
íåy
->target;

379 
hô
 = 1;

386 i‡(
hô
 && (
u›
->
Êags
 & 
FCALL
Ë&& !u›->
•ecmode
) {

387 
b¥ed
->
øs
[b¥ed->
øs_idx
] = 
u›
->
eù
 + u›->
m›_size
;

388 
b¥ed
->
øs_idx
 = (b¥ed->øs_idx + 1Ë% 
b¥ed_øs_size
;

393 i‡(
hô
 && (
u›
->
Êags
 & 
FRET
Ë&& !u›->
•ecmode
) {

394 
b¥ed
->
øs_idx
 = (b¥ed->øs_idx + 
b¥ed_øs_size
 - 1) % bpred_ras_size;

395 
èrgë
 = 
b¥ed
->
øs
[b¥ed->
øs_idx
];

399  
èrgë
;

400 
	}
}

404 
	$b¥ed_btb_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

406 
btb_íåy_t
 *
íåy
, *
found
 = 
NULL
;

407 
way
, 
£t
;

410 i‡(
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

414 
£t
 = 
u›
->
eù
 & (
b¥ed_btb_£ts
 - 1);

415 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

416 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

417 i‡(
íåy
->
sour˚
 =
u›
->
eù
) {

418 
found
 = 
íåy
;

424 i‡(!
found
) {

425 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

426 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

427 
íåy
->
cou¡î
--;

428 i‡(
íåy
->
cou¡î
 < 0) {

429 
íåy
->
cou¡î
 = 
b¥ed_btb_assoc
 - 1;

430 
íåy
->
sour˚
 = 
u›
->
eù
;

431 
íåy
->
èrgë
 = 
u›
->
√ù
;

437 i‡(
found
) {

438 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

439 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

440 i‡(
íåy
->
cou¡î
 > 
found
->counter)

441 
íåy
->
cou¡î
--;

443 
found
->
cou¡î
 = 
b¥ed_btb_assoc
 - 1;

444 
found
->
èrgë
 = 
u›
->
√ù
;

446 
	}
}

453 
uöt32_t
 
	$b¥ed_btb_√xt_bønch
(
b¥ed_t
 *
b¥ed
, 
uöt32_t
 
eù
, uöt32_à
bsize
)

455 
btb_íåy_t
 *
íåy
;

456 
uöt32_t
 
limô
;

457 
£t
, 
way
;

459 
	`as£π
(!(
bsize
 & (bsize - 1)));

460 
limô
 = (
eù
 + 
bsize
) & ~(bsize - 1);

461 
eù
 < 
limô
) {

462 
£t
 = 
eù
 & (
b¥ed_btb_£ts
 - 1);

463 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

464 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

465 i‡(
íåy
->
sour˚
 =
eù
)

466  
eù
;

468 
eù
++;

471 
	}
}

	@commit.c

20 
	~<m2s.h
>

23 
	$ˇn_commô_thªad
(
c‹e
, 
thªad
)

25 
u›_t
 *
u›
;

26 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

30 i‡(!
˘x
 || !
	`˘x_gë_°©us
(˘x, 
˘x_ru¬ög
))

31 
THREAD
.
œ°_commô_cy˛e
 = 
sim_cy˛e
;

32 i‡(
sim_cy˛e
 - 
THREAD
.
œ°_commô_cy˛e
 > 1000000)

33 
	`∑nic
("c%dt%d:Çÿö° commôãd i¿1M cy˛es", 
c‹e
, 
thªad
);

37 i‡(!
	`rob_ˇn_dequeue
(
c‹e
, 
thªad
))

41 
u›
 = 
	`rob_hód
(
c‹e
, 
thªad
);

42 
	`as£π
(
	`u›_exi°s
(
u›
));

43 
	`as£π
(
u›
->
c‹e
 =c‹ê&& u›->
thªad
 ==Åhread);

47 i‡(
u›
->
Êags
 & 
FSTORE
) {

48 i‡(!
u›
->
ªady
 && 
	`rf_ªady
(uop))

49 
u›
->
ªady
 = 1;

50  
u›
->
ªady
;

54  
u›
->
com∂ëed
;

55 
	}
}

58 
	$commô_thªad
(
c‹e
, 
thªad
, 
qu™t
)

60 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

61 
u›_t
 *
u›
;

62 
ªcovî
 = 0;

65 i‡(
esim_debug_fûe
)

66 
	`u›_ li°_check_if_ªady
(
THREAD
.
sq
);

69 
	`as£π
(
˘x
);

70 
qu™t
 && 
	`ˇn_commô_thªad
(
c‹e
, 
thªad
)) {

73 
u›
 = 
	`rob_hód
(
c‹e
, 
thªad
);

74 
	`as£π
(
	`u›_exi°s
(
u›
));

75 
	`as£π
(
u›
->
c‹e
 == core);

76 
	`as£π
(
u›
->
thªad
 ==Åhread);

77 
	`as£π
(!
ªcovî
);

80 i‡(
p_ªcovî_köd
 =
p_ªcovî_köd_commô
 &&

81 (
u›
->
Êags
 & 
FCTRL
Ë&& u›->
√ù
 !u›->
¥ed_√ù
)

82 
ªcovî
 = 1;

85 
	`as£π
(!
u›
->
•ecmode
);

86 
	`rf_commô
(
u›
);

89 i‡(
u›
->
Êags
 & 
FCTRL
) {

90 
	`b¥ed_upd©e
(
THREAD
.
b¥ed
, 
u›
);

91 
	`b¥ed_btb_upd©e
(
THREAD
.
b¥ed
, 
u›
);

92 
THREAD
.
btb_wrôes
++;

96 i‡(
tˇche_¥e£¡
)

97 
	`tˇche_√w_u›
(
THREAD
.
tˇche
, 
u›
);

100 
THREAD
.
œ°_commô_cy˛e
 = 
sim_cy˛e
;

101 
THREAD
.
commôãd
[
u›
->uop]++;

102 
CORE
.
commôãd
[
u›
->uop]++;

103 
p
->
commôãd
[
u›
->uop]++;

104 
sim_ö°
++;

105 i‡(
u›
->
„tch_tˇche
)

106 
THREAD
.
tˇche
->
commôãd
++;

107 i‡(
u›
->
Êags
 & 
FCTRL
) {

108 
THREAD
.
bønches
++;

109 
CORE
.
bønches
++;

110 
p
->
bønches
++;

111 i‡(
u›
->
√ù
 !u›->
¥ed_√ù
) {

112 
THREAD
.
mi•ªd
++;

113 
CORE
.
mi•ªd
++;

114 
p
->
mi•ªd
++;

119 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu, stg_commit=1\n",

120 
u›
->
c‹e
, (Ëu›->
di_£q
);

121 
	`esim_debug
("uopáction=\"destroy\", core=%d, seq=%llu\n",

122 
u›
->
c‹e
, (Ëu›->
di_£q
);

125 
	`rob_ªmove_hód
(
c‹e
, 
thªad
);

126 
CORE
.
rob_ªads
++;

127 
THREAD
.
rob_ªads
++;

128 
qu™t
--;

132 i‡(
ªcovî
) {

133 
	`p_ªcovî
(
c‹e
, 
thªad
);

134 
	`fu_ªÀa£
(
c‹e
);

140 i‡(
˘x
->
dóŒoc_sig«l
 && 
	`p_pùñöe_em±y
(
c‹e
, 
thªad
))

141 
	`p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
);

142 
	}
}

145 
	$commô_c‹e
(
c‹e
)

147 
∑ss
, 
qu™t
, 
√w
;

150 
p_commô_köd
) {

152 
p_commô_köd_sh¨ed
:

153 
∑ss
 = 
p_thªads
;

154 
qu™t
 = 
p_commô_width
;

155 
qu™t
 && 
∑ss
) {

156 
CORE
.
commô_cuºít
 = (CORE.commô_cuºíà+ 1Ë% 
p_thªads
;

157 i‡(
	`ˇn_commô_thªad
(
c‹e
, 
CORE
.
commô_cuºít
)) {

158 
	`commô_thªad
(
c‹e
, 
CORE
.
commô_cuºít
, 1);

159 
qu™t
--;

160 
∑ss
 = 
p_thªads
;

162 
∑ss
--;

166 
p_commô_köd_time¶i˚
:

169 
√w
 = (
CORE
.
commô_cuºít
 + 1Ë% 
p_thªads
;

170 
√w
 !
CORE
.
commô_cuºít
 && !
	`ˇn_commô_thªad
(
c‹e
,Çew))

171 
√w
 = (√w + 1Ë% 
p_thªads
;

174 
CORE
.
commô_cuºít
 = 
√w
;

175 
	`commô_thªad
(
c‹e
, 
√w
, 
p_commô_width
);

179 
	}
}

182 
	$p_commô
()

184 
c‹e
;

185 
p
->
°age
 = "commit";

186 
FOREACH_CORE


187 
	`commô_c‹e
(
c‹e
);

188 
	}
}

	@decode.c

20 
	~<m2s.h
>

22 
	$decode_thªad
(
c‹e
, 
thªad
)

24 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

25 
li°_t
 *
u›q
 = 
THREAD
.uopq;

26 
u›_t
 *
u›
;

27 
i
;

29 
i
 = 0; i < 
p_decode_width
; i++) {

32 i‡(!
	`li°_cou¡
(
„tchq
))

34 i‡(
	`li°_cou¡
(
u›q
Ë>
u›q_size
)

36 
u›
 = 
	`li°_gë
(
„tchq
, 0);

37 
	`as£π
(
	`u›_exi°s
(
u›
));

42 i‡(
u›
->
„tch_tˇche
) {

44 
	`„tchq_ªmove
(
c‹e
, 
thªad
, 0);

45 
	`li°_add
(
u›q
, 
u›
);

46 
u›
->
ö_u›q
 = 1;

47 
u›
 = 
	`li°_gë
(
„tchq
, 0);

48 } 
u›
 && u›->
„tch_tˇche
);

54 
	`as£π
(!
u›
->
m›_ödex
);

55 i‡(!
	`ˇche_sy°em_≥ndög_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_ö°
, 
u›
->
„tch_ac˚ss
)) {

57 
	`„tchq_ªmove
(
c‹e
, 
thªad
, 0);

58 
	`li°_add
(
u›q
, 
u›
);

59 
u›
->
ö_u›q
 = 1;

60 
u›
 = 
	`li°_gë
(
„tchq
, 0);

61 } 
u›
 && u›->
m›_ödex
);

64 
	}
}

67 
	$decode_c‹e
(
c‹e
)

69 
thªad
;

70 
FOREACH_THREAD


71 
	`decode_thªad
(
c‹e
, 
thªad
);

72 
	}
}

75 
	$p_decode
()

77 
c‹e
;

78 
p
->
°age
 = "decode";

79 
FOREACH_CORE


80 
	`decode_c‹e
(
c‹e
);

81 
	}
}

	@dispatch.c

20 
	~<m2s.h
>

25 
di_°Æl_íum
 
	$ˇn_di•©ch_thªad
(
c‹e
, 
thªad
)

27 
li°_t
 *
u›q
 = 
THREAD
.uopq;

28 
u›_t
 *
u›
;

31 
u›
 = 
	`li°_gë
(
u›q
, 0);

32 i‡(!
u›
)

33  !
THREAD
.
˘x
 || !
	`˘x_gë_°©us
(THREAD.˘x, 
˘x_ru¬ög
) ?

34 
di_°Æl_˘x
 : 
di_°Æl_u›q
;

37 i‡(!
	`rob_ˇn_íqueue
(
u›
))

38  
di_°Æl_rob
;

39 i‡(!(
u›
->
Êags
 & 
FMEM
Ë&& !
	`iq_ˇn_ö£π
(uop))

40  
di_°Æl_iq
;

41 i‡((
u›
->
Êags
 & 
FMEM
Ë&& !
	`lsq_ˇn_ö£π
(uop))

42  
di_°Æl_lsq
;

43 i‡(!
	`rf_ˇn_ª«me
(
u›
))

44  
di_°Æl_ª«me
;

46  
di_°Æl_u£d
;

47 
	}
}

50 
	$di•©ch_thªad
(
c‹e
, 
thªad
, 
qu™t
)

52 
u›_t
 *
u›
;

53 
di_°Æl_íum
 
°Æl
;

55 
qu™t
) {

58 
°Æl
 = 
	`ˇn_di•©ch_thªad
(
c‹e
, 
thªad
);

59 i‡(
°Æl
 !
di_°Æl_u£d
) {

60 
CORE
.
di_°Æl
[
°Æl
] +
qu™t
;

65 
u›
 = 
	`li°_ªmove_©
(
THREAD
.
u›q
, 0);

66 
	`as£π
(
	`u›_exi°s
(
u›
));

67 
u›
->
ö_u›q
 = 0;

70 
	`rf_ª«me
(
u›
);

73 
	`rob_íqueue
(
u›
);

74 
CORE
.
rob_wrôes
++;

75 
THREAD
.
rob_wrôes
++;

78 i‡(!(
u›
->
Êags
 & 
FMEM
)) {

79 
	`iq_ö£π
(
u›
);

80 
CORE
.
iq_wrôes
++;

81 
THREAD
.
iq_wrôes
++;

85 i‡(
u›
->
Êags
 & 
FMEM
) {

86 
	`lsq_ö£π
(
u›
);

87 
CORE
.
lsq_wrôes
++;

88 
THREAD
.
lsq_wrôes
++;

92 
u›
->
di_£q
 = ++
CORE
.di_seq;

93 
CORE
.
di_°Æl
[
u›
->
•ecmode
 ? 
di_°Æl_•ec
 : 
di_°Æl_u£d
]++;

94 
THREAD
.
di•©ched
[
u›
->uop]++;

95 
CORE
.
di•©ched
[
u›
->uop]++;

96 
p
->
di•©ched
[
u›
->uop]++;

97 
qu™t
--;

100 
	`esim_debug
("uopáction=\"create\", core=%d, seq=%llu,Çame=\"%s\","

103 
u›
->
c‹e
, (Ëu›->
di_£q
, u›->
«me
,

104 
u›
->
m›_«me
, u›->
m›_cou¡
, u›->
m›_ödex
, u›->
•ecmode
,

105 !!
u›
->
ö_rob
, !!u›->
ö_iq
, u›->
ö_lq
 || u›->
ö_sq
);

108  
qu™t
;

109 
	}
}

111 
	$di•©ch_c‹e
(
c‹e
)

113 
skù
 = 
p_thªads
;

114 
qu™t
 = 
p_di•©ch_width
;

115 
ªmaö
;

117 
p_di•©ch_köd
) {

119 
p_di•©ch_köd_sh¨ed
:

122 
CORE
.
di•©ch_cuºít
 = (CORE.di•©ch_cuºíà+ 1Ë% 
p_thªads
;

123 
ªmaö
 = 
	`di•©ch_thªad
(
c‹e
, 
CORE
.
di•©ch_cuºít
, 1);

124 
skù
 = 
ªmaö
 ? skù - 1 : 
p_thªads
;

125 
qu™t
 = 
ªmaö
 ? quant : quant - 1;

126 } 
qu™t
 && 
skù
);

129 
p_di•©ch_köd_time¶i˚
:

132 
CORE
.
di•©ch_cuºít
 = (CORE.di•©ch_cuºíà+ 1Ë% 
p_thªads
;

133 
skù
--;

134 } 
skù
 && 
	`ˇn_di•©ch_thªad
(
c‹e
, 
CORE
.
di•©ch_cuºít
Ë!
di_°Æl_u£d
);

135 
	`di•©ch_thªad
(
c‹e
, 
CORE
.
di•©ch_cuºít
, 
qu™t
);

138 
	}
}

141 
	$p_di•©ch
()

143 
c‹e
;

144 
p
->
°age
 = "dispatch";

145 
FOREACH_CORE


146 
	`di•©ch_c‹e
(
c‹e
);

147 
	}
}

	@fetch.c

20 
	~<m2s.h
>

23 
	$ˇn_„tch
(
c‹e
, 
thªad
)

25 
uöt32_t
 
phaddr
, 
block
;

26 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

29 i‡(!
˘x
 || !
	`˘x_gë_°©us
(˘x, 
˘x_ru¬ög
))

33 i‡(
THREAD
.
„tch_°Æl
 || 
˘x
->
dóŒoc_sig«l
)

38 i‡(
THREAD
.
„tchq_occ
 >
„tchq_size
)

43 
block
 = 
THREAD
.
„tch_√ù
 & ~(THREAD.
„tch_bsize
 - 1);

44 i‡(
block
 !
THREAD
.
„tch_block
) {

45 
phaddr
 = 
	`mmu_å™¶©e
(
THREAD
.
˘x
->
mid
, THREAD.
„tch_√ù
);

46 i‡(!
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_ö°
,

47 
ˇche_ac˚ss_köd_ªad
, 
phaddr
))

53 
	}
}

60 
u›_t
 *
	$„tch_ö°
(
c‹e
, 
thªad
, 
„tch_tˇche
)

62 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

63 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

64 
cou¡
, 
√wcou¡
, 
i
;

65 
u›_t
 *
u›
, *
ªt
;

68 
THREAD
.
„tch_eù
 = THREAD.
„tch_√ù
;

69 
	`˘x_£t_eù
(
˘x
, 
THREAD
.
„tch_eù
);

70 
	`˘x_execuã_ö°
(
˘x
);

71 
THREAD
.
„tch_√ù
 = THREAD.
„tch_eù
 + 
iß_ö°
.
size
;

74 
cou¡
 = 
	`li°_cou¡
(
„tchq
);

75 
ªt
 = 
	`u›_decode
(
„tchq
);

76 
√wcou¡
 = 
	`li°_cou¡
(
„tchq
);

87 
i
 = 
cou¡
; i < 
√wcou¡
; i++) {

88 
u›
 = 
	`li°_gë
(
„tchq
, 
i
);

89 
	`as£π
(
u›
);

90 
u›
->
£q
 = ++
p
->seq;

91 
u›
->
m›_£q
 = 
p
->
£q
 - 
i
 + 
cou¡
;

92 
u›
->
m›_size
 = 
iß_ö°
.
size
;

93 
u›
->
m›_cou¡
 = 
√wcou¡
 - 
cou¡
;

94 
u›
->
m›_ödex
 = 
i
 - 
cou¡
;

95 
u›
->
˘x
 = ctx;

96 
u›
->
c‹e
 = core;

97 
u›
->
thªad
 =Åhread;

98 
u›
->
eù
 = 
THREAD
.
„tch_eù
;

99 
u›
->
ö_„tchq
 = 1;

100 
u›
->
„tch_tˇche
 = fetch_tcache;

101 
u›
->
•ecmode
 = 
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
);

102 
u›
->
„tch_ac˚ss
 = 
THREAD
.fetch_access;

103 
u›
->
√ù
 = 
˘x
->
ªgs
->
eù
;

104 
u›
->
¥ed_√ù
 = 
THREAD
.
„tch_√ù
;

105 
u›
->
èrgë_√ù
 = 
iß_èrgë
;

110 
	`rf_cou¡_dïs
(
u›
);

113 i‡(
u›
->
Êags
 & 
FMEM
) {

114 
u›
->
mem_véaddr
 = 
˘x
->
mem
->
œ°_addªss
;

115 
u›
->
mem_phaddr
 = 
	`mmu_å™¶©e
(
THREAD
.
˘x
->
mid
, ctx->
mem
->
œ°_addªss
);

119 
	`u›_dump_buf
(
u›
, u›->
«me
, (uop->name));

120 i‡(
i
 =
cou¡
)

121 
	`x86_ö°_dump_buf
(&
iß_ö°
, 
u›
->
m›_«me
,

122 (
u›
->
m›_«me
));

125 
p
->
„tched
++;

126 
THREAD
.
„tched
++;

127 i‡(
„tch_tˇche
)

128 
THREAD
.
tˇcheq_occ
++;

133 i‡(
ªt
 && !
„tch_tˇche
)

134 
THREAD
.
„tchq_occ
 +
ªt
->
m›_size
;

135  
ªt
;

136 
	}
}

141 
	$„tch_thªad_tˇche
(
c‹e
, 
thªad
)

143 
u›_t
 *
u›
;

144 
uöt32_t
 
eù_bønch
;

145 
m¥ed
, 
hô
, 
m›_cou¡
, 
i
;

146 
uöt32_t
 *
m›_¨øy
, 
√ù
;

149 i‡(!
tˇche_¥e£¡
)

151 i‡(
THREAD
.
tˇcheq_occ
 >
tˇche_queue_size
)

155 
eù_bønch
 = 
	`b¥ed_btb_√xt_bønch
(
THREAD
.
b¥ed
,

156 
THREAD
.
„tch_√ù
, THREAD.
„tch_bsize
);

157 
m¥ed
 = 
eù_bønch
 ? 
	`b¥ed_lookup_mu…ùÀ
(
THREAD
.
b¥ed
,

158 
eù_bønch
, 
tˇche_bønch_max
) : 0;

159 
hô
 = 
	`tˇche_lookup
(
THREAD
.
tˇche
, THREAD.
„tch_√ù
, 
m¥ed
,

160 &
m›_cou¡
, &
m›_¨øy
, &
√ù
);

161 i‡(!
hô
)

165 
i
 = 0; i < 
m›_cou¡
; i++) {

168 i‡(!
	`˘x_gë_°©us
(
THREAD
.
˘x
, 
˘x_ru¬ög
))

174 
THREAD
.
„tch_√ù
 = 
m›_¨øy
[
i
];

175 
u›
 = 
	`„tch_ö°
(
c‹e
, 
thªad
, 1);

176 i‡(!
u›
)

181 i‡(
u›
->
Êags
 & 
FCTRL
) {

182 
	`b¥ed_lookup
(
THREAD
.
b¥ed
, 
u›
);

183 
u›
->
¥ed_√ù
 = 
i
 =
m›_cou¡
 - 1 ? 
√ù
 :

184 
m›_¨øy
[
i
 + 1];

189 
THREAD
.
„tch_√ù
 = 
√ù
;

191 
	}
}

194 
	$„tch_thªad
(
c‹e
, 
thªad
)

196 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

197 
u›_t
 *
u›
;

198 
uöt32_t
 
block
, 
phaddr
, 
èrgë
;

199 
èkí
;

202 i‡(
	`„tch_thªad_tˇche
(
c‹e
, 
thªad
))

207 
block
 = 
THREAD
.
„tch_√ù
 & ~(THREAD.
„tch_bsize
 - 1);

208 i‡(
block
 !
THREAD
.
„tch_block
) {

209 
phaddr
 = 
	`mmu_å™¶©e
(
THREAD
.
˘x
->
mid
, THREAD.
„tch_√ù
);

210 
THREAD
.
„tch_block
 = 
block
;

211 
THREAD
.
„tch_ac˚ss
 = 
	`ˇche_sy°em_ªad
(
c‹e
, 
thªad
,

212 
ˇche_köd_ö°
, 
phaddr
, 
NULL
, NULL);

213 
THREAD
.
btb_ªads
++;

217 (
THREAD
.
„tch_√ù
 & ~(THREAD.
„tch_bsize
 - 1)Ë=
block
) {

220 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_ru¬ög
))

227 
u›
 = 
	`„tch_ö°
(
c‹e
, 
thªad
, 0);

228 i‡(!
iß_ö°
.
size
)

230 i‡(!
u›
)

236 i‡(
u›
->
Êags
 & 
FCTRL
) {

237 
èrgë
 = 
	`b¥ed_btb_lookup
(
THREAD
.
b¥ed
, 
u›
);

238 
èkí
 = 
èrgë
 && 
	`b¥ed_lookup
(
THREAD
.
b¥ed
, 
u›
);

239 i‡(
èkí
) {

240 
THREAD
.
„tch_√ù
 = 
èrgë
;

241 
u›
->
¥ed_√ù
 = 
èrgë
;

246 
	}
}

251 
	$„tch_c‹e
(
c‹e
)

253 
thªad
, 
√w
;

254 
mu°_swôch
;

256 
p_„tch_köd
) {

259 
p_„tch_köd_sh¨ed
:

260 
FOREACH_THREAD


261 i‡(
	`ˇn_„tch
(
c‹e
, 
thªad
))

262 
	`„tch_thªad
(
c‹e
, 
thªad
);

265 
p_„tch_köd_time¶i˚
:

266 
FOREACH_THREAD
 {

267 
CORE
.
„tch_cuºít
 = (CORE.„tch_cuºíà+ 1Ë% 
p_thªads
;

268 i‡(
	`ˇn_„tch
(
c‹e
, 
CORE
.
„tch_cuºít
)) {

269 
	`„tch_thªad
(
c‹e
, 
CORE
.
„tch_cuºít
);

275 
p_„tch_köd_swôch⁄evít
:

278 
thªad
 = 
CORE
.
„tch_cuºít
;

279 
mu°_swôch
 = !
	`˘x_gë_°©us
(
THREAD
.
˘x
, 
˘x_ru¬ög
);

280 i‡(
sim_cy˛e
 - 
CORE
.
„tch_swôch
 > 
p_thªad_qu™tum
 ||

281 
	`evítq_l⁄gœt
(
c‹e
, 
thªad
) ||

282 
mu°_swôch
)

285 
√w
 = (
thªad
 + 1Ë% 
p_thªads
;Çew !=Åhread;

286 
√w
 = (√w + 1Ë% 
p_thªads
)

289 i‡(!
	`ˇn_„tch
(
c‹e
, 
√w
))

293 i‡(
mu°_swôch
)

297 i‡(
	`ITHREAD
(
√w
).
commôãd
 > 
THREAD
.committed + 100000)

301 i‡(!
	`evítq_l⁄gœt
(
c‹e
, 
√w
))

306 i‡(
√w
 !
thªad
) {

307 
CORE
.
„tch_cuºít
 = 
√w
;

308 
CORE
.
„tch_swôch
 = 
sim_cy˛e
;

309 
	`ITHREAD
(
√w
).
„tch_°Æl
 = 
p_thªad_swôch_≥«…y
;

314 i‡(
	`ˇn_„tch
(
c‹e
, 
CORE
.
„tch_cuºít
))

315 
	`„tch_thªad
(
c‹e
, 
CORE
.
„tch_cuºít
);

318 
	}
}

321 
	$p_„tch
()

323 
c‹e
;

324 
p
->
°age
 = "fetch";

325 
FOREACH_CORE


326 
	`„tch_c‹e
(
c‹e
);

327 
	}
}

	@fu.c

20 
	~<m2s.h
>

25 
	sfu_ªs_t
 {

26 
	mcou¡
;

27 
	m›œt
;

28 
	missuñ©
;

29 *
	m«me
;

33 
fu_ªs_t
 
	gfu_ªs_poﬁ
[
fu_cou¡
] = {

52 
	$fu_ªg_›ti⁄s
()

54 
	`›t_ªg_uöt32_li°
("-fu:intadd", "Integer Adder (count, oplat, issuelat)",

55 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_öèdd
], 3, 
NULL
);

56 
	`›t_ªg_uöt32_li°
("-fu:intsub", "Integer Subtracter",

57 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_ötsub
], 3, 
NULL
);

58 
	`›t_ªg_uöt32_li°
("-fu:intmult", "Integer Multiplier",

59 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_ötmu…
], 3, 
NULL
);

60 
	`›t_ªg_uöt32_li°
("-fu:intdiv", "Integer Divider",

61 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_ötdiv
], 3, 
NULL
);

62 
	`›t_ªg_uöt32_li°
("-fu:effaddr", "Effective Address",

63 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_efÁddr
], 3, 
NULL
);

64 
	`›t_ªg_uöt32_li°
("-fu:logical", "Logical Operations",

65 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_logiˇl
], 3, 
NULL
);

67 
	`›t_ªg_uöt32_li°
("-fu:fpsimple", "Floating-point simple operator",

68 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âsim∂e
], 3, 
NULL
);

69 
	`›t_ªg_uöt32_li°
("-fu:fpadd", "Floating-pointerádder",

70 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âadd
], 3, 
NULL
);

71 
	`›t_ªg_uöt32_li°
("-fu:fpcomp", "Floating-point comparator",

72 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âcomp
], 3, 
NULL
);

73 
	`›t_ªg_uöt32_li°
("-fu:fpmult", "Floating-point multiplier",

74 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âmu…
], 3, 
NULL
);

75 
	`›t_ªg_uöt32_li°
("-fu:fpdiv", "Floating-point divider",

76 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âdiv
], 3, 
NULL
);

77 
	`›t_ªg_uöt32_li°
("-fu:fpcomplex", "Floating-point complex operator",

78 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âcom∂ex
], 3, 
NULL
);

79 
	}
}

82 
	$fu_öô
()

84 
c‹e
;

85 
FOREACH_CORE


86 
CORE
.
fu
 = 
	`ˇŒoc
(1, (
fu_t
));

87 
	}
}

90 
	$fu_d⁄e
()

92 
c‹e
;

93 
FOREACH_CORE


94 
	`‰ì
(
CORE
.
fu
);

95 
	}
}

101 
	$fu_ª£rve
(
u›_t
 *
u›
)

103 
i
;

104 
c‹e
 = 
u›
->core;

105 
fu_t
 *
fu
 = 
CORE
.fu;

106 
fu_˛ass_íum
 
fu_˛ass
 = 
u›
->fu_class;

109 i‡(!
u›
->
issue_åy_whí
)

110 
u›
->
issue_åy_whí
 = 
sim_cy˛e
;

113 
	`as£π
(
fu_˛ass
 > 
fu_n⁄e
 && fu_˛as†< 
fu_cou¡
);

114 
	`as£π
(
fu_ªs_poﬁ
[
fu_˛ass
].
cou¡
 <
FU_RES_MAX
);

115 
i
 = 0; i < 
fu_ªs_poﬁ
[
fu_˛ass
].
cou¡
; i++) {

116 i‡(
fu
->
cy˛e_whí_‰ì
[
fu_˛ass
][
i
] <
sim_cy˛e
) {

117 
	`as£π
(
fu_ªs_poﬁ
[
fu_˛ass
].
issuñ©
 > 0);

118 
	`as£π
(
fu_ªs_poﬁ
[
fu_˛ass
].
›œt
 > 0);

119 
fu
->
cy˛e_whí_‰ì
[
fu_˛ass
][
i
] = 
sim_cy˛e
 + 
fu_ªs_poﬁ
[fu_˛ass].
issuñ©
;

120 
fu
->
ac˚s£s
[
fu_˛ass
]++;

121 
fu
->
waôög_time
[
fu_˛ass
] +
sim_cy˛e
 - 
u›
->
issue_åy_whí
;

122  
fu_ªs_poﬁ
[
fu_˛ass
].
›œt
;

127 
fu
->
díõd
[
fu_˛ass
]++;

129 
	}
}

133 
	$fu_ªÀa£
(
c‹e
)

135 
i
, 
j
;

136 
i
 = 0; i < 
fu_cou¡
; i++)

137 
j
 = 0; j < 
fu_ªs_poﬁ
[
i
].
cou¡
; j++)

138 
CORE
.
fu
->
cy˛e_whí_‰ì
[
i
][
j
] = 0;

139 
	}
}

	@guestos.c

21 
	~<›ti⁄s.h
>

22 
	~<sig«l.h
>

23 
	~<m2skî√l.h
>

24 
	~<°rög.h
>

25 
	~<limôs.h
>

26 
	~<°dio.h
>

29 #i‚de‡
VERSION


30 
	#VERSION
 ""

	)

35 
	#max_∑th_Àngth
 100

	)

37 *
	gsim_tôÀ
 = "";

38 *
	gc⁄figfûe
 = "";

39 *
	g˘xc⁄fig
 = "";

41 *
	g˘x_debug_fûe
 = "";

42 *
	gsysˇŒ_debug_fûe
 = "";

43 *
	g›í˛_debug_fûe
 = "";

44 *
	ggpu_iß_debug_fûe
 = "";

45 *
	gñf_debug_fûe
 = "";

46 *
	glﬂdî_debug_fûe
 = "";

47 *
	giß_ˇŒ_debug_fûe
 = "";

48 *
	giß_ö°_debug_fûe
 = "";

50 *
	gö°_°©_fûe
 = "";

51 *
	gö°_°›
 = "";

52 
uöt64_t
 
	gö°_ª£t
 = 0;

53 
uöt64_t
 
	gmax_cy˛es
 = 0;

54 
uöt64_t
 
	gmax_ö°
 = 0;

55 
uöt32_t
 
	gbªak_poöt
 = 0;

56 
uöt64_t
 
	gsim_cy˛e
 = 0;

57 
uöt64_t
 
	gsim_ö°
 = 0;

61 
	gsigöt_ª˚ived
 = 0;

62 
ö°r_¶i˚
;

65 
shñl
();

68 
	$sim_ªg_›ti⁄s
() {

69 
	`›t_ªg_°rög
("-tôÀ", "Simuœti⁄ÅôÀ", &
sim_tôÀ
);

70 
	`›t_ªg_°rög
("-c⁄fig", "m2s-Á° c⁄figuøti⁄ fûe", &
c⁄figfûe
);

71 
	`›t_ªg_°rög
("-˘xc⁄fig", "C⁄ãxàc⁄figuøti⁄ fûe", &
˘xc⁄fig
);

73 
	`›t_ªg_°rög
("-debug:˘x", "Debug inf‹m©i⁄ f‹ c⁄ãxà¸óti⁄ & sètu†upd©es", &
˘x_debug_fûe
);

74 
	`›t_ªg_°rög
("-debug:sysˇŒ", "Debug inf‹m©i⁄ f‹ sy°em cÆls", &
sysˇŒ_debug_fûe
);

75 
	`›t_ªg_°rög
("-debug:›í˛", "Debug inf‹m©i⁄ f‹ O≥nCLÖrogøms", &
›í˛_debug_fûe
);

76 
	`›t_ªg_°rög
("-debug:gpu_iß", "Debug inf‹m©i⁄ f‹ GPU in°ru˘i⁄s", &
gpu_iß_debug_fûe
);

77 
	`›t_ªg_°rög
("-debug:ñf", "Debug inf‹m©i⁄ fromÉl‡fûê™Æyzî", &
ñf_debug_fûe
);

78 
	`›t_ªg_°rög
("-debug:lﬂdî", "Debug inf‹m©i⁄ fromÖrogømÜﬂdî", &
lﬂdî_debug_fûe
);

79 
	`›t_ªg_°rög
("-debug:ˇŒ", "Debug inf‹m©i⁄ábouà¥o˚duª cÆls", &
iß_ˇŒ_debug_fûe
);

80 
	`›t_ªg_°rög
("-debug:ö°", "Debug inf‹m©i⁄ábouàexecuãd in°ru˘i⁄s", &
iß_ö°_debug_fûe
);

82 
	`›t_ªg_°rög
("-ö°_°©", "Fûêtÿdum∞ö°ru˘i⁄ sèts", &
ö°_°©_fûe
);

83 
	`›t_ªg_°rög
("-ö°_°›", "St› whíÉxecutög in°", &
ö°_°›
);

84 
	`›t_ªg_uöt64
("-ö°_ª£t", "Cy˛êtÿª£àö°ru˘i⁄ sèts", &
ö°_ª£t
);

85 
	`›t_ªg_uöt64
("-max_cy˛es", "Cy˛êtÿ°›Örogøm (0Úÿ°›)", &
max_cy˛es
);

86 
	`›t_ªg_uöt64
("-max_ö°", "MaximumÇumbî o‡ö°ru˘i⁄s", &
max_ö°
);

87 
	`›t_ªg_uöt32
("-bªak_poöt", "VÆuêf‹ÉùÅÿ°›", &
bªak_poöt
);

88 
	`›t_ªg_boﬁ
("-mem_ß„_mode", "Sa„ác˚s£†tÿmem‹y", &
mem_ß„_mode
);

90 
	`gk_ªg_›ti⁄s
();

91 
	}
}

94 
	$sim_sig«l_h™dÀr
(
signum
) {

95 
FILE
 *
f
;

97 
signum
) {

99 
SIGINT
:

102 
sigöt_ª˚ived
 = 1;

103 
	`Ârötf
(
°dîr
, "SIGINTÑeceived\n");

104 
	`sig«l
(
SIGINT
, 
sim_sig«l_h™dÀr
);

105 
	`¥ötf
("Don't doÅhat\n");

108 
SIGABRT
:

109 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

110 
	`Ârötf
(
°dîr
, "cy˛ê%Œd:áb‹ãd\n", (Ë
sim_cy˛e
);

111 
f
 = 
	`›í_wrôe
(
ö°_°©_fûe
);

112 i‡(
f
)

113 
	`iß_ö°_°©_dump
(
f
);

114 
	`iß_dump
(
°dîr
);

115 
	`ke_dump
(
°dîr
);

116 
	`exô
(1);

118 
SIGFPE
:

119 
	`¥ötf
("\n Inside signal handler for signal floatingÖointÉrror**");

120 
	`¥ötf
("\n Inside signal handler for signal floatingÖointÉrror**");

121 
	`sig«l
(
SIGFPE
, 
SIG_DFL
);

124 
SIGSEGV
:

125 
	`sig«l
(
SIGSEGV
, 
SIG_DFL
);

126 
	`¥ötf
 ( "Youáre here in sim_signal_handler \nsegmentation fault\n");

127 
	`exô
(0);

130 
SIGUSR1
:

131 
	`¥ötf
("\n Inside signal handler for signalÇamed SIGUSR1");

132 
	`¥ötf
("\ndoingÇothing");

135 
	}
}

139 
	#BOOT_FILE
 ".c⁄fig"

	)

141 
	$gë_∑øm
(c⁄° *
∑øm
, *
vÆue
){

142 
FILE
 *
Â
;

143 i‡((
Â
=
	`f›í
(
BOOT_FILE
,"r"))==0) {

144 
	`≥º‹
("boot configuration file couldn't beÜoaded.\n");

147 
°r_buf
[
LINE_MAX
 + 1];

148 
Àn
 = 
	`°æí
(
∑øm
);

149 
dñim
[
Àn
+2];

151 
	`°rˇt
(
	`°r˝y
(
dñim
,
∑øm
), "=");

153 
	`fgës
(
°r_buf
, (°r_buf), 
Â
Ë!
NULL
) {

154 i‡(
	`°∫cmp
(
dñim
,
°r_buf
,
Àn
+1)==0){

155 
	`°r˝y
(
vÆue
,
°r_buf
+
Àn
+1);

161 
	}
}

163 
	$£t_deÁu…s
() {

164 
∑øm_vÆue
[
LINE_MAX
+1];

165 
	`gë_∑øm
("INSTR_SLICE", 
∑øm_vÆue
);

166 
ö°r_¶i˚
 = 
	`©oi
(
∑øm_vÆue
);

168 
hóds
, 
åacks
, 
£˘‹s
;

169 
comm™d
[1000];

170 
	`gë_∑øm
("NUM_HEADS",
∑øm_vÆue
);

171 
hóds
=
	`©oi
(
∑øm_vÆue
);

172 
	`gë_∑øm
("NUM_TRACKS",
∑øm_vÆue
);

173 
åacks
=
	`©oi
(
∑øm_vÆue
);

174 
	`gë_∑øm
("NUM_SECTORS",
∑øm_vÆue
);

175 
£˘‹s
=
	`©oi
(
∑øm_vÆue
);

176 
	`•rötf
(
comm™d
,"(dd if=/dev/zîÿof=Sim_disk bs=%dx%dx%db cou¡=1Ë2> /dev/zîo",
hóds
,
åacks
,
£˘‹s
);

177 
	`sy°em
(
comm™d
);

178 
	}
}

180 
	$ö°Æl_sig«ls
(){

181 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

182 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

183 
	`sig«l
(
SIGFPE
, &
sim_sig«l_h™dÀr
);

184 
	`sig«l
(
SIGUSR2
, &
sim_sig«l_h™dÀr
);

185 
	}
}

187 
	$boŸ
() {

189 
	`ö°Æl_sig«ls
();

190 
	`£t_deÁu…s
();

191 
	}
}

195 
	gu£r_¥og_∑th
[200];

198 
	$maö
(
¨gc
, **
¨gv
) {

199 
uöt64_t
 
t
;

200 
my¨gc
 = 2;

210 
	`Ârötf
(
°dîr
, "********************************************************");

211 
	`Ârötf
(
°dîr
, "\n WELCOME TO GUESTOS\n");

212 
	`Ârötf
(
°dîr
, "********************************************************\n");

216 
	`›t_öô
();

217 
	`sim_ªg_›ti⁄s
();

230 
	`ke_öô
();

232 
	`boŸ
();

252 
	`shñl
();

253 i‡(*
c⁄figfûe
) {

255 
	`›t_check_c⁄fig
(
c⁄figfûe
);

274 
	`ld_lﬂd_¥og_‰om_˘xc⁄fig
(
˘xc⁄fig
);

281 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

282 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

283 
	`sig«l
(
SIGFPE
, &
sim_sig«l_h™dÀr
);

284 
	`sig«l
(
SIGUSR2
, &
sim_sig«l_h™dÀr
);

288 !
sigöt_ª˚ived
) {

291 i‡(
bªak_poöt
 && 
ke
->
c⁄ãxt_li°_hód
->
ªgs
->
eù
 == break_point) {

292 
	`ªgs_dump
(
ke
->
c⁄ãxt_li°_hód
->
ªgs
, 
°dout
);

297 
	`ke_run
();

298 
sim_ö°
 +
ke
->
ru¬ög_cou¡
;

299 i‡(!
ke
->
c⁄ãxt_li°_hód
)

303 
sim_cy˛e
++;

304 i‡((
sim_cy˛e
 >
max_cy˛es
 && max_cycles) ||

305 (
sim_ö°
 >
max_ö°
 && max_inst)) {

306 
	`ªgs_dump
(
iß_ªgs
, 
°dout
);

307 
	`ke_dump
(
°dout
);

310 i‡(
sim_cy˛e
 =
ö°_ª£t
 && inst_reset)

311 
	`iß_ö°_°©_ª£t
();

313 i‡(*
ö°_°›
 && !
	`°rcmp
(
iß_ö°
.
f‹m©
, inst_stop))

314 
	`∑nic
("ö°ru˘i⁄ '%s' found", 
ö°_°›
);

320 
	`ke_d⁄e
();

323 
	`mh™dÀ_d⁄e
();

325 
	}
}

327 
	$shñl
() {

328 
numbî_of_¥o˚s£s
 = 0, 
i
 = 0;

329 
FILE
 *
f_ö
;

330 
ãmp
[400];

331 
u£r_¥og_∑th
[400];

332 
uid
;

333 
	`¥ötf
("\n Shell begins:\n");

334 
	`¥ötf
("\n guestos:\n");

335 
	`fÊush
(
°dö
);

336 
	`¥ötf
("How many userÖrocessesÅoÑun?");

337 
	`sˇnf
("%d", &
numbî_of_¥o˚s£s
);

338 
f_ö
 = 
	`f›í
("configfile", "w");

339 
i
 = 0; i < 
numbî_of_¥o˚s£s
; i++) {

340 
	`¥ötf
("\n\n\n guestos:EnterÅhe fullÖath of userÖrogramÅoÉxecute:");

341 
	`fÊush
(
°dö
);

344 
	`sˇnf
("%s", 
u£r_¥og_∑th
);

345 
	`¥ötf
 ("Enter Uid forÖrocess: ");

346 
	`sˇnf
("%d", &
uid
);

347 
	`¥ötf
("\¿Thêíãªd fûê∑th i†: %s", 
u£r_¥og_∑th
);

348 
	`•rötf
(
ãmp
, "\n[ C⁄ãxà%d ]", 
i
);

349 
	`Âuts
(
ãmp
, 
f_ö
);

350 
	`•rötf
(
ãmp
, "\nExê%s\n", 
u£r_¥og_∑th
);

351 
	`Âuts
(
ãmp
, 
f_ö
);

352 
	`•rötf
(
ãmp
, "\nUid = %d\n", 
uid
);

353 
	`Âuts
(
ãmp
, 
f_ö
);

355 
c⁄figfûe
 = "configfile";

356 
	`f˛o£
(
f_ö
);

359 
	}
}

	@issue.c

20 
	~<m2s.h
>

23 
	$issue_sq
(
c‹e
, 
thªad
, 
qu™t
)

25 
u›_t
 *
°‹e
;

26 
 li°_t
 *
sq
 = 
THREAD
.sq;

29 
	` li°_hód
(
sq
);

30 !
	` li°_eﬁ
(
sq
Ë&& 
qu™t
) {

33 
°‹e
 = 
	` li°_gë
(
sq
);

34 
	`as£π
(
°‹e
->
Êags
 & 
FSTORE
);

37 i‡(
°‹e
->
ö_rob
)

39 i‡(!
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

40 
ˇche_ac˚ss_köd_wrôe
, 
°‹e
->
mem_phaddr
))

44 
	`sq_ªmove
(
c‹e
, 
thªad
);

45 
	`ˇche_sy°em_wrôe
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

46 
°‹e
->
mem_phaddr
, 
CORE
.
evítq
, store);

51 
°‹e
->
ö_evítq
 = 1;

52 
°‹e
->
issued
 = 1;

53 
°‹e
->
issue_whí
 = 
sim_cy˛e
;

56 
CORE
.
issued
[
°‹e
->
u›
]++;

57 
CORE
.
lsq_ªads
++;

58 
CORE
.
rf_öt_ªads
 +
°‹e
->
ph_öt_idï_cou¡
;

59 
CORE
.
rf_Â_ªads
 +
°‹e
->
ph_Â_idï_cou¡
;

60 
THREAD
.
issued
[
°‹e
->
u›
]++;

61 
THREAD
.
lsq_ªads
++;

62 
THREAD
.
rf_öt_ªads
 +
°‹e
->
ph_öt_idï_cou¡
;

63 
THREAD
.
rf_Â_ªads
 +
°‹e
->
ph_Â_idï_cou¡
;

64 
p
->
issued
[
°‹e
->
u›
]++;

65 
qu™t
--;

68 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

70 
°‹e
->
c‹e
, (Ë°‹e->
di_£q
);

72  
qu™t
;

73 
	}
}

76 
	$issue_lq
(
c‹e
, 
thªad
, 
qu™t
)

78 
 li°_t
 *
lq
 = 
THREAD
.lq;

79 
u›_t
 *
lﬂd
;

82 i‡(
esim_debug_fûe
)

83 
	`u›_ li°_check_if_ªady
(
lq
);

86 
	` li°_hód
(
lq
);

87 !
	` li°_eﬁ
(
lq
Ë&& 
qu™t
) {

91 
lﬂd
 = 
	` li°_gë
(
lq
);

92 i‡(!
lﬂd
->
ªady
 && !
	`rf_ªady
(load)) {

93 
	` li°_√xt
(
lq
);

96 
lﬂd
->
ªady
 = 1;

97 i‡(!
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

98 
ˇche_ac˚ss_köd_ªad
, 
lﬂd
->
mem_phaddr
))

100 
	` li°_√xt
(
lq
);

106 
	`lq_ªmove
(
c‹e
, 
thªad
);

107 
	`ˇche_sy°em_ªad
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

108 
lﬂd
->
mem_phaddr
, 
CORE
.
evítq
,Üoad);

113 
lﬂd
->
ö_evítq
 = 1;

114 
lﬂd
->
issued
 = 1;

115 
lﬂd
->
issue_whí
 = 
sim_cy˛e
;

118 
CORE
.
issued
[
lﬂd
->
u›
]++;

119 
CORE
.
lsq_ªads
++;

120 
CORE
.
rf_öt_ªads
 +
lﬂd
->
ph_öt_idï_cou¡
;

121 
CORE
.
rf_Â_ªads
 +
lﬂd
->
ph_Â_idï_cou¡
;

122 
THREAD
.
issued
[
lﬂd
->
u›
]++;

123 
THREAD
.
lsq_ªads
++;

124 
THREAD
.
rf_öt_ªads
 +
lﬂd
->
ph_öt_idï_cou¡
;

125 
THREAD
.
rf_Â_ªads
 +
lﬂd
->
ph_Â_idï_cou¡
;

126 
p
->
issued
[
lﬂd
->
u›
]++;

127 
qu™t
--;

130 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

132 
lﬂd
->
c‹e
, (Ëlﬂd->
di_£q
);

135  
qu™t
;

136 
	}
}

139 
	$issue_iq
(
c‹e
, 
thªad
, 
qu™t
)

141 
 li°_t
 *
iq
 = 
THREAD
.iq;

142 
u›_t
 *
u›
;

143 
œt
;

146 i‡(
esim_debug_fûe
)

147 
	`u›_ li°_check_if_ªady
(
iq
);

150 
	` li°_hód
(
iq
);

151 !
	` li°_eﬁ
(
iq
Ë&& 
qu™t
) {

154 
u›
 = 
	` li°_gë
(
iq
);

155 
	`as£π
(
	`u›_exi°s
(
u›
));

156 
	`as£π
(!(
u›
->
Êags
 & 
FMEM
));

157 i‡(!
u›
->
ªady
 && !
	`rf_ªady
(uop)) {

158 
	` li°_√xt
(
iq
);

161 
u›
->
ªady
 = 1;

165 i‡(!
u›
->
fu_˛ass
) {

166 
œt
 = 1;

168 
œt
 = 
	`fu_ª£rve
(
u›
);

169 i‡(!
œt
) {

170 
	` li°_√xt
(
iq
);

177 
	`iq_ªmove
(
c‹e
, 
thªad
);

180 
	`as£π
(!
u›
->
ö_evítq
);

181 
	`as£π
(
œt
 > 0);

182 
u›
->
issued
 = 1;

183 
u›
->
issue_whí
 = 
sim_cy˛e
;

184 
u›
->
whí
 = 
sim_cy˛e
 + 
œt
;

185 
	`evítq_ö£π
(
CORE
.
evítq
, 
u›
);

188 
CORE
.
issued
[
u›
->uop]++;

189 
CORE
.
iq_ªads
++;

190 
CORE
.
rf_öt_ªads
 +
u›
->
ph_öt_idï_cou¡
;

191 
CORE
.
rf_Â_ªads
 +
u›
->
ph_Â_idï_cou¡
;

192 
THREAD
.
issued
[
u›
->uop]++;

193 
THREAD
.
iq_ªads
++;

194 
THREAD
.
rf_öt_ªads
 +
u›
->
ph_öt_idï_cou¡
;

195 
THREAD
.
rf_Â_ªads
 +
u›
->
ph_Â_idï_cou¡
;

196 
p
->
issued
[
u›
->uop]++;

197 
qu™t
--;

200 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

202 
u›
->
c‹e
, (Ëu›->
di_£q
);

205  
qu™t
;

206 
	}
}

209 
	$issue_thªad_lsq
(
c‹e
, 
thªad
, 
qu™t
)

211 
qu™t
 = 
	`issue_lq
(
c‹e
, 
thªad
, quant);

212 
qu™t
 = 
	`issue_sq
(
c‹e
, 
thªad
, quant);

213  
qu™t
;

214 
	}
}

217 
	$issue_thªad_iq
(
c‹e
, 
thªad
, 
qu™t
)

219 
qu™t
 = 
	`issue_iq
(
c‹e
, 
thªad
, quant);

220  
qu™t
;

221 
	}
}

224 
	$issue_c‹e
(
c‹e
)

226 
skù
, 
qu™t
;

228 
p_issue_köd
) {

230 
p_issue_köd_sh¨ed
:

233 
qu™t
 = 
p_issue_width
;

234 
skù
 = 
p_thªads
;

236 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

237 
qu™t
 = 
	`issue_thªad_lsq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

238 
skù
--;

239 } 
skù
 && 
qu™t
);

242 
qu™t
 = 
p_issue_width
;

243 
skù
 = 
p_thªads
;

245 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

246 
qu™t
 = 
	`issue_thªad_iq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

247 
skù
--;

248 } 
skù
 && 
qu™t
);

252 
p_issue_köd_time¶i˚
:

255 
qu™t
 = 
p_issue_width
;

256 
skù
 = 
p_thªads
;

258 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

259 
qu™t
 = 
	`issue_thªad_lsq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

260 
skù
--;

261 } 
skù
 && 
qu™t
 =
p_issue_width
);

264 
qu™t
 = 
p_issue_width
;

265 
skù
 = 
p_thªads
;

267 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

268 
qu™t
 = 
	`issue_thªad_iq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

269 
skù
--;

270 } 
skù
 && 
qu™t
 =
p_issue_width
);

274 
	}
}

277 
	$p_issue
()

279 
c‹e
;

280 
p
->
°age
 = "issue";

281 
FOREACH_CORE


282 
	`issue_c‹e
(
c‹e
);

283 
	}
}

	@libcachesystem/cache.c

19 
	~"ˇchesy°em.h
"

22 
°rög_m≠_t
 
	gˇche_pﬁicy_m≠
 = {

24 { "LRU", 
ˇche_pﬁicy_Ãu
 },

25 { "FIFO", 
ˇche_pﬁicy_fifo
 },

26 { "R™dom", 
ˇche_pﬁicy_øndom
 }

31 
	$ˇche_log2
(
uöt32_t
 
x
) {

32 
ªsu…
 = 0;

33 i‡(!
x
)

34 
	`ab‹t
();

35 !(
x
 & 1)) {

36 
x
 >>= 1;

37 
ªsu…
++;

39 i‡(
x
 != 1)

40 
	`ab‹t
();

41  
ªsu…
;

42 
	}
}

45 
	eˇche_wayli°_íum
 {

46 
	mˇche_wayli°_hód
,

47 
	mˇche_wayli°_èû


51 
	$ˇche_upd©e_wayli°
(
ˇche_£t_t
 *
£t
,

52 
ˇche_blk_t
 *
blk
, 
ˇche_wayli°_íum
 
whîe
)

54 i‡(!
blk
->
way_¥ev
 && !blk->
way_√xt
) {

55 
	`as£π
(
£t
->
way_hód
 =
blk
 && së->
way_èû
 == blk);

58 } i‡(!
blk
->
way_¥ev
) {

59 
	`as£π
(
£t
->
way_hód
 =
blk
 && së->
way_èû
 != blk);

60 i‡(
whîe
 =
ˇche_wayli°_hód
)

62 
£t
->
way_hód
 = 
blk
->
way_√xt
;

63 
blk
->
way_√xt
->
way_¥ev
 = 
NULL
;

65 } i‡(!
blk
->
way_√xt
) {

66 
	`as£π
(
£t
->
way_hód
 !
blk
 && së->
way_èû
 == blk);

67 i‡(
whîe
 =
ˇche_wayli°_èû
)

69 
£t
->
way_èû
 = 
blk
->
way_¥ev
;

70 
blk
->
way_¥ev
->
way_√xt
 = 
NULL
;

73 
	`as£π
(
£t
->
way_hód
 !
blk
 && së->
way_èû
 != blk);

74 
blk
->
way_¥ev
->
way_√xt
 = blk->way_next;

75 
blk
->
way_√xt
->
way_¥ev
 = blk->way_prev;

78 i‡(
whîe
 =
ˇche_wayli°_hód
) {

79 
blk
->
way_√xt
 = 
£t
->
way_hód
;

80 
blk
->
way_¥ev
 = 
NULL
;

81 
£t
->
way_hód
->
way_¥ev
 = 
blk
;

82 
£t
->
way_hód
 = 
blk
;

84 
blk
->
way_¥ev
 = 
£t
->
way_èû
;

85 
blk
->
way_√xt
 = 
NULL
;

86 
£t
->
way_èû
->
way_√xt
 = 
blk
;

87 
£t
->
way_èû
 = 
blk
;

89 
	}
}

92 
ˇche_t
 *
	$ˇche_¸óã
(
uöt32_t
 
n£ts
, uöt32_à
bsize
, uöt32_à
assoc
,

93 
ˇche_pﬁicy_íum
 
pﬁicy
)

95 
ˇche_t
 *
ˇche
;

96 
ˇche_blk_t
 *
blk
;

97 
uöt32_t
 
£t
, 
way
;

100 
ˇche
 = 
	`ˇŒoc
(1, (
ˇche_t
));

101 
ˇche
->
n£ts
 =Çsets;

102 
ˇche
->
bsize
 = bsize;

103 
ˇche
->
assoc
 =ássoc;

104 
ˇche
->
pﬁicy
 =Öolicy;

107 
	`as£π
(!(
n£ts
 & (nsets - 1)));

108 
	`as£π
(!(
bsize
 & (bsize - 1)));

109 
	`as£π
(!(
assoc
 & (assoc - 1)));

110 
ˇche
->
logbsize
 = 
	`ˇche_log2
(
bsize
);

111 
ˇche
->
bmask
 = 
bsize
 - 1;

114 
ˇche
->
£ts
 = 
	`ˇŒoc
(
n£ts
, (
ˇche_£t_t
));

115 
£t
 = 0; së < 
n£ts
; set++) {

116 
ˇche
->
£ts
[
£t
].
blks
 = 
	`ˇŒoc
(
assoc
, (
ˇche_blk_t
));

117 
ˇche
->
£ts
[
£t
].
way_hód
 = &ˇche->£ts[£t].
blks
[0];

118 
ˇche
->
£ts
[
£t
].
way_èû
 = &ˇche->£ts[£t].
blks
[
assoc
 - 1];

119 
way
 = 0; way < 
assoc
; way++) {

120 
blk
 = &
ˇche
->
£ts
[
£t
].
blks
[
way
];

121 
blk
->
way
 = way;

122 
blk
->
way_¥ev
 = 
way
 ? &
ˇche
->
£ts
[
£t
].
blks
[way - 1] : 
NULL
;

123 
blk
->
way_√xt
 = 
way
 < 
assoc
 - 1 ? &
ˇche
->
£ts
[
£t
].
blks
[way + 1] : 
NULL
;

128  
ˇche
;

129 
	}
}

132 
	$ˇche_‰ì
(
ˇche_t
 *
ˇche
)

134 
uöt32_t
 
£t
;

135 
£t
 = 0; së < 
ˇche
->
n£ts
; set++)

136 
	`‰ì
(
ˇche
->
£ts
[
£t
].
blks
);

137 
	`‰ì
(
ˇche
->
£ts
);

138 
	`‰ì
(
ˇche
);

139 
	}
}

143 
	$ˇche_decode_addªss
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
addr
,

144 
uöt32_t
 *
p£t
, uöt32_à*
±ag
, uöt32_à*
poff£t
)

146 
	`PTR_ASSIGN
(
p£t
, (
addr
 >> 
ˇche
->
logbsize
Ë% cache->
n£ts
);

147 
	`PTR_ASSIGN
(
±ag
, 
addr
 & ~
ˇche
->
bmask
);

148 
	`PTR_ASSIGN
(
poff£t
, 
addr
 & 
ˇche
->
bmask
);

149 
	}
}

155 
	$ˇche_föd_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
addr
,

156 
uöt32_t
 *
p£t
, uöt32_à*
pway
, *
p°©us
)

158 
uöt32_t
 
£t
, 
èg
, 
way
;

161 
èg
 = 
addr
 & ~
ˇche
->
bmask
;

162 
£t
 = (
addr
 >> 
ˇche
->
logbsize
Ë% cache->
n£ts
;

163 
	`PTR_ASSIGN
(
p£t
, 
£t
);

164 
	`PTR_ASSIGN
(
p°©us
, 
m€si_°©us_övÆid
);

165 
way
 = 0; way < 
ˇche
->
assoc
; way++)

166 i‡(
ˇche
->
£ts
[
£t
].
blks
[
way
].
èg
 =èg && cache->£ts[£t].blks[way].
°©us
)

170 i‡(
way
 =
ˇche
->
assoc
)

174 
	`PTR_ASSIGN
(
pway
, 
way
);

175 
	`PTR_ASSIGN
(
p°©us
, 
ˇche
->
£ts
[
£t
].
blks
[
way
].
°©us
);

177 
	}
}

183 
	$ˇche_£t_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
,

184 
uöt32_t
 
èg
, 
°©us
)

186 
	`as£π
(
£t
 >0 && së < 
ˇche
->
n£ts
);

187 
	`as£π
(
way
 >0 && way < 
ˇche
->
assoc
);

188 
	`as£π
(
£t
 =(
èg
 >> 
ˇche
->
logbsize
Ë% cache->
n£ts
 || !
°©us
);

189 i‡(
ˇche
->
pﬁicy
 =
ˇche_pﬁicy_fifo


190 && 
ˇche
->
£ts
[
£t
].
blks
[
way
].
èg
 !=Åag)

191 
	`ˇche_upd©e_wayli°
(&
ˇche
->
£ts
[
£t
],

192 &
ˇche
->
£ts
[
£t
].
blks
[
way
],

193 
ˇche_wayli°_hód
);

194 
ˇche
->
£ts
[
£t
].
blks
[
way
].
èg
 =Åag;

195 
ˇche
->
£ts
[
£t
].
blks
[
way
].
°©us
 = status;

196 
	}
}

199 
	$ˇche_gë_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
,

200 
uöt32_t
 *
±ag
, *
p°©us
)

202 
	`as£π
(
£t
 >0 && së < 
ˇche
->
n£ts
);

203 
	`as£π
(
way
 >0 && way < 
ˇche
->
assoc
);

204 
	`PTR_ASSIGN
(
±ag
, 
ˇche
->
£ts
[
£t
].
blks
[
way
].
èg
);

205 
	`PTR_ASSIGN
(
p°©us
, 
ˇche
->
£ts
[
£t
].
blks
[
way
].
°©us
);

206 
	}
}

211 
	$ˇche_ac˚ss_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
)

213 
	`as£π
(
£t
 >0 && së < 
ˇche
->
n£ts
);

214 
	`as£π
(
way
 >0 && way < 
ˇche
->
assoc
);

215 i‡(
ˇche
->
pﬁicy
 =
ˇche_pﬁicy_Ãu


216 && 
ˇche
->
£ts
[
£t
].
blks
[
way
].
way_¥ev
)

217 
	`ˇche_upd©e_wayli°
(&
ˇche
->
£ts
[
£t
],

218 &
ˇche
->
£ts
[
£t
].
blks
[
way
],

219 
ˇche_wayli°_hód
);

220 
	}
}

225 
uöt32_t
 
	$ˇche_ª∂a˚_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
)

227 
ˇche_blk_t
 *
blk
;

228 
uöt32_t
 
way
;

231 
	`as£π
(
£t
 >0 && së < 
ˇche
->
n£ts
);

232 
way
 = 0; way < 
ˇche
->
assoc
; way++) {

233 
blk
 = &
ˇche
->
£ts
[
£t
].
blks
[
way
];

234 i‡(!
blk
->
°©us
)

235  
way
;

240 i‡(
ˇche
->
pﬁicy
 =
ˇche_pﬁicy_Ãu
 ||

241 
ˇche
->
pﬁicy
 =
ˇche_pﬁicy_fifo
)

242  
ˇche
->
£ts
[
£t
].
way_èû
->
way
;

245 
	`as£π
(
ˇche
->
pﬁicy
 =
ˇche_pﬁicy_øndom
);

246  
	`øndom
(Ë% 
ˇche
->
assoc
;

247 
	}
}

250 
	$ˇche_£t_å™sõ¡_èg
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
, uöt32_à
èg
)

252 
ˇche_blk_t
 *
blk
;

253 
blk
 = &
ˇche
->
£ts
[
£t
].
blks
[
way
];

254 
blk
->
å™sõ¡_èg
 = 
èg
;

255 
	}
}

	@libcachesystem/cachesystem.c

19 
	~"ˇchesy°em.h
"

24 
	gc‹es
 = 0;

25 
	gthªads
 = 0;

26 
	gcˇche_cou¡
 = 0;

27 
	géb_cou¡
 = 0;

28 
	g√t_cou¡
 = 0;

29 
uöt64_t
 
	gac˚ss_cou¡î
 = 0;

31 
	snode_t
 {

32 
cˇche_t
 *
	miˇche
;

33 
cˇche_t
 *
	mdˇche
;

36 
node_t
 *
	gnode_¨øy
;

37 
cˇche_t
 **
	gcˇche_¨øy
;

38 
éb_t
 **
	géb_¨øy
;

39 
√t_t
 **
	g√t_¨øy
;

40 
cˇche_t
 *
	gmaö_mem‹y
;

47 
ªpos_t
 *
	gcˇche_ac˚ss_ªpos
;

50 
cˇche_t
 *
	$cˇche_¸óã
()

52 
cˇche_t
 *
cˇche
;

53 
cˇche
 = 
	`ˇŒoc
(1, (
cˇche_t
));

54 
cˇche
->
ac˚ss_li°
 = 
	` li°_¸óã
();

55  
cˇche
;

56 
	}
}

59 
	$cˇche_‰ì
(
cˇche_t
 *
cˇche
)

62 i‡(
cˇche
->
l⁄ë
 && cˇche->
ac˚s£s
)

63 
	`Ârötf
(
°dîr
, "%s.hitratio %.4f # Cache hitÑatio\n",

64 
cˇche
->
«me
, (Ëcˇche->
hôs
 / cˇche->
ac˚s£s
);

68 
	` li°_cou¡
(
cˇche
->
ac˚ss_li°
)) {

69 
cˇche_ac˚ss_t
 *
a
, *
n
;

70 
	` li°_hód
(
cˇche
->
ac˚ss_li°
);

71 
a
 = 
	` li°_gë
(
cˇche
->
ac˚ss_li°
);á;á = 
n
) {

72 
n
 = 
a
->
√xt
;

73 
	`ªpos_‰ì_obje˘
(
cˇche_ac˚ss_ªpos
, 
a
);

75 
	` li°_ªmove
(
cˇche
->
ac˚ss_li°
);

77 
	` li°_‰ì
(
cˇche
->
ac˚ss_li°
);

80 i‡(
cˇche
->
dú
)

81 
	`dú_‰ì
(
cˇche
->
dú
);

82 i‡(
cˇche
->
ˇche
)

83 
	`ˇche_‰ì
(
cˇche
->
ˇche
);

84 
	`‰ì
(
cˇche
);

85 
	}
}

91 
cˇche_ac˚ss_t
 *
	$cˇche_föd_ac˚ss
(
cˇche_t
 *
cˇche
,

92 
uöt32_t
 
addr
)

94 
cˇche_ac˚ss_t
 *
ac˚ss
;

95 
addr
 &~(
cˇche
->
bsize
 - 1);

96 
	` li°_hód
(
cˇche
->
ac˚ss_li°
); !
	` li°_eﬁ
(ccache->access_list);

97 
	` li°_√xt
(
cˇche
->
ac˚ss_li°
))

99 
ac˚ss
 = 
	` li°_gë
(
cˇche
->
ac˚ss_li°
);

100 i‡(
ac˚ss
->
addªss
 =
addr
)

101  
ac˚ss
;

103  
NULL
;

104 
	}
}

107 
cˇche_ac˚ss_t
 *
	$cˇche_°¨t_ac˚ss
(
cˇche_t
 *
cˇche
,

108 
ˇche_ac˚ss_köd_íum
 
ˇche_ac˚ss_köd
, 
uöt32_t
 
addr
,

109 
 li°_t
 *
evítq
, *
evítq_ôem
)

111 
cˇche_ac˚ss_t
 *
ac˚ss
, *
Æüs
;

114 
ac˚ss
 = 
	`ªpos_¸óã_obje˘
(
cˇche_ac˚ss_ªpos
);

115 
ac˚ss
->
ˇche_ac˚ss_köd
 = cache_access_kind;

116 
ac˚ss
->
addªss
 = 
addr
 & ~(
cˇche
->
bsize
 - 1);

117 
ac˚ss
->
evítq
 =Éventq;

118 
ac˚ss
->
evítq_ôem
 =Éventq_item;

122 
Æüs
 = 
	`cˇche_föd_ac˚ss
(
cˇche
, 
addr
);

123 i‡(
Æüs
) {

124 
	`as£π
(
ac˚ss
->
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_ªad
);

125 
	`as£π
(
Æüs
->
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_ªad
);

126 
ac˚ss
->
√xt
 = 
Æüs
->next;

127 
Æüs
->
√xt
 = 
ac˚ss
;

128 
ac˚ss
->
id
 = 
Æüs
->id;

130 
	` li°_out
(
cˇche
->
ac˚ss_li°
);

131 
	` li°_ö£π
(
cˇche
->
ac˚ss_li°
, 
ac˚ss
);

132 
ac˚ss
->
id
 = ++
ac˚ss_cou¡î
;

133 
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_ªad
 ? 
cˇche
->
≥ndög_ªads
++

134 : 
cˇche
->
≥ndög_wrôes
++;

135 
	`as£π
(
cˇche
->
≥ndög_ªads
 <cˇche->
ªad_p‹ts
);

136 
	`as£π
(
cˇche
->
≥ndög_wrôes
 <cˇche->
wrôe_p‹ts
);

138  
ac˚ss
;

139 
	}
}

142 
	$cˇche_íd_ac˚ss
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
addr
)

144 
cˇche_ac˚ss_t
 *
ac˚ss
, *
Æüs
;

147 
addr
 &~(
cˇche
->
bsize
 - 1);

148 
ac˚ss
 = 
	`cˇche_föd_ac˚ss
(
cˇche
, 
addr
);

149 
	`as£π
(
ac˚ss
 &&ác˚ss->
addªss
 =
addr
);

152 
Æüs
 = 
ac˚ss
;álüs;álü†Æüs->
√xt
) {

153 i‡(
Æüs
->
evítq
) {

154 
	`as£π
(
Æüs
->
evítq_ôem
);

155 
	` li°_hód
(
Æüs
->
evítq
);

156 
	` li°_ö£π
(
Æüs
->
evítq
,álüs->
evítq_ôem
);

161 
ac˚ss
->
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_ªad
 ? 
cˇche
->
≥ndög_ªads
--

162 : 
cˇche
->
≥ndög_wrôes
--;

163 
	`as£π
(
cˇche
->
≥ndög_ªads
 >= 0);

164 
	`as£π
(
cˇche
->
≥ndög_wrôes
 >= 0);

165 
ac˚ss
) {

166 
Æüs
 = 
ac˚ss
->
√xt
;

167 
	`ªpos_‰ì_obje˘
(
cˇche_ac˚ss_ªpos
, 
ac˚ss
);

168 
ac˚ss
 = 
Æüs
;

170 
	` li°_ªmove
(
cˇche
->
ac˚ss_li°
);

171 
	}
}

174 
	$cˇche_≥ndög_ac˚ss
(
cˇche_t
 *
cˇche
, 
uöt64_t
 
id
)

176 
cˇche_ac˚ss_t
 *
ac˚ss
;

177 
	` li°_hód
(
cˇche
->
ac˚ss_li°
); !
	` li°_eﬁ
(ccache->access_list);

178 
	` li°_√xt
(
cˇche
->
ac˚ss_li°
))

180 
ac˚ss
 = 
	` li°_gë
(
cˇche
->
ac˚ss_li°
);

181 i‡(
ac˚ss
->
id
 == id)

185 
	}
}

188 
	$cˇche_≥ndög_addªss
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
addr
)

190 
cˇche_ac˚ss_t
 *
ac˚ss
;

191 
ac˚ss
 = 
	`cˇche_föd_ac˚ss
(
cˇche
, 
addr
);

192  
ac˚ss
 !
NULL
;

193 
	}
}

196 
	$cˇche_gë_block
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
£t
, uöt32_à
way
,

197 
uöt32_t
 *
±ag
, *
p°©us
)

200 i‡(!
cˇche
->
l⁄ë
) {

201 
	`as£π
(!
way
);

202 
	`PTR_ASSIGN
(
±ag
, 
£t
 << 
cˇche
->
logbsize
);

203 
	`PTR_ASSIGN
(
p°©us
, 
m€si_°©us_ex˛usive
);

208 
	`ˇche_gë_block
(
cˇche
->
ˇche
, 
£t
, 
way
, 
±ag
, 
p°©us
);

209 
	}
}

213 
	$cˇche_föd_block
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
addr
,

214 
uöt32_t
 *
p£t
, uöt32_à*
pway
, uöt32_à*
±ag
, *
p°©us
)

216 
ˇche_t
 *
ˇche
 = 
cˇche
->cache;

217 
ˇche_blk_t
 *
blk
;

218 
dú_lock_t
 *
dú_lock
;

219 
uöt32_t
 
£t
, 
way
, 
èg
;

222 i‡(!
cˇche
->
l⁄ë
) {

223 
	`PTR_ASSIGN
(
p£t
, 
addr
 >> 
cˇche
->
logbsize
);

224 
	`PTR_ASSIGN
(
pway
, 0);

225 
	`PTR_ASSIGN
(
±ag
, 
addr
 & ~(
cˇche
->
bsize
 - 1));

226 
	`PTR_ASSIGN
(
p°©us
, 
m€si_°©us_ex˛usive
);

232 
èg
 = 
addr
 & ~
ˇche
->
bmask
;

233 
£t
 = (
èg
 >> 
ˇche
->
logbsize
Ë% cache->
n£ts
;

234 
way
 = 0; way < 
ˇche
->
assoc
; way++) {

235 
blk
 = &
ˇche
->
£ts
[
£t
].
blks
[
way
];

236 i‡(
blk
->
èg
 =èg && blk->
°©us
)

238 i‡(
blk
->
å™sõ¡_èg
 =
èg
) {

239 
dú_lock
 = 
	`dú_lock_gë
(
cˇche
->
dú
, 
£t
, 
way
);

240 i‡(
dú_lock
->
lock
)

246 i‡(
way
 =
ˇche
->
assoc
) {

247 
	`PTR_ASSIGN
(
p£t
, 
£t
);

248 
	`PTR_ASSIGN
(
±ag
, 
èg
);

249 
	`PTR_ASSIGN
(
pway
, 0);

250 
	`PTR_ASSIGN
(
p°©us
, 0);

255 
	`PTR_ASSIGN
(
p£t
, 
£t
);

256 
	`PTR_ASSIGN
(
pway
, 
way
);

257 
	`PTR_ASSIGN
(
±ag
, 
èg
);

258 
	`PTR_ASSIGN
(
p°©us
, 
ˇche
->
£ts
[
£t
].
blks
[
way
].
°©us
);

260 
	}
}

266 
dú_t
 *
	$cˇche_gë_dú
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
phaddr
)

268 
dú_t
 *
dú
;

269 
dú
 = 
cˇche
->
l⁄ë
 ? cˇche->dú : 
	`mmu_gë_dú
(
phaddr
);

270 
	`as£π
(
dú
);

271  
dú
;

272 
	}
}

278 
dú_íåy_t
 *
	$cˇche_gë_dú_íåy
(
cˇche_t
 *
cˇche
,

279 
uöt32_t
 
£t
, uöt32_à
way
, uöt32_à
subblk
)

281 
dú_t
 *
dú
;

284 
dú
 = 
	`cˇche_gë_dú
(
cˇche
, 
£t
 << cˇche->
logbsize
);

287 i‡(!
cˇche
->
l⁄ë
) {

288 
	`as£π
(
way
 == 0);

289 
	`as£π
(
subblk
 < 
maö_mem‹y
->
bsize
 / 
ˇche_mö_block_size
);

290 
£t
 = së % 
dú
->
xsize
;

291  
	`dú_íåy_gë
(
dú
, 
£t
, 0, 
subblk
);

295 
dú
 = 
cˇche
->dir;

296 
	`as£π
(
dú
);

297 
	`as£π
(
£t
 < 
dú
->
xsize
);

298 
	`as£π
(
way
 < 
dú
->
ysize
);

299 
	`as£π
(
subblk
 < 
dú
->
zsize
);

300  
	`dú_íåy_gë
(
dú
, 
£t
, 
way
, 
subblk
);

301 
	}
}

307 
dú_lock_t
 *
	$cˇche_gë_dú_lock
(
cˇche_t
 *
cˇche
,

308 
uöt32_t
 
£t
, uöt32_à
way
)

310 
dú_t
 *
dú
;

312 
dú
 = 
	`cˇche_gë_dú
(
cˇche
, 
£t
 << 
maö_mem‹y
->
logbsize
);

315 i‡(!
cˇche
->
l⁄ë
) {

316 
£t
 = së % 
dú
->
xsize
;

317  
	`dú_lock_gë
(
dú
, 
£t
, 
way
);

321  
	`dú_lock_gë
(
dú
, 
£t
, 
way
);

322 
	}
}

329 
éb_t
 *
	$éb_¸óã
()

331 
éb_t
 *
éb
;

332 
éb
 = 
	`ˇŒoc
(1, (
éb_t
));

333  
éb
;

334 
	}
}

337 
	$éb_‰ì
(
éb_t
 *
éb
)

340 i‡(
éb
->
ac˚s£s
)

341 
	`Ârötf
(
°dîr
, "%s.hitratio %.4g # TLB hitÑatio\n",

342 
éb
->
«me
, (Ëéb->
hôs
 /Ålb->
ac˚s£s
);

345 i‡(
éb
->
ˇche
)

346 
	`ˇche_‰ì
(
éb
->
ˇche
);

347 
	`‰ì
(
éb
);

348 
	}
}

355 
ªpos_t
 *
	gˇche_sy°em_°ack_ªpos
;

358 
ˇche_sy°em_°ack_t
 *
	$ˇche_sy°em_°ack_¸óã
(
c‹e
, 
thªad
, 
uöt32_t
 
addr
,

359 
ªãvít
, *
ªt°ack
)

361 
ˇche_sy°em_°ack_t
 *
°ack
;

362 
°ack
 = 
	`ªpos_¸óã_obje˘
(
ˇche_sy°em_°ack_ªpos
);

363 
°ack
->
c‹e
 = core;

364 
°ack
->
thªad
 =Åhread;

365 
°ack
->
addr
 =áddr;

366 
°ack
->
ªãvít
 =Ñetevent;

367 
°ack
->
ªt°ack
 =Ñetstack;

368  
°ack
;

369 
	}
}

372 
	$ˇche_sy°em_°ack_ªtu∫
(
ˇche_sy°em_°ack_t
 *
°ack
)

374 
ªãvít
 = 
°ack
->retevent;

375 *
ªt°ack
 = 
°ack
->retstack;

377 
	`ªpos_‰ì_obje˘
(
ˇche_sy°em_°ack_ªpos
, 
°ack
);

378 
	`esim_scheduÀ_evít
(
ªãvít
, 
ªt°ack
, 0);

379 
	}
}

386 
	gEV_CACHE_SYSTEM_ACCESS
;

387 
	gEV_CACHE_SYSTEM_ACCESS_CACHE
;

388 
	gEV_CACHE_SYSTEM_ACCESS_TLB
;

389 
	gEV_CACHE_SYSTEM_ACCESS_FINISH
;

391 *
	gˇche_c⁄fig_fûe
 = "";

392 *
	gˇche_sy°em_ªp‹t_fûe
 = "";

393 
c⁄fig_t
 *
	gˇche_c⁄fig
;

394 
	gˇche_mö_block_size
 = 0;

395 
	gˇche_max_block_size
 = 0;

396 
uöt32_t
 
	gmem_œãncy
 = 200;

397 
	gùî„˘
 = 0;

398 
	gd≥r„˘
 = 0;

401 
	$ˇche_sy°em_ªg_›ti⁄s
()

403 
	`›t_ªg_°rög
("-ˇchec⁄fig", "Cachêc⁄figuøti⁄ fûe", &
ˇche_c⁄fig_fûe
);

404 
	`›t_ªg_boﬁ
("-ùî„˘", "Pî„˘ in°ru˘i⁄ cachê{t|f}", &
ùî„˘
);

405 
	`›t_ªg_boﬁ
("-d≥r„˘", "Pî„˘ d©®ˇchê{t|f}", &
d≥r„˘
);

408 
	`mmu_ªg_›ti⁄s
();

409 
	}
}

413 
	$ˇche_c⁄fig_£˘i⁄
(*
£˘i⁄
)

415 i‡(!
	`c⁄fig_£˘i⁄_exi°s
(
ˇche_c⁄fig
, 
£˘i⁄
))

416 
	`Áèl
("%s: se˘i⁄ '%s'ÇŸÖª£¡", 
ˇche_c⁄fig_fûe
, 
£˘i⁄
);

417 
	}
}

421 
	$ˇche_c⁄fig_key
(*
£˘i⁄
, *
key
)

423 i‡(!
	`c⁄fig_key_exi°s
(
ˇche_c⁄fig
, 
£˘i⁄
, 
key
))

424 
	`Áèl
("%s: section '%s': key '%s'ÇotÖresent",

425 
ˇche_c⁄fig_fûe
, 
£˘i⁄
, 
key
);

426 
	}
}

430 
	#SECTION
(
V
Ë
	`°r˝y
(
£˘i⁄
, (V))

	)

431 
	#KEY_INT
(
K
, 
V
Ë
	`c⁄fig_wrôe_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, (K), (V))

	)

432 
	#KEY_STRING
(
K
, 
V
Ë
	`c⁄fig_wrôe_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, (K), (V))

	)

434 
	$ˇche_c⁄fig_deÁu…
()

436 
£˘i⁄
[100], 
buf
[100];

437 
c‹e
, 
thªad
;

440 
	`SECTION
("CacheGeometry L1");

441 
	`KEY_INT
("Sets", 256);

442 
	`KEY_INT
("Assoc", 2);

443 
	`KEY_INT
("BlockSize", 64);

444 
	`KEY_INT
("Latency", 2);

446 
	`SECTION
("CacheGeometry L2");

447 
	`KEY_INT
("Sets", 1024);

448 
	`KEY_INT
("Assoc", 8);

449 
	`KEY_INT
("BlockSize", 64);

450 
	`KEY_INT
("Latency", 20);

453 
	`SECTION
("MainMemory");

454 
	`•rötf
(
buf
, "√t-%d", 
c‹es
);

455 
	`KEY_STRING
("HiNë", 
buf
);

456 
	`KEY_INT
("BlockSize", 64);

457 
	`KEY_INT
("Latency", 200);

460 
c‹e
 = 0; c‹ê< 
c‹es
; core++) {

461 
thªad
 = 0;Åhªad < 
thªads
;Åhread++) {

462 
	`•rötf
(
buf
, "Nodê%d.%d", 
c‹e
, 
thªad
);

463 
	`SECTION
(
buf
);

464 
	`KEY_INT
("C‹e", 
c‹e
);

465 
	`KEY_INT
("Thªad", 
thªad
);

466 
	`•rötf
(
buf
, "û1-%d", 
c‹e
 * 
thªads
 + 
thªad
);

467 
	`KEY_STRING
("ICache", 
buf
);

468 
	`•rötf
(
buf
, "dl1-%d", 
c‹e
 * 
thªads
 + 
thªad
);

469 
	`KEY_STRING
("DCache", 
buf
);

474 
c‹e
 = 0; c‹ê< 
c‹es
; core++) {

475 
thªad
 = 0;Åhªad < 
thªads
;Åhread++) {

476 
	`•rötf
(
buf
, "Cachêdl1-%d", 
c‹e
 * 
thªads
 + 
thªad
);

477 
	`SECTION
(
buf
);

478 
	`KEY_STRING
("Geometry", "L1");

479 
	`KEY_STRING
("HiNet", "");

480 
	`•rötf
(
buf
, "√t-%d", 
c‹e
);

481 
	`KEY_STRING
("LoNë", 
buf
);

483 
	`•rötf
(
buf
, "Cachêû1-%d", 
c‹e
 * 
thªads
 + 
thªad
);

484 
	`SECTION
(
buf
);

485 
	`KEY_STRING
("Geometry", "L1");

486 
	`KEY_STRING
("HiNet", "");

487 
	`•rötf
(
buf
, "√t-%d", 
c‹e
);

488 
	`KEY_STRING
("LoNë", 
buf
);

493 
c‹e
 = 0; c‹ê< 
c‹es
; core++) {

494 
	`•rötf
(
buf
, "Cachêl2-%d", 
c‹e
);

495 
	`SECTION
(
buf
);

496 
	`KEY_STRING
("Geometry", "L2");

497 
	`•rötf
(
buf
, "√t-%d", 
c‹e
);

498 
	`KEY_STRING
("HiNë", 
buf
);

499 
	`•rötf
(
buf
, "√t-%d", 
c‹es
);

500 
	`KEY_STRING
("LoNë", 
buf
);

504 
c‹e
 = 0; c‹ê<
c‹es
; core++) {

505 
	`•rötf
(
buf
, "NëÇë-%d", 
c‹e
);

506 
	`SECTION
(
buf
);

507 
	`KEY_STRING
("Topology", "P2P");

509 
	}
}

511 #unde‡
KEY_INT


512 #unde‡
KEY_STRING


513 #unde‡
SECTION


516 
	$ˇche_sy°em_öô
(
_c‹es
, 
_thªads
)

518 
i
, 
j
;

519 
éb_t
 *
déb
, *
ôlb
;

520 *
£˘i⁄
, *
vÆue
;

521 
c‹e
, 
thªad
, 
cuº
;

522 
n£ts
, 
bsize
, 
assoc
;

523 
ªad_p‹ts
, 
wrôe_p‹ts
;

524 
√t_t
 *
√t
 = 
NULL
;

525 
cˇche_t
 *
cˇche
;

526 
node_t
 *
node
;

527 
buf
[200];

528 
ˇche_pﬁicy_íum
 
pﬁicy
;

529 *
pﬁicy_°r
;

532 i‡(
ˇche_sy°em_ªp‹t_fûe
[0] && !
	`ˇn_›í_wrôe
(cache_system_report_file))

533 
	`Áèl
("%s: cannot open cache systemÑeport file",

534 
ˇche_sy°em_ªp‹t_fûe
);

537 
c‹es
 = 
_c‹es
;

538 
thªads
 = 
_thªads
;

539 
	`mmu_öô
();

540 
	`m€si_öô
();

543 
ˇche_sy°em_°ack_ªpos
 = 
	`ªpos_¸óã
((
ˇche_sy°em_°ack_t
),

545 
cˇche_ac˚ss_ªpos
 = 
	`ªpos_¸óã
((
cˇche_ac˚ss_t
),

549 
EV_CACHE_SYSTEM_ACCESS
 = 
	`esim_ªgi°î_evít
(
ˇche_sy°em_h™dÀr
);

550 
EV_CACHE_SYSTEM_ACCESS_CACHE
 = 
	`esim_ªgi°î_evít
(
ˇche_sy°em_h™dÀr
);

551 
EV_CACHE_SYSTEM_ACCESS_TLB
 = 
	`esim_ªgi°î_evít
(
ˇche_sy°em_h™dÀr
);

552 
EV_CACHE_SYSTEM_ACCESS_FINISH
 = 
	`esim_ªgi°î_evít
(
ˇche_sy°em_h™dÀr
);

555 
ˇche_c⁄fig
 = 
	`c⁄fig_¸óã
(
ˇche_c⁄fig_fûe
);

556 i‡(!*
ˇche_c⁄fig_fûe
)

557 
	`ˇche_c⁄fig_deÁu…
();

558 i‡(!
	`c⁄fig_lﬂd
(
ˇche_c⁄fig
))

559 
	`Áèl
("%s: c™nŸÜﬂd cachêc⁄figuøti⁄ fûe", 
ˇche_c⁄fig_fûe
);

562 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_fú°
(
ˇche_c⁄fig
); section;

563 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_√xt
(
ˇche_c⁄fig
))

565 i‡(!
	`°∫ˇ£cmp
(
£˘i⁄
, "Cachê", 6Ë|| !
	`°rˇ£cmp
(section, "MainMemory"))

566 
cˇche_cou¡
++;

567 i‡(!
	`°∫ˇ£cmp
(
£˘i⁄
, "Net ", 4))

568 
√t_cou¡
++;

570 i‡(
cˇche_cou¡
 < 1)

571 
	`Áèl
("%s:Çÿˇche", 
ˇche_c⁄fig_fûe
);

574 
cˇche_¨øy
 = 
	`ˇŒoc
(
cˇche_cou¡
, (*));

575 
√t_¨øy
 = 
	`ˇŒoc
(
√t_cou¡
, (*));

578 
cuº
 = 0;

579 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_fú°
(
ˇche_c⁄fig
); section;

580 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_√xt
(
ˇche_c⁄fig
))

582 i‡(
	`°∫ˇ£cmp
(
£˘i⁄
, "Net ", 4))

585 
√t
 = 
	`√t_¸óã
(
£˘i⁄
 + 4);

586 
√t_¨øy
[
cuº
++] = 
√t
;

587 
	`c⁄fig_wrôe_±r
(
ˇche_c⁄fig
, 
£˘i⁄
, "±r", 
√t
);

589 
	`as£π
(
cuº
 =
√t_cou¡
);

592 
cuº
 = 0;

593 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_fú°
(
ˇche_c⁄fig
); 
cuº
 < 
cˇche_cou¡
 && section;

594 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_√xt
(
ˇche_c⁄fig
))

596 i‡(
	`°∫ˇ£cmp
(
£˘i⁄
, "Cache ", 6))

600 
cˇche
 = 
cˇche_¨øy
[
cuº
++] = 
	`cˇche_¸óã
();

601 
	`c⁄fig_wrôe_±r
(
ˇche_c⁄fig
, 
£˘i⁄
, "±r", 
cˇche
);

602 
	`°r˝y
(
cˇche
->
«me
, 
£˘i⁄
 + 6);

603 i‡(!
	`°rˇ£cmp
(
cˇche
->
«me
, "MainMemory"))

604 
	`Áèl
("'%s' i†nŸá vÆidÇamêf‹á cache", 
cˇche
->
«me
);

607 
vÆue
 = 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, "HiNet", "");

608 
	`•rötf
(
buf
, "√à%s", 
vÆue
);

609 
cˇche
->
höë
 = 
	`c⁄fig_ªad_±r
(
ˇche_c⁄fig
, 
buf
, "±r", 
NULL
);

610 i‡(!
cˇche
->
höë
 && *
vÆue
)

611 
	`Áèl
("%s:Çëw‹k s≥cifõd i¿HiNë d€†nŸÉxi°", 
cˇche
->
«me
);

614 
vÆue
 = 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, "LoNet", "");

615 
	`•rötf
(
buf
, "√à%s", 
vÆue
);

616 
cˇche
->
l⁄ë
 = 
	`c⁄fig_ªad_±r
(
ˇche_c⁄fig
, 
buf
, "±r", 
NULL
);

617 i‡(!
cˇche
->
l⁄ë
 && *
vÆue
)

618 
	`Áèl
("%s:Çëw‹k s≥cifõd i¿LoNë d€†nŸÉxi°", 
cˇche
->
«me
);

619 i‡(!*
vÆue
)

620 
	`Áèl
("%s: cachêmu° bêc⁄√˘edÅÿ®lowîÇëw‹k (u£ LoNë)", 
cˇche
->
«me
);

623 
	`•rötf
(
buf
, "CacheGeomëry %s", 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, "Geometry", ""));

624 
	`ˇche_c⁄fig_key
(
£˘i⁄
, "Geometry");

625 
	`ˇche_c⁄fig_£˘i⁄
(
buf
);

626 
	`ˇche_c⁄fig_key
(
buf
, "Latency");

627 
	`ˇche_c⁄fig_key
(
buf
, "Sets");

628 
	`ˇche_c⁄fig_key
(
buf
, "Assoc");

629 
	`ˇche_c⁄fig_key
(
buf
, "BlockSize");

630 
n£ts
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
buf
, "Sets", 0);

631 
assoc
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
buf
, "Assoc", 0);

632 
bsize
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
buf
, "BlockSize", 0);

633 
ªad_p‹ts
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
buf
, "ReadPorts", 2);

634 
wrôe_p‹ts
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
buf
, "WritePorts", 1);

635 
pﬁicy_°r
 = 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
buf
, "Policy", "LRU");

636 
pﬁicy
 = 
	`m≠_°rög_ˇ£
(&
ˇche_pﬁicy_m≠
, 
pﬁicy_°r
);

637 i‡(
pﬁicy
 =
ˇche_pﬁicy_övÆid
)

638 
	`Áèl
("%s: invÆid blockÑïœ˚míàpﬁicy", 
pﬁicy_°r
);

639 
cˇche
->
œt
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
buf
, "Latency", 0);

640 
cˇche
->
bsize
 = bsize;

641 
cˇche
->
logbsize
 = 
	`log_ba£2
(
bsize
);

642 
cˇche
->
ªad_p‹ts
 =Ñead_ports;

643 
cˇche
->
wrôe_p‹ts
 = write_ports;

644 
cˇche
->
ˇche
 = 
	`ˇche_¸óã
(
n£ts
, 
bsize
, 
assoc
, 
pﬁicy
);

645 
ˇche_mö_block_size
 = cache_mö_block_sizê? 
	`MIN
(ˇche_mö_block_size, 
bsize
) : bsize;

646 
ˇche_max_block_size
 = cache_max_block_sizê? 
	`MAX
(ˇche_max_block_size, 
bsize
) : bsize;

647 i‡(
bsize
 > 
mmu_∑ge_size
)

648 
	`Áèl
("%s: cachêblock sizêgª©îÅh™ mem‹yÖagêsize", 
cˇche
->
«me
);

649 i‡(
ªad_p‹ts
 < 1 || 
wrôe_p‹ts
 < 1)

650 
	`Áèl
("%s:Çumbî o‡ªad/wrôêp‹t†mu° bê©Üó° 1", 
cˇche
->
«me
);

654 
£˘i⁄
 = "MainMemory";

655 
cˇche
 = 
maö_mem‹y
 = 
cˇche_¨øy
[
cuº
++] = 
	`cˇche_¸óã
();

656 
	`as£π
(
cuº
 =
cˇche_cou¡
);

657 
	`°r˝y
(
cˇche
->
«me
, "mm");

658 
	`•rötf
(
buf
, "Në %s", 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, "HiNet", ""));

659 
	`ˇche_c⁄fig_£˘i⁄
(
£˘i⁄
);

660 
	`ˇche_c⁄fig_key
(
£˘i⁄
, "Latency");

661 
	`ˇche_c⁄fig_key
(
£˘i⁄
, "BlockSize");

663 
ªad_p‹ts
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "ReadPorts", 2);

664 
wrôe_p‹ts
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "WritePorts", 1);

665 i‡(
ªad_p‹ts
 < 1 || 
wrôe_p‹ts
 < 1)

666 
	`Áèl
("%s:Çumbî o‡ªad/wrôêp‹t†mu° bê©Üó° 1", 
cˇche
->
«me
);

667 
bsize
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "BlockSize", 0);

668 i‡(
bsize
 & (bsize - 1))

669 
	`Áèl
("block size for main memory isÇotáÖower of 2");

670 i‡(
bsize
 > 
mmu_∑ge_size
)

671 
	`Áèl
("main memory block size cannot be greaterÅhanÖage size");

672 
cˇche
->
bsize
 = bsize;

673 
cˇche
->
logbsize
 = 
	`log_ba£2
(
bsize
);

674 
ˇche_mö_block_size
 = cache_mö_block_sizê? 
	`MIN
(ˇche_mö_block_size, 
bsize
) : bsize;

676 
cˇche
->
œt
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "Latency", 0);

677 
cˇche
->
bsize
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "BlockSize", 0);

678 
cˇche
->
ªad_p‹ts
 =Ñead_ports;

679 
cˇche
->
wrôe_p‹ts
 = write_ports;

680 
cˇche
->
höë
 = 
	`c⁄fig_ªad_±r
(
ˇche_c⁄fig
, 
buf
, "±r", 
NULL
);

681 i‡(
ˇche_mö_block_size
 < 1)

682 
	`Áèl
("cache block size must be >= 1");

685 
node_¨øy
 = 
	`ˇŒoc
(
c‹es
 * 
thªads
, (
node_t
));

686 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_fú°
(
ˇche_c⁄fig
); section;

687 
£˘i⁄
 = 
	`c⁄fig_£˘i⁄_√xt
(
ˇche_c⁄fig
))

689 i‡(
	`°∫ˇ£cmp
(
£˘i⁄
, "node ", 5))

692 
c‹e
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "Core", -1);

693 
thªad
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "Thread", -1);

694 i‡(
c‹e
 < 0 || 
thªad
 < 0)

695 
	`Áèl
("ˇchêc⁄fig: wr⁄g se˘i⁄ '%s'", 
£˘i⁄
);

696 i‡(
c‹e
 >
c‹es
) {

697 
	`w¨nög
("%s: section '[ %s ]' ignored, since itÑefersÅoán unexisting core (core %d); "

699 
ˇche_c⁄fig_fûe
, 
£˘i⁄
, 
c‹e
, 
c‹es
);

702 i‡(
thªad
 >
thªads
) {

703 
	`w¨nög
("%s: section '[ %s ]' ignored, since itÑefersÅoán unexistingÅhread (thread %d); "

705 
ˇche_c⁄fig_fûe
, 
£˘i⁄
, 
c‹e
, 
c‹es
);

708 
node
 = &
node_¨øy
[
c‹e
 * 
thªads
 + 
thªad
];

711 
	`ˇche_c⁄fig_key
(
£˘i⁄
, "ICache");

712 
vÆue
 = 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, "ICache", "");

713 i‡(!
	`°rˇ£cmp
(
vÆue
, "MainMemory")) {

714 
node
->
iˇche
 = 
maö_mem‹y
;

716 
	`•rötf
(
buf
, "Cachê%s", 
vÆue
);

717 
	`ˇche_c⁄fig_£˘i⁄
(
buf
);

718 
node
->
iˇche
 = 
	`c⁄fig_ªad_±r
(
ˇche_c⁄fig
, 
buf
, "±r", 
NULL
);

719 
	`as£π
(
node
->
iˇche
);

723 
	`ˇche_c⁄fig_key
(
£˘i⁄
, "DCache");

724 
vÆue
 = 
	`c⁄fig_ªad_°rög
(
ˇche_c⁄fig
, 
£˘i⁄
, "DCache", "");

725 i‡(!
	`°rˇ£cmp
(
vÆue
, "MainMemory")) {

726 
node
->
dˇche
 = 
maö_mem‹y
;

728 
	`•rötf
(
buf
, "Cachê%s", 
vÆue
);

729 
	`ˇche_c⁄fig_£˘i⁄
(
buf
);

730 
node
->
dˇche
 = 
	`c⁄fig_ªad_±r
(
ˇche_c⁄fig
, 
buf
, "±r", 
NULL
);

731 
	`as£π
(
node
->
dˇche
);

736 
c‹e
 = 0; c‹ê< 
c‹es
; core++) {

737 
thªad
 = 0;Åhªad < 
thªads
;Åhread++) {

738 
node
 = &
node_¨øy
[
c‹e
 * 
thªads
 + 
thªad
];

739 i‡(!
node
->
iˇche
)

740 
	`Áèl
("core/thread %d/%d doesÇot haveánÉntry intoÅhe memory hierarchy "

744 
c‹e
, 
thªad
);

745 i‡(!
node
->
dˇche
)

746 
	`Áèl
("core/thread %d/%d doesÇot haveánÉntry intoÅhe memory hierarchy "

750 
c‹e
, 
thªad
);

755 
cuº
 = 0; cuº < 
cˇche_cou¡
; curr++) {

756 
cˇche
 = 
cˇche_¨øy
[
cuº
];

757 
√t
 = 
cˇche
->
höë
;

758 i‡(!
√t
)

760 i‡(
√t
->
node_cou¡
)

761 
	`Áèl
("√tw‹k '%s' ha†m‹êth™ o√ÜowîÇode", 
√t
->
«me
);

762 
	`√t_√w_node
(
√t
, 
cˇche
->
«me
, ccache);

766 
cuº
 = 0; cuº < 
cˇche_cou¡
; curr++) {

767 
cˇche
 = 
cˇche_¨øy
[
cuº
];

768 
√t
 = 
cˇche
->
l⁄ë
;

769 i‡(!
√t
)

771 
cˇche
->
loid
 = 
	`√t_√w_node
(
√t
, cˇche->
«me
, ccache);

772 
cˇche
->
√xt
 = 
	`√t_gë_node_d©a
(
√t
, 0);

777 
cuº
 = 0; cuº < 
cˇche_cou¡
; curr++) {

778 
bsize
 = 0;

779 
cˇche
 = 
cˇche_¨øy
[
cuº
]; cˇche; cˇchêcˇche->
√xt
) {

780 i‡(
cˇche
->
bsize
 < bsize)

781 
	`Áèl
("cache %s hasá smaller block sizeÅhan some "

782 "o‡ô†uµîÜevñ caches", 
cˇche
->
«me
);

783 
bsize
 = 
cˇche
->bsize;

789 
i
 = 0; i < 
√t_cou¡
; i++) {

790 
maxmsg
, 
sw
;

791 
b™dwidth
;

795 
√t
 = 
√t_¨øy
[
i
];

796 
cˇche
 = 
	`√t_gë_node_d©a
(
√t
, 0);

797 i‡(!
cˇche
)

799 
maxmsg
 = 
cˇche
->
bsize
 + 8;

803 
b™dwidth
 = 8;

804 
	`¢¥ötf
(
buf
, (buf), "%s.sw", 
√t
->
«me
);

805 
sw
 = 
	`√t_√w_swôch
(
√t
,Çë->
íd_node_cou¡
, 
maxmsg
 * 2,

806 
√t
->
íd_node_cou¡
, 
maxmsg
 * 2, 
b™dwidth
, 
buf
, 
NULL
);

807 
j
 = 0; j < 
√t
->
íd_node_cou¡
; j++)

808 
	`√t_√w_bidúe˘i⁄Æ_lök
(
√t
, 
j
, 
sw
, 
b™dwidth
);

810 
	`√t_ˇlcuœã_rouãs
(
√t
);

814 
cuº
 = 0; cuº < 
cˇche_cou¡
; curr++) {

815 
cˇche
 = 
cˇche_¨øy
[
cuº
];

818 i‡(!
cˇche
->
l⁄ë
)

822 i‡(!
cˇche
->
höë
) {

823 
cˇche
->
dú
 = 
	`dú_¸óã
(cˇche->
ˇche
->
n£ts
, cˇche->ˇche->
assoc
,

824 
cˇche
->
bsize
 / 
ˇche_mö_block_size
, 1);

829 
cˇche
->
dú
 = 
	`dú_¸óã
(cˇche->
ˇche
->
n£ts
, cˇche->ˇche->
assoc
,

830 
cˇche
->
bsize
 / 
ˇche_mö_block_size
, cˇche->
höë
->
íd_node_cou¡
);

834 
£˘i⁄
 = "Tlb";

835 
éb_cou¡
 = 
c‹es
 * 
thªads
 * 2;

836 
éb_¨øy
 = 
	`ˇŒoc
(
éb_cou¡
, (*));

837 
c‹e
 = 0; c‹ê< 
c‹es
; core++) {

838 
thªad
 = 0;Åhªad < 
thªads
;Åhread++) {

839 
déb
 = 
éb_¨øy
[(
c‹e
 * 
thªads
 + 
thªad
Ë* 2] = 
	`éb_¸óã
();

840 
ôlb
 = 
éb_¨øy
[(
c‹e
 * 
thªads
 + 
thªad
Ë* 2 + 1] = 
	`éb_¸óã
();

841 
	`•rötf
(
déb
->
«me
, "déb.%d.%d", 
c‹e
, 
thªad
);

842 
	`•rötf
(
ôlb
->
«me
, "ôlb.%d.%d", 
c‹e
, 
thªad
);

843 
déb
->
hôœt
 = 
ôlb
->hitlat =

844 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "HitLatency", 2);

845 
déb
->
mis¶©
 = 
ôlb
->misslat =

846 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "MissLatency", 30);

847 
n£ts
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "Sets", 64);

848 
assoc
 = 
	`c⁄fig_ªad_öt
(
ˇche_c⁄fig
, 
£˘i⁄
, "Assoc", 4);

849 
déb
->
ˇche
 = 
	`ˇche_¸óã
(
n£ts
, 
mmu_∑ge_size
, 
assoc
, 
ˇche_pﬁicy_Ãu
);

850 
ôlb
->
ˇche
 = 
	`ˇche_¸óã
(
n£ts
, 
mmu_∑ge_size
, 
assoc
, 
ˇche_pﬁicy_Ãu
);

853 
	}
}

856 
	$ˇche_sy°em_dump_ªp‹t
()

858 
cˇche_t
 *
cˇche
;

859 
éb_t
 *
éb
;

860 
FILE
 *
f
;

861 
cuº
;

864 
f
 = 
	`›í_wrôe
(
ˇche_sy°em_ªp‹t_fûe
);

865 i‡(!
f
)

869 
	`Ârötf
(
f
, "; Report for caches, TLBs,ánd main memory\n");

870 
	`Ârötf
(
f
, "; Accesses - TotalÇumber ofáccesses\n");

871 
	`Ârötf
(
f
, "; Hits, Misses - AccessesÑesulting in hits/misses\n");

872 
	`Ârötf
(
f
, "; HitRatio - Hits divided byáccesses\n");

873 
	`Ârötf
(
f
, "; Evictions - Invalidated orÑeplaced cache blocks\n");

874 
	`Ârötf
(
f
, "; Retries - For L1 caches,áccessesÅhat wereÑetried\n");

875 
	`Ârötf
(
f
, "; ReadRetries, WriteRetries - Read/WriteÑetriedáccesses\n");

876 
	`Ârötf
(
f
, "; NoRetryAccesses - Number ofáccessesÅhat wereÇotÑetried\n");

877 
	`Ârötf
(
f
, "; NoRetryHits, NoRetryMisses - Hitsánd misses forÇotÑetriedáccesses\n");

878 
	`Ârötf
(
f
, "; NoRetryHitRatio - NoRetryHits divided by NoRetryAccesses\n");

879 
	`Ârötf
(
f
, "; NoRetryReads, NoRetryWrites - NotÑetriedÑeadsánd writes\n");

880 
	`Ârötf
(
f
, "; Reads, Writes - TotalÑead/writeáccesses\n");

881 
	`Ârötf
(
f
, "; BlockingReads, BlockingWrites - Reads/writes coming fromÜower-level cache\n");

882 
	`Ârötf
(
f
, "; NonBlockingReads, NonBlockingWrites - Coming from upper-level cache\n");

883 
	`Ârötf
(
f
, "\n\n");

886 
cuº
 = 0; cuº < 
cˇche_cou¡
; curr++) {

887 
cˇche
 = 
cˇche_¨øy
[
cuº
];

888 
	`Ârötf
(
f
, "[ %†]\n\n", 
cˇche
->
«me
);

889 
	`Ârötf
(
f
, "Ac˚s£†%Œd\n", (Ë
cˇche
->
ac˚s£s
);

890 
	`Ârötf
(
f
, "Hô†%Œd\n", (Ë
cˇche
->
hôs
);

891 
	`Ârötf
(
f
, "Mis£†%Œd\n", (Ë(
cˇche
->
ac˚s£s
 - cˇche->
hôs
));

892 
	`Ârötf
(
f
, "HôR©iÿ%.4g\n", 
cˇche
->
ac˚s£s
 ?

893 (Ë
cˇche
->
hôs
 / cˇche->
ac˚s£s
 : 0.0);

894 
	`Ârötf
(
f
, "Evi˘i⁄†%Œd\n", (Ë
cˇche
->
evi˘i⁄s
);

895 
	`Ârötf
(
f
, "Rërõ†%Œd\n", (Ë(
cˇche
->
ªad_ªåõs
 + cˇche->
wrôe_ªåõs
));

896 
	`Ârötf
(
f
, "RódRërõ†%Œd\n", (Ë
cˇche
->
ªad_ªåõs
);

897 
	`Ârötf
(
f
, "WrôeRërõ†%Œd\n", (Ë
cˇche
->
wrôe_ªåõs
);

898 
	`Ârötf
(
f
, "\n");

899 
	`Ârötf
(
f
, "NoRëryAc˚s£†%Œd\n", (Ë
cˇche
->
no_ªåy_ac˚s£s
);

900 
	`Ârötf
(
f
, "NoRëryHô†%Œd\n", (Ë
cˇche
->
no_ªåy_hôs
);

901 
	`Ârötf
(
f
, "NoRëryMis£†%Œd\n", (Ë(
cˇche
->
no_ªåy_ac˚s£s
 -

902 
cˇche
->
no_ªåy_hôs
));

903 
	`Ârötf
(
f
, "NoRëryHôR©iÿ%.4g\n", 
cˇche
->
no_ªåy_ac˚s£s
 ?

904 (Ë
cˇche
->
no_ªåy_hôs
 / cˇche->
no_ªåy_ac˚s£s
 : 0.0);

905 
	`Ârötf
(
f
, "NoRëryRód†%Œd\n", (Ë
cˇche
->
no_ªåy_ªads
);

906 
	`Ârötf
(
f
, "NoRëryRódHô†%Œd\n", (Ë
cˇche
->
no_ªåy_ªad_hôs
);

907 
	`Ârötf
(
f
, "NoRëryRódMis£†%Œd\n", (Ë(
cˇche
->
no_ªåy_ªads
 -

908 
cˇche
->
no_ªåy_ªad_hôs
));

909 
	`Ârötf
(
f
, "NoRëryWrôe†%Œd\n", (Ë
cˇche
->
no_ªåy_wrôes
);

910 
	`Ârötf
(
f
, "NoRëryWrôeHô†%Œd\n", (Ë
cˇche
->
no_ªåy_wrôe_hôs
);

911 
	`Ârötf
(
f
, "NoRëryWrôeMis£†%Œd\n", (Ë(
cˇche
->
no_ªåy_wrôes
 -

912 
cˇche
->
no_ªåy_wrôe_hôs
));

913 
	`Ârötf
(
f
, "\n");

914 
	`Ârötf
(
f
, "Ród†%Œd\n", (Ë
cˇche
->
ªads
);

915 
	`Ârötf
(
f
, "BlockögRód†%Œd\n", (Ë
cˇche
->
blockög_ªads
);

916 
	`Ârötf
(
f
, "N⁄BlockögRód†%Œd\n", (Ë
cˇche
->
n⁄_blockög_ªads
);

917 
	`Ârötf
(
f
, "RódHô†%Œd\n", (Ë
cˇche
->
ªad_hôs
);

918 
	`Ârötf
(
f
, "RódMis£†%Œd\n", (Ë(
cˇche
->
ªads
 - cˇche->
ªad_hôs
));

919 
	`Ârötf
(
f
, "\n");

920 
	`Ârötf
(
f
, "Wrôe†%Œd\n", (Ë
cˇche
->
wrôes
);

921 
	`Ârötf
(
f
, "BlockögWrôe†%Œd\n", (Ë
cˇche
->
blockög_wrôes
);

922 
	`Ârötf
(
f
, "N⁄BlockögWrôe†%Œd\n", (Ë
cˇche
->
n⁄_blockög_wrôes
);

923 
	`Ârötf
(
f
, "WrôeHô†%Œd\n", (Ë
cˇche
->
wrôe_hôs
);

924 
	`Ârötf
(
f
, "WrôeMis£†%Œd\n", (Ë(
cˇche
->
wrôes
 - cˇche->
wrôe_hôs
));

925 
	`Ârötf
(
f
, "\n\n");

929 
cuº
 = 0; cuº < 
éb_cou¡
; curr++) {

930 
éb
 = 
éb_¨øy
[
cuº
];

931 
	`Ârötf
(
f
, "[ %†]\n\n", 
éb
->
«me
);

932 
	`Ârötf
(
f
, "Ac˚s£†%Œd\n", (Ë
éb
->
ac˚s£s
);

933 
	`Ârötf
(
f
, "Hô†%Œd\n", (Ë
éb
->
hôs
);

934 
	`Ârötf
(
f
, "Mis£†%Œd\n", (Ë(
éb
->
ac˚s£s
 -Ålb->
hôs
));

935 
	`Ârötf
(
f
, "HôR©iÿ%.4g\n", 
éb
->
ac˚s£s
 ?

936 (Ë
éb
->
hôs
 /Ålb->
ac˚s£s
 : 0.0);

937 
	`Ârötf
(
f
, "Evi˘i⁄†%Œd\n", (Ë
éb
->
evi˘i⁄s
);

938 
	`Ârötf
(
f
, "\n\n");

942 
	`f˛o£
(
f
);

943 
	}
}

946 
	$ˇche_sy°em_d⁄e
()

948 
i
;

951 
	`ˇche_sy°em_dump_ªp‹t
();

954 
i
 = 0; i < 
cˇche_cou¡
; i++)

955 
	`cˇche_‰ì
(
cˇche_¨øy
[
i
]);

956 
	`‰ì
(
cˇche_¨øy
);

959 
i
 = 0; i < 
c‹es
 * 
thªads
; i++)

960 
	`éb_‰ì
(
éb_¨øy
[
i
]);

961 
	`‰ì
(
éb_¨øy
);

964 
i
 = 0; i < 
√t_cou¡
; i++)

965 
	`√t_‰ì
(
√t_¨øy
[
i
]);

966 
	`‰ì
(
√t_¨øy
);

969 
	`‰ì
(
node_¨øy
);

970 
	`ªpos_‰ì
(
ˇche_sy°em_°ack_ªpos
);

971 
	`ªpos_‰ì
(
cˇche_ac˚ss_ªpos
);

974 
	`m€si_d⁄e
();

975 
	`mmu_d⁄e
();

976 
	}
}

981 
cˇche_t
 *
	$ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
)

983 
ödex
;

984 
	`as£π
(
c‹e
 < 
c‹es
 && 
thªad
 < 
thªads
);

985 
ödex
 = 
c‹e
 * 
thªads
 + 
thªad
;

986  
ˇche_köd
 =
ˇche_köd_d©a
 ? 
node_¨øy
[
ödex
].
dˇche
 :Çode_¨øy[ödex].
iˇche
;

987 
	}
}

991 
éb_t
 *
	$ˇche_sy°em_gë_éb
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
)

993 
ödex
;

994 
	`as£π
(
c‹e
 < 
c‹es
 && 
thªad
 < 
thªads
);

995 
ödex
 = (
c‹e
 * 
thªads
 + 
thªad
Ë* 2 + (
ˇche_köd
 =
ˇche_köd_d©a
 ? 0 : 1);

996  
éb_¨øy
[
ödex
];

997 
	}
}

1000 
	$ˇche_sy°em_dump_rouã
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
köd
, 
FILE
 *
f
)

1002 
cˇche_t
 *
cˇche
;

1004 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
köd
);

1005 
cˇche
) {

1006 
	`Ârötf
(
f
, " %sÜoid=%d\n",

1007 
cˇche
->
«me
, cˇche->
loid
);

1008 i‡(
cˇche
->
l⁄ë
)

1009 
	`Ârötf
(
f
, " %s\n", 
cˇche
->
l⁄ë
->
«me
);

1010 
cˇche
 = cˇche->
√xt
;

1012 
	}
}

1015 
	$ˇche_sy°em_dump
(
FILE
 *
f
)

1017 
c‹e
, 
thªad
;

1018 
c‹e
 = 0; c‹ê< 
c‹es
; core++) {

1019 
thªad
 = 0;Åhªad < 
thªads
;Åhread++) {

1020 
	`Ârötf
(
f
, "c‹ê%d -Åhªad %d\¿ d©®rouã\n", 
c‹e
, 
thªad
);

1021 
	`ˇche_sy°em_dump_rouã
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
, 
f
);

1022 
	`Ârötf
(
f
, " instructionÑoute\n");

1023 
	`ˇche_sy°em_dump_rouã
(
c‹e
, 
thªad
, 
ˇche_köd_ö°
, 
f
);

1026 
	}
}

1029 
	$ˇche_sy°em_≥ndög_addªss
(
c‹e
, 
thªad
,

1030 
ˇche_köd_íum
 
ˇche_köd
, 
uöt32_t
 
addr
)

1032 
cˇche_t
 *
cˇche
;

1033 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
ˇche_köd
);

1034  
	`cˇche_≥ndög_addªss
(
cˇche
, 
addr
);

1035 
	}
}

1038 
	$ˇche_sy°em_≥ndög_ac˚ss
(
c‹e
, 
thªad
,

1039 
ˇche_köd_íum
 
ˇche_köd
, 
uöt64_t
 
ac˚ss
)

1041 
cˇche_t
 *
cˇche
;

1042 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
ˇche_köd
);

1043  
	`cˇche_≥ndög_ac˚ss
(
cˇche
, 
ac˚ss
);

1044 
	}
}

1047 
	$ˇche_sy°em_block_size
(
c‹e
, 
thªad
,

1048 
ˇche_köd_íum
 
ˇche_köd
)

1050 
cˇche_t
 *
cˇche
;

1051 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
ˇche_köd
);

1052  
cˇche
->
bsize
;

1053 
	}
}

1056 
	$ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

1057 
ˇche_ac˚ss_köd_íum
 
ˇche_ac˚ss_köd
, 
uöt32_t
 
addr
)

1059 
cˇche_t
 *
cˇche
;

1060 
cˇche_ac˚ss_t
 *
ac˚ss
;

1063 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
ˇche_köd
);

1064 
ac˚ss
 = 
	`cˇche_föd_ac˚ss
(
cˇche
, 
addr
);

1067 i‡(!
ac˚ss
)

1068  
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_ªad
 ?

1069 
cˇche
->
≥ndög_ªads
 < cˇche->
ªad_p‹ts
 :

1070 
cˇche
->
≥ndög_wrôes
 < cˇche->
wrôe_p‹ts
;

1074 i‡(
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_wrôe
 ||

1075 
ac˚ss
->
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_wrôe
)

1081 
	}
}

1084 
uöt64_t
 
	$ˇche_sy°em_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

1085 
ˇche_ac˚ss_köd_íum
 
ˇche_ac˚ss_köd
, 
uöt32_t
 
addr
,

1086 
 li°_t
 *
evítq
, *
evítq_ôem
)

1088 
ˇche_sy°em_°ack_t
 *
√w°ack
;

1089 
cˇche_t
 *
cˇche
;

1090 
cˇche_ac˚ss_t
 *
ac˚ss
, *
Æüs
;

1094 i‡(!
	`mmu_vÆid_phaddr
(
addr
)) {

1095 
	`Ârötf
(
°dîr
, "fatal: cache_system_access:ÇotállocatedÖhysicalÖage\n");

1096 
	`ab‹t
();

1100 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
c‹e
, 
thªad
, 
ˇche_köd
);

1101 
Æüs
 = 
	`cˇche_föd_ac˚ss
(
cˇche
, 
addr
);

1102 
ac˚ss
 = 
	`cˇche_°¨t_ac˚ss
(
cˇche
, 
ˇche_ac˚ss_köd
, 
addr
,

1103 
evítq
, 
evítq_ôem
);

1106 i‡(!
Æüs
) {

1107 
√w°ack
 = 
	`ˇche_sy°em_°ack_¸óã
(
c‹e
, 
thªad
, 
addr
,

1108 
ESIM_EV_NONE
, 
NULL
);

1109 
√w°ack
->
ˇche_köd
 = cache_kind;

1110 
√w°ack
->
ˇche_ac˚ss_köd
 = cache_access_kind;

1111 
√w°ack
->
evítq
 =Éventq;

1112 
√w°ack
->
evítq_ôem
 =Éventq_item;

1113 
	`esim_scheduÀ_evít
(
EV_CACHE_SYSTEM_ACCESS
, 
√w°ack
, 0);

1117  
ac˚ss
->
id
;

1118 
	}
}

1121 
uöt64_t
 
	$ˇche_sy°em_wrôe
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

1122 
uöt32_t
 
addr
, 
 li°_t
 *
evítq
, *
evítq_ôem
)

1124 
	`as£π
(
ˇche_köd
 =
ˇche_köd_d©a
);

1125 
	`as£π
(
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd
,

1126 
ˇche_ac˚ss_köd_wrôe
, 
addr
));

1127  
	`ˇche_sy°em_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd
, 
ˇche_ac˚ss_köd_wrôe
,

1128 
addr
, 
evítq
, 
evítq_ôem
);

1129 
	}
}

1132 
uöt64_t
 
	$ˇche_sy°em_ªad
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

1133 
uöt32_t
 
addr
, 
 li°_t
 *
evítq
, *
evítq_ôem
)

1135 
	`as£π
(
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd
,

1136 
ˇche_ac˚ss_köd_ªad
, 
addr
));

1137  
	`ˇche_sy°em_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd
, 
ˇche_ac˚ss_köd_ªad
,

1138 
addr
, 
evítq
, 
evítq_ôem
);

1139 
	}
}

1141 
	$ˇche_sy°em_h™dÀr
(
evít
, *
d©a
)

1143 
ˇche_sy°em_°ack_t
 *
°ack
 = 
d©a
;

1145 i‡(
evít
 =
EV_CACHE_SYSTEM_ACCESS
)

1148 
	`esim_scheduÀ_evít
(
EV_CACHE_SYSTEM_ACCESS_TLB
, 
°ack
, 0);

1149 
°ack
->
≥ndög
++;

1152 i‡((
°ack
->
ˇche_köd
 =
ˇche_köd_d©a
 && !
d≥r„˘
) ||

1153 (
°ack
->
ˇche_köd
 =
ˇche_köd_ö°
 && !
ùî„˘
))

1155 
	`esim_scheduÀ_evít
(
EV_CACHE_SYSTEM_ACCESS_CACHE
, 
°ack
, 0);

1156 
°ack
->
≥ndög
++;

1161 i‡(
evít
 =
EV_CACHE_SYSTEM_ACCESS_CACHE
)

1163 
cˇche_t
 *
cˇche
;

1164 
m€si_°ack_t
 *
√w°ack
;

1166 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
°ack
->
c‹e
, sèck->
thªad
,

1167 
°ack
->
ˇche_köd
);

1168 
√w°ack
 = 
	`m€si_°ack_¸óã
(
m€si_°ack_id
++, 
cˇche
, 
°ack
->
addr
,

1169 
EV_CACHE_SYSTEM_ACCESS_FINISH
, 
°ack
);

1170 
	`esim_scheduÀ_evít
(
°ack
->
ˇche_ac˚ss_köd
 =
ˇche_ac˚ss_köd_ªad
 ?

1171 
EV_MOESI_LOAD
 : 
EV_MOESI_STORE
, 
√w°ack
, 0);

1175 i‡(
evít
 =
EV_CACHE_SYSTEM_ACCESS_TLB
) {

1176 
éb_t
 *
éb
;

1177 
uöt32_t
 
£t
, 
way
, 
èg
;

1178 
°©us
, 
hô
;

1181 
éb
 = 
	`ˇche_sy°em_gë_éb
(
°ack
->
c‹e
, sèck->
thªad
, sèck->
ˇche_köd
);

1182 
hô
 = 
	`ˇche_föd_block
(
éb
->
ˇche
, 
°ack
->
addr
, &
£t
, &
way
, 
NULL
);

1185 
éb
->
ac˚s£s
++;

1186 i‡(
hô
)

1187 
éb
->
hôs
++;

1190 i‡(!
hô
) {

1191 
	`ˇche_decode_addªss
(
éb
->
ˇche
, 
°ack
->
addr
, &
£t
, &
èg
, 
NULL
);

1192 
way
 = 
	`ˇche_ª∂a˚_block
(
éb
->
ˇche
, 
£t
);

1193 
	`ˇche_gë_block
(
éb
->
ˇche
, 
£t
, 
way
, 
NULL
, &
°©us
);

1194 i‡(
°©us
)

1195 
éb
->
evi˘i⁄s
++;

1196 
	`ˇche_£t_block
(
éb
->
ˇche
, 
£t
, 
way
, 
èg
, 1);

1200 
	`ˇche_ac˚ss_block
(
éb
->
ˇche
, 
£t
, 
way
);

1201 
	`esim_scheduÀ_evít
(
EV_CACHE_SYSTEM_ACCESS_FINISH
, 
°ack
,

1202 
hô
 ? 
éb
->
hôœt
 :Ålb->
mis¶©
);

1206 i‡(
evít
 =
EV_CACHE_SYSTEM_ACCESS_FINISH
) {

1207 
cˇche_t
 *
cˇche
;

1209 
°ack
->
≥ndög
--;

1210 i‡(
°ack
->
≥ndög
)

1213 
cˇche
 = 
	`ˇche_sy°em_gë_cˇche
(
°ack
->
c‹e
, sèck->
thªad
, sèck->
ˇche_köd
);

1214 
	`cˇche_íd_ac˚ss
(
cˇche
, 
°ack
->
addr
);

1215 
	`ˇche_sy°em_°ack_ªtu∫
(
°ack
);

1220 
	`ab‹t
();

1221 
	}
}

	@libcachesystem/cachesystem.h

19 #i‚de‡
CACHESYSTEM_H


20 
	#CACHESYSTEM_H


	)

22 
	~<mh™dÀ.h
>

23 
	~<°döt.h
>

24 
	~<°dio.h
>

25 
	~<°d¨g.h
>

26 
	~<as£π.h
>

27 
	~<›ti⁄s.h
>

28 
	~<√tw‹k.h
>

29 
	~<misc.h
>

30 
	~<esim.h
>

32 
	~<c⁄fig.h
>

33 
	~<debug.h
>

34 
	~<ªpos.h
>

35 
	~< li°.h
>

39 
	#PTR_ASSIGN
(
PTR
, 
VALUE
Ëi‡(PTRË*(PTRË(VALUE)

	)

44 
	sdú_lock_t
 {

45 
	mlock
;

46 
m€si_°ack_t
 *
	mlock_queue
;

49 
	sdú_íåy_t
 {

50 
	mow√r
;

51 
	msh¨îs
;

52 
	msh¨î
[0];

55 
	sdú_t
 {

59 
	mnodes
;

66 
	mxsize
, 
	mysize
, 
	mzsize
;

70 
dú_lock_t
 *
	mdú_lock
;

74 
	md©a
[0];

77 
dú_t
 *
dú_¸óã
(
xsize
, 
ysize
, 
zsize
, 
nodes
);

78 
dú_‰ì
(
dú_t
 *
dú
);

80 
dú_íåy_t
 *
dú_íåy_gë
(
dú_t
 *
dú
, 
x
, 
y
, 
z
);

81 
dú_íåy_£t_sh¨î
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
, 
node
);

82 
dú_íåy_˛ór_sh¨î
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
, 
node
);

83 
dú_íåy_˛ór_Æl_sh¨îs
(
dú_t
 *
dú
, vﬁ©ûê
dú_íåy_t
 *
dú_íåy
);

84 
dú_íåy_is_sh¨î
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
, 
node
);

85 
dú_íåy_dump_sh¨îs
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
);

86 
dú_íåy_group_sh¨ed_‹_ow√d
(
dú_t
 *
dú
, 
x
, 
y
);

88 
dú_lock_t
 *
dú_lock_gë
(
dú_t
 *
dú
, 
x
, 
y
);

89 
dú_lock_lock
(
dú_lock_t
 *
dú_lock
, 
evít
, 
m€si_°ack_t
 *
°ack
);

90 
dú_lock_u∆ock
(
dú_lock_t
 *
dú_lock
);

91 
dú_u∆ock
(
dú_t
 *
dú
, 
x
, 
y
);

98 
uöt32_t
 
mmu_∑ge_size
;

99 
uöt32_t
 
mmu_∑ge_mask
;

100 
uöt32_t
 
mmu_log_∑ge_size
;

102 
mmu_ªg_›ti⁄s
();

103 
mmu_öô
();

104 
mmu_d⁄e
();

105 
uöt32_t
 
mmu_å™¶©e
(
mid
, uöt32_à
véaddr
);

106 
dú_t
 *
mmu_gë_dú
(
uöt32_t
 
phaddr
);

107 
mmu_vÆid_phaddr
(
uöt32_t
 
phaddr
);

114 
	eˇche_ac˚ss_köd_íum
 {

115 
	mˇche_ac˚ss_köd_ªad
 = 0,

116 
	mˇche_ac˚ss_köd_wrôe


119 
°rög_m≠_t
 
ˇche_pﬁicy_m≠
;

120 
	eˇche_pﬁicy_íum
 {

121 
	mˇche_pﬁicy_övÆid
 = 0,

122 
	mˇche_pﬁicy_Ãu
,

123 
	mˇche_pﬁicy_fifo
,

124 
	mˇche_pﬁicy_øndom


127 
	sˇche_blk_t
 {

128 
ˇche_blk_t
 *
	mway_√xt
;

129 
ˇche_blk_t
 *
	mway_¥ev
;

130 
uöt32_t
 
	mèg
, 
	må™sõ¡_èg
;

131 
uöt32_t
 
	mway
;

132 
	m°©us
;

135 
	sˇche_£t_t
 {

136 
ˇche_blk_t
 *
	mway_hód
;

137 
ˇche_blk_t
 *
	mway_èû
;

138 
ˇche_blk_t
 *
	mblks
;

141 
	sˇche_t
 {

142 
uöt32_t
 
	mn£ts
;

143 
uöt32_t
 
	mbsize
;

144 
uöt32_t
 
	massoc
;

145 
ˇche_pﬁicy_íum
 
	mpﬁicy
;

147 
ˇche_£t_t
 *
	m£ts
;

148 
uöt32_t
 
	mbmask
;

149 
	mlogbsize
;

153 
ˇche_t
 *
ˇche_¸óã
(
uöt32_t
 
n£ts
, uöt32_à
bsize
, uöt32_à
assoc
,

154 
ˇche_pﬁicy_íum
 
pﬁicy
);

155 
ˇche_‰ì
(
ˇche_t
 *
ˇche
);

157 
ˇche_log2
(
uöt32_t
 
x
);

158 
ˇche_decode_addªss
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
addr
,

159 
uöt32_t
 *
p£t
, uöt32_à*
±ag
, uöt32_à*
poff£t
);

160 
ˇche_föd_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
addr
,

161 
uöt32_t
 *
p£t
, uöt32_à*
pway
, *
p°©us
);

162 
ˇche_£t_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
,

163 
uöt32_t
 
èg
, 
°©us
);

164 
ˇche_gë_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
,

165 
uöt32_t
 *
±ag
, *
p°©us
);

166 
ˇche_ac˚ss_block
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
);

167 
uöt32_t
 
ˇche_ª∂a˚_block
(
ˇche_t
 *
ˇche
, uöt32_à
£t
);

168 
ˇche_£t_å™sõ¡_èg
(
ˇche_t
 *
ˇche
, 
uöt32_t
 
£t
, uöt32_à
way
, uöt32_à
èg
);

175 
	#ˇche_debug
(...Ë
	`debug
(
ˇche_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

176 
ˇche_debug_ˇãg‹y
;

178 
EV_MOESI_FIND_AND_LOCK
;

179 
EV_MOESI_FIND_AND_LOCK_FINISH
;

181 
EV_MOESI_LOAD
;

182 
EV_MOESI_LOAD_ACTION
;

183 
EV_MOESI_LOAD_MISS
;

184 
EV_MOESI_LOAD_FINISH
;

186 
EV_MOESI_STORE
;

187 
EV_MOESI_STORE_ACTION
;

188 
EV_MOESI_STORE_FINISH
;

190 
EV_MOESI_EVICT
;

191 
EV_MOESI_EVICT_ACTION
;

192 
EV_MOESI_EVICT_RECEIVE
;

193 
EV_MOESI_EVICT_WRITEBACK
;

194 
EV_MOESI_EVICT_WRITEBACK_EXCLUSIVE
;

195 
EV_MOESI_EVICT_WRITEBACK_FINISH
;

196 
EV_MOESI_EVICT_PROCESS
;

197 
EV_MOESI_EVICT_REPLY
;

198 
EV_MOESI_EVICT_REPLY_RECEIVE
;

199 
EV_MOESI_EVICT_FINISH
;

201 
EV_MOESI_WRITE_REQUEST
;

202 
EV_MOESI_WRITE_REQUEST_RECEIVE
;

203 
EV_MOESI_WRITE_REQUEST_ACTION
;

204 
EV_MOESI_WRITE_REQUEST_EXCLUSIVE
;

205 
EV_MOESI_WRITE_REQUEST_UPDOWN
;

206 
EV_MOESI_WRITE_REQUEST_UPDOWN_FINISH
;

207 
EV_MOESI_WRITE_REQUEST_DOWNUP
;

208 
EV_MOESI_WRITE_REQUEST_REPLY
;

209 
EV_MOESI_WRITE_REQUEST_FINISH
;

211 
EV_MOESI_READ_REQUEST
;

212 
EV_MOESI_READ_REQUEST_RECEIVE
;

213 
EV_MOESI_READ_REQUEST_ACTION
;

214 
EV_MOESI_READ_REQUEST_UPDOWN
;

215 
EV_MOESI_READ_REQUEST_UPDOWN_MISS
;

216 
EV_MOESI_READ_REQUEST_UPDOWN_FINISH
;

217 
EV_MOESI_READ_REQUEST_DOWNUP
;

218 
EV_MOESI_READ_REQUEST_DOWNUP_FINISH
;

219 
EV_MOESI_READ_REQUEST_REPLY
;

220 
EV_MOESI_READ_REQUEST_FINISH
;

222 
EV_MOESI_INVALIDATE
;

223 
EV_MOESI_INVALIDATE_FINISH
;

225 
m€si_h™dÀr_föd_™d_lock
(
evít
, *
d©a
);

226 
m€si_h™dÀr_lﬂd
(
evít
, *
d©a
);

227 
m€si_h™dÀr_°‹e
(
evít
, *
d©a
);

228 
m€si_h™dÀr_evi˘
(
evít
, *
d©a
);

229 
m€si_h™dÀr_wrôe_ªque°
(
evít
, *
d©a
);

230 
m€si_h™dÀr_ªad_ªque°
(
evít
, *
d©a
);

231 
m€si_h™dÀr_övÆid©e
(
evít
, *
d©a
);

234 
m€si_öô
();

235 
m€si_d⁄e
();

238 
	mm€si_°©us_övÆid
 = 0,

239 
	mm€si_°©us_modifõd
,

240 
	mm€si_°©us_ow√d
,

241 
	mm€si_°©us_ex˛usive
,

242 
	mm€si_°©us_sh¨ed


245 
	sm€si_°ack_t
 {

246 
uöt64_t
 
	mid
;

247 
cˇche_t
 *
	mcˇche
, *
	mèrgë
, *
	mex˚±
;

248 
uöt32_t
 
	maddr
, 
	m£t
, 
	mway
, 
	mèg
;

249 
uöt32_t
 
	m§c_£t
, 
	m§c_way
, 
	m§c_èg
;

250 
dú_lock_t
 *
	mdú_lock
;

251 
	m°©us
, 
	mª•⁄£
, 
	m≥ndög
;

254 
	mîr
 : 1;

255 
	msh¨ed
 : 1;

256 
	mªad
 : 1;

257 
	mblockög
 : 1;

258 
	mwrôeback
 : 1;

259 
	mevi˘i⁄
 : 1;

260 
	mªåy
 : 1;

263 
	mlock_evít
;

264 
m€si_°ack_t
 *
	mlock_√xt
;

267 
	mªãvít
;

268 *
	mªt°ack
;

271 
uöt64_t
 
m€si_°ack_id
;

273 
m€si_°ack_t
 *
m€si_°ack_¸óã
(
uöt64_t
 
id
, 
cˇche_t
 *
cˇche
,

274 
uöt32_t
 
addr
, 
ªãvít
, *
ªt°ack
);

275 
m€si_°ack_ªtu∫
(
m€si_°ack_t
 *
°ack
);

282 
	scˇche_ac˚ss_t
 {

283 
ˇche_ac˚ss_köd_íum
 
	mˇche_ac˚ss_köd
;

284 
uöt32_t
 
	maddªss
;

285 
uöt64_t
 
	mid
;

286 
 li°_t
 *
	mevítq
;

287 *
	mevítq_ôem
;

288 
cˇche_ac˚ss_t
 *
	m√xt
;

291 
	scˇche_t
 {

294 
	m«me
[100];

295 
	mloid
;

296 
√t_t
 *
	mhöë
, *
	ml⁄ë
;

297 
	mœt
;

298 
	mªad_p‹ts
;

299 
	mwrôe_p‹ts
;

300 
uöt32_t
 
	mbsize
;

301 
	mlogbsize
;

302 
cˇche_t
 *
	m√xt
;

303 
ˇche_t
 *
	mˇche
;

304 
dú_t
 *
	mdú
;

307 
 li°_t
 *
	mac˚ss_li°
;

308 
	m≥ndög_ªads
;

309 
	m≥ndög_wrôes
;

312 
uöt64_t
 
	mac˚s£s
;

313 
uöt64_t
 
	mhôs
;

314 
uöt64_t
 
	mevi˘i⁄s
;

315 
uöt64_t
 
	mªads
;

316 
uöt64_t
 
	mblockög_ªads
;

317 
uöt64_t
 
	mn⁄_blockög_ªads
;

318 
uöt64_t
 
	mªad_hôs
;

319 
uöt64_t
 
	mwrôes
;

320 
uöt64_t
 
	mblockög_wrôes
;

321 
uöt64_t
 
	mn⁄_blockög_wrôes
;

322 
uöt64_t
 
	mwrôe_hôs
;

324 
uöt64_t
 
	mªad_ªåõs
;

325 
uöt64_t
 
	mwrôe_ªåõs
;

327 
uöt64_t
 
	mno_ªåy_ac˚s£s
;

328 
uöt64_t
 
	mno_ªåy_hôs
;

329 
uöt64_t
 
	mno_ªåy_ªads
;

330 
uöt64_t
 
	mno_ªåy_ªad_hôs
;

331 
uöt64_t
 
	mno_ªåy_wrôes
;

332 
uöt64_t
 
	mno_ªåy_wrôe_hôs
;

335 
cˇche_t
 *
cˇche_¸óã
();

336 
cˇche_‰ì
(
cˇche_t
 *
cˇche
);

338 
cˇche_föd_block
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
addr
,

339 
uöt32_t
 *
p£t
, uöt32_à*
pway
, uöt32_à*
±ag
, *
p°©us
);

340 
cˇche_gë_block
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
£t
, uöt32_à
way
,

341 
uöt32_t
 *
±ag
, *
p°©us
);

343 
dú_t
 *
cˇche_gë_dú
(
cˇche_t
 *
cˇche
, 
uöt32_t
 
phaddr
);

344 
dú_íåy_t
 *
cˇche_gë_dú_íåy
(
cˇche_t
 *
cˇche
,

345 
uöt32_t
 
£t
, uöt32_à
way
, uöt32_à
subblk
);

346 
dú_lock_t
 *
cˇche_gë_dú_lock
(
cˇche_t
 *
cˇche
,

347 
uöt32_t
 
£t
, uöt32_à
way
);

353 
	séb_t
 {

356 
	m«me
[100];

357 
	mhôœt
;

358 
	mmis¶©
;

359 
ˇche_t
 *
	mˇche
;

362 
uöt64_t
 
	mac˚s£s
;

363 
uöt64_t
 
	mhôs
;

364 
uöt64_t
 
	mevi˘i⁄s
;

367 
éb_t
 *
éb_¸óã
();

368 
éb_‰ì
(
éb_t
 *
éb
);

375 *
ˇche_sy°em_ªp‹t_fûe
;

376 
ˇche_mö_block_size
;

377 
ˇche_max_block_size
;

378 
cˇche_t
 *
maö_mem‹y
;

380 
	eˇche_köd_íum
 {

381 
	mˇche_köd_ö°
,

382 
	mˇche_köd_d©a


385 
	eéb_köd_íum
 {

386 
	méb_köd_d©a
 = 0,

387 
	méb_köd_ö°


390 
	sˇche_sy°em_°ack_t
 {

391 
	mc‹e
, 
	mthªad
;

392 
ˇche_köd_íum
 
	mˇche_köd
;

393 
ˇche_ac˚ss_köd_íum
 
	mˇche_ac˚ss_köd
;

394 
uöt32_t
 
	maddr
;

395 
	m≥ndög
;

396 
 li°_t
 *
	mevítq
;

397 *
	mevítq_ôem
;

399 
	mªãvít
;

400 *
	mªt°ack
;

403 
ªpos_t
 *
ˇche_sy°em_°ack_ªpos
;

404 
ˇche_sy°em_°ack_t
 *
ˇche_sy°em_°ack_¸óã
(
c‹e
, 
thªad
, 
uöt32_t
 
addr
,

405 
ªãvít
, *
ªt°ack
);

406 
ˇche_sy°em_°ack_ªtu∫
(
ˇche_sy°em_°ack_t
 *
°ack
);

407 
ˇche_sy°em_h™dÀr
(
evít
, *
d©a
);

409 
EV_CACHE_SYSTEM_ACCESS
;

410 
EV_CACHE_SYSTEM_ACCESS_CACHE
;

411 
EV_CACHE_SYSTEM_ACCESS_TLB
;

412 
EV_CACHE_SYSTEM_ACCESS_FINISH
;

414 
ˇche_sy°em_ªg_›ti⁄s
();

415 
ˇche_sy°em_öô
(
def_c‹es
, 
def_thªads
);

416 
ˇche_sy°em_d⁄e
();

417 
ˇche_sy°em_dump
(
FILE
 *
f
);

421 
ˇche_sy°em_block_size
(
c‹e
, 
thªad
,

422 
ˇche_köd_íum
 
ˇche_köd
);

425 
ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

426 
ˇche_ac˚ss_köd_íum
 
ˇche_ac˚ss_köd
, 
uöt32_t
 
addr
);

430 
ˇche_sy°em_≥ndög_addªss
(
c‹e
, 
thªad
,

431 
ˇche_köd_íum
 
ˇche_köd
, 
uöt32_t
 
addr
);

432 
ˇche_sy°em_≥ndög_ac˚ss
(
c‹e
, 
thªad
,

433 
ˇche_köd_íum
 
ˇche_köd
, 
uöt64_t
 
ac˚ss
);

436 
uöt64_t
 
ˇche_sy°em_ªad
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

437 
uöt32_t
 
addr
, 
 li°_t
 *
evítq
, *
ôem
);

438 
uöt64_t
 
ˇche_sy°em_wrôe
(
c‹e
, 
thªad
, 
ˇche_köd_íum
 
ˇche_köd
,

439 
uöt32_t
 
addr
, 
 li°_t
 *
evítq
, *
evítq_ôem
);

	@libcachesystem/directory.c

21 
	~"ˇchesy°em.h
"

24 
	#DIR_ENTRY_SHARERS_SIZE
 ((
dú
->
nodes
 + 7Ë/ 8)

	)

25 
	#DIR_ENTRY_SIZE
 ((
dú_íåy_t
Ë+ 
DIR_ENTRY_SHARERS_SIZE
)

	)

26 
	#DIR_ENTRY
(
X
, 
Y
, 
Z
Ë((
dú_íåy_t
 *Ë(((*Ë&
dú
->
d©a
Ë+ 
DIR_ENTRY_SIZE
 * \

27 ((
X
Ë* 
dú
->
ysize
 * dú->
zsize
 + (
Y
Ë* dú->zsizê+ (
Z
))))

	)

30 
dú_t
 *
	$dú_¸óã
(
xsize
, 
ysize
, 
zsize
, 
nodes
)

32 
dú_íåy_size
, 
dú_size
;

33 
dú_t
 *
dú
;

35 
	`as£π
(
nodes
);

36 
dú_íåy_size
 = (
dú_íåy_t
Ë+ (
nodes
 + 7) / 8;

37 
dú_size
 = (
dú_t
Ë+ 
dú_íåy_size
 * 
xsize
 * 
ysize
 * 
zsize
;

39 
dú
 = 
	`ˇŒoc
(1, 
dú_size
);

40 
dú
->
dú_lock
 = 
	`ˇŒoc
(
xsize
 * 
ysize
, (
dú_lock_t
));

41 
dú
->
nodes
 =Çodes;

42 
dú
->
xsize
 = xsize;

43 
dú
->
ysize
 = ysize;

44 
dú
->
zsize
 = zsize;

45  
dú
;

46 
	}
}

49 
	$dú_‰ì
(
dú_t
 *
dú
)

51 
	`‰ì
(
dú
->
dú_lock
);

52 
	`‰ì
(
dú
);

53 
	}
}

56 
dú_íåy_t
 *
	$dú_íåy_gë
(
dú_t
 *
dú
, 
x
, 
y
, 
z
)

58 
	`as£π
(
x
 < 
dú
->
xsize
 && 
y
 < dú->
ysize
 && 
z
 < dú->
zsize
);

59  
	`DIR_ENTRY
(
x
, 
y
, 
z
);

60 
	}
}

63 
	$dú_íåy_dump_sh¨îs
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
)

65 
i
;

66 
	`ˇche_debug
(" %d sh¨îs: { ", 
dú_íåy
->
sh¨îs
);

67 
i
 = 0; i < 
dú
->
nodes
; i++)

68 i‡(
	`dú_íåy_is_sh¨î
(
dú
, 
dú_íåy
, 
i
))

69 
	`¥ötf
("%d ", 
i
);

70 
	`ˇche_debug
("}\n");

71 
	}
}

74 
	$dú_íåy_£t_sh¨î
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
, 
node
)

76 
	`as£π
(
node
 > 0 &&Çodê< 
dú
->
nodes
);

77 i‡(
dú_íåy
->
sh¨î
[
node
 / 8] & (1 << (node % 8)))

79 
dú_íåy
->
sh¨î
[
node
 / 8] |= 1 << (node % 8);

80 
dú_íåy
->
sh¨îs
++;

81 
	`as£π
(
dú_íåy
->
sh¨îs
 <
dú
->
nodes
);

82 
	}
}

85 
	$dú_íåy_˛ór_sh¨î
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
, 
node
)

87 
	`as£π
(
node
 > 0 &&Çodê< 
dú
->
nodes
);

88 i‡(!(
dú_íåy
->
sh¨î
[
node
 / 8] & (1 << (node % 8))))

90 
dú_íåy
->
sh¨î
[
node
 / 8] &= ~(1 << (node % 8));

91 
	`as£π
(
dú_íåy
->
sh¨îs
 > 0);

92 
dú_íåy
->
sh¨îs
--;

93 
	}
}

96 
	$dú_íåy_˛ór_Æl_sh¨îs
(
dú_t
 *
dú
, vﬁ©ûê
dú_íåy_t
 *
dú_íåy
)

98 
	`mem£t
(&
dú_íåy
->
sh¨î
, 0, 
DIR_ENTRY_SHARERS_SIZE
);

99 
dú_íåy
->
sh¨îs
 = 0;

100 
	}
}

103 
	$dú_íåy_is_sh¨î
(
dú_t
 *
dú
, 
dú_íåy_t
 *
dú_íåy
, 
node
)

105 
	`as£π
(
node
 >0 &&Çodê< 
dú
->
nodes
);

106  (
dú_íåy
->
sh¨î
[
node
 / 8] & (1 << (node % 8))) > 0;

107 
	}
}

110 
	$dú_íåy_group_sh¨ed_‹_ow√d
(
dú_t
 *
dú
, 
x
, 
y
)

112 
dú_íåy_t
 *
dú_íåy
;

113 
z
;

114 
z
 = 0; z < 
dú
->
zsize
; z++) {

115 
dú_íåy
 = 
	`DIR_ENTRY
(
x
, 
y
, 
z
);

116 i‡(
dú_íåy
->
sh¨îs
 || dú_íåy->
ow√r
)

120 
	}
}

123 
dú_lock_t
 *
	$dú_lock_gë
(
dú_t
 *
dú
, 
x
, 
y
)

125 
dú_lock_t
 *
dú_lock
;

126 
	`as£π
(
x
 < 
dú
->
xsize
 && 
y
 < dú->
ysize
);

127 
dú_lock
 = &
dú
->dú_lock[
x
 * dú->
ysize
 + 
y
];

128 
	`ˇche_debug
(" %Œd dú_lock %∞-Ñërõve\n", (Ë
esim_cy˛e
, 
dú_lock
);

129  
dú_lock
;

130 
	}
}

133 
	$dú_lock_lock
(
dú_lock_t
 *
dú_lock
, 
evít
, 
m€si_°ack_t
 *
°ack
)

135 
	`ˇche_debug
(" dú_lock %∞-Üock\n", 
dú_lock
);

139 i‡(
dú_lock
->
lock
) {

140 
°ack
->
lock_√xt
 = 
dú_lock
->
lock_queue
;

141 
°ack
->
lock_evít
 = 
evít
;

142 
dú_lock
->
lock_queue
 = 
°ack
;

143 
	`ˇche_debug
(" 0x%xác˚s†su•íded\n", 
°ack
->
èg
);

148 
dú_lock
->
lock
 = 1;

150 
	}
}

153 
	$dú_lock_u∆ock
(
dú_lock_t
 *
dú_lock
)

155 
	`ˇche_debug
(" dú_lock %∞- u∆ock\n", 
dú_lock
);

158 
dú_lock
->
lock_queue
) {

159 
	`esim_scheduÀ_evít
(
dú_lock
->
lock_queue
->
lock_evít
, dir_lock->lock_queue, 1);

160 
	`ˇche_debug
(" 0x%xác˚s†ªsumed\n", 
dú_lock
->
lock_queue
->
èg
);

161 
dú_lock
->
lock_queue
 = dú_lock->lock_queue->
lock_√xt
;

165 
dú_lock
->
lock
 = 0;

166 
	}
}

	@libcachesystem/mmu.c

21 
	~"ˇchesy°em.h
"

25 
uöt32_t
 
	gmmu_∑ge_size
 = 1 << 12;

26 
uöt32_t
 
	gmmu_log_∑ge_size
;

27 
uöt32_t
 
	gmmu_∑ge_mask
;

31 
	#MMU_PAGE_HASH_SIZE
 (1 << 10)

	)

32 
	#MMU_PAGE_LIST_SIZE
 (1 << 10)

	)

36 
	smmu_∑ge_t
 {

37 
mmu_∑ge_t
 *
	m√xt
;

38 
dú_t
 *
	mdú
;

39 
	mmid
;

40 
uöt32_t
 
	mvéaddr
;

41 
uöt32_t
 
	mphaddr
;

45 
	smmu_t


48 
mmu_∑ge_t
 *
	m∑ge_hash
[
MMU_PAGE_HASH_SIZE
];

49 
mmu_∑ge_t
 **
	m∑ge_li°
;

50 
uöt32_t
 
	m∑ge_cou¡
;

51 
uöt32_t
 
	m∑ge_li°_size
;

56 
mmu_t
 *
	gmmu
;

59 
	$mmu_ªg_›ti⁄s
()

61 
	`›t_ªg_uöt32
("-∑ge_size", "Mem‹yÖagêsize", &
mmu_∑ge_size
);

62 
	}
}

65 
	$mmu_öô
()

68 i‡((
mmu_∑ge_size
 & (mmu_page_size - 1)))

69 
	`Áèl
("memoryÖage size must beÖower of 2");

70 
mmu_log_∑ge_size
 = 
	`log_ba£2
(
mmu_∑ge_size
);

71 
mmu_∑ge_mask
 = 
mmu_∑ge_size
 - 1;

74 
mmu
 = 
	`ˇŒoc
(1, (
mmu_t
));

75 
mmu
->
∑ge_li°
 = 
	`ˇŒoc
(
MMU_PAGE_LIST_SIZE
, (*));

76 
mmu
->
∑ge_li°_size
 = 
MMU_PAGE_LIST_SIZE
;

77 
	}
}

80 
	$mmu_d⁄e
()

82 
mmu_∑ge_t
 *
∑ge
;

83 
i
;

86 
i
 = 0; i < 
mmu
->
∑ge_cou¡
; i++) {

87 
∑ge
 = 
mmu
->
∑ge_li°
[
i
];

88 
	`dú_‰ì
(
∑ge
->
dú
);

89 
	`‰ì
(
∑ge
);

91 
	`‰ì
(
mmu
->
∑ge_li°
);

92 
	`‰ì
(
mmu
);

93 
	}
}

96 
mmu_∑ge_t
 *
	$mmu_gë_∑ge
(
mid
, 
uöt32_t
 
véaddr
)

98 
mmu_∑ge_t
 *
¥ev
, *
∑ge
;

99 
uöt32_t
 
èg
;

100 
idx
, 
node_cou¡
;

103 
idx
 = ((
véaddr
 >> 
mmu_log_∑ge_size
Ë+ 
mid
 * 23Ë% 
MMU_PAGE_HASH_SIZE
;

104 
èg
 = 
véaddr
 & ~
mmu_∑ge_mask
;

105 
¥ev
 = 
NULL
;

106 
∑ge
 = 
mmu
->
∑ge_hash
[
idx
];

107 
∑ge
) {

108 i‡(
∑ge
->
véaddr
 =
èg
 &&Öage->
mid
 == mid)

110 
¥ev
 = 
∑ge
;

111 
∑ge
 =Öage->
√xt
;

115 i‡(!
∑ge
) {

118 
∑ge
 = 
	`ˇŒoc
(1, (
mmu_∑ge_t
));

119 
node_cou¡
 = 
maö_mem‹y
->
höë
 ? maö_mem‹y->höë->
íd_node_cou¡
 : 1;

120 
∑ge
->
dú
 = 
	`dú_¸óã
(
mmu_∑ge_size
 / 
maö_mem‹y
->
bsize
, 1,

121 
maö_mem‹y
->
bsize
 / 
ˇche_mö_block_size
, 
node_cou¡
);

122 
∑ge
->
véaddr
 = 
èg
;

123 
∑ge
->
mid
 = mid;

124 
∑ge
->
phaddr
 = 
mmu
->
∑ge_cou¡
 << 
mmu_log_∑ge_size
;

127 i‡(
mmu
->
∑ge_cou¡
 =mmu->
∑ge_li°_size
) {

128 
mmu
->
∑ge_li°_size
 += mmu->page_list_size;

129 
mmu
->
∑ge_li°
 = 
	`ªÆloc
(mmu->page_list,

130 
mmu
->
∑ge_li°_size
 * (*));

131 i‡(!
mmu
->
∑ge_li°
)

132 
	`ab‹t
();

134 
mmu
->
∑ge_li°
[mmu->
∑ge_cou¡
++] = 
∑ge
;

135 
∑ge
->
√xt
 = 
mmu
->
∑ge_hash
[
idx
];

136 
mmu
->
∑ge_hash
[
idx
] = 
∑ge
;

137 
¥ev
 = 
NULL
;

141 i‡(
¥ev
) {

142 
¥ev
->
√xt
 = 
∑ge
->next;

143 
∑ge
->
√xt
 = 
mmu
->
∑ge_hash
[
idx
];

144 
mmu
->
∑ge_hash
[
idx
] = 
∑ge
;

148  
∑ge
;

149 
	}
}

152 
uöt32_t
 
	$mmu_å™¶©e
(
mid
, 
uöt32_t
 
véaddr
)

154 
mmu_∑ge_t
 *
∑ge
;

155 
uöt32_t
 
offs
, 
phaddr
;

157 
offs
 = 
véaddr
 & 
mmu_∑ge_mask
;

158 
∑ge
 = 
	`mmu_gë_∑ge
(
mid
, 
véaddr
);

159 
	`as£π
(
∑ge
);

160 
phaddr
 = 
∑ge
->phadd∏| 
offs
;

161  
phaddr
;

162 
	}
}

165 
dú_t
 *
	$mmu_gë_dú
(
uöt32_t
 
phaddr
)

167 
uöt32_t
 
idx
;

168 
mmu_∑ge_t
 *
∑ge
;

171 
idx
 = 
phaddr
 >> 
mmu_log_∑ge_size
;

172 i‡(
idx
 >
mmu
->
∑ge_cou¡
)

173  
NULL
;

174 
∑ge
 = 
mmu
->
∑ge_li°
[
idx
];

175  
∑ge
->
dú
;

176 
	}
}

179 
	$mmu_vÆid_phaddr
(
uöt32_t
 
phaddr
)

181 
uöt32_t
 
idx
;

182 
idx
 = 
phaddr
 >> 
mmu_log_∑ge_size
;

183  
idx
 < 
mmu
->
∑ge_cou¡
;

184 
	}
}

	@libcachesystem/moesi.c

19 
	~"ˇchesy°em.h
"

24 
	gˇche_debug_ˇãg‹y
;

31 
ªpos_t
 *
	gm€si_°ack_ªpos
;

32 
uöt64_t
 
	gm€si_°ack_id
 = 0;

34 
	#CYCLE
 ((Ë
esim_cy˛e
)

	)

35 
	#ID
 ((Ë
°ack
->
id
)

	)

36 
	#RETRY_LATENCY
 (
	`øndom
(Ë% 
cˇche
->
œt
 + cˇche->œt)

	)

38 
m€si_°ack_t
 *
	$m€si_°ack_¸óã
(
uöt64_t
 
id
, 
cˇche_t
 *
cˇche
,

39 
uöt32_t
 
addr
, 
ªãvít
, *
ªt°ack
)

41 
m€si_°ack_t
 *
°ack
;

42 
°ack
 = 
	`ªpos_¸óã_obje˘
(
m€si_°ack_ªpos
);

43 
°ack
->
cˇche
 = ccache;

44 
°ack
->
addr
 =áddr;

45 
°ack
->
ªãvít
 =Ñetevent;

46 
°ack
->
ªt°ack
 =Ñetstack;

47 
°ack
->
id
 = id;

48  
°ack
;

49 
	}
}

52 
	$m€si_°ack_ªtu∫
(
m€si_°ack_t
 *
°ack
)

54 
ªãvít
 = 
°ack
->retevent;

55 *
ªt°ack
 = 
°ack
->retstack;

57 
	`ªpos_‰ì_obje˘
(
m€si_°ack_ªpos
, 
°ack
);

58 
	`esim_scheduÀ_evít
(
ªãvít
, 
ªt°ack
, 0);

59 
	}
}

66 
	gEV_MOESI_FIND_AND_LOCK
;

67 
	gEV_MOESI_FIND_AND_LOCK_FINISH
;

69 
	gEV_MOESI_LOAD
;

70 
	gEV_MOESI_LOAD_ACTION
;

71 
	gEV_MOESI_LOAD_MISS
;

72 
	gEV_MOESI_LOAD_FINISH
;

74 
	gEV_MOESI_STORE
;

75 
	gEV_MOESI_STORE_ACTION
;

76 
	gEV_MOESI_STORE_FINISH
;

78 
	gEV_MOESI_EVICT
;

79 
	gEV_MOESI_EVICT_ACTION
;

80 
	gEV_MOESI_EVICT_RECEIVE
;

81 
	gEV_MOESI_EVICT_WRITEBACK
;

82 
	gEV_MOESI_EVICT_WRITEBACK_EXCLUSIVE
;

83 
	gEV_MOESI_EVICT_WRITEBACK_FINISH
;

84 
	gEV_MOESI_EVICT_PROCESS
;

85 
	gEV_MOESI_EVICT_REPLY
;

86 
	gEV_MOESI_EVICT_REPLY_RECEIVE
;

87 
	gEV_MOESI_EVICT_FINISH
;

89 
	gEV_MOESI_WRITE_REQUEST
;

90 
	gEV_MOESI_WRITE_REQUEST_RECEIVE
;

91 
	gEV_MOESI_WRITE_REQUEST_ACTION
;

92 
	gEV_MOESI_WRITE_REQUEST_EXCLUSIVE
;

93 
	gEV_MOESI_WRITE_REQUEST_UPDOWN
;

94 
	gEV_MOESI_WRITE_REQUEST_UPDOWN_FINISH
;

95 
	gEV_MOESI_WRITE_REQUEST_DOWNUP
;

96 
	gEV_MOESI_WRITE_REQUEST_REPLY
;

97 
	gEV_MOESI_WRITE_REQUEST_FINISH
;

99 
	gEV_MOESI_READ_REQUEST
;

100 
	gEV_MOESI_READ_REQUEST_RECEIVE
;

101 
	gEV_MOESI_READ_REQUEST_ACTION
;

102 
	gEV_MOESI_READ_REQUEST_UPDOWN
;

103 
	gEV_MOESI_READ_REQUEST_UPDOWN_MISS
;

104 
	gEV_MOESI_READ_REQUEST_UPDOWN_FINISH
;

105 
	gEV_MOESI_READ_REQUEST_DOWNUP
;

106 
	gEV_MOESI_READ_REQUEST_DOWNUP_FINISH
;

107 
	gEV_MOESI_READ_REQUEST_REPLY
;

108 
	gEV_MOESI_READ_REQUEST_FINISH
;

110 
	gEV_MOESI_INVALIDATE
;

111 
	gEV_MOESI_INVALIDATE_FINISH
;

119 
	$m€si_öô
()

122 
ˇche_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

125 
EV_MOESI_FIND_AND_LOCK
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_föd_™d_lock
);

126 
EV_MOESI_FIND_AND_LOCK_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_föd_™d_lock
);

128 
EV_MOESI_LOAD
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_lﬂd
);

129 
EV_MOESI_LOAD_ACTION
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_lﬂd
);

130 
EV_MOESI_LOAD_MISS
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_lﬂd
);

131 
EV_MOESI_LOAD_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_lﬂd
);

133 
EV_MOESI_STORE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_°‹e
);

134 
EV_MOESI_STORE_ACTION
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_°‹e
);

135 
EV_MOESI_STORE_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_°‹e
);

137 
EV_MOESI_EVICT
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

138 
EV_MOESI_EVICT_ACTION
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

139 
EV_MOESI_EVICT_RECEIVE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

140 
EV_MOESI_EVICT_WRITEBACK
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

141 
EV_MOESI_EVICT_WRITEBACK_EXCLUSIVE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

142 
EV_MOESI_EVICT_WRITEBACK_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

143 
EV_MOESI_EVICT_PROCESS
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

144 
EV_MOESI_EVICT_REPLY
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

145 
EV_MOESI_EVICT_REPLY_RECEIVE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

146 
EV_MOESI_EVICT_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_evi˘
);

148 
EV_MOESI_WRITE_REQUEST
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

149 
EV_MOESI_WRITE_REQUEST_RECEIVE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

150 
EV_MOESI_WRITE_REQUEST_ACTION
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

151 
EV_MOESI_WRITE_REQUEST_EXCLUSIVE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

152 
EV_MOESI_WRITE_REQUEST_UPDOWN
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

153 
EV_MOESI_WRITE_REQUEST_UPDOWN_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

154 
EV_MOESI_WRITE_REQUEST_DOWNUP
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

155 
EV_MOESI_WRITE_REQUEST_REPLY
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

156 
EV_MOESI_WRITE_REQUEST_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_wrôe_ªque°
);

158 
EV_MOESI_READ_REQUEST
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

159 
EV_MOESI_READ_REQUEST_RECEIVE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

160 
EV_MOESI_READ_REQUEST_ACTION
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

161 
EV_MOESI_READ_REQUEST_UPDOWN
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

162 
EV_MOESI_READ_REQUEST_UPDOWN_MISS
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

163 
EV_MOESI_READ_REQUEST_UPDOWN_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

164 
EV_MOESI_READ_REQUEST_DOWNUP
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

165 
EV_MOESI_READ_REQUEST_DOWNUP_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

166 
EV_MOESI_READ_REQUEST_REPLY
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

167 
EV_MOESI_READ_REQUEST_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_ªad_ªque°
);

169 
EV_MOESI_INVALIDATE
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_övÆid©e
);

170 
EV_MOESI_INVALIDATE_FINISH
 = 
	`esim_ªgi°î_evít
(
m€si_h™dÀr_övÆid©e
);

173 
m€si_°ack_ªpos
 = 
	`ªpos_¸óã
((
m€si_°ack_t
),

175 
	}
}

178 
	$m€si_d⁄e
()

180 
	`ªpos_‰ì
(
m€si_°ack_ªpos
);

181 
	}
}

184 
	$m€si_h™dÀr_föd_™d_lock
(
evít
, *
d©a
)

186 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
ªt
 = sèck->
ªt°ack
, *
√w°ack
;

187 
cˇche_t
 *
cˇche
 = 
°ack
->ccache;

189 i‡(
evít
 =
EV_MOESI_FIND_AND_LOCK
)

191 
hô
;

192 
	`ˇche_debug
(" %Œd %Œd 0x%x %†födándÜock (blockög=%d)\n", 
CYCLE
, 
ID
,

193 
°ack
->
addr
, 
cˇche
->
«me
, sèck->
blockög
);

196 
ªt
->
îr
 = 0;

197 
ªt
->
£t
 = 0;

198 
ªt
->
way
 = 0;

199 
ªt
->
°©us
 = 0;

200 
ªt
->
èg
 = 0;

203 
hô
 = 
	`cˇche_föd_block
(
cˇche
, 
°ack
->
addr
, &°ack->
£t
,

204 &
°ack
->
way
, &°ack->
èg
, &°ack->
°©us
);

205 i‡(
hô
)

206 
	`ˇche_debug
(" %Œd 0x%x %†hô: së=%d, way=%d, sètus=%d\n", 
ID
,

207 
°ack
->
èg
, 
cˇche
->
«me
, sèck->
£t
, sèck->
way
, sèck->
°©us
);

210 
cˇche
->
ac˚s£s
++;

211 i‡(
hô
)

212 
cˇche
->
hôs
++;

213 i‡(
°ack
->
ªad
) {

214 
cˇche
->
ªads
++;

215 
°ack
->
blockög
 ? 
cˇche
->
blockög_ªads
++ : cˇche->
n⁄_blockög_ªads
++;

216 i‡(
hô
)

217 
cˇche
->
ªad_hôs
++;

219 
cˇche
->
wrôes
++;

220 
°ack
->
blockög
 ? 
cˇche
->
blockög_wrôes
++ : cˇche->
n⁄_blockög_wrôes
++;

221 i‡(
hô
)

222 
cˇche
->
wrôe_hôs
++;

224 i‡(!
°ack
->
ªåy
) {

225 
cˇche
->
no_ªåy_ac˚s£s
++;

226 i‡(
hô
)

227 
cˇche
->
no_ªåy_hôs
++;

228 i‡(
°ack
->
ªad
) {

229 
cˇche
->
no_ªåy_ªads
++;

230 i‡(
hô
)

231 
cˇche
->
no_ªåy_ªad_hôs
++;

233 
cˇche
->
no_ªåy_wrôes
++;

234 i‡(
hô
)

235 
cˇche
->
no_ªåy_wrôe_hôs
++;

240 i‡(!
hô
) {

242 
	`as£π
(!
°ack
->
blockög
);

243 
	`as£π
(
cˇche
 !
maö_mem‹y
);

246 
°ack
->
way
 = 
	`ˇche_ª∂a˚_block
(
cˇche
->
ˇche
, sèck->
£t
);

247 
	`ˇche_gë_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
, 
NULL
, &°ack->
°©us
);

248 
	`as£π
(
°ack
->
°©us
 || !
	`dú_íåy_group_sh¨ed_‹_ow√d
(
cˇche
->
dú
,

249 
°ack
->
£t
, sèck->
way
));

250 
	`ˇche_debug
(" %lld 0x%x %s miss ->Üru: set=%d, way=%d, status=%d\n",

251 
ID
, 
°ack
->
èg
, 
cˇche
->
«me
, sèck->
£t
, sèck->
way
, sèck->
°©us
);

255 
°ack
->
dú_lock
 = 
	`cˇche_gë_dú_lock
(
cˇche
, sèck->
£t
, sèck->
way
);

256 i‡(
°ack
->
dú_lock
->
lock
 && !°ack->
blockög
) {

257 
	`ˇche_debug
(" %lld 0x%x %s blockálreadyÜocked: set=%d, way=%d\n",

258 
ID
, 
°ack
->
èg
, 
cˇche
->
«me
, sèck->
£t
, sèck->
way
);

259 
ªt
->
îr
 = 1;

260 
	`m€si_°ack_ªtu∫
(
°ack
);

263 i‡(!
	`dú_lock_lock
(
°ack
->
dú_lock
, 
EV_MOESI_FIND_AND_LOCK
, stack))

268 i‡(
cˇche
->
ˇche
)

269 
	`ˇche_£t_å™sõ¡_èg
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
, sèck->
èg
);

272 i‡(!
hô
 && 
°ack
->
°©us
) {

273 
°ack
->
evi˘i⁄
 = 1;

274 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, 0,

275 
EV_MOESI_FIND_AND_LOCK_FINISH
, 
°ack
);

276 
√w°ack
->
£t
 = 
°ack
->set;

277 
√w°ack
->
way
 = 
°ack
->way;

278 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT
, 
√w°ack
, 
cˇche
->
œt
);

283 
	`esim_scheduÀ_evít
(
EV_MOESI_FIND_AND_LOCK_FINISH
, 
°ack
, 
cˇche
->
œt
);

287 i‡(
evít
 =
EV_MOESI_FIND_AND_LOCK_FINISH
)

289 
	`ˇche_debug
(" %Œd %Œd 0x%x %†födándÜock föish (îr=%d)\n", 
CYCLE
, 
ID
,

290 
°ack
->
èg
, 
cˇche
->
«me
, sèck->
îr
);

293 i‡(
°ack
->
îr
) {

294 
	`ˇche_gë_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
, 
NULL
, &°ack->
°©us
);

295 
	`as£π
(
°ack
->
°©us
);

296 
	`as£π
(
°ack
->
evi˘i⁄
);

297 
ªt
->
îr
 = 1;

298 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

299 
	`m€si_°ack_ªtu∫
(
°ack
);

304 i‡(
°ack
->
evi˘i⁄
) {

305 
cˇche
->
evi˘i⁄s
++;

306 
	`ˇche_gë_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
, 
NULL
, &°ack->
°©us
);

307 
	`as£π
(!
°ack
->
°©us
);

311 
ªt
->
îr
 = 0;

312 
ªt
->
£t
 = 
°ack
->set;

313 
ªt
->
way
 = 
°ack
->way;

314 
ªt
->
°©us
 = 
°ack
->status;

315 
ªt
->
èg
 = 
°ack
->tag;

316 
ªt
->
dú_lock
 = 
°ack
->dir_lock;

317 
	`m€si_°ack_ªtu∫
(
°ack
);

321 
	`ab‹t
();

322 
	}
}

325 
	$m€si_h™dÀr_lﬂd
(
evít
, *
d©a
)

327 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
√w°ack
;

328 
cˇche_t
 *
cˇche
 = 
°ack
->ccache;

330 i‡(
evít
 =
EV_MOESI_LOAD
)

332 
	`ˇche_debug
("%Œd %Œd 0x%x %†lﬂd\n", 
CYCLE
, 
ID
,

333 
°ack
->
addr
, 
cˇche
->
«me
);

336 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, sèck->
addr
,

337 
EV_MOESI_LOAD_ACTION
, 
°ack
);

338 
√w°ack
->
blockög
 = 0;

339 
√w°ack
->
ªad
 = 1;

340 
√w°ack
->
ªåy
 = 
°ack
->retry;

341 
	`esim_scheduÀ_evít
(
EV_MOESI_FIND_AND_LOCK
, 
√w°ack
, 0);

345 i‡(
evít
 =
EV_MOESI_LOAD_ACTION
)

347 
ªåy_œt
;

348 
	`ˇche_debug
(" %Œd %Œd 0x%x %†lﬂdá˘i⁄\n", 
CYCLE
, 
ID
,

349 
°ack
->
èg
, 
cˇche
->
«me
);

352 i‡(
°ack
->
îr
) {

353 
cˇche
->
ªad_ªåõs
++;

354 
ªåy_œt
 = 
RETRY_LATENCY
;

355 
	`ˇche_debug
("ÜockÉº‹,Ñëryög i¿%d cy˛es\n", 
ªåy_œt
);

356 
°ack
->
ªåy
 = 1;

357 
	`esim_scheduÀ_evít
(
EV_MOESI_LOAD
, 
°ack
, 
ªåy_œt
);

362 i‡(
°ack
->
°©us
) {

363 
	`esim_scheduÀ_evít
(
EV_MOESI_LOAD_FINISH
, 
°ack
, 0);

368 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, sèck->
èg
,

369 
EV_MOESI_LOAD_MISS
, 
°ack
);

370 
√w°ack
->
èrgë
 = 
cˇche
->
√xt
;

371 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST
, 
√w°ack
, 0);

375 i‡(
evít
 =
EV_MOESI_LOAD_MISS
)

377 
ªåy_œt
;

378 
	`ˇche_debug
(" %Œd %Œd 0x%x %†lﬂd miss\n", 
CYCLE
, 
ID
,

379 
°ack
->
èg
, 
cˇche
->
«me
);

382 i‡(
°ack
->
îr
) {

383 
cˇche
->
ªad_ªåõs
++;

384 
ªåy_œt
 = 
RETRY_LATENCY
;

385 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

386 
	`ˇche_debug
("ÜockÉº‹,Ñëryög i¿%d cy˛es\n", 
ªåy_œt
);

387 
°ack
->
ªåy
 = 1;

388 
	`esim_scheduÀ_evít
(
EV_MOESI_LOAD
, 
°ack
, 
ªåy_œt
);

394 
	`ˇche_£t_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
, sèck->
èg
,

395 
°ack
->
sh¨ed
 ? 
m€si_°©us_sh¨ed
 : 
m€si_°©us_ex˛usive
);

398 
	`esim_scheduÀ_evít
(
EV_MOESI_LOAD_FINISH
, 
°ack
, 0);

402 i‡(
evít
 =
EV_MOESI_LOAD_FINISH
)

404 
	`ˇche_debug
("%Œd %Œd 0x%x %†lﬂd föish\n", 
CYCLE
, 
ID
,

405 
°ack
->
èg
, 
cˇche
->
«me
);

408 i‡(
cˇche
->
ˇche
)

409 
	`ˇche_ac˚ss_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
);

410 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

411 
	`m€si_°ack_ªtu∫
(
°ack
);

415 
	`ab‹t
();

416 
	}
}

419 
	$m€si_h™dÀr_°‹e
(
evít
, *
d©a
)

421 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
√w°ack
;

422 
cˇche_t
 *
cˇche
 = 
°ack
->ccache;

424 i‡(
evít
 =
EV_MOESI_STORE
)

426 
	`ˇche_debug
("%Œd %Œd 0x%x %†°‹e\n", 
CYCLE
, 
ID
,

427 
°ack
->
addr
, 
cˇche
->
«me
);

430 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, sèck->
addr
,

431 
EV_MOESI_STORE_ACTION
, 
°ack
);

432 
√w°ack
->
blockög
 = 0;

433 
√w°ack
->
ªad
 = 0;

434 
√w°ack
->
ªåy
 = 
°ack
->retry;

435 
	`esim_scheduÀ_evít
(
EV_MOESI_FIND_AND_LOCK
, 
√w°ack
, 0);

439 i‡(
evít
 =
EV_MOESI_STORE_ACTION
)

441 
ªåy_œt
;

442 
	`ˇche_debug
(" %Œd %Œd 0x%x %†°‹êa˘i⁄\n", 
CYCLE
, 
ID
,

443 
°ack
->
èg
, 
cˇche
->
«me
);

446 i‡(
°ack
->
îr
) {

447 
cˇche
->
wrôe_ªåõs
++;

448 
ªåy_œt
 = 
RETRY_LATENCY
;

449 
	`ˇche_debug
("ÜockÉº‹,Ñëryög i¿%d cy˛es\n", 
ªåy_œt
);

450 
°ack
->
ªåy
 = 1;

451 
	`esim_scheduÀ_evít
(
EV_MOESI_STORE
, 
°ack
, 
ªåy_œt
);

456 i‡(
°ack
->
°©us
 =
m€si_°©us_modifõd
 ||

457 
°ack
->
°©us
 =
m€si_°©us_ex˛usive
)

459 
	`esim_scheduÀ_evít
(
EV_MOESI_STORE_FINISH
, 
°ack
, 0);

464 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, sèck->
èg
,

465 
EV_MOESI_STORE_FINISH
, 
°ack
);

466 
√w°ack
->
èrgë
 = 
cˇche
->
√xt
;

467 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST
, 
√w°ack
, 0);

471 i‡(
evít
 =
EV_MOESI_STORE_FINISH
)

473 
ªåy_œt
;

474 
	`ˇche_debug
("%Œd %Œd 0x%x %†°‹êföish\n", 
CYCLE
, 
ID
,

475 
°ack
->
èg
, 
cˇche
->
«me
);

478 i‡(
°ack
->
îr
) {

479 
cˇche
->
wrôe_ªåõs
++;

480 
ªåy_œt
 = 
RETRY_LATENCY
;

481 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

482 
	`ˇche_debug
("ÜockÉº‹,Ñëryög i¿%d cy˛es\n", 
ªåy_œt
);

483 
°ack
->
ªåy
 = 1;

484 
	`esim_scheduÀ_evít
(
EV_MOESI_STORE
, 
°ack
, 
ªåy_œt
);

489 i‡(
cˇche
->
ˇche
) {

490 
	`ˇche_ac˚ss_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
);

491 
	`ˇche_£t_block
(
cˇche
->
ˇche
, 
°ack
->
£t
, sèck->
way
,

492 
°ack
->
èg
, 
m€si_°©us_modifõd
);

494 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

495 
	`m€si_°ack_ªtu∫
(
°ack
);

499 
	`ab‹t
();

500 
	}
}

503 
	$m€si_h™dÀr_evi˘
(
evít
, *
d©a
)

505 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
ªt
 = sèck->
ªt°ack
, *
√w°ack
;

506 
cˇche_t
 *
cˇche
 = 
°ack
->cˇche, *
èrgë
 = stack->target;

507 
dú_t
 *
dú
;

508 
dú_íåy_t
 *
dú_íåy
;

509 
uöt32_t
 
dú_íåy_èg
, 
z
;

511 i‡(
evít
 =
EV_MOESI_EVICT
)

514 
ªt
->
îr
 = 0;

517 
	`cˇche_gë_block
(
cˇche
, 
°ack
->
£t
, sèck->
way
, &°ack->
èg
, &°ack->
°©us
);

518 
	`as£π
(
°ack
->
°©us
 || !
	`dú_íåy_group_sh¨ed_‹_ow√d
(
cˇche
->
dú
,

519 
°ack
->
£t
, sèck->
way
));

520 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘ (£t=%d, way=%d, sètus=%d)\n", 
CYCLE
, 
ID
,

521 
°ack
->
èg
, 
cˇche
->
«me
, sèck->
£t
, sèck->
way
, sèck->
°©us
);

524 
°ack
->
§c_£t
 = sèck->
£t
;

525 
°ack
->
§c_way
 = sèck->
way
;

526 
°ack
->
§c_èg
 = sèck->
èg
;

527 
°ack
->
èrgë
 =Å¨gë = 
cˇche
->
√xt
;

530 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, 0,

531 
EV_MOESI_EVICT_ACTION
, 
°ack
);

532 
√w°ack
->
ex˚±
 = 
NULL
;

533 
√w°ack
->
£t
 = 
°ack
->set;

534 
√w°ack
->
way
 = 
°ack
->way;

535 
	`esim_scheduÀ_evít
(
EV_MOESI_INVALIDATE
, 
√w°ack
, 0);

539 i‡(
evít
 =
EV_MOESI_EVICT_ACTION
)

541 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘á˘i⁄\n", 
CYCLE
, 
ID
,

542 
°ack
->
èg
, 
cˇche
->
«me
);

545 i‡(
°ack
->
°©us
 =
m€si_°©us_övÆid
) {

546 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_FINISH
, 
°ack
, 0);

551 i‡(
°ack
->
°©us
 =
m€si_°©us_modifõd
 ||

552 
°ack
->
°©us
 =
m€si_°©us_ow√d
) {

553 
	`√t_£nd_ev
(
cˇche
->
l⁄ë
, cˇche->
loid
, 0,

554 
cˇche
->
bsize
 + 8, 
EV_MOESI_EVICT_RECEIVE
, 
°ack
);

555 
°ack
->
wrôeback
 = 1;

560 
	`√t_£nd_ev
(
cˇche
->
l⁄ë
, cˇche->
loid
, 0, 8,

561 
EV_MOESI_EVICT_RECEIVE
, 
°ack
);

565 i‡(
evít
 =
EV_MOESI_EVICT_RECEIVE
) {

566 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘Ñe˚ive\n", 
CYCLE
, 
ID
,

567 
°ack
->
èg
, 
èrgë
->
«me
);

570 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, sèck->
§c_èg
,

571 
EV_MOESI_EVICT_WRITEBACK
, 
°ack
);

572 
√w°ack
->
blockög
 = 0;

573 
√w°ack
->
ªad
 = 0;

574 
√w°ack
->
ªåy
 = 0;

575 
	`esim_scheduÀ_evít
(
EV_MOESI_FIND_AND_LOCK
, 
√w°ack
, 0);

579 i‡(
evít
 =
EV_MOESI_EVICT_WRITEBACK
)

581 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘ wrôeback\n", 
CYCLE
, 
ID
,

582 
°ack
->
èg
, 
èrgë
->
«me
);

585 i‡(
°ack
->
îr
) {

586 
ªt
->
îr
 = 1;

587 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_REPLY
, 
°ack
, 0);

592 i‡(!
°ack
->
wrôeback
) {

593 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_PROCESS
, 
°ack
, 0);

598 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, 0,

599 
EV_MOESI_EVICT_WRITEBACK_EXCLUSIVE
, 
°ack
);

600 
√w°ack
->
ex˚±
 = 
cˇche
;

601 
√w°ack
->
£t
 = 
°ack
->set;

602 
√w°ack
->
way
 = 
°ack
->way;

603 
	`esim_scheduÀ_evít
(
EV_MOESI_INVALIDATE
, 
√w°ack
, 0);

607 i‡(
evít
 =
EV_MOESI_EVICT_WRITEBACK_EXCLUSIVE
)

609 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘ wrôebackÉx˛usive\n", 
CYCLE
, 
ID
,

610 
°ack
->
èg
, 
èrgë
->
«me
);

613 
	`as£π
(
°ack
->
°©us
 !
m€si_°©us_övÆid
);

614 i‡(
°ack
->
°©us
 =
m€si_°©us_ow√d
 || stack->status ==

615 
m€si_°©us_sh¨ed
)

617 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, sèck->
èg
,

618 
EV_MOESI_EVICT_WRITEBACK_FINISH
, 
°ack
);

619 
√w°ack
->
èrgë
 =Å¨gë->
√xt
;

620 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST
, 
√w°ack
, 0);

625 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_WRITEBACK_FINISH
, 
°ack
, 0);

629 i‡(
evít
 =
EV_MOESI_EVICT_WRITEBACK_FINISH
)

631 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘ wrôeback föish\n", 
CYCLE
, 
ID
,

632 
°ack
->
èg
, 
èrgë
->
«me
);

635 i‡(
°ack
->
îr
) {

636 
ªt
->
îr
 = 1;

637 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

638 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_REPLY
, 
°ack
, 0);

643 i‡(
èrgë
->
ˇche
) {

644 
	`ˇche_£t_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
, sèck->
èg
,

645 
m€si_°©us_modifõd
);

646 
	`ˇche_ac˚ss_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
);

648 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_PROCESS
, 
°ack
, 0);

652 i‡(
evít
 =
EV_MOESI_EVICT_PROCESS
)

655 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘Öro˚ss\n", 
CYCLE
, 
ID
,

656 
°ack
->
èg
, 
èrgë
->
«me
);

659 
dú
 = 
	`cˇche_gë_dú
(
èrgë
, 
°ack
->
èg
);

660 
z
 = 0; z < 
dú
->
zsize
; z++) {

661 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

662 i‡(
dú_íåy_èg
 < 
°ack
->
§c_èg
 || dú_íåy_èg >°ack->§c_èg + 
cˇche
->
bsize
)

664 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

665 
	`dú_íåy_˛ór_sh¨î
(
dú
, 
dú_íåy
, 
cˇche
->
loid
);

666 i‡(
dú_íåy
->
ow√r
 =
cˇche
->
loid
)

667 
dú_íåy
->
ow√r
 = 0;

669 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

671 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_REPLY
, 
°ack
, 0);

675 i‡(
evít
 =
EV_MOESI_EVICT_REPLY
)

677 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘Ñïly\n", 
CYCLE
, 
ID
,

678 
°ack
->
èg
, 
èrgë
->
«me
);

680 
	`√t_£nd_ev
(
èrgë
->
höë
, 0, 
cˇche
->
loid
, 8,

681 
EV_MOESI_EVICT_REPLY_RECEIVE
, 
°ack
);

686 i‡(
evít
 =
EV_MOESI_EVICT_REPLY_RECEIVE
)

688 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘ÑïlyÑe˚ive\n", 
CYCLE
, 
ID
,

689 
°ack
->
èg
, 
cˇche
->
«me
);

692 i‡(!
°ack
->
îr
)

693 
	`ˇche_£t_block
(
cˇche
->
ˇche
, 
°ack
->
§c_£t
, sèck->
§c_way
,

694 0, 
m€si_°©us_övÆid
);

695 
	`as£π
(!
	`dú_íåy_group_sh¨ed_‹_ow√d
(
cˇche
->
dú
,

696 
°ack
->
§c_£t
, sèck->
§c_way
));

697 
	`esim_scheduÀ_evít
(
EV_MOESI_EVICT_FINISH
, 
°ack
, 0);

701 i‡(
evít
 =
EV_MOESI_EVICT_FINISH
)

703 
	`ˇche_debug
(" %Œd %Œd 0x%x %†evi˘ föish\n", 
CYCLE
, 
ID
,

704 
°ack
->
èg
, 
cˇche
->
«me
);

706 
	`m€si_°ack_ªtu∫
(
°ack
);

710 
	`ab‹t
();

711 
	}
}

714 
	$m€si_h™dÀr_ªad_ªque°
(
evít
, *
d©a
)

716 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
ªt
 = sèck->
ªt°ack
, *
√w°ack
;

717 
cˇche_t
 *
cˇche
 = 
°ack
->cˇche, *
èrgë
 = stack->target;

718 
uöt32_t
 
dú_íåy_èg
, 
z
;

719 
dú_t
 *
dú
;

720 
dú_íåy_t
 *
dú_íåy
;

722 i‡(
evít
 =
EV_MOESI_READ_REQUEST
)

724 
√t_t
 *
√t
;

725 
§c
, 
de°
;

726 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque°\n", 
CYCLE
, 
ID
,

727 
°ack
->
addr
, 
cˇche
->
«me
);

730 
ªt
->
sh¨ed
 = 0;

731 
ªt
->
îr
 = 0;

734 
	`as£π
(
cˇche
->
√xt
 =
èrgë
 ||Åarget->next == ccache);

735 
√t
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
l⁄ë
 : cˇche->
höë
;

736 
§c
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
loid
 : 0;

737 
de°
 = 
cˇche
->
√xt
 =
èrgë
 ? 0 :Å¨gë->
loid
;

738 
	`√t_£nd_ev
(
√t
, 
§c
, 
de°
, 8, 
EV_MOESI_READ_REQUEST_RECEIVE
, 
°ack
);

742 i‡(
evít
 =
EV_MOESI_READ_REQUEST_RECEIVE
)

744 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque°Ñe˚ive\n", 
CYCLE
, 
ID
,

745 
°ack
->
addr
, 
èrgë
->
«me
);

748 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, sèck->
addr
,

749 
EV_MOESI_READ_REQUEST_ACTION
, 
°ack
);

750 
√w°ack
->
blockög
 = 
èrgë
->
√xt
 =
cˇche
;

751 
√w°ack
->
ªad
 = 1;

752 
√w°ack
->
ªåy
 = 0;

753 
	`esim_scheduÀ_evít
(
EV_MOESI_FIND_AND_LOCK
, 
√w°ack
, 0);

757 i‡(
evít
 =
EV_MOESI_READ_REQUEST_ACTION
)

759 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque°á˘i⁄\n", 
CYCLE
, 
ID
,

760 
°ack
->
èg
, 
èrgë
->
«me
);

764 i‡(
°ack
->
îr
) {

765 
	`as£π
(
cˇche
->
√xt
 =
èrgë
);

766 
ªt
->
îr
 = 1;

767 
°ack
->
ª•⁄£
 = 8;

768 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_REPLY
, 
°ack
, 0);

771 
	`esim_scheduÀ_evít
(
cˇche
->
√xt
 =
èrgë
 ? 
EV_MOESI_READ_REQUEST_UPDOWN
 :

772 
EV_MOESI_READ_REQUEST_DOWNUP
, 
°ack
, 0);

776 i‡(
evít
 =
EV_MOESI_READ_REQUEST_UPDOWN
)

778 
cˇche_t
 *
ow√r
;

780 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque° updown\n", 
CYCLE
, 
ID
,

781 
°ack
->
èg
, 
èrgë
->
«me
);

782 
°ack
->
≥ndög
 = 1;

784 i‡(
°ack
->
°©us
) {

789 
	`as£π
(
°ack
->
addr
 % 
cˇche
->
bsize
 == 0);

790 
dú
 = 
	`cˇche_gë_dú
(
èrgë
, 
°ack
->
èg
);

791 
z
 = 0; z < 
dú
->
zsize
; z++) {

792 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

793 i‡(
dú_íåy_èg
 < 
°ack
->
addr
 || dú_íåy_èg >°ack->add∏+ 
cˇche
->
bsize
)

795 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

796 
	`as£π
(
dú_íåy
->
ow√r
 !
cˇche
->
loid
);

800 
z
 = 0; z < 
dú
->
zsize
; z++) {

801 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

802 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

803 i‡(!
dú_íåy
->
ow√r
)

805 i‡(
dú_íåy
->
ow√r
 =
cˇche
->
loid
)

807 
ow√r
 = 
	`√t_gë_node_d©a
(
èrgë
->
höë
, 
dú_íåy
->owner);

808 i‡(
dú_íåy_èg
 % 
ow√r
->
bsize
)

812 
°ack
->
≥ndög
++;

813 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, 
dú_íåy_èg
,

814 
EV_MOESI_READ_REQUEST_UPDOWN_FINISH
, 
°ack
);

815 
√w°ack
->
èrgë
 = 
ow√r
;

816 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST
, 
√w°ack
, 0);

818 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_UPDOWN_FINISH
, 
°ack
, 0);

823 
	`as£π
(!
	`dú_íåy_group_sh¨ed_‹_ow√d
(
èrgë
->
dú
,

824 
°ack
->
£t
, sèck->
way
));

825 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, sèck->
èg
,

826 
EV_MOESI_READ_REQUEST_UPDOWN_MISS
, 
°ack
);

827 
√w°ack
->
èrgë
 =Å¨gë->
√xt
;

828 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST
, 
√w°ack
, 0);

833 i‡(
evít
 =
EV_MOESI_READ_REQUEST_UPDOWN_MISS
)

835 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque° updow¿miss\n", 
CYCLE
, 
ID
,

836 
°ack
->
èg
, 
èrgë
->
«me
);

839 i‡(
°ack
->
îr
) {

840 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

841 
ªt
->
îr
 = 1;

842 
°ack
->
ª•⁄£
 = 8;

843 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_REPLY
, 
°ack
, 0);

850 
	`ˇche_£t_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
, sèck->
èg
,

851 
°ack
->
sh¨ed
 ? 
m€si_°©us_sh¨ed
 : 
m€si_°©us_ex˛usive
);

852 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_UPDOWN_FINISH
, 
°ack
, 0);

856 i‡(
evít
 =
EV_MOESI_READ_REQUEST_UPDOWN_FINISH
)

858 
sh¨ed
;

861 
	`as£π
(
°ack
->
≥ndög
 > 0);

862 
°ack
->
≥ndög
--;

863 i‡(
°ack
->
≥ndög
)

865 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque° updow¿föish\n", 
CYCLE
, 
ID
,

866 
°ack
->
èg
, 
èrgë
->
«me
);

869 
dú
 = 
	`cˇche_gë_dú
(
èrgë
, 
°ack
->
èg
);

870 
z
 = 0; z < 
dú
->
zsize
; z++) {

871 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

872 i‡(
dú_íåy
->
ow√r
 !
cˇche
->
loid
)

873 
dú_íåy
->
ow√r
 = 0;

878 
sh¨ed
 = 0;

879 
z
 = 0; z < 
dú
->
zsize
; z++) {

880 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

881 i‡(
dú_íåy_èg
 < 
°ack
->
addr
 || dú_íåy_èg >°ack->add∏+ 
cˇche
->
bsize
)

883 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

884 
	`dú_íåy_£t_sh¨î
(
dú
, 
dú_íåy
, 
cˇche
->
loid
);

885 i‡(
dú_íåy
->
sh¨îs
 > 1)

886 
sh¨ed
 = 1;

892 
ªt
->
sh¨ed
 = shared;

893 i‡(!
sh¨ed
) {

894 
z
 = 0; z < 
dú
->
zsize
; z++) {

895 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

896 i‡(
dú_íåy_èg
 < 
°ack
->
addr
 || dú_íåy_èg >°ack->add∏+ 
cˇche
->
bsize
)

898 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

899 
dú_íåy
->
ow√r
 = 
cˇche
->
loid
;

904 
°ack
->
ª•⁄£
 = 
cˇche
->
bsize
 + 8;

905 i‡(
èrgë
->
ˇche
)

906 
	`ˇche_ac˚ss_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
);

907 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

908 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_REPLY
, 
°ack
, 0);

912 i‡(
evít
 =
EV_MOESI_READ_REQUEST_DOWNUP
)

914 
cˇche_t
 *
ow√r
;

916 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque° downup\n", 
CYCLE
, 
ID
,

917 
°ack
->
èg
, 
èrgë
->
«me
);

922 
	`as£π
(
°ack
->
°©us
 !
m€si_°©us_övÆid
);

923 
°ack
->
≥ndög
 = 1;

924 
°ack
->
ª•⁄£
 = sèck->
°©us
 =
m€si_°©us_ex˛usive
 ||

925 
°ack
->
°©us
 =
m€si_°©us_sh¨ed
 ?

926 8 : 
èrgë
->
bsize
 + 8;

929 
dú
 = 
	`cˇche_gë_dú
(
èrgë
, 
°ack
->
èg
);

930 
z
 = 0; z < 
dú
->
zsize
; z++) {

931 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

932 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

933 i‡(!
dú_íåy
->
ow√r
)

935 
ow√r
 = 
	`√t_gë_node_d©a
(
èrgë
->
höë
, 
dú_íåy
->owner);

936 i‡(
dú_íåy_èg
 % 
ow√r
->
bsize
)

938 
°ack
->
≥ndög
++;

939 
°ack
->
ª•⁄£
 = 
èrgë
->
bsize
 + 8;

940 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, 
dú_íåy_èg
,

941 
EV_MOESI_READ_REQUEST_DOWNUP_FINISH
, 
°ack
);

942 
√w°ack
->
èrgë
 = 
ow√r
;

943 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST
, 
√w°ack
, 0);

946 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_DOWNUP_FINISH
, 
°ack
, 0);

950 i‡(
evít
 =
EV_MOESI_READ_REQUEST_DOWNUP_FINISH
)

953 
	`as£π
(
°ack
->
≥ndög
 > 0);

954 
°ack
->
≥ndög
--;

955 i‡(
°ack
->
≥ndög
)

957 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque° downu∞föish\n", 
CYCLE
, 
ID
,

958 
°ack
->
èg
, 
èrgë
->
«me
);

961 
dú
 = 
	`cˇche_gë_dú
(
èrgë
, 
°ack
->
èg
);

962 
z
 = 0; z < 
dú
->
zsize
; z++) {

963 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

964 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

965 
dú_íåy
->
ow√r
 = 0;

969 
	`ˇche_£t_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
, sèck->
èg
,

970 
m€si_°©us_sh¨ed
);

971 
	`ˇche_ac˚ss_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
);

972 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

973 
	`esim_scheduÀ_evít
(
EV_MOESI_READ_REQUEST_REPLY
, 
°ack
, 0);

977 i‡(
evít
 =
EV_MOESI_READ_REQUEST_REPLY
)

979 
√t_t
 *
√t
;

980 
§c
, 
de°
;

981 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque°Ñïly\n", 
CYCLE
, 
ID
,

982 
°ack
->
èg
, 
èrgë
->
«me
);

984 
	`as£π
(
°ack
->
ª•⁄£
);

985 
	`as£π
(
cˇche
->
√xt
 =
èrgë
 ||Åarget->next == ccache);

986 
√t
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
l⁄ë
 : cˇche->
höë
;

987 
§c
 = 
cˇche
->
√xt
 =
èrgë
 ? 0 :Å¨gë->
loid
;

988 
de°
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
loid
 : 0;

989 
	`√t_£nd_ev
(
√t
, 
§c
, 
de°
, 
°ack
->
ª•⁄£
,

990 
EV_MOESI_READ_REQUEST_FINISH
, 
°ack
);

994 i‡(
evít
 =
EV_MOESI_READ_REQUEST_FINISH
)

996 
	`ˇche_debug
(" %Œd %Œd 0x%x %†ªadÑeque° föish\n", 
CYCLE
, 
ID
,

997 
°ack
->
èg
, 
cˇche
->
«me
);

999 
	`m€si_°ack_ªtu∫
(
°ack
);

1003 
	`ab‹t
();

1004 
	}
}

1007 
	$m€si_h™dÀr_wrôe_ªque°
(
evít
, *
d©a
)

1009 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
ªt
 = sèck->
ªt°ack
, *
√w°ack
;

1010 
cˇche_t
 *
cˇche
 = 
°ack
->cˇche, *
èrgë
 = stack->target;

1011 
dú_t
 *
dú
;

1012 
dú_íåy_t
 *
dú_íåy
;

1013 
uöt32_t
 
dú_íåy_èg
, 
z
;

1016 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST
)

1018 
√t_t
 *
√t
;

1019 
§c
, 
de°
;

1020 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque°\n", 
CYCLE
, 
ID
,

1021 
°ack
->
addr
, 
cˇche
->
«me
);

1024 
ªt
->
îr
 = 0;

1027 
	`as£π
(
cˇche
->
√xt
 =
èrgë
 ||Åarget->next == ccache);

1028 
√t
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
l⁄ë
 : cˇche->
höë
;

1029 
§c
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
loid
 : 0;

1030 
de°
 = 
cˇche
->
√xt
 =
èrgë
 ? 0 :Å¨gë->
loid
;

1031 
	`√t_£nd_ev
(
√t
, 
§c
, 
de°
, 8, 
EV_MOESI_WRITE_REQUEST_RECEIVE
, 
°ack
);

1035 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_RECEIVE
)

1037 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque°Ñe˚ive\n", 
CYCLE
, 
ID
,

1038 
°ack
->
addr
, 
èrgë
->
«me
);

1041 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, sèck->
addr
,

1042 
EV_MOESI_WRITE_REQUEST_ACTION
, 
°ack
);

1043 
√w°ack
->
blockög
 = 
èrgë
->
√xt
 =
cˇche
;

1044 
√w°ack
->
ªad
 = 0;

1045 
√w°ack
->
ªåy
 = 0;

1046 
	`esim_scheduÀ_evít
(
EV_MOESI_FIND_AND_LOCK
, 
√w°ack
, 0);

1050 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_ACTION
)

1052 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque°á˘i⁄\n", 
CYCLE
, 
ID
,

1053 
°ack
->
èg
, 
èrgë
->
«me
);

1057 i‡(
°ack
->
îr
) {

1058 
	`as£π
(
cˇche
->
√xt
 =
èrgë
);

1059 
ªt
->
îr
 = 1;

1060 
°ack
->
ª•⁄£
 = 8;

1061 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_REPLY
, 
°ack
, 0);

1066 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, 0,

1067 
EV_MOESI_WRITE_REQUEST_EXCLUSIVE
, 
°ack
);

1068 
√w°ack
->
ex˚±
 = 
cˇche
;

1069 
√w°ack
->
£t
 = 
°ack
->set;

1070 
√w°ack
->
way
 = 
°ack
->way;

1071 
	`esim_scheduÀ_evít
(
EV_MOESI_INVALIDATE
, 
√w°ack
, 0);

1075 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_EXCLUSIVE
)

1077 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque°Éx˛usive\n", 
CYCLE
, 
ID
,

1078 
°ack
->
èg
, 
èrgë
->
«me
);

1080 i‡(
cˇche
->
√xt
 =
èrgë
)

1081 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_UPDOWN
, 
°ack
, 0);

1083 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_DOWNUP
, 
°ack
, 0);

1087 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_UPDOWN
)

1089 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque° updown\n", 
CYCLE
, 
ID
,

1090 
°ack
->
èg
, 
èrgë
->
«me
);

1093 i‡(
°ack
->
°©us
 =
m€si_°©us_modifõd
 ||

1094 
°ack
->
°©us
 =
m€si_°©us_ex˛usive
) {

1095 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_UPDOWN_FINISH
, 
°ack
, 0);

1100 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
èrgë
, sèck->
èg
,

1101 
EV_MOESI_WRITE_REQUEST_UPDOWN_FINISH
, 
°ack
);

1102 
√w°ack
->
èrgë
 =Å¨gë->
√xt
;

1103 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST
, 
√w°ack
, 0);

1107 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_UPDOWN_FINISH
)

1109 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque° updow¿föish\n", 
CYCLE
, 
ID
,

1110 
°ack
->
èg
, 
èrgë
->
«me
);

1113 i‡(
°ack
->
îr
) {

1114 
ªt
->
îr
 = 1;

1115 
°ack
->
ª•⁄£
 = 8;

1116 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

1117 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_REPLY
, 
°ack
, 0);

1123 
dú
 = 
	`cˇche_gë_dú
(
èrgë
, 
°ack
->
èg
);

1124 
z
 = 0; z < 
dú
->
zsize
; z++) {

1125 
	`as£π
(
°ack
->
addr
 % 
cˇche
->
bsize
 == 0);

1126 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

1127 i‡(
dú_íåy_èg
 < 
°ack
->
addr
 || dú_íåy_èg >°ack->add∏+ 
cˇche
->
bsize
)

1129 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
èrgë
, 
°ack
->
£t
, sèck->
way
, 
z
);

1130 
	`dú_íåy_£t_sh¨î
(
dú
, 
dú_íåy
, 
cˇche
->
loid
);

1131 
dú_íåy
->
ow√r
 = 
cˇche
->
loid
;

1132 
	`as£π
(
dú_íåy
->
sh¨îs
 == 1);

1136 i‡(
èrgë
->
ˇche
) {

1137 
	`ˇche_ac˚ss_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
);

1138 i‡(
°ack
->
°©us
 !
m€si_°©us_modifõd
)

1139 
	`ˇche_£t_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
,

1140 
°ack
->
èg
, 
m€si_°©us_ex˛usive
);

1144 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

1145 
°ack
->
ª•⁄£
 = 
cˇche
->
bsize
 + 8;

1146 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_REPLY
, 
°ack
, 0);

1150 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_DOWNUP
)

1152 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque° downup\n", 
CYCLE
, 
ID
,

1153 
°ack
->
èg
, 
èrgë
->
«me
);

1156 
	`as£π
(
°ack
->
°©us
 !
m€si_°©us_övÆid
);

1157 
	`as£π
(!
	`dú_íåy_group_sh¨ed_‹_ow√d
(
èrgë
->
dú
, 
°ack
->
£t
, sèck->
way
));

1158 
°ack
->
ª•⁄£
 = sèck->
°©us
 =
m€si_°©us_modifõd
 || stack->status

1159 =
m€si_°©us_ow√d
 ? 
èrgë
->
bsize
 + 8 : 8;

1160 
	`ˇche_£t_block
(
èrgë
->
ˇche
, 
°ack
->
£t
, sèck->
way
, 0, 
m€si_°©us_övÆid
);

1161 
	`dú_lock_u∆ock
(
°ack
->
dú_lock
);

1162 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST_REPLY
, 
°ack
, 0);

1166 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_REPLY
)

1168 
√t_t
 *
√t
;

1169 
§c
, 
de°
;

1170 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque°Ñïly\n", 
CYCLE
, 
ID
,

1171 
°ack
->
èg
, 
èrgë
->
«me
);

1173 
	`as£π
(
°ack
->
ª•⁄£
);

1174 
	`as£π
(
cˇche
->
√xt
 =
èrgë
 ||Åarget->next == ccache);

1175 
√t
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
l⁄ë
 : cˇche->
höë
;

1176 
§c
 = 
cˇche
->
√xt
 =
èrgë
 ? 0 :Å¨gë->
loid
;

1177 
de°
 = 
cˇche
->
√xt
 =
èrgë
 ? cˇche->
loid
 : 0;

1178 
	`√t_£nd_ev
(
√t
, 
§c
, 
de°
, 
°ack
->
ª•⁄£
,

1179 
EV_MOESI_WRITE_REQUEST_FINISH
, 
°ack
);

1183 i‡(
evít
 =
EV_MOESI_WRITE_REQUEST_FINISH
)

1185 
	`ˇche_debug
(" %Œd %Œd 0x%x %†wrôêªque° föish\n", 
CYCLE
, 
ID
,

1186 
°ack
->
èg
, 
cˇche
->
«me
);

1188 
	`m€si_°ack_ªtu∫
(
°ack
);

1192 
	`ab‹t
();

1193 
	}
}

1197 
	$m€si_h™dÀr_övÆid©e
(
evít
, *
d©a
)

1199 
m€si_°ack_t
 *
°ack
 = 
d©a
, *
√w°ack
;

1200 
cˇche_t
 *
cˇche
 = 
°ack
->ccache;

1201 
dú_t
 *
dú
;

1202 
dú_íåy_t
 *
dú_íåy
;

1203 
uöt32_t
 
dú_íåy_èg
, 
z
;

1205 i‡(
evít
 =
EV_MOESI_INVALIDATE
)

1207 
node_cou¡
, 
i
;

1208 
cˇche_t
 *
sh¨î
;

1211 
	`cˇche_gë_block
(
cˇche
, 
°ack
->
£t
, sèck->
way
, &°ack->
èg
, &°ack->
°©us
);

1212 
	`ˇche_debug
(" %Œd %Œd 0x%x %†övÆid©ê(£t=%d, way=%d, sètus=%d)\n", 
CYCLE
, 
ID
,

1213 
°ack
->
èg
, 
cˇche
->
«me
, sèck->
£t
, sèck->
way
, sèck->
°©us
);

1214 
°ack
->
≥ndög
 = 1;

1217 
dú
 = 
	`cˇche_gë_dú
(
cˇche
, 
°ack
->
èg
);

1218 
z
 = 0; z < 
dú
->
zsize
; z++) {

1219 
dú_íåy_èg
 = 
°ack
->
èg
 + 
z
 * 
ˇche_mö_block_size
;

1220 
dú_íåy
 = 
	`cˇche_gë_dú_íåy
(
cˇche
, 
°ack
->
£t
, sèck->
way
, 
z
);

1221 
node_cou¡
 = 
cˇche
->
höë
 ? cˇche->höë->
íd_node_cou¡
 : 0;

1222 
i
 = 1; i < 
node_cou¡
; i++) {

1225 i‡(!
	`dú_íåy_is_sh¨î
(
dú
, 
dú_íåy
, 
i
))

1227 
sh¨î
 = 
	`√t_gë_node_d©a
(
cˇche
->
höë
, 
i
);

1228 i‡(
sh¨î
 =
°ack
->
ex˚±
)

1232 
	`dú_íåy_˛ór_sh¨î
(
dú
, 
dú_íåy
, 
i
);

1233 i‡(
dú_íåy
->
ow√r
 =
i
)

1234 
dú_íåy
->
ow√r
 = 0;

1237 i‡(
dú_íåy_èg
 % 
sh¨î
->
bsize
)

1239 
√w°ack
 = 
	`m€si_°ack_¸óã
(
°ack
->
id
, 
cˇche
, 
dú_íåy_èg
,

1240 
EV_MOESI_INVALIDATE_FINISH
, 
°ack
);

1241 
√w°ack
->
èrgë
 = 
sh¨î
;

1242 
	`esim_scheduÀ_evít
(
EV_MOESI_WRITE_REQUEST
, 
√w°ack
, 0);

1243 
°ack
->
≥ndög
++;

1246 
	`esim_scheduÀ_evít
(
EV_MOESI_INVALIDATE_FINISH
, 
°ack
, 0);

1250 i‡(
evít
 =
EV_MOESI_INVALIDATE_FINISH
)

1252 
	`ˇche_debug
(" %Œd %Œd 0x%x %†övÆid©êföish\n", 
CYCLE
, 
ID
,

1253 
°ack
->
èg
, 
cˇche
->
«me
);

1256 
	`as£π
(
°ack
->
≥ndög
 > 0);

1257 
°ack
->
≥ndög
--;

1258 i‡(
°ack
->
≥ndög
)

1260 
	`m€si_°ack_ªtu∫
(
°ack
);

1264 
	`ab‹t
();

1265 
	}
}

	@libdisasm/disasm.c

20 
	~"dißsm.h
"

21 
	~<°rög.h
>

22 
	~<as£π.h
>

23 
	~<°dlib.h
>

24 
	~<debug.h
>

28 
	#SKIP
 0x0100

	)

29 
	#REG
 0x0200

	)

30 
	#MEM
 0x0400

	)

31 
	#OP3
 0x0800

	)

32 
	#INDEX
 0x1000

	)

33 
	#IB
 0x2000

	)

34 
	#IW
 0x4000

	)

35 
	#ID
 0x8000

	)

41 
	sx86_›code_öfo_°ru˘
 {

44 
x86_›code_t
 
	m›code
;

45 
uöt32_t
 
	m›1
, 
	m›2
, 
	m›3
, 
	mimm
;

46 
x86_¥efix_t
 
	m¥efixes
;

47 *
	mfmt
;

50 
uöt32_t
 
	mm©ch_mask
, 
	mm©ch_ªsu…
;

51 
uöt32_t
 
	mnom©ch_mask
, 
	mnom©ch_ªsu…
;

52 
	m›ödex_shi·
;

53 
	mim∂_ªg
;

54 
	m›code_size
;

55 
	mmodrm_size
;

56 
	mimm_size
;

57 } 
	tx86_›code_öfo_t
;

62 
	sx86_›code_öfo_ñem_°ru˘
 {

63 
x86_›code_öfo_t
 *
	möfo
;

64 
x86_›code_öfo_ñem_°ru˘
 *
	m√xt
;

65 } 
	tx86_›code_öfo_ñem_t
;

71 
x86_›code_öfo_ñem_t
 *
	gx86_›code_öfo_èbÀ
[0x100];

72 
x86_›code_öfo_ñem_t
 *
	gx86_›code_öfo_èbÀ_0f
[0x100];

76 
x86_›code_öfo_t
 
	gx86_›code_öfo_li°
[
x86_›code_cou¡
] = {

77 {
›_n⁄e
, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0 }

78 
	#DEFINST
(
«me
,
›1
,
›2
,
›3
,
imm
,
pfx
) \

79 ,{
›_
##
«me
,
›1
,
›2
,
›3
,
imm
,
pfx
,#«me,0,0,0,0,0,0,0,0,0}

	)

80 
	~<machöe.d©
>

81 #unde‡
DEFINST


86 *
	gx86_ªgi°î_«me
[
x86_ªgi°î_cou¡
] = {

99 
x86_ªgi°î_t
 
	mó_ba£
;

100 
	mdi•_size
;

101 
	msib_size
;

102 } 
	tmodrm_èbÀ_íåy_t
;

103 
modrm_èbÀ_íåy_t
 
	gmodrm_èbÀ
[32] = {

104 {
ªg_óx
, 0, 0}, {
ªg_ecx
, 0, 0},

105 {
ªg_edx
, 0, 0}, {
ªg_ebx
, 0, 0},

106 {
ªg_n⁄e
, 0, 1}, {reg_none, 4, 0},

107 {
ªg_esi
, 0, 0}, {
ªg_edi
, 0, 0},

109 {
ªg_óx
, 1, 0}, {
ªg_ecx
, 1, 0},

110 {
ªg_edx
, 1, 0}, {
ªg_ebx
, 1, 0},

111 {
ªg_n⁄e
, 1, 1}, {
ªg_ebp
, 1, 0},

112 {
ªg_esi
, 1, 0}, {
ªg_edi
, 1, 0},

114 {
ªg_óx
, 4, 0}, {
ªg_ecx
, 4, 0},

115 {
ªg_edx
, 4, 0}, {
ªg_ebx
, 4, 0},

116 {
ªg_n⁄e
, 4, 1}, {
ªg_ebp
, 4, 0},

117 {
ªg_esi
, 4, 0}, {
ªg_edi
, 4, 0},

119 {
ªg_n⁄e
, 0, 0}, {reg_none, 0, 0},

120 {
ªg_n⁄e
, 0, 0}, {reg_none, 0, 0},

121 {
ªg_n⁄e
, 0, 0}, {reg_none, 0, 0},

122 {
ªg_n⁄e
, 0, 0}, {reg_none, 0, 0}

128 
uöt32_t
 
	gó_sˇÀ_èbÀ
[4] = { 1, 2, 4, 8};

131 
	$x86_›code_öfo_ö£π_©
(
x86_›code_öfo_ñem_t
 **
èbÀ
,

132 
x86_›code_öfo_ñem_t
 *
ñem
, 
©
)

134 
x86_›code_öfo_ñem_t
 *
¥ev
;

137 i‡(!
èbÀ
[
©
]) {

138 
èbÀ
[
©
] = 
ñem
;

143 
¥ev
 = 
èbÀ
[
©
];

144 
¥ev
->
√xt
)

145 
¥ev
 =Öªv->
√xt
;

146 
¥ev
->
√xt
 = 
ñem
;

147 
	}
}

150 
	$x86_›code_öfo_ö£π
(
x86_›code_öfo_t
 *
öfo
)

152 
x86_›code_öfo_ñem_t
 *
ñem
;

153 
x86_›code_öfo_ñem_t
 **
èbÀ
;

154 
ödex
, 
i
, 
cou¡
;

158 i‡((
öfo
->
›1
 & 0xff) == 0x0f) {

159 
èbÀ
 = 
x86_›code_öfo_èbÀ_0f
;

160 
ödex
 = 
öfo
->
›2
 & 0xff;

161 
cou¡
 = 
öfo
->
›2
 & 
INDEX
 ? 8 : 1;

163 
èbÀ
 = 
x86_›code_öfo_èbÀ
;

164 
ödex
 = 
öfo
->
›1
 & 0xff;

165 
cou¡
 = 
öfo
->
›1
 & 
INDEX
 ? 8 : 1;

169 
i
 = 0; i < 
cou¡
; i++) {

170 
ñem
 = 
	`ˇŒoc
(1, (
x86_›code_öfo_ñem_t
));

171 
ñem
->
öfo
 = info;

172 
	`x86_›code_öfo_ö£π_©
(
èbÀ
, 
ñem
, 
ödex
 + 
i
);

174 
	}
}

177 
	$dißsm_öô
()

179 
x86_›code_t
 
›
;

180 
x86_›code_öfo_t
 *
öfo
;

185 
›
 = 1; o∞< 
x86_›code_cou¡
; op++) {

188 
öfo
 = &
x86_›code_öfo_li°
[
›
];

189 
	`x86_›code_öfo_ö£π
(
öfo
);

193 i‡(
öfo
->
›3
 & 
OP3
) {

197 
öfo
->
›code_size
++;

198 
öfo
->
m©ch_mask
 = 0xff;

199 
öfo
->
m©ch_ªsu…
 = info->
›3
 & 0xff;

201 } i‡(!(
öfo
->
›3
 & 
SKIP
)) {

203 
öfo
->
modrm_size
 = 1;

207 i‡(!(
öfo
->
›3
 & 
REG
)) {

208 
öfo
->
m©ch_mask
 = 0x38;

209 
öfo
->
m©ch_ªsu…
 = (öfo->
›3
 & 0x7) << 3;

214 i‡(
öfo
->
›3
 & 
MEM
) {

215 
öfo
->
nom©ch_mask
 = 0xc0;

216 
öfo
->
nom©ch_ªsu…
 = 0xc0;

221 i‡(!(
öfo
->
›2
 & 
SKIP
)) {

222 
öfo
->
›code_size
++;

223 
öfo
->
m©ch_mask
 <<= 8;

224 
öfo
->
m©ch_ªsu…
 <<= 8;

225 
öfo
->
nom©ch_mask
 <<= 8;

226 
öfo
->
nom©ch_ªsu…
 <<= 8;

227 
öfo
->
m©ch_mask
 |= 0xff;

228 
öfo
->
m©ch_ªsu…
 |öfo->
›2
 & 0xff;

231 i‡(
öfo
->
›2
 & 
INDEX
) {

232 
öfo
->
m©ch_mask
 &= 0xfffffff8;

233 
öfo
->
›ödex_shi·
 = 8;

238 
öfo
->
›code_size
++;

239 
öfo
->
m©ch_mask
 <<= 8;

240 
öfo
->
m©ch_ªsu…
 <<= 8;

241 
öfo
->
nom©ch_mask
 <<= 8;

242 
öfo
->
nom©ch_ªsu…
 <<= 8;

243 
öfo
->
m©ch_mask
 |= 0xff;

244 
öfo
->
m©ch_ªsu…
 |öfo->
›1
 & 0xff;

245 i‡(
öfo
->
›1
 & 
INDEX
) {

246 
öfo
->
m©ch_mask
 &= 0xfffffff8;

247 
öfo
->
›ödex_shi·
 = 0;

251 i‡(
öfo
->
imm
 & 
IB
)

252 
öfo
->
imm_size
 = 1;

253 i‡(
öfo
->
imm
 & 
IW
)

254 
öfo
->
imm_size
 = 2;

255 i‡(
öfo
->
imm
 & 
ID
)

256 
öfo
->
imm_size
 = 4;

274 
	}
}

277 
	$x86_›code_öfo_ñem_‰ì_li°
(
x86_›code_öfo_ñem_t
 *
ñem
)

279 
x86_›code_öfo_ñem_t
 *
√xt
;

280 
ñem
) {

281 
√xt
 = 
ñem
->next;

282 
	`‰ì
(
ñem
);

283 
ñem
 = 
√xt
;

285 
	}
}

288 
	$dißsm_d⁄e
()

290 
i
;

291 
i
 = 0; i < 0x100; i++) {

292 
	`x86_›code_öfo_ñem_‰ì_li°
(
x86_›code_öfo_èbÀ
[
i
]);

293 
	`x86_›code_öfo_ñem_‰ì_li°
(
x86_›code_öfo_èbÀ_0f
[
i
]);

295 
	}
}

299 
	$x86_dißsm
(*
buf
, 
uöt32_t
 
eù
, vﬁ©ûê
x86_ö°_t
 *
ö°
)

301 
x86_›code_öfo_ñem_t
 **
èbÀ
, *
ñem
;

302 
x86_›code_öfo_t
 *
öfo
;

303 
ödex
;

304 
uöt32_t
 
buf32
;

305 
modrm_èbÀ_íåy_t
 *
modrm_èbÀ_íåy
;

306 
was_™y_¥efix
;

309 
	`mem£t
((*Ë
ö°
, 0, (
x86_ö°_t
));

310 
ö°
->
eù
 =Éip;

311 
ö°
->
›_size
 = 4;

312 
ö°
->
addr_size
 = 4;

316 
was_™y_¥efix
 = 1;

317 * (*Ë
buf
) {

319 0xf2: 
ö°
->
¥efixes
 |
¥efix_ª≤z
; ;

320 0xf3: 
ö°
->
¥efixes
 |
¥efix_ªp
; ;

321 0x66: 
ö°
->
¥efixes
 |
¥efix_›
; in°->
›_size
 = 2; ;

322 0x67: 
ö°
->
¥efixes
 |
¥efix_addr
; in°->
addr_size
 = 2; ;

323 0x2e: 
ö°
->
£gmít
 = 
ªg_cs
; ;

324 0x36: 
ö°
->
£gmít
 = 
ªg_ss
; ;

325 0x3e: 
ö°
->
£gmít
 = 
ªg_ds
; ;

326 0x26: 
ö°
->
£gmít
 = 
ªg_es
; ;

327 0x64: 
ö°
->
£gmít
 = 
ªg_fs
; ;

328 0x65: 
ö°
->
£gmít
 = 
ªg_gs
; ;

329 : 
was_™y_¥efix
 = 0;

332 i‡(
was_™y_¥efix
) {

333 
buf
++;

334 
ö°
->
¥efix_size
++;

336 } 
was_™y_¥efix
);

339 
buf32
 = * (
uöt32_t
 *Ë
buf
;

340 
ö°
->
›code
 = 
›_n⁄e
;

341 
èbÀ
 = * (*Ë
buf
 =0x0‡? 
x86_›code_öfo_èbÀ_0f
 : 
x86_›code_öfo_èbÀ
;

342 
ödex
 = * (*Ë
buf
 == 0x0f ? * (*) (buf + 1): * (*) buf;

343 
ñem
 = 
èbÀ
[
ödex
];ÉÀm;ÉÀm =ÉÀm->
√xt
) {

344 
öfo
 = 
ñem
->info;

345 i‡(
öfo
->
nom©ch_mask
 && (
buf32
 & info->nomatch_mask) ==

346 
öfo
->
nom©ch_ªsu…
)

348 i‡((
buf32
 & 
öfo
->
m©ch_mask
Ë=öfo->
m©ch_ªsu…


349 && 
öfo
->
¥efixes
 =
ö°
->prefixes)

354 i‡(!
ñem
)

358 
ö°
->
f‹m©
 = 
öfo
->
fmt
;

359 
ö°
->
›code
 = 
öfo
->opcode;

360 
ö°
->
›code_size
 = 
öfo
->opcode_size;

361 
ö°
->
modrm_size
 = 
öfo
->modrm_size;

362 
ö°
->
›ödex
 = (
buf32
 >> 
öfo
->
›ödex_shi·
) & 0x7;

363 
buf
 +
ö°
->
›code_size
;

366 i‡(
ö°
->
modrm_size
) {

369 
ö°
->
modrm
 = * (*Ë
buf
;

370 
ö°
->
modrm_mod
 = (ö°->
modrm
 & 0xc0) >> 6;

371 
ö°
->
modrm_ªg
 = (ö°->
modrm
 & 0x38) >> 3;

372 
ö°
->
modrm_rm
 = in°->
modrm
 & 0x07;

373 
ö°
->
ªg
 = in°->
modrm_ªg
;

376 
modrm_èbÀ_íåy
 = &
modrm_èbÀ
[(
ö°
->
modrm_mod
 << 3)

377 | 
ö°
->
modrm_rm
];

378 
ö°
->
sib_size
 = 
modrm_èbÀ_íåy
->sib_size;

379 
ö°
->
di•_size
 = 
modrm_èbÀ_íåy
->disp_size;

380 
ö°
->
ó_ba£
 = 
modrm_èbÀ_íåy
->ea_base;

381 
buf
 +
ö°
->
modrm_size
;

384 i‡(
ö°
->
sib_size
) {

385 
ö°
->
sib
 = * (*Ë
buf
;

386 
ö°
->
sib_sˇÀ
 = (ö°->
sib
 & 0xc0) >> 6;

387 
ö°
->
sib_ödex
 = (ö°->
sib
 & 0x38) >> 3;

388 
ö°
->
sib_ba£
 = in°->
sib
 & 0x07;

389 
ö°
->
ó_sˇÀ
 = 
ó_sˇÀ_èbÀ
[ö°->
sib_sˇÀ
];

390 
ö°
->
ó_ödex
 = in°->
sib_ödex
 =0x04 ? 
ªg_n⁄e
 :

391 
ö°
->
sib_ödex
 + 
ªg_óx
;

392 
ö°
->
ó_ba£
 = in°->
sib_ba£
 + 
ªg_óx
;

393 i‡(
ö°
->
sib_ba£
 =0x05 && in°->
modrm_mod
 == 0x00) {

394 
ö°
->
ó_ba£
 = 
ªg_n⁄e
;

395 
ö°
->
di•_size
 = 4;

397 
buf
 +
ö°
->
sib_size
;

401 
ö°
->
di•_size
) {

402 1: 
ö°
->
di•
 = * (
öt8_t
 *Ë
buf
; ;

403 2: 
ö°
->
di•
 = * (
öt16_t
 *Ë
buf
; ;

404 4: 
ö°
->
di•
 = * (
öt32_t
 *Ë
buf
; ;

406 
buf
 +
ö°
->
di•_size
;

410 
ö°
->
imm_size
 = 
öfo
->imm_size;

411 
ö°
->
imm_size
) {

413 1: 
ö°
->
imm
.
b
 = * (
uöt8_t
 *Ë
buf
; ;

414 2: 
ö°
->
imm
.
w
 = * (
uöt16_t
 *Ë
buf
; ;

415 4: 
ö°
->
imm
.
d
 = * (
uöt32_t
 *Ë
buf
; ;

417 
buf
 +
ö°
->
imm_size
;

420 
ö°
->
size
 = in°->
¥efix_size
 + in°->
›code_size
 + in°->
modrm_size
 +

421 
ö°
->
sib_size
 + in°->
di•_size
 + in°->
imm_size
;

422 
	}
}

425 
	$is_fmt_ch¨
(
c
)

427  (
c
 >= 'a' && c <= 'z') ||

428 (
c
 >= 'A' && c <= 'Z') ||

429 (
c
 >= '0' && c <= '9');

430 
	}
}

433 
	$is_√xt_w‹d
(*
§c
, *
w‹d
)

435 
Àn
 = 
	`°æí
(
w‹d
);

436 i‡(
	`°æí
(
§c
Ë< 
Àn
)

438 i‡(
	`°∫cmp
(
§c
, 
w‹d
, 
Àn
))

440 i‡(
	`is_fmt_ch¨
(
§c
[
Àn
]))

443 
	}
}

446 
	$x86_moffs_addªss_dump_buf
(
x86_ö°_t
 *
ö°
, **
pbuf
, *
psize
)

448 
	`dump_buf
(
pbuf
, 
psize
, "%s:0x%x",

449 
x86_ªgi°î_«me
[
ö°
->
£gmít
 ? in°->£gmíà: 
ªg_ds
],

450 
ö°
->
imm
.
d
);

451 
	}
}

454 
	$x86_mem‹y_addªss_dump_buf
(
x86_ö°_t
 *
ö°
, **
pbuf
, *
psize
)

456 
putsign
 = 0;

457 
£g
[10];

458 
	`as£π
(
ö°
->
modrm_mod
 != 0x03);

461 
£g
[0] = 0;

462 i‡(
ö°
->
£gmít
) {

463 
	`°r˝y
(
£g
, 
x86_ªgi°î_«me
[
ö°
->
£gmít
]);

464 
	`°rˇt
(
£g
, ":");

468 i‡(!
ö°
->
ó_ba£
 && !ö°->
ó_ödex
) {

469 i‡(!
£g
[0])

470 
	`°r˝y
(
£g
, "ds:");

471 
	`dump_buf
(
pbuf
, 
psize
, "%s0x%x", 
£g
, 
ö°
->
di•
);

475 
	`dump_buf
(
pbuf
, 
psize
, "%s[", 
£g
);

476 i‡(
ö°
->
ó_ba£
) {

477 
	`dump_buf
(
pbuf
, 
psize
, "%s", 
x86_ªgi°î_«me
[
ö°
->
ó_ba£
]);

478 
putsign
 = 1;

480 i‡(
ö°
->
ó_ödex
) {

481 
	`dump_buf
(
pbuf
, 
psize
, "%s%s", 
putsign
 ? "+" : "",

482 
x86_ªgi°î_«me
[
ö°
->
ó_ödex
]);

483 i‡(
ö°
->
ó_sˇÀ
 > 1)

484 
	`dump_buf
(
pbuf
, 
psize
, "*%d", 
ö°
->
ó_sˇÀ
);

485 
putsign
 = 1;

487 i‡(
ö°
->
di•
 > 0)

488 
	`dump_buf
(
pbuf
, 
psize
, "%s0x%x", 
putsign
 ? "+" : "", 
ö°
->
di•
);

489 i‡(
ö°
->
di•
 < 0)

490 
	`dump_buf
(
pbuf
, 
psize
, "-0x%x", -
ö°
->
di•
);

491 
	`dump_buf
(
pbuf
, 
psize
, "]");

492 
	}
}

495 *
	$x86_ö°_«me
(
x86_›code_t
 
›code
)

497 i‡(
›code
 < 1 || opcodê>
x86_›code_cou¡
)

498  
NULL
;

499  
x86_›code_öfo_li°
[
›code
].
fmt
;

500 
	}
}

503 
	$x86_ö°_dump_buf
(
x86_ö°_t
 *
ö°
, *
buf
, 
size
)

505 
x86_›code_t
 
›
 = 
ö°
->
›code
;

506 
x86_›code_öfo_t
 *
öfo
 = &
x86_›code_öfo_li°
[
›
];

507 *
fmt
 = 
öfo
->fmt;

508 
w‹d
 = 0;

510 *
fmt
) {

511 i‡(
	`is_√xt_w‹d
(
fmt
, "r8")) {

512 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
modrm_ªg
 + 
ªg_Æ
]);

513 
fmt
 += 2;

514 } i‡(
	`is_√xt_w‹d
(
fmt
, "r16")) {

515 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
modrm_ªg
 + 
ªg_ax
]);

516 
fmt
 += 3;

517 } i‡(
	`is_√xt_w‹d
(
fmt
, "r32")) {

518 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
modrm_ªg
 + 
ªg_óx
]);

519 
fmt
 += 3;

520 } i‡(
	`is_√xt_w‹d
(
fmt
, "rm8")) {

521 i‡(
ö°
->
modrm_mod
 == 0x03)

522 
	`dump_buf
(&
buf
, &
size
, "%s",

523 
x86_ªgi°î_«me
[
ö°
->
modrm_rm
 + 
ªg_Æ
]);

525 
	`dump_buf
(&
buf
, &
size
, "BYTE PTR ");

526 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

528 
fmt
 += 3;

529 } i‡(
	`is_√xt_w‹d
(
fmt
, "rm16")) {

530 i‡(
ö°
->
modrm_mod
 == 0x03)

531 
	`dump_buf
(&
buf
, &
size
, "%s",

532 
x86_ªgi°î_«me
[
ö°
->
modrm_rm
 + 
ªg_ax
]);

534 
	`dump_buf
(&
buf
, &
size
, "WORD PTR ");

535 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

537 
fmt
 += 4;

538 } i‡(
	`is_√xt_w‹d
(
fmt
, "rm32")) {

539 i‡(
ö°
->
modrm_mod
 == 0x03)

540 
	`dump_buf
(&
buf
, &
size
, "%s",

541 
x86_ªgi°î_«me
[
ö°
->
modrm_rm
 + 
ªg_óx
]);

543 
	`dump_buf
(&
buf
, &
size
, "DWORD PTR ");

544 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

546 
fmt
 += 4;

547 } i‡(
	`is_√xt_w‹d
(
fmt
, "m")) {

548 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

549 
fmt
++;

550 } i‡(
	`is_√xt_w‹d
(
fmt
, "imm8")) {

551 
	`dump_buf
(&
buf
, &
size
, "0x%x", 
ö°
->
imm
.
b
);

552 
fmt
 += 4;

553 } i‡(
	`is_√xt_w‹d
(
fmt
, "imm16")) {

554 
	`dump_buf
(&
buf
, &
size
, "0x%x", 
ö°
->
imm
.
w
);

555 
fmt
 += 5;

556 } i‡(
	`is_√xt_w‹d
(
fmt
, "imm32")) {

557 
	`dump_buf
(&
buf
, &
size
, "0x%x", 
ö°
->
imm
.
d
);

558 
fmt
 += 5;

559 } i‡(
	`is_√xt_w‹d
(
fmt
, "rel8")) {

560 
	`dump_buf
(&
buf
, &
size
, "%x", (
öt8_t
Ë
ö°
->
imm
.
b
 + in°->
eù
 + inst->size);

561 
fmt
 += 4;

562 } i‡(
	`is_√xt_w‹d
(
fmt
, "rel16")) {

563 
	`dump_buf
(&
buf
, &
size
, "%x", (
öt16_t
Ë
ö°
->
imm
.
w
 + in°->
eù
 + inst->size);

564 } i‡(
	`is_√xt_w‹d
(
fmt
, "rel32")) {

565 
	`dump_buf
(&
buf
, &
size
, "%x", 
ö°
->
imm
.
d
 + in°->
eù
 + inst->size);

566 
fmt
 += 5;

567 } i‡(
	`is_√xt_w‹d
(
fmt
, "moffs8")) {

568 
	`x86_moffs_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

569 
fmt
 += 6;

570 } i‡(
	`is_√xt_w‹d
(
fmt
, "moffs16")) {

571 
	`x86_moffs_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

572 
fmt
 += 7;

573 } i‡(
	`is_√xt_w‹d
(
fmt
, "moffs32")) {

574 
	`x86_moffs_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

575 
fmt
 += 7;

576 } i‡(
	`is_√xt_w‹d
(
fmt
, "m8")) {

577 
	`dump_buf
(&
buf
, &
size
, "BYTE PTR ");

578 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

579 
fmt
 += 2;

580 } i‡(
	`is_√xt_w‹d
(
fmt
, "m16")) {

581 
	`dump_buf
(&
buf
, &
size
, "WORD PTR ");

582 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

583 
fmt
 += 3;

584 } i‡(
	`is_√xt_w‹d
(
fmt
, "m32")) {

585 
	`dump_buf
(&
buf
, &
size
, "DWORD PTR ");

586 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

587 
fmt
 += 3;

588 } i‡(
	`is_√xt_w‹d
(
fmt
, "m64")) {

589 
	`dump_buf
(&
buf
, &
size
, "QWORD PTR ");

590 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

591 
fmt
 += 3;

592 } i‡(
	`is_√xt_w‹d
(
fmt
, "m80")) {

593 
	`dump_buf
(&
buf
, &
size
, "TBYTE PTR ");

594 
	`x86_mem‹y_addªss_dump_buf
(
ö°
, &
buf
, &
size
);

595 
fmt
 += 3;

596 } i‡(
	`is_√xt_w‹d
(
fmt
, "st0")) {

597 
	`dump_buf
(&
buf
, &
size
, "st");

598 
fmt
 += 3;

599 } i‡(
	`is_√xt_w‹d
(
fmt
, "sti")) {

600 
	`dump_buf
(&
buf
, &
size
, "°(%d)", 
ö°
->
›ödex
);

601 
fmt
 += 3;

602 } i‡(
	`is_√xt_w‹d
(
fmt
, "ir8")) {

603 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
›ödex
 + 
ªg_Æ
]);

604 
fmt
 += 3;

605 } i‡(
	`is_√xt_w‹d
(
fmt
, "ir16")) {

606 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
›ödex
 + 
ªg_ax
]);

607 
fmt
 += 4;

608 } i‡(
	`is_√xt_w‹d
(
fmt
, "ir32")) {

609 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
›ödex
 + 
ªg_óx
]);

610 
fmt
 += 4;

611 } i‡(
	`is_√xt_w‹d
(
fmt
, "sreg")) {

612 
	`dump_buf
(&
buf
, &
size
, "%s", 
x86_ªgi°î_«me
[
ö°
->
ªg
 + 
ªg_es
]);

613 
fmt
 += 4;

615 *
fmt
 && 
	`is_fmt_ch¨
(*fmt))

616 
	`dump_buf
(&
buf
, &
size
, "%c", *
fmt
++);

617 *
fmt
 && !
	`is_fmt_ch¨
(*fmt)) {

618 i‡(*
fmt
 == '_') {

619 
	`dump_buf
(&
buf
, &
size
, "%s", 
w‹d
 ? ", " : " ");

620 
w‹d
++;

622 
	`dump_buf
(&
buf
, &
size
, "%c", *
fmt
);

624 
fmt
++;

628 
	}
}

631 
	$x86_ö°_dump
(
x86_ö°_t
 *
ö°
, 
FILE
 *
f
)

633 
buf
[100];

634 
	`x86_ö°_dump_buf
(
ö°
, 
buf
, (buf));

635 
	`Ârötf
(
f
, "%s", 
buf
);

636 
	}
}

	@libdisasm/disasm.h

20 #i‚de‡
DISASM_H


21 
	#DISASM_H


	)

23 
	~<°dio.h
>

24 
	~<°döt.h
>

25 
	~<mh™dÀ.h
>

30 
	m›_n⁄e
 = 0,

31 
	#DEFINST
(
«me
,
›1
,
›2
,
›3
,
imm
,
¥efixes
Ë
›_
##«me,

	)

32 
	~"machöe.d©
"

33 #unde‡
DEFINST


34 
	mx86_›code_cou¡


35 } 
	tx86_›code_t
;

39 
	ex86_¥efix_t
 {

40 
	m¥efix_n⁄e
 = 0x00,

41 
	m¥efix_ªp
 = 0x01,

42 
	m¥efix_ªpz
 = 0x01,

43 
	m¥efix_ª≤z
 = 0x02,

44 
	m¥efix_lock
 = 0x04,

45 
	m¥efix_addr
 = 0x08,

46 
	m¥efix_›
 = 0x10

47 } 
	tx86_¥efix_t
;

53 
	mªg_n⁄e
 = 0,

54 
	mªg_óx
, 
	mªg_ecx
, 
	mªg_edx
, 
	mªg_ebx
, 
	mªg_e•
, 
	mªg_ebp
, 
	mªg_esi
, 
	mªg_edi
,

55 
	mªg_ax
, 
	mªg_cx
, 
	mªg_dx
, 
	mªg_bx
, 
	mªg_•
, 
	mªg_bp
, 
	mªg_si
, 
	mªg_di
,

56 
	mªg_Æ
, 
	mªg_˛
, 
	mªg_dl
, 
	mªg_bl
, 
	mªg_ah
, 
	mªg_ch
, 
	mªg_dh
, 
	mªg_bh
,

57 
	mªg_es
, 
	mªg_cs
, 
	mªg_ss
, 
	mªg_ds
, 
	mªg_fs
, 
	mªg_gs
,

58 
	mx86_ªgi°î_cou¡


59 } 
	tx86_ªgi°î_t
;

60 *
x86_ªgi°î_«me
[
x86_ªgi°î_cou¡
];

65 
	mÊag_cf
 = 0,

66 
	mÊag_pf
 = 2,

67 
	mÊag_af
 = 4,

68 
	mÊag_zf
 = 6,

69 
	mÊag_sf
 = 7,

70 
	mÊag_df
 = 10,

71 
	mÊag_of
 = 11

72 } 
	tx86_Êag_t
;

77 
uöt32_t
 
	meù
;

78 
	msize
;

79 
x86_›code_t
 
	m›code
;

80 *
	mf‹m©
;

83 
	m¥efix_size
;

84 
	m›code_size
;

85 
	mmodrm_size
;

86 
	msib_size
;

87 
	mdi•_size
;

88 
	mimm_size
;

92 
	m›ödex
;

95 
x86_ªgi°î_t
 
	m£gmít
;

96 
x86_¥efix_t
 
	m¥efixes
;

97 
	m›_size
;

98 
	maddr_size
;

99 
	mªp
;

102 
	mmodrm
;

103 
	mmodrm_mod
;

104 
	mmodrm_ªg
;

105 
	mmodrm_rm
;

108 
	msib
;

109 
	msib_sˇÀ
;

110 
	msib_ödex
;

111 
	msib_ba£
;

114 
öt32_t
 
	mdi•
;

116 
uöt8_t
 
	mb
;

117 
uöt16_t
 
	mw
;

118 
uöt32_t
 
	md
;

119 } 
	mimm
;

122 
x86_ªgi°î_t
 
	mó_ba£
;

123 
x86_ªgi°î_t
 
	mó_ödex
;

124 
uöt32_t
 
	mó_sˇÀ
;

127 
	mªg
;

128 } 
	tx86_ö°_t
;

132 
dißsm_öô
();

133 
dißsm_d⁄e
();

137 
x86_dißsm
(*
buf
, 
uöt32_t
 
eù
, vﬁ©ûê
x86_ö°_t
 *
ö°
);

138 
x86_ö°_dump_buf
(
x86_ö°_t
 *
ö°
, *
buf
, 
size
);

139 
x86_ö°_dump
(
x86_ö°_t
 *
ö°
, 
FILE
 *
f
);

140 *
x86_ö°_«me
(
x86_›code_t
 
›code
);

	@libesim/esim.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°d¨g.h
>

23 
	~<°rög.h
>

24 
	~<as£π.h
>

25 
	~<li°.h
>

26 
	~<hóp.h
>

27 
	~<ªpos.h
>

28 
	~<mh™dÀ.h
>

29 
	~"esim.h
"

31 
	gcuº_evít
 = 0;

32 
	gESIM_EV_INVALID
;

33 
	gesim_lock_scheduÀ
 = 0;

35 
uöt64_t
 
	gesim_cy˛e
 = 0;

36 
	gESIM_EV_NONE
;

38 
li°_t
 *
	gevít_¥ocs
;

39 
hóp_t
 *
	gevít_hóp
;

40 
ªpos_t
 *
	gevít_ªpos
;

43 
	sevít_t
 {

44 
	mevít
;

45 *
	md©a
;

49 
	$esim_öô
()

51 
evít_¥ocs
 = 
	`li°_¸óã
(10);

52 
evít_hóp
 = 
	`hóp_¸óã
(20);

53 
evít_ªpos
 = 
	`ªpos_¸óã
((
evít_t
), "event_repos");

54 
ESIM_EV_INVALID
 = 
	`esim_ªgi°î_evít
(
NULL
);

55 
ESIM_EV_NONE
 = 
	`esim_ªgi°î_evít
(
NULL
);

56 
	}
}

59 
	$esim_d⁄e
()

61 
	`li°_‰ì
(
evít_¥ocs
);

62 
	`hóp_‰ì
(
evít_hóp
);

63 
	`ªpos_‰ì
(
evít_ªpos
);

64 
	}
}

67 
	$esim_ªgi°î_evít
(
esim_evít_h™dÀr_t
 
h™dÀr
)

69 
	`li°_add
(
evít_¥ocs
, 
h™dÀr
);

70  
cuº_evít
++;

71 
	}
}

74 
	$esim_scheduÀ_evít
(
evít
, *
d©a
, 
a·î
)

76 
evít_t
 *
e
;

77 
uöt64_t
 
whí
 = 
esim_cy˛e
 + 
a·î
;

80 i‡(
esim_lock_scheduÀ
)

84 i‡(
evít
 < 0 ||Évíà>
	`li°_cou¡
(
evít_¥ocs
)) {

85 
	`Ârötf
(
°dîr
, "esim: unknown scheduledÉvent\n");

86 
	`ab‹t
();

88 i‡(
whí
 < 
esim_cy˛e
) {

89 
	`Ârötf
(
°dîr
, "esim: cycle %lld:Évent scheduled inÅheÖast\n",

90 (Ë
esim_cy˛e
);

91 
	`ab‹t
();

93 i‡(!
evít
) {

94 
	`Ârötf
(
°dîr
, "esim: scheduledÉvent of kind 0;Ésim_register_event forgotten?\n");

95 
	`ab‹t
();

99 i‡(
evít
 =
ESIM_EV_NONE
)

103 
e
 = 
	`ªpos_¸óã_obje˘
(
evít_ªpos
);

104 
	`as£π
(
e
);

105 
e
->
evít
 =Évent;

106 
e
->
d©a
 = data;

107 
	`hóp_ö£π
(
evít_hóp
, 
whí
, 
e
);

108 
	}
}

111 
	$esim_execuã_evít
(
evít
, *
d©a
)

113 
esim_evít_h™dÀr_t
 
h™dÀr
;

116 i‡(
esim_lock_scheduÀ
)

120 i‡(
evít
 < 0 ||Évíà>
	`li°_cou¡
(
evít_¥ocs
)) {

121 
	`Ârötf
(
°dîr
, "esim: unknown scheduledÉvent\n");

122 
	`ab‹t
();

124 i‡(!
evít
) {

125 
	`Ârötf
(
°dîr
, "esim: scheduledÉvent of kind 0;Ésim_register_event forgotten?\n");

126 
	`ab‹t
();

128 i‡(
evít
 =
ESIM_EV_NONE
)

132 
h™dÀr
 = 
	`li°_gë
(
evít_¥ocs
, 
evít
);

133 
	`as£π
(!
	`li°_îr‹
(
evít_¥ocs
));

134 
	`as£π
(
h™dÀr
);

135 
	`h™dÀr
(
evít
, 
d©a
);

136 
	}
}

140 
	$esim_¥o˚ss_evíts
()

142 
uöt64_t
 
whí
;

143 
evít_t
 *
e
;

144 
esim_evít_h™dÀr_t
 
h™dÀr
;

149 
whí
 = 
	`hóp_≥ek
(
evít_hóp
, (**Ë&
e
);

150 i‡(
	`hóp_îr‹
(
evít_hóp
))

154 
	`as£π
(
whí
 >
esim_cy˛e
);

155 i‡(
whí
 !
esim_cy˛e
)

159 
	`hóp_exåa˘
(
evít_hóp
, 
NULL
);

160 
h™dÀr
 = 
	`li°_gë
(
evít_¥ocs
, 
e
->
evít
);

161 
	`as£π
(!
	`li°_îr‹
(
evít_¥ocs
));

162 
	`as£π
(
h™dÀr
);

163 
	`h™dÀr
(
e
->
evít
,É->
d©a
);

164 
	`ªpos_‰ì_obje˘
(
evít_ªpos
, 
e
);

168 
esim_cy˛e
++;

169 
	}
}

172 
	$esim_em±y
()

174 
evít_t
 *
e
;

175 
esim_evít_h™dÀr_t
 
h™dÀr
;

179 
esim_lock_scheduÀ
 = 1;

185 
	`hóp_exåa˘
(
evít_hóp
, (**Ë&
e
);

186 i‡(
	`hóp_îr‹
(
evít_hóp
))

190 
h™dÀr
 = 
	`li°_gë
(
evít_¥ocs
, 
e
->
evít
);

191 
	`as£π
(!
	`li°_îr‹
(
evít_¥ocs
));

192 
	`as£π
(
h™dÀr
);

193 
	`h™dÀr
(
e
->
evít
,É->
d©a
);

194 
	`ªpos_‰ì_obje˘
(
evít_ªpos
, 
e
);

198 
esim_lock_scheduÀ
 = 0;

199 
	}
}

202 
uöt64_t
 
	$esim_exåa˘_evít
(*
pköd
, **
pd©a
)

204 
evít_t
 *
e
;

205 
uöt64_t
 
whí
;

208 
	`as£π
(
pköd
 && 
pd©a
);

209 
whí
 = 
	`hóp_exåa˘
(
evít_hóp
, (**Ë&
e
);

210 i‡(
	`hóp_îr‹
(
evít_hóp
)) {

211 *
pköd
 = 0;

212 *
pd©a
 = 
NULL
;

217 *
pköd
 = 
e
->
evít
;

218 *
pd©a
 = 
e
->
d©a
;

221 
	`ªpos_‰ì_obje˘
(
evít_ªpos
, 
e
);

222  
whí
;

223 
	}
}

226 
	$esim_≥ndög
()

228  
	`hóp_cou¡
(
evít_hóp
);

229 
	}
}

236 
FILE
 *
	gesim_debug_fûe
;

237 
uöt64_t
 
	gesim_debug_cy˛e
;

239 
	$esim_debug_öô
(*
fûíame
)

241 
esim_debug_fûe
 = 
	`°rcmp
(
fûíame
, "stdout") ?

242 (
	`°rcmp
(
fûíame
, "stderr") ?

243 
	`f›í
(
fûíame
, "wt"Ë: 
°dîr
Ë: 
°dout
;

244  
esim_debug_fûe
 !
NULL
;

245 
	}
}

247 
	$esim_debug_d⁄e
()

249 i‡(
esim_debug_fûe
)

250 
	`f˛o£
(
esim_debug_fûe
);

251 
	}
}

253 
	$esim_debug
(*
fmt
, ...)

255 
va_li°
 
va
;

257 i‡(!
esim_debug_fûe
)

259 i‡(
esim_cy˛e
 >
esim_debug_cy˛e
)

260 
	`Ârötf
(
esim_debug_fûe
, "clk c=%llu\n",

261 (Ë
esim_cy˛e
);

262 
	`va_°¨t
(
va
, 
fmt
);

263 
	`vÂrötf
(
esim_debug_fûe
, 
fmt
, 
va
);

264 
esim_debug_cy˛e
 = 
esim_cy˛e
 + 1;

265 
	}
}

	@libesim/esim.h

20 #i‚de‡
ESIM_H


21 
	#ESIM_H


	)

23 
	~<°döt.h
>

26 
uöt64_t
 
esim_cy˛e
;

29 
ESIM_EV_NONE
;

32 (*
	tesim_evít_h™dÀr_t
)(
	tevít
, *
	td©a
);

35 
	`esim_öô
();

36 
	`esim_d⁄e
();

39 
	`esim_ªgi°î_evít
(
esim_evít_h™dÀr_t
 
h™dÀr
);

40 
	`esim_scheduÀ_evít
(
evít
, *
d©a
, 
a·î
);

45 
	`esim_execuã_evít
(
evít
, *
d©a
);

48 
	`esim_¥o˚ss_evíts
();

53 
uöt64_t
 
	`esim_exåa˘_evít
(*
evít
, **
d©a
);

56 
	`esim_≥ndög
();

61 
	`esim_em±y
();

65 
FILE
 *
esim_debug_fûe
;

66 
	`esim_debug_öô
(*
fûíame
);

67 
	`esim_debug_d⁄e
();

68 
	$esim_debug
(*
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

	@libgpudisasm/gpudisasm.c

20 
	~<gpudißsm.h
>

21 
	~<misc.h
>

22 
	~<as£π.h
>

23 
	~<°rög.h
>

24 
	~<debug.h
>

25 
	~<˘y≥.h
>

34 
amd_ö°_öfo_t
 
	gamd_ö°_öfo
[
AMD_INST_COUNT
];

37 
	#AMD_INST_INFO_CF_LONG_SIZE
 256

	)

38 
	#AMD_INST_INFO_CF_SHORT_SIZE
 16

	)

39 
	#AMD_INST_INFO_ALU_LONG_SIZE
 256

	)

40 
	#AMD_INST_INFO_ALU_SHORT_SIZE
 32

	)

41 
	#AMD_INST_INFO_TEX_SIZE
 32

	)

42 
amd_ö°_öfo_t
 *
	gamd_ö°_öfo_cf_l⁄g
[
AMD_INST_INFO_CF_LONG_SIZE
];

43 
amd_ö°_öfo_t
 *
	gamd_ö°_öfo_cf_sh‹t
[
AMD_INST_INFO_CF_SHORT_SIZE
];

44 
amd_ö°_öfo_t
 *
	gamd_ö°_öfo_Æu_l⁄g
[
AMD_INST_INFO_ALU_LONG_SIZE
];

45 
amd_ö°_öfo_t
 *
	gamd_ö°_öfo_Æu_sh‹t
[
AMD_INST_INFO_ALU_SHORT_SIZE
];

46 
amd_ö°_öfo_t
 *
	gamd_ö°_öfo_ãx
[
AMD_INST_INFO_TEX_SIZE
];

49 
	$amd_dißsm_öô
()

51 
amd_ö°_öfo_t
 *
öfo
;

52 
i
;

55 
	#DEFINST
(
_«me
, 
_fmt_°r
, 
_fmt0
, 
_fmt1
, 
_fmt2
, 
_ˇãg‹y
, 
_›code
, 
_Êags
) \

56 
öfo
 = &
amd_ö°_öfo
[
AMD_INST_
##
_«me
]; \

57 
öfo
->
ö°
 = 
AMD_INST_
##
_«me
; \

58 
öfo
->
ˇãg‹y
 = 
AMD_CAT_
##
_ˇãg‹y
; \

59 
öfo
->
«me
 = #_name; \

60 
öfo
->
fmt_°r
 = 
_fmt_°r
; \

61 
öfo
->
fmt
[0] = 
FMT_
##
_fmt0
; \

62 
öfo
->
fmt
[1] = 
FMT_
##
_fmt1
; \

63 
öfo
->
fmt
[2] = 
FMT_
##
_fmt2
; \

64 
öfo
->
›code
 = 
_›code
; \

65 
öfo
->
Êags
 = 
_Êags
; \

66 
öfo
->
size
 = (
FMT_
##
_fmt0
 ? 1 : 0Ë+ (FMT_##
_fmt1
 ? 1 : 0Ë+ (FMT_##
_fmt2
 ? 1 : 0 );

	)

67 
	~"gpudißsm.d©
"

68 #unde‡
DEFINST


71 
i
 = 1; i < 
AMD_INST_COUNT
; i++) {

72 
öfo
 = &
amd_ö°_öfo
[
i
];

73 i‡(
öfo
->
fmt
[1] =
FMT_CF_WORD1
 ||

74 
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
 ||

75 
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
)

77 
	`as£π
(
	`IN_RANGE
(
öfo
->
›code
, 0, 
AMD_INST_INFO_CF_LONG_SIZE
 - 1));

78 
amd_ö°_öfo_cf_l⁄g
[
öfo
->
›code
] = info;

81 i‡(
öfo
->
fmt
[1] =
FMT_CF_ALU_WORD1
 ||

82 
öfo
->
fmt
[1] =
FMT_CF_ALU_WORD1_EXT
)

84 
	`as£π
(
	`IN_RANGE
(
öfo
->
›code
, 0, 
AMD_INST_INFO_CF_SHORT_SIZE
 - 1));

85 
amd_ö°_öfo_cf_sh‹t
[
öfo
->
›code
] = info;

88 i‡(
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
) {

89 
	`as£π
(
	`IN_RANGE
(
öfo
->
›code
, 0, 
AMD_INST_INFO_ALU_LONG_SIZE
 - 1));

90 
amd_ö°_öfo_Æu_l⁄g
[
öfo
->
›code
] = info;

93 i‡(
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP3
 ||

94 
öfo
->
fmt
[1] =
FMT_ALU_WORD1_LDS_IDX_OP
)

96 
	`as£π
(
	`IN_RANGE
(
öfo
->
›code
, 0, 
AMD_INST_INFO_ALU_SHORT_SIZE
 - 1));

97 
amd_ö°_öfo_Æu_sh‹t
[
öfo
->
›code
] = info;

100 i‡(
öfo
->
fmt
[0] =
FMT_TEX_WORD0
 || info->fmt[0] =
FMT_VTX_WORD0
) {

101 
	`as£π
(
	`IN_RANGE
(
öfo
->
›code
, 0, 
AMD_INST_INFO_TEX_SIZE
 - 1));

102 
amd_ö°_öfo_ãx
[
öfo
->
›code
] = info;

105 
	`Ârötf
(
°dîr
, "w¨nög: '%s'ÇŸ indexed\n", 
öfo
->
«me
);

107 
	}
}

110 
	$amd_dißsm_d⁄e
()

112 
	}
}

121 *
	$amd_ö°_decode_cf
(*
buf
, 
amd_ö°_t
 *
ö°
)

123 
uöt32_t
 
cf_ö°_sh‹t
, 
cf_ö°_l⁄g
;

124 
íd_of_¥ogøm
;

127 
	`mem£t
(
ö°
, 0, (
amd_ö°_t
));

128 
	`mem˝y
(
ö°
->
w‹ds
, 
buf
, 8);

131 
cf_ö°_sh‹t
 = 
ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
cf_ö°
;

132 
ö°
->
öfo
 = 
	`IN_RANGE
(
cf_ö°_sh‹t
, 0, 
AMD_INST_INFO_CF_SHORT_SIZE
 - 1) ?

133 
amd_ö°_öfo_cf_sh‹t
[
cf_ö°_sh‹t
] : 
NULL
;

134 i‡(!
ö°
->
öfo
) {

135 
cf_ö°_l⁄g
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.
cf_ö°
;

136 
ö°
->
öfo
 = 
	`IN_RANGE
(
cf_ö°_l⁄g
, 0, 
AMD_INST_INFO_CF_LONG_SIZE
 - 1) ?

137 
amd_ö°_öfo_cf_l⁄g
[
cf_ö°_l⁄g
] : 
NULL
;

138 i‡(!
ö°
->
öfo
)

139 
	`Áèl
("unknown CF instruction; cf_inst_short=%d, cf_inst_long=%d",

140 
cf_ö°_sh‹t
, 
cf_ö°_l⁄g
);

144 
íd_of_¥ogøm
 = 0;

145 i‡(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1


146 || 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF


147 || 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
)

148 
íd_of_¥ogøm
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.end_of_program;

149 i‡(
íd_of_¥ogøm
)

150  
NULL
;

153  
buf
 + 8;

154 
	}
}

157 *
	$amd_ö°_decode_Æu
(*
buf
, 
amd_ö°_t
 *
ö°
)

159 
uöt32_t
 
Æu_ö°_sh‹t
, 
Æu_ö°_l⁄g
;

162 
	`mem£t
(
ö°
, 0, (
amd_ö°_t
));

163 
	`mem˝y
(
ö°
->
w‹ds
, 
buf
, 8);

166 
Æu_ö°_sh‹t
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›3
.
Æu_ö°
;

167 
ö°
->
öfo
 = 
	`IN_RANGE
(
Æu_ö°_sh‹t
, 0, 
AMD_INST_INFO_ALU_SHORT_SIZE
 - 1) ?

168 
amd_ö°_öfo_Æu_sh‹t
[
Æu_ö°_sh‹t
] : 
NULL
;

169 i‡(!
ö°
->
öfo
) {

170 
Æu_ö°_l⁄g
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
Æu_ö°
;

171 
ö°
->
öfo
 = 
	`IN_RANGE
(
Æu_ö°_l⁄g
, 0, 
AMD_INST_INFO_ALU_LONG_SIZE
 - 1) ?

172 
amd_ö°_öfo_Æu_l⁄g
[
Æu_ö°_l⁄g
] : 
NULL
;

173 i‡(!
ö°
->
öfo
)

174 
	`Áèl
("unknown ALU instruction;álu_inst_short=%d,álu_inst_long=%d",

175 
Æu_ö°_sh‹t
, 
Æu_ö°_l⁄g
);

179  
buf
 + 8;

180 
	}
}

183 *
	$amd_ö°_decode_Æu_group
(*
buf
, 
group_id
, 
amd_Æu_group_t
 *
group
)

185 
de°_ch™
, 
ch™
, 
œ°
;

186 
amd_ö°_t
 *
ö°
;

187 
amd_Æu_íum
 
Æu
;

188 
Æu_busy
[
AMD_ALU_COUNT
];

191 
	`mem£t
(
group
, 0, (
amd_Æu_group_t
));

192 
group
->
id
 = 
group_id
;

193 
	`mem£t
(
Æu_busy
, 0, (alu_busy));

199 
	`as£π
(
group
->
ö°_cou¡
 < 5);

200 
ö°
 = &
group
->ö°[group->
ö°_cou¡
];

201 
buf
 = 
	`amd_ö°_decode_Æu
(buf, 
ö°
);

202 
ö°
->
Æu_group
 = 
group
;

203 
œ°
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.last;

208 i‡(
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c0_£l
 == 253) {

209 
ch™
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c0_ch™
;

210 
group
->
lôîÆ_cou¡
 = 
	`MAX
(group->lôîÆ_cou¡, (
ch™
 + 2) / 2);

212 i‡(
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c1_£l
 == 253) {

213 
ch™
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c1_ch™
;

214 
group
->
lôîÆ_cou¡
 = 
	`MAX
(group->lôîÆ_cou¡, (
ch™
 + 2) / 2);

216 i‡(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP3
 && in°->
w‹ds
[1].
Æu_w‹d1_›3
.
§c2_£l
 == 253) {

217 
ch™
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›3
.
§c2_ch™
;

218 
group
->
lôîÆ_cou¡
 = 
	`MAX
(group->lôîÆ_cou¡, (
ch™
 + 2) / 2);

226 
de°_ch™
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
d°_ch™
;

227 
Æu
 = 
ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_TRANS_ONLY
 ? 
AMD_ALU_TRANS
 : 
de°_ch™
;

228 i‡(
Æu_busy
[
Æu
])

229 
Æu
 = 
AMD_ALU_TRANS
;

230 i‡(
Æu_busy
[
Æu
])

231 
	`Áèl
("group_id=%d, in°_id=%d: c™nŸáŒoˇã ALU", 
group_id
, 
group
->
ö°_cou¡
);

232 
Æu_busy
[
Æu
] = 1;

233 
ö°
->
Æu
 =álu;

236 
group
->
ö°_cou¡
++;

238 } !
œ°
);

242 
	`mem˝y
(
group
->
lôîÆ
, 
buf
, group->
lôîÆ_cou¡
 * 8);

243 
buf
 +
group
->
lôîÆ_cou¡
 * 8;

246  
buf
;

247 
	}
}

250 *
	$amd_ö°_decode_tc
(*
buf
, 
amd_ö°_t
 *
ö°
)

252 
uöt32_t
 
ãx_ö°
;

255 
	`mem£t
(
ö°
, 0, (
amd_ö°_t
));

256 
	`mem˝y
(
ö°
->
w‹ds
, 
buf
, 12);

259 
ãx_ö°
 = 
ö°
->
w‹ds
[0].
ãx_w‹d0
.tex_inst;

260 
ö°
->
öfo
 = 
	`IN_RANGE
(
ãx_ö°
, 0, 
AMD_INST_INFO_TEX_SIZE
 - 1) ?

261 
amd_ö°_öfo_ãx
[
ãx_ö°
] : 
NULL
;

262 i‡(!
ö°
->
öfo
)

263 
	`Áèl
("unknow¿TEX in°ru˘i⁄;Åex_ö°=%d", 
ãx_ö°
);

266  
buf
 + 16;

267 
	}
}

275 
°rög_m≠_t
 
	gamd_pv_m≠
 = {

277 { "PV.x", 
AMD_ALU_X
 },

278 { "PV.y", 
AMD_ALU_Y
 },

279 { "PV.z", 
AMD_ALU_Z
 },

280 { "PV.w", 
AMD_ALU_W
 },

281 { "PS", 
AMD_ALU_TRANS
 }

285 
°rög_m≠_t
 
	gamd_Æu_m≠
 = {

287 { "x", 
AMD_ALU_X
 },

288 { "y", 
AMD_ALU_Y
 },

289 { "z", 
AMD_ALU_Z
 },

290 { "w", 
AMD_ALU_W
 },

291 { "t", 
AMD_ALU_TRANS
 }

295 
°rög_m≠_t
 
	gb™k_swizzÀ_m≠
 = {

306 
°rög_m≠_t
 
	gøt_ö°_m≠
 = {

351 
°rög_m≠_t
 
	gcf_c⁄d_m≠
 = {

361 
°rög_m≠_t
 
	g§c_£l_m≠
 = {

398 
°rög_m≠_t
 
	gd°_£l_m≠
 = {

411 
	$amd_ö°_is_tokí
(*
fmt_°r
, *
tokí_°r
, *
tokí_°r_Àn
)

413 *
tokí_°r_Àn
 = 
	`°æí
(
tokí_°r
);

414  !
	`°∫cmp
(
fmt_°r
, 
tokí_°r
, *
tokí_°r_Àn
) &&

415 !
	`iß um
(
fmt_°r
[*
tokí_°r_Àn
]);

416 
	}
}

419 *
	$amd_ö°_tokí_¥efix
(
lo›_idx
, *
∆
)

421 
tokí_¥efix
[
MAX_STRING_SIZE
];

424 
tokí_¥efix
[0] = '\0';

427 i‡(*
∆
) {

428 
shi·_cou¡
 = 
lo›_idx
 * 4 + 9;

429 
tokí_¥efix
[0] = '\n';

430 
	`mem£t
(
tokí_¥efix
 + 1, ' ', 
shi·_cou¡
);

431 
tokí_¥efix
[
shi·_cou¡
 + 2] = '\0';

432 *
∆
 = 0;

436  
tokí_¥efix
;

437 
	}
}

440 
	$amd_ö°_dump_kˇche
(
kˇche_idx
, 
kˇche_b™k
, 
kˇche_mode
, 
kˇche_addr
, 
FILE
 *
f
)

442 i‡(!
kˇche_mode
)

444 
	`Ârötf
(
f
, "KCACHE%d(CB%d:", 
kˇche_idx
, 
kˇche_b™k
);

445 
kˇche_mode
) {

447 
	`Ârötf
(
f
, "%d-%d", 
kˇche_addr
 * 16, kcache_addr * 16 + 15);

452 
	`Áèl
("amd_ö°_dump_kˇche: kˇche_mode=%dÇŸ suµ‹ãd", 
kˇche_mode
);

454 
	`Ârötf
(
f
, ") ");

455 
	}
}

458 
	$amd_ö°_dump_g¥
(
g¥
, 
ªl
, 
ch™
, 
im
, 
FILE
 *
f
)

460 
g¥_°r
[
MAX_STRING_SIZE
];

463 i‡(
g¥
 <= 123)

464 
	`•rötf
(
g¥_°r
, "R%d", 
g¥
);

466 
	`•rötf
(
g¥_°r
, "T%d", 127 - 
g¥
);

469 i‡(
ªl
) {

470 i‡(
ªl
 && 
	`IN_RANGE
(
im
, 0, 3))

471 
	`Ârötf
(
f
, "%s[A0.%s]", 
g¥_°r
, 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
im
));

472 i‡(
im
 == 4)

473 
	`Ârötf
(
f
, "%s[AL]", 
g¥_°r
);

474 i‡(
im
 == 5)

475 
	`Ârötf
(
f
, "SR%d", 
g¥
);

476 i‡(
im
 == 6)

477 
	`Ârötf
(
f
, "SR%d[A0.x]", 
g¥
);

479 
	`Ârötf
(
f
, "%s", 
g¥_°r
);

482 i‡(
ch™
 >= 0)

483 
	`Ârötf
(
f
, ".%s", 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

484 
	}
}

487 
	$amd_ö°_dump_›_de°
(
amd_ö°_t
 *
ö°
, 
FILE
 *
f
)

489 
g¥
, 
ªl
, 
ch™
, 
ödex_mode
;

493 
g¥
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
d°_g¥
;

494 
ªl
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
d°_ªl
;

495 
ch™
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
d°_ch™
;

496 
ödex_mode
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.index_mode;

499 i‡(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 && !ö°->
w‹ds
[1].
Æu_w‹d1_›2
.
wrôe_mask
) {

500 
	`Ârötf
(
f
, "____");

505 
	`amd_ö°_dump_g¥
(
g¥
, 
ªl
, 
ch™
, 
ödex_mode
, 
f
);

506 
	}
}

510 
	$amd_ö°_gë_›_§c
(
amd_ö°_t
 *
ö°
, 
§c_idx
,

511 *
£l
, *
ªl
, *
ch™
, *
√g
, *
abs
)

514 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_ALU_WORD0


515 || 
ö°
->
öfo
->
fmt
[0] =
FMT_ALU_WORD0_LDS_IDX_OP
);

516 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2


517 || 
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP3


518 || 
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_LDS_IDX_OP
);

521 
§c_idx
) {

529 *
£l
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c0_£l
;

530 *
ªl
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c0_ªl
;

531 *
ch™
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c0_ch™
;

537 *
√g
 = 
ö°
->
öfo
->
fmt
[0] =
FMT_ALU_WORD0
 ? in°->
w‹ds
[0].
Æu_w‹d0
.
§c0_√g
 : 0;

543 *
abs
 = 
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 ? in°->
w‹ds
[1].
Æu_w‹d1_›2
.
§c0_abs
 : 0;

552 *
£l
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c1_£l
;

553 *
ªl
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c1_ªl
;

554 *
ch™
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.
§c1_ch™
;

560 *
√g
 = 
ö°
->
öfo
->
fmt
[0] =
FMT_ALU_WORD0
 ? in°->
w‹ds
[0].
Æu_w‹d0
.
§c1_√g
 : 0;

566 *
abs
 = 
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 ? in°->
w‹ds
[1].
Æu_w‹d1_›2
.
§c1_abs
 : 0;

575 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP3


576 || 
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_LDS_IDX_OP
);

577 *
£l
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›3
.
§c2_£l
;

578 *
ªl
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›3
.
§c2_ªl
;

579 *
ch™
 = 
ö°
->
w‹ds
[1].
Æu_w‹d1_›3
.
§c2_ch™
;

585 *
√g
 = 
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP3
 ? in°->
w‹ds
[1].
Æu_w‹d1_›3
.
§c2_√g
 : 0;

591 *
abs
 = 0;

595 
	`Áèl
("amd_inst_dump_op_src: wrong src_idx");

597 
	}
}

600 
	$amd_ö°_dump_›_§c
(
amd_ö°_t
 *
ö°
, 
§c_idx
, 
FILE
 *
f
)

602 
£l
, 
ªl
, 
ch™
, 
√g
, 
abs
;

605 
	`amd_ö°_gë_›_§c
(
ö°
, 
§c_idx
,

606 &
£l
, &
ªl
, &
ch™
, &
√g
, &
abs
);

609 i‡(
√g
)

610 
	`Ârötf
(
f
, "-");

611 i‡(
abs
)

612 
	`Ârötf
(
f
, "|");

615 i‡(
	`IN_RANGE
(
£l
, 0, 127)) {

616 
ödex_mode
;

617 
ödex_mode
 = 
ö°
->
w‹ds
[0].
Æu_w‹d0
.index_mode;

618 
	`amd_ö°_dump_g¥
(
£l
, 
ªl
, 
ch™
, 
ödex_mode
, 
f
);

619 
íd
;

623 i‡(
	`IN_RANGE
(
£l
, 128, 159)) {

624 
	`Ârötf
(
f
, "KC0[%d].%s", 
£l
 - 128, 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

625 
íd
;

629 i‡(
	`IN_RANGE
(
£l
, 160, 191)) {

630 
	`Ârötf
(
f
, "KC1[%d].%s", 
£l
 - 160, 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

631 
íd
;

635 i‡(
	`IN_RANGE
(
£l
, 256, 287)) {

636 
	`Ârötf
(
f
, "KC2[%d].%s", 
£l
 - 256, 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

637 
íd
;

641 i‡(
	`IN_RANGE
(
£l
, 288, 319)) {

642 
	`Ârötf
(
f
, "KC3[%d].%s", 
£l
 - 288, 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

643 
íd
;

647 i‡(
£l
 == 253) {

648 
uöt32_t
 
lôîÆ_öt
;

649 
lôîÆ_Êﬂt
;

651 
	`as£π
(
ö°
->
Æu_group
);

652 
lôîÆ_Êﬂt
 = 
ö°
->
Æu_group
->
lôîÆ
[
ch™
];

653 
lôîÆ_öt
 = * (
uöt32_t
 *Ë&
lôîÆ_Êﬂt
;

654 
	`Ârötf
(
f
, "(0x%08x, %.9ef).%s", 
lôîÆ_öt
, 
lôîÆ_Êﬂt
, 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

655 
íd
;

659 i‡(
£l
 == 254) {

660 
	`Ârötf
(
f
, "PV.%s", 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
AMD_ALU_X
 + 
ch™
));

661 
íd
;

665 
	`Ârötf
(
f
, "%s", 
	`m≠_vÆue
(&
§c_£l_m≠
, 
£l
));

667 
íd
:

669 i‡(
abs
)

670 
	`Ârötf
(
f
, "|");

671 
	}
}

674 
	$amd_ö°_dump
(
amd_ö°_t
 *
ö°
, 
cou¡
, 
lo›_idx
, 
FILE
 *
f
)

676 
shi·_°r
[
MAX_STRING_SIZE
];

677 *
fmt_°r
;

678 
Àn
;

679 
∆
 = 0;

682 
	`mem£t
(
shi·_°r
, ' ', 
MAX_STRING_SIZE
);

683 
shi·_°r
[
lo›_idx
 * 4] = '\0';

684 
	`Ârötf
(
f
, "%s", 
shi·_°r
);

687 i‡(
ö°
->
öfo
->
ˇãg‹y
 =
AMD_CAT_CF
) {

688 
	`as£π
(
cou¡
 >= 0);

689 
	`Ârötf
(
f
, "%02d ", 
cou¡
);

691 i‡(
cou¡
 >= 0)

692 
	`Ârötf
(
f
, " %2d ", 
cou¡
);

694 
	`Ârötf
(
f
, " ");

698 i‡(
ö°
->
öfo
->
ˇãg‹y
 =
AMD_CAT_ALU
)

699 
	`Ârötf
(
f
, "%s: ", 
	`m≠_vÆue
(&
amd_Æu_m≠
, 
ö°
->
Æu
));

702 
fmt_°r
 = 
ö°
->
öfo
->fmt_str;

703 *
fmt_°r
) {

706 i‡(*
fmt_°r
 != '%') {

707 
	`Ârötf
(
f
, "%c", *
fmt_°r
);

708 
fmt_°r
++;

713 
fmt_°r
++;

714 i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "«me", &
Àn
)) {

716 i‡(
ö°
->
öfo
->
ˇãg‹y
 =
AMD_CAT_ALU
)

717 
	`Ârötf
(
f
, "%-11s", 
ö°
->
öfo
->
«me
);

719 
	`Ârötf
(
f
, "%s", 
ö°
->
öfo
->
«me
);

721 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "Æu_d°", &
Àn
)) {

723 
	`amd_ö°_dump_›_de°
(
ö°
, 
f
);

725 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "Æu_§c0", &
Àn
)) {

727 
	`amd_ö°_dump_›_§c
(
ö°
, 0, 
f
);

729 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "Æu_§c1", &
Àn
)) {

731 
	`amd_ö°_dump_›_§c
(
ö°
, 1, 
f
);

733 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "Æu_§c2", &
Àn
)) {

735 
	`amd_ö°_dump_›_§c
(
ö°
, 2, 
f
);

737 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "Æu_mod", &
Àn
)) {

740 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 || in°->öfo->fmt[1] =
FMT_ALU_WORD1_OP3
);

741 
	`Ârötf
(
f
, " ");

745 
	`Ârötf
(
f
, "%s", 
	`m≠_vÆue
(&
b™k_swizzÀ_m≠
, 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
b™k_swizzÀ
));

748 i‡(
ö°
->
w‹ds
[0].
Æu_w‹d0
.
¥ed_£l
 == 2)

749 
	`Ârötf
(
f
, " (!p)");

750 i‡(
ö°
->
w‹ds
[0].
Æu_w‹d0
.
¥ed_£l
 == 3)

751 
	`Ârötf
(
f
, " (p)");

754 i‡(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 && in°->
w‹ds
[1].
Æu_w‹d1_›2
.
upd©e_exec_mask
)

755 
	`Ârötf
(
f
, " UPDATE_EXEC_MASK");

758 i‡(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 && in°->
w‹ds
[1].
Æu_w‹d1_›2
.
upd©e_¥ed
)

759 
	`Ârötf
(
f
, " UPDATE_PRED");

761 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "omod", &
Àn
)) {

763 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
);

764 
ö°
->
w‹ds
[1].
Æu_w‹d1_›2
.
omod
) {

765 0: 
	`Ârötf
(
f
, " "); ;

766 1: 
	`Ârötf
(
f
, "*2"); ;

767 2: 
	`Ârötf
(
f
, "*4"); ;

768 3: 
	`Ârötf
(
f
, "/2"); ;

771 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "cf_addr", &
Àn
)) {

773 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_WORD0
);

774 
	`Ârötf
(
f
, "%d", 
ö°
->
w‹ds
[0].
cf_w‹d0
.
addr
);

776 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "cf_˙t", &
Àn
)) {

778 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
);

779 
	`Ârötf
(
f
, "%d", 
ö°
->
w‹ds
[1].
cf_w‹d1
.
cou¡
 + 1);

781 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "p›_cou¡", &
Àn
)) {

783 
p›_cou¡
;

784 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
);

785 
p›_cou¡
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.pop_count;

786 i‡(
p›_cou¡
)

787 
	`Ârötf
(
f
, "POP_CNT(%d)", 
p›_cou¡
);

789 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "cf_c⁄d", &
Àn
)) {

791 
cf_c⁄d
, 
vÆid_pixñ_mode
;

792 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
);

793 
vÆid_pixñ_mode
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.valid_pixel_mode;

794 
cf_c⁄d
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.
c⁄d
;

795 i‡(
vÆid_pixñ_mode
 && 
cf_c⁄d
)

796 
	`Ârötf
(
f
, "CND(%s)", 
	`m≠_vÆue
(&
cf_c⁄d_m≠
, 
cf_c⁄d
));

798 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "cf_c⁄°", &
Àn
)) {

800 
cf_c⁄°
, 
cf_c⁄d
, 
vÆid_pixñ_mode
;

801 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
);

802 
vÆid_pixñ_mode
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.valid_pixel_mode;

803 
cf_c⁄d
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.
c⁄d
;

804 
cf_c⁄°
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.cf_const;

805 i‡(
vÆid_pixñ_mode
 && 
	`IN_RANGE
(
cf_c⁄d
, 2, 3))

806 
	`Ârötf
(
f
, "CF_CONST(%d)", 
cf_c⁄°
);

808 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "wqm", &
Àn
)) {

810 
whﬁe_quad_mode
;

811 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
 || in°->öfo->fmt[1] =
FMT_CF_ALU_WORD1
);

812 
whﬁe_quad_mode
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.whole_quad_mode;

813 i‡(
whﬁe_quad_mode
)

814 
	`Ârötf
(
f
, "WHOLE_QUAD");

816 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vpm", &
Àn
)) {

818 
vÆid_pixñ_mode
;

819 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
 ||

820 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
 ||

821 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
);

822 
vÆid_pixñ_mode
 = 
ö°
->
w‹ds
[1].
cf_w‹d1
.valid_pixel_mode;

823 i‡(
vÆid_pixñ_mode
)

824 
	`Ârötf
(
f
, "VPM");

826 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "cf_Æu_addr", &
Àn
)) {

828 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALU_WORD0
);

829 
	`Ârötf
(
f
, "%d", 
ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
addr
);

831 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "cf_Æu_˙t", &
Àn
)) {

833 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALU_WORD1
);

834 
	`Ârötf
(
f
, "%d", 
ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
cou¡
 + 1);

836 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "lo›_idx", &
Àn
)) {

838 
	`Ârötf
(
f
, "i%d", 
lo›_idx
);

840 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "m¨k", &
Àn
)) {

842 
m¨k
;

843 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
 ||

844 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
);

845 
m¨k
 = 
ö°
->
w‹ds
[1].
cf_Æloc_exp‹t_w‹d1_buf
.mark;

846 i‡(
m¨k
)

847 
	`Ârötf
(
f
, "MARK");

849 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "bur°_cou¡", &
Àn
)) {

851 
bur°_cou¡
;

852 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
 ||

853 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
);

854 
bur°_cou¡
 = 
ö°
->
w‹ds
[1].
cf_Æloc_exp‹t_w‹d1_buf
.burst_count;

855 i‡(
bur°_cou¡
)

856 
	`Ârötf
(
f
, "BRSTCNT(%d)", 
bur°_cou¡
);

858 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "no_b¨rõr", &
Àn
)) {

860 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
 || in°->öfo->fmt[1] =
FMT_CF_ALU_WORD1
 ||

861 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALU_WORD1_EXT
 ||

862 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
 ||

863 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
);

864 i‡(!
ö°
->
w‹ds
[1].
cf_w‹d1
.
b¨rõr
)

865 
	`Ârötf
(
f
, "NO_BARRIER");

867 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vpm", &
Àn
)) {

869 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_WORD1
 ||

870 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
 ||

871 
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_SWIZ
);

872 i‡(
ö°
->
w‹ds
[1].
cf_w‹d1
.
vÆid_pixñ_mode
)

873 
	`Ârötf
(
f
, "VPM");

875 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "kˇche", &
Àn
)) {

877 
	`amd_ö°_dump_kˇche
(0,

878 
ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
kˇche_b™k0
,

879 
ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
kˇche_mode0
,

880 
ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
kˇche_addr0
,

881 
f
);

882 
	`amd_ö°_dump_kˇche
(1,

883 
ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
kˇche_b™k1
,

884 
ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
kˇche_mode1
,

885 
ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
kˇche_addr1
,

886 
f
);

888 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "øt_ö°", &
Àn
)) {

890 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

891 
	`Ârötf
(
f
, "%s", 
	`m≠_vÆue
(&
øt_ö°_m≠
, 
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0_øt
.
øt_ö°
));

893 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "øt_id", &
Àn
)) {

895 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

896 
	`Ârötf
(
f
, "%d", 
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0_øt
.
øt_id
);

898 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "øt_ödex_mode", &
Àn
)) {

900 
rim
;

901 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

902 
rim
 = 
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0_øt
.
øt_ödex_mode
;

903 i‡(
rim
)

904 
	`Ârötf
(
f
, "+idx%d", 
rim
 - 1);

906 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "øt_ödex_g¥", &
Àn
)) {

908 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

909 
	`amd_ö°_dump_g¥
(
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0_øt
.
ödex_g¥
, 0, -1, 0, 
f
);

911 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "comp_mask", &
Àn
)) {

913 
comp_mask
;

914 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
);

915 
comp_mask
 = 
ö°
->
w‹ds
[1].
cf_Æloc_exp‹t_w‹d1_buf
.comp_mask;

916 i‡(
comp_mask
 != 0xf)

917 
	`Ârötf
(
f
, ".%s%s%s%s", 
comp_mask
 & 1 ? "x" : "_", comp_mask & 2 ? "y" : "_",

918 
comp_mask
 & 4 ? "z" : "_", comp_mask & 8 ? "w" : "_");

920 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "øt_rw_g¥", &
Àn
)) {

922 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

923 
	`amd_ö°_dump_g¥
(
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0_øt
.
rw_g¥
, 0, -1, 0, 
f
);

925 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "¨øy_size", &
Àn
)) {

927 
ñem_size
, 
¨øy_size
;

928 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0
 || in°->öfo->fmt[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

929 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_CF_ALLOC_EXPORT_WORD1_BUF
);

930 
ñem_size
 = 
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0
.elem_size;

931 
¨øy_size
 = 
ö°
->
w‹ds
[1].
cf_Æloc_exp‹t_w‹d1_buf
.array_size;

932 
	`Ârötf
(
f
, "ARRAY_SIZE(%d", 
¨øy_size
);

933 i‡(
ñem_size
)

934 
	`Ârötf
(
f
, ",%d", 
ñem_size
 + 1);

935 
	`Ârötf
(
f
, ")");

937 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "ñem_size", &
Àn
)) {

939 
ñem_size
;

940 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALLOC_EXPORT_WORD0
 || in°->öfo->fmt[0] =
FMT_CF_ALLOC_EXPORT_WORD0_RAT
);

941 
ñem_size
 = 
ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0
.elem_size;

942 i‡(
ñem_size
)

943 
	`Ârötf
(
f
, "ELEM_SIZE(%d)", 
ñem_size
);

945 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_d°_g¥", &
Àn
)) {

947 
d°_g¥
, 
d°_ªl
;

948 
d°_£l_w
, 
d°_£l_z
, 
d°_£l_y
, 
d°_£l_x
;

951 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_VTX_WORD1_GPR
);

952 
d°_g¥
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.dst_gpr;

953 
d°_ªl
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.dst_rel;

954 
	`amd_ö°_dump_g¥
(
d°_g¥
, 
d°_ªl
, -1, 0, 
f
);

957 
d°_£l_x
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.dst_sel_x;

958 
d°_£l_y
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.dst_sel_y;

959 
d°_£l_z
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.dst_sel_z;

960 
d°_£l_w
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.dst_sel_w;

961 i‡(
d°_£l_x
 !0 || 
d°_£l_y
 !1 || 
d°_£l_z
 !2 || 
d°_£l_w
 != 3)

962 
	`Ârötf
(
f
, ".%s%s%s%s", 
	`m≠_vÆue
(&
d°_£l_m≠
, 
d°_£l_x
), m≠_vÆue(&d°_£l_m≠, 
d°_£l_y
),

963 
	`m≠_vÆue
(&
d°_£l_m≠
, 
d°_£l_z
), m≠_vÆue(&d°_£l_m≠, 
d°_£l_w
));

965 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_„tch_ty≥", &
Àn
)) {

967 
„tch_ty≥
;

968 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_VTX_WORD0
);

969 
„tch_ty≥
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.fetch_type;

970 i‡(
„tch_ty≥
)

971 
	`Ârötf
(
f
, "%sFETCH_TYPE(%s)", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
),

972 
	`m≠_vÆue
(&
fmt_vtx_„tch_ty≥_m≠
, 
„tch_ty≥
));

974 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_„tch_whﬁe_quad", &
Àn
)) {

976 
„tch_whﬁe_quad
;

977 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_VTX_WORD0
);

978 
„tch_whﬁe_quad
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.fetch_whole_quad;

979 i‡(
„tch_whﬁe_quad
)

980 
	`Ârötf
(
f
, "WHOLE_QUAD");

982 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_buf„r_id", &
Àn
)) {

984 
buf„r_id
;

985 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_VTX_WORD0
);

986 
buf„r_id
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.buffer_id;

987 
	`Ârötf
(
f
, "fc%d", 
buf„r_id
);

989 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_§c_g¥", &
Àn
)) {

991 
§c_g¥
, 
§c_ªl
, 
§c_£l
;

992 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_VTX_WORD0
);

993 
§c_g¥
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.src_gpr;

994 
§c_ªl
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.src_rel;

995 
§c_£l
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.
§c_£l_x
;

996 
	`amd_ö°_dump_g¥
(
§c_g¥
, 
§c_ªl
, 
§c_£l
, 0, 
f
);

998 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_d©a_f‹m©", &
Àn
)) {

1000 
d©a_f‹m©
, 
u£_c⁄°_fõlds
;

1002 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_VTX_WORD1_GPR
 || in°->öfo->fmt[1] =
FMT_VTX_WORD1_SEM
);

1003 
d©a_f‹m©
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.data_format;

1004 
u£_c⁄°_fõlds
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.use_const_fields;

1005 i‡(!
u£_c⁄°_fõlds
)

1006 
	`Ârötf
(
f
, "%sFORMAT(%s)", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
),

1007 
	`m≠_vÆue
(&
fmt_vtx_d©a_f‹m©_m≠
, 
d©a_f‹m©
));

1009 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_num_f‹m©", &
Àn
)) {

1011 
num_f‹m©
, 
u£_c⁄°_fõlds
;

1013 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_VTX_WORD1_GPR
 || in°->öfo->fmt[1] =
FMT_VTX_WORD1_SEM
);

1014 
num_f‹m©
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.
num_f‹m©_Æl
;

1015 
u£_c⁄°_fõlds
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.use_const_fields;

1016 i‡(!
u£_c⁄°_fõlds
 && 
num_f‹m©
)

1017 
	`Ârötf
(
f
, "%sNUM_FORMAT(%s)", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
),

1018 
	`m≠_vÆue
(&
fmt_vtx_num_f‹m©_m≠
, 
num_f‹m©
));

1020 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_f‹m©_comp", &
Àn
)) {

1022 
f‹m©_comp
, 
u£_c⁄°_fõlds
;

1024 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_VTX_WORD1_GPR
 || in°->öfo->fmt[1] =
FMT_VTX_WORD1_SEM
);

1025 
f‹m©_comp
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.
f‹m©_comp_Æl
;

1026 
u£_c⁄°_fõlds
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.use_const_fields;

1027 i‡(!
u£_c⁄°_fõlds
 && 
f‹m©_comp
)

1028 
	`Ârötf
(
f
, "%sFORMAT_COMP(%s)", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
),

1029 
	`m≠_vÆue
(&
fmt_vtx_f‹m©_comp_m≠
, 
f‹m©_comp
));

1031 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_§f_mode", &
Àn
)) {

1033 
§f_mode
, 
u£_c⁄°_fõlds
;

1035 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_VTX_WORD1_GPR
 || in°->öfo->fmt[1] =
FMT_VTX_WORD1_SEM
);

1036 
§f_mode
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.
§f_mode_Æl
;

1037 
u£_c⁄°_fõlds
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.use_const_fields;

1038 i‡(!
u£_c⁄°_fõlds
 && 
§f_mode
)

1039 
	`Ârötf
(
f
, "%sSRF_MODE(%s)", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
),

1040 
	`m≠_vÆue
(&
fmt_vtx_§f_mode_m≠
, 
§f_mode
));

1042 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_off£t", &
Àn
)) {

1044 
off£t
;

1045 
	`as£π
(
ö°
->
öfo
->
fmt
[2] =
FMT_VTX_WORD2
);

1046 
off£t
 = 
ö°
->
w‹ds
[2].
vtx_w‹d2
.offset;

1047 i‡(
off£t
)

1048 
	`Ârötf
(
f
, "OFFSET(%d)", 
off£t
);

1050 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_ídün_sw≠", &
Àn
)) {

1052 
ídün_sw≠
, 
u£_c⁄°_fõlds
;

1054 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_VTX_WORD1_GPR
 || in°->öfo->fmt[1] =
FMT_VTX_WORD1_SEM
);

1055 
	`as£π
(
ö°
->
öfo
->
fmt
[2] =
FMT_VTX_WORD2
);

1056 
u£_c⁄°_fõlds
 = 
ö°
->
w‹ds
[1].
vtx_w‹d1_g¥
.use_const_fields;

1057 
ídün_sw≠
 = 
ö°
->
w‹ds
[2].
vtx_w‹d2
.endian_swap;

1058 i‡(!
u£_c⁄°_fõlds
 && 
ídün_sw≠
)

1059 
	`Ârötf
(
f
, "%sENDIAN_SWAP(%s)", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
),

1060 
	`m≠_vÆue
(&
fmt_vtx_ídün_sw≠_m≠
, 
ídün_sw≠
));

1062 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_cbns", &
Àn
)) {

1064 
cbns
;

1065 
	`as£π
(
ö°
->
öfo
->
fmt
[2] =
FMT_VTX_WORD2
);

1066 
cbns
 = 
ö°
->
w‹ds
[2].
vtx_w‹d2
.
c⁄°_buf_no_°ride
;

1067 i‡(
cbns
)

1068 
	`Ârötf
(
f
, "%sCONST_BUF_NO_STRIDE", 
	`amd_ö°_tokí_¥efix
(
lo›_idx
, &
∆
));

1070 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "vtx_mega_„tch", &
Àn
)) {

1072 
mega_„tch_cou¡
;

1073 
	`as£π
(
ö°
->
öfo
->
fmt
[0] =
FMT_VTX_WORD0
);

1074 
mega_„tch_cou¡
 = 
ö°
->
w‹ds
[0].
vtx_w‹d0
.mega_fetch_count;

1075 
	`Ârötf
(
f
, "MEGA(%d)", 
mega_„tch_cou¡
 + 1);

1077 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "lds_›", &
Àn
)) {

1079 
	`as£π
(
ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_LDS_IDX_OP
);

1080 
	`Ârötf
(
f
, "%s", 
	`m≠_vÆue
(&
fmt_lds_›_m≠
,

1081 
ö°
->
w‹ds
[1].
Æu_w‹d1_lds_idx_›
.
lds_›
));

1083 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "∆", &
Àn
)) {

1086 
∆
 = 1;

1088 } i‡(
	`amd_ö°_is_tokí
(
fmt_°r
, "dump", &
Àn
)) {

1090 
i
;

1091 
	`Ârötf
(
f
, "\n\n");

1092 
i
 = 0; i < 
AMD_INST_MAX_WORDS
; i++)

1093 i‡(
ö°
->
öfo
->
fmt
[
i
])

1094 
	`fmt_w‹d_dump
(
ö°
->
w‹ds
[
i
].
byãs
, in°->
öfo
->
fmt
[i], 
f
);

1097 
	`Áèl
("%s:ÅokíÇŸÑecognized", 
fmt_°r
);

1098 
fmt_°r
 +
Àn
;

1100 
	`Ârötf
(
f
, "\n");

1101 
	}
}

1104 
	$amd_ö°_w‹ds_dump
(
amd_ö°_t
 *
ö°
, 
FILE
 *
f
)

1106 
i
;

1107 
	`Ârötf
(
f
, "%s\n", 
ö°
->
öfo
->
«me
);

1108 
i
 = 0; i < 
AMD_INST_MAX_WORDS
; i++) {

1109 i‡(!
ö°
->
öfo
->
fmt
[
i
])

1111 
	`fmt_w‹d_dump
(&
ö°
->
w‹ds
[
i
], in°->
öfo
->
fmt
[i], 
f
);

1113 
	}
}

1116 
	$amd_Æu_group_dump
(
amd_Æu_group_t
 *
group
, 
shi·
, 
FILE
 *
f
)

1118 
i
;

1120 
i
 = 0; i < 
group
->
ö°_cou¡
; i++)

1121 
	`amd_ö°_dump
(&
group
->
ö°
[
i
], i ? -1 : group->
id
, 
shi·
, 
f
);

1124 
	}
}

	@libgpudisasm/gpudisasm.h

20 #i‚de‡
GPUDISASM_H


21 
	#GPUDISASM_H


	)

23 
	~<°döt.h
>

24 
	~<°dio.h
>

28 
	efmt_íum
 {

30 
	mFMT_NONE
 = 0,

33 
	mFMT_CF_WORD0
,

34 
	mFMT_CF_GWS_WORD0
,

35 
	mFMT_CF_WORD1
,

37 
	mFMT_CF_ALU_WORD0
,

38 
	mFMT_CF_ALU_WORD1
,

40 
	mFMT_CF_ALU_WORD0_EXT
,

41 
	mFMT_CF_ALU_WORD1_EXT
,

43 
	mFMT_CF_ALLOC_EXPORT_WORD0
,

44 
	mFMT_CF_ALLOC_EXPORT_WORD0_RAT
,

45 
	mFMT_CF_ALLOC_EXPORT_WORD1_BUF
,

46 
	mFMT_CF_ALLOC_EXPORT_WORD1_SWIZ
,

49 
	mFMT_ALU_WORD0
,

50 
	mFMT_ALU_WORD1_OP2
,

51 
	mFMT_ALU_WORD1_OP3
,

54 
	mFMT_ALU_WORD0_LDS_IDX_OP
,

55 
	mFMT_ALU_WORD1_LDS_IDX_OP
,

56 
	mFMT_ALU_WORD1_LDS_DIRECT_LITERAL_LO
,

57 
	mFMT_ALU_WORD1_LDS_DIRECT_LITERAL_HI
,

60 
	mFMT_VTX_WORD0
,

61 
	mFMT_VTX_WORD1_GPR
,

62 
	mFMT_VTX_WORD1_SEM
,

63 
	mFMT_VTX_WORD2
,

66 
	mFMT_TEX_WORD0
,

67 
	mFMT_TEX_WORD1
,

68 
	mFMT_TEX_WORD2
,

71 
	mFMT_MEM_RD_WORD0
,

72 
	mFMT_MEM_RD_WORD1
,

73 
	mFMT_MEM_RD_WORD2
,

76 
	mFMT_MEM_GDS_WORD0
,

77 
	mFMT_MEM_GDS_WORD1
,

78 
	mFMT_MEM_GDS_WORD2
,

81 
	mFMT_COUNT


86 
	eamd_Æu_íum
 {

88 
	mAMD_ALU_X
 = 0,

89 
	mAMD_ALU_Y
,

90 
	mAMD_ALU_Z
,

91 
	mAMD_ALU_W
,

92 
	mAMD_ALU_TRANS
,

94 
	mAMD_ALU_COUNT


104 
°rög_m≠_t
 
amd_pv_m≠
;

105 
°rög_m≠_t
 
amd_Æu_m≠
;

106 
°rög_m≠_t
 
b™k_swizzÀ_m≠
;

107 
°rög_m≠_t
 
øt_ö°_m≠
;

108 
°rög_m≠_t
 
cf_c⁄d_m≠
;

109 
°rög_m≠_t
 
§c_£l_m≠
;

110 
°rög_m≠_t
 
d°_£l_m≠
;

112 
°rög_m≠_t
 
fmt_vtx_„tch_ty≥_m≠
;

113 
°rög_m≠_t
 
fmt_vtx_d©a_f‹m©_m≠
;

114 
°rög_m≠_t
 
fmt_vtx_num_f‹m©_m≠
;

115 
°rög_m≠_t
 
fmt_vtx_f‹m©_comp_m≠
;

116 
°rög_m≠_t
 
fmt_vtx_§f_mode_m≠
;

117 
°rög_m≠_t
 
fmt_vtx_ídün_sw≠_m≠
;

118 
°rög_m≠_t
 
fmt_lds_›_m≠
;

127 
	sfmt_cf_w‹d0_t


129 
	maddr
 : 24;

130 
	mjump_èbÀ_£l
 : 3;

131 
	m__ª£rved0
 : 5;

135 
	sfmt_cf_gws_w‹d0_t


137 
	mvÆue
 : 10;

138 
	m__ª£rved0
 : 6;

139 
	mªsour˚
 : 5;

140 
	m__ª£rved1
 : 4;

141 
	ms
 : 1;

142 
	mvÆ_ödex_mode
 : 2;

143 
	mr§c_ödex_mode
 : 2;

144 
	mgws_›code
 : 2;

148 
	sfmt_cf_w‹d1_t


150 
	mp›_cou¡
 : 3;

151 
	mcf_c⁄°
 : 5;

152 
	mc⁄d
 : 2;

153 
	mcou¡
 : 6;

154 
	m__ª£rved0
 : 4;

155 
	mvÆid_pixñ_mode
 : 1;

156 
	míd_of_¥ogøm
 : 1;

157 
	mcf_ö°
 : 8;

158 
	mwhﬁe_quad_mode
 : 1;

159 
	mb¨rõr
 : 1;

163 
	sfmt_cf_Æu_w‹d0_t


165 
	maddr
 : 22;

166 
	mkˇche_b™k0
 : 4;

167 
	mkˇche_b™k1
 : 4;

168 
	mkˇche_mode0
 : 2;

172 
	sfmt_cf_Æu_w‹d1_t


174 
	mkˇche_mode1
 : 2;

175 
	mkˇche_addr0
 : 8;

176 
	mkˇche_addr1
 : 8;

177 
	mcou¡
 : 7;

178 
	mÆt_c⁄°
 : 1;

179 
	mcf_ö°
 : 4;

180 
	mwhﬁe_quad_mode
 : 1;

181 
	mb¨rõr
 : 1;

185 
	sfmt_cf_Æu_w‹d0_ext_t
 {

186 
	m__ª£rved0
 : 4;

187 
	mkˇche_b™k_ödex_mode0
 : 2;

188 
	mkˇche_b™k_ödex_mode1
 : 2;

189 
	mkˇche_b™k_ödex_mode2
 : 2;

190 
	mkˇche_b™k_ödex_mode3
 : 2;

191 
	m__ª£rved1
 : 10;

192 
	mkˇche_b™k2
 : 4;

193 
	mkˇche_b™k3
 : 4;

194 
	mkˇche_mode2
 : 2;

198 
	sfmt_cf_Æu_w‹d1_ext_t
 {

199 
	mkˇche_mode3
 : 2;

200 
	mkˇche_addr2
 : 8;

201 
	mkˇche_addr3
 : 8;

202 
	m__ª£rved0
 : 8;

203 
	mcf_ö°
 : 4;

204 
	m__ª£rved1
 : 1;

205 
	mb¨rõr
 : 1;

209 
	sfmt_cf_Æloc_exp‹t_w‹d0_t
 {

210 
	m¨øy_ba£
 : 13;

211 
	mty≥
 : 2;

212 
	mrw_g¥
 : 7;

213 
	mº
 : 1;

214 
	mödex_g¥
 : 7;

215 
	mñem_size
 : 2;

219 
	sfmt_cf_Æloc_exp‹t_w‹d0_øt_t
 {

220 
	møt_id
 : 4;

221 
	møt_ö°
 : 6;

222 
	m__ª£rved0
 : 1;

223 
	møt_ödex_mode
 : 2;

224 
	mty≥
 : 2;

225 
	mrw_g¥
 : 7;

226 
	mº
 : 1;

227 
	mödex_g¥
 : 7;

228 
	mñem_size
 : 2;

232 
	sfmt_cf_Æloc_exp‹t_w‹d1_buf_t
 {

233 
	m¨øy_size
 : 12;

234 
	mcomp_mask
 : 4;

235 
	mbur°_cou¡
 : 4;

236 
	mvÆid_pixñ_mode
 : 1;

237 
	míd_of_¥ogøm
 : 1;

238 
	mcf_ö°
 : 8;

239 
	mm¨k
 : 1;

240 
	mb¨rõr
 : 1;

244 
	sfmt_cf_Æloc_exp‹t_w‹d1_swiz_t
 {

245 
	m£l_x
 : 3;

246 
	m£l_y
 : 3;

247 
	m£l_z
 : 3;

248 
	m£l_w
 : 3;

249 
	m__ª£rved0
 : 4;

250 
	mbur°_cou¡
 : 4;

251 
	mvÆid_pixñ_mode
 : 1;

252 
	míd_of_¥ogøm
 : 1;

253 
	mcf_ö°
 : 8;

254 
	mm¨k
 : 1;

255 
	mb¨rõr
 : 1;

259 
	sfmt_Æu_w‹d0_t


261 
	m§c0_£l
 : 9;

262 
	m§c0_ªl
 : 1;

263 
	m§c0_ch™
 : 2;

264 
	m§c0_√g
 : 1;

265 
	m§c1_£l
 : 9;

266 
	m§c1_ªl
 : 1;

267 
	m§c1_ch™
 : 2;

268 
	m§c1_√g
 : 1;

269 
	mödex_mode
 : 3;

270 
	m¥ed_£l
 : 2;

271 
	mœ°
 : 1;

275 
	sfmt_Æu_w‹d1_›2_t


277 
	m§c0_abs
 : 1;

278 
	m§c1_abs
 : 1;

279 
	mupd©e_exec_mask
 : 1;

280 
	mupd©e_¥ed
 : 1;

281 
	mwrôe_mask
 : 1;

282 
	momod
 : 2;

283 
	mÆu_ö°
 : 11;

284 
	mb™k_swizzÀ
 : 3;

285 
	md°_g¥
 : 7;

286 
	md°_ªl
 : 1;

287 
	md°_ch™
 : 2;

288 
	m˛amp
 : 1;

292 
	sfmt_Æu_w‹d1_›3_t


294 
	m§c2_£l
 : 9;

295 
	m§c2_ªl
 : 1;

296 
	m§c2_ch™
 : 2;

297 
	m§c2_√g
 : 1;

298 
	mÆu_ö°
 : 5;

299 
	mb™k_swizzÀ
 : 3;

300 
	md°_g¥
 : 7;

301 
	md°_ªl
 : 1;

302 
	md°_ch™
 : 2;

303 
	m˛amp
 : 1;

307 
	sfmt_Æu_w‹d0_lds_idx_›_t


309 
	m§c0_£l
 : 9;

310 
	m§c0_ªl
 : 1;

311 
	m§c0_ch™
 : 2;

312 
	midx_off£t_4
 : 1;

313 
	m§c1_£l
 : 9;

314 
	m§c1_ªl
 : 1;

315 
	m§c1_ch™
 : 2;

316 
	midx_off£t_5
 : 1;

317 
	mödex_mode
 : 3;

318 
	m¥ed_£l
 : 2;

319 
	mœ°
 : 1;

323 
	sfmt_Æu_w‹d1_lds_idx_›_t


325 
	m§c2_£l
 : 9;

326 
	m§c2_ªl
 : 1;

327 
	m§c2_ch™
 : 2;

328 
	midx_off£t_1
 : 1;

329 
	mÆu_ö°
 : 5;

330 
	mb™k_swizzÀ
 : 3;

331 
	mlds_›
 : 6;

332 
	midx_off£t_0
 : 1;

333 
	midx_off£t_2
 : 1;

334 
	md°_ch™
 : 2;

335 
	midx_off£t_3
 : 1;

339 
	sfmt_vtx_w‹d0_t
 {

340 
	mvc_ö°
 : 5;

341 
	m„tch_ty≥
 : 2;

342 
	m„tch_whﬁe_quad
 : 1;

343 
	mbuf„r_id
 : 8;

344 
	m§c_g¥
 : 7;

345 
	m§c_ªl
 : 1;

346 
	m§c_£l_x
 : 2;

347 
	mmega_„tch_cou¡
 : 6;

351 
	sfmt_vtx_w‹d1_g¥_t
 {

352 
	md°_g¥
 : 7;

353 
	md°_ªl
 : 1;

354 
	m__ª£rved0
 : 1;

355 
	md°_£l_x
 : 3;

356 
	md°_£l_y
 : 3;

357 
	md°_£l_z
 : 3;

358 
	md°_£l_w
 : 3;

359 
	mu£_c⁄°_fõlds
 : 1;

360 
	md©a_f‹m©
 : 6;

361 
	mnum_f‹m©_Æl
 : 2;

362 
	mf‹m©_comp_Æl
 : 1;

363 
	m§f_mode_Æl
 : 1;

367 
	sfmt_vtx_w‹d1_£m_t
 {

368 
	m£m™tic_id
 : 8;

369 
	m__ª£rved0
 : 1;

370 
	md°_£l_x
 : 3;

371 
	md°_£l_y
 : 3;

372 
	md°_£l_z
 : 3;

373 
	md°_£l_w
 : 3;

374 
	mu£_c⁄°_fõlds
 : 1;

375 
	md©a_f‹m©
 : 6;

376 
	mnum_f‹m©_Æl
 : 2;

377 
	mf‹m©_comp_Æl
 : 1;

378 
	m§f_mode_Æl
 : 1;

382 
	sfmt_vtx_w‹d2_t
 {

383 
	moff£t
 : 16;

384 
	mídün_sw≠
 : 2;

385 
	mc⁄°_buf_no_°ride
 : 1;

386 
	mmega_„tch
 : 1;

387 
	m__ª£rved0
 : 12;

391 
	sfmt_ãx_w‹d0_t


393 
	mãx_ö°
 : 5;

394 
	mö°_mod
 : 2;

395 
	mfwq
 : 1;

396 
	mªsour˚_id
 : 8;

397 
	m§c_g¥
 : 7;

398 
	m§
 : 1;

399 
	mac
 : 1;

400 
	mrim
 : 2;

401 
	msim
 : 2;

402 
	m__ª£rved0
 : 3;

406 
	sfmt_ãx_w‹d1_t


408 
	md°_g¥
 : 7;

409 
	mdr
 : 1;

410 
	m__ª£rved0
 : 1;

411 
	mdsx
 : 3;

412 
	mdsy
 : 3;

413 
	mdsz
 : 3;

414 
	mdsw
 : 3;

415 
	mlod_büs
 : 7;

416 
	m˘x
 : 1;

417 
	m˘y
 : 1;

418 
	m˘z
 : 1;

419 
	m˘w
 : 1;

423 
	sfmt_ãx_w‹d2_t


425 
	moff£t_x
 : 5;

426 
	moff£t_y
 : 5;

427 
	moff£t_z
 : 5;

428 
	mßm∂î_id
 : 5;

429 
	mssx
 : 3;

430 
	mssy
 : 3;

431 
	mssz
 : 3;

432 
	mssw
 : 3;

436 
	eamd_ˇãg‹y_íum
 {

437 
	mAMD_CAT_NONE
 = 0,

439 
	mAMD_CAT_CF
,

440 
	mAMD_CAT_ALU
,

441 
	mAMD_CAT_LDS
,

442 
	mAMD_CAT_VTX
,

443 
	mAMD_CAT_TEX
,

444 
	mAMD_CAT_MEM_RD
,

445 
	mAMD_CAT_MEM_GDS
,

447 
	mAMD_CAT_COUNT


451 
	eamd_ö°_Êags_íum
 {

452 
	mAMD_INST_FLAG_NONE
 = 0x0000,

453 
	mAMD_INST_FLAG_TRANS_ONLY
 = 0x0001,

454 
	mAMD_INST_FLAG_INC_LOOP_IDX
 = 0x0002,

455 
	mAMD_INST_FLAG_DEC_LOOP_IDX
 = 0x0004,

456 
	mAMD_INST_FLAG_DST_INT
 = 0x0008,

457 
	mAMD_INST_FLAG_DST_UINT
 = 0x0010,

458 
	mAMD_INST_FLAG_DST_FLOAT
 = 0x0020,

459 
	mAMD_INST_FLAG_ACT_MASK
 = 0x0040,

460 
	mAMD_INST_FLAG_LDS
 = 0x0080,

461 
	mAMD_INST_FLAG_MEM
 = 0x0100

465 
	eamd_ö°_íum
 {

466 
	mAMD_INST_NONE
 = 0,

468 
	#DEFINST
(
_«me
, 
_fmt_°r
, 
_fmt0
, 
_fmt1
, 
_fmt2
, 
_ˇãg‹y
, 
_cf_ö°
, 
_Êags
) \

469 
AMD_INST_
##
_«me
,

	)

470 
	~"gpudißsm.d©
"

471 #unde‡
DEFINST


474 
	mAMD_INST_COUNT


478 
	uamd_ö°_w‹d_t
 {

480 
	mbyãs
[4];

482 
fmt_cf_w‹d0_t
 
	mcf_w‹d0
;

483 
fmt_cf_gws_w‹d0_t
 
	mcf_gws_w‹d0
;

484 
fmt_cf_w‹d1_t
 
	mcf_w‹d1
;

486 
fmt_cf_Æu_w‹d0_t
 
	mcf_Æu_w‹d0
;

487 
fmt_cf_Æu_w‹d1_t
 
	mcf_Æu_w‹d1
;

489 
fmt_cf_Æu_w‹d0_ext_t
 
	mcf_Æu_w‹d0_ext
;

490 
fmt_cf_Æu_w‹d1_ext_t
 
	mcf_Æu_w‹d1_ext
;

492 
fmt_cf_Æloc_exp‹t_w‹d0_t
 
	mcf_Æloc_exp‹t_w‹d0
;

493 
fmt_cf_Æloc_exp‹t_w‹d0_øt_t
 
	mcf_Æloc_exp‹t_w‹d0_øt
;

494 
fmt_cf_Æloc_exp‹t_w‹d1_buf_t
 
	mcf_Æloc_exp‹t_w‹d1_buf
;

495 
fmt_cf_Æloc_exp‹t_w‹d1_swiz_t
 
	mcf_Æloc_exp‹t_w‹d1_swiz
;

497 
fmt_Æu_w‹d0_t
 
	mÆu_w‹d0
;

498 
fmt_Æu_w‹d1_›2_t
 
	mÆu_w‹d1_›2
;

499 
fmt_Æu_w‹d1_›3_t
 
	mÆu_w‹d1_›3
;

501 
fmt_Æu_w‹d0_lds_idx_›_t
 
	mÆu_w‹d0_lds_idx_›
;

502 
fmt_Æu_w‹d1_lds_idx_›_t
 
	mÆu_w‹d1_lds_idx_›
;

504 
fmt_vtx_w‹d0_t
 
	mvtx_w‹d0
;

505 
fmt_vtx_w‹d1_g¥_t
 
	mvtx_w‹d1_g¥
;

506 
fmt_vtx_w‹d1_£m_t
 
	mvtx_w‹d1_£m
;

507 
fmt_vtx_w‹d2_t
 
	mvtx_w‹d2
;

509 
fmt_ãx_w‹d0_t
 
	mãx_w‹d0
;

510 
fmt_ãx_w‹d1_t
 
	mãx_w‹d1
;

511 
fmt_ãx_w‹d2_t
 
	mãx_w‹d2
;

515 
	#AMD_INST_MAX_WORDS
 3

	)

516 
	samd_ö°_öfo_t
 {

517 
amd_ö°_íum
 
	mö°
;

518 
amd_ˇãg‹y_íum
 
	mˇãg‹y
;

519 *
	m«me
;

520 *
	mfmt_°r
;

521 
fmt_íum
 
	mfmt
[
AMD_INST_MAX_WORDS
];

522 
	m›code
;

523 
amd_ö°_Êags_íum
 
	mÊags
;

524 
	msize
;

528 
	samd_ö°_t
 {

531 
amd_ö°_öfo_t
 *
	möfo
;

532 
amd_ö°_w‹d_t
 
	mw‹ds
[
AMD_INST_MAX_WORDS
];

535 
amd_Æu_íum
 
	mÆu
;

538 
amd_Æu_group_t
 *
	mÆu_group
;

542 
	#ALU_GROUP_INST_COUNT_MAX
 5

	)

543 
	#ALU_GROUP_LITERAL_COUNT_MAX
 4

	)

544 
	samd_Æu_group_t


546 
	mid
;

547 
	mö°_cou¡
;

548 
	mlôîÆ_cou¡
;

549 
amd_ö°_t
 
	mö°
[
ALU_GROUP_INST_COUNT_MAX
];

550 
	mlôîÆ
[
ALU_GROUP_LITERAL_COUNT_MAX
];

554 (*
	tfmt_dump_func_t
)(*
	tbuf
, 
	tFILE
 *);

556 
	`amd_dißsm_öô
();

557 
	`amd_dißsm_d⁄e
();

559 
	`fmt_w‹d_dump
(*
buf
, 
fmt_íum
 
fmt
, 
FILE
 *
f
);

560 
	`amd_ö°_dump_g¥
(
g¥
, 
ªl
, 
ch™
, 
im
, 
FILE
 *
f
);

561 
	`amd_ö°_dump
(
amd_ö°_t
 *
ö°
, 
cou¡
, 
shi·
, 
FILE
 *
f
);

562 
	`amd_ö°_w‹ds_dump
(
amd_ö°_t
 *
ö°
, 
FILE
 *
f
);

563 
	`amd_Æu_group_dump
(
amd_Æu_group_t
 *
group
, 
shi·
, 
FILE
 *
f
);

566 
	`amd_ö°_gë_›_§c
(
amd_ö°_t
 *
ö°
, 
§c_idx
,

567 *
£l
, *
ªl
, *
ch™
, *
√g
, *
abs
);

570 *
	`amd_ö°_decode_cf
(*
buf
, 
amd_ö°_t
 *
ö°
);

571 *
	`amd_ö°_decode_Æu
(*
buf
, 
amd_ö°_t
 *
ö°
);

572 *
	`amd_ö°_decode_Æu_group
(*
buf
, 
group_id
, 
amd_Æu_group_t
 *
group
);

573 *
	`amd_ö°_decode_tc
(*
buf
, 
amd_ö°_t
 *
ö°
);

	@libgpudisasm/gpudump.c

20 
	~<gpudißsm.h
>

21 
	~<misc.h
>

22 
	~<debug.h
>

30 
°rög_m≠_t
 
	gfmt_ªl_m≠
 = {

38 
°rög_m≠_t
 
	gfmt_ch™_m≠
 = {

48 
°rög_m≠_t
 
	gfmt_£l_m≠
 = {

61 
°rög_m≠_t
 
	gfmt_cf_ödex_mode_m≠
 = {

71 
°rög_m≠_t
 
	gfmt_kˇche_mode_m≠
 = {

81 
°rög_m≠_t
 
	gfmt_cf_ö°_m≠
 = {

148 
	$fmt_övÆid_dump
(*
buf
, 
FILE
 *
f
)

150 
	`Ârötf
(
°dîr
, "dump: unsupported microcode format\n");

151 
	}
}

160 
°rög_m≠_t
 
	gfmt_cf_w‹d0_jts_m≠
 = {

172 
	$fmt_cf_w‹d0_dump
(*
buf
, 
FILE
 *
f
)

174 
fmt_cf_w‹d0_t
 *
fmt
 = (fmt_cf_w‹d0_à*Ë
buf
;

175 
	`Ârötf
(
f
, "CF_WORD0\n");

176 
	`Ârötf
(
f
, "ádd∏%d\n", 
fmt
->
addr
);

177 
	`Ârötf
(
f
, " jump_èbÀ_£»%d (%s)\n", 
fmt
->
jump_èbÀ_£l
, 
	`m≠_vÆue
(&
fmt_cf_w‹d0_jts_m≠
, fmt->jump_table_sel));

178 
	}
}

187 
°rög_m≠_t
 
	gfmt_cf_gws_w‹d0_vÆ_ödex_mode_m≠
 = {

196 
°rög_m≠_t
 
	gfmt_cf_gws_w‹d0_gws_›code_m≠
 = {

206 
	$fmt_cf_gws_w‹d0_dump
(*
buf
, 
FILE
 *
f
)

208 
fmt_cf_gws_w‹d0_t
 *
fmt
 = (fmt_cf_gws_w‹d0_à*Ë
buf
;

209 
	`Ârötf
(
f
, "CF_GWS_WORD0\n");

210 
	`Ârötf
(
f
, " vÆuê%d\n", 
fmt
->
vÆue
);

211 
	`Ârötf
(
f
, "Ñesour˚ = %d\n", 
fmt
->
ªsour˚
);

212 
	`Ârötf
(
f
, " sig¿%d\n", 
fmt
->
s
);

213 
	`Ârötf
(
f
, " vÆ_ödex_modê%d (%s)\n", 
fmt
->
vÆ_ödex_mode
,

214 
	`m≠_vÆue
(&
fmt_cf_gws_w‹d0_vÆ_ödex_mode_m≠
, 
fmt
->
vÆ_ödex_mode
));

215 
	`Ârötf
(
f
, "Ñ§c_ödex_modê%d (%s)\n", 
fmt
->
r§c_ödex_mode
,

216 
	`m≠_vÆue
(&
fmt_cf_ödex_mode_m≠
, 
fmt
->
r§c_ödex_mode
));

217 
	`Ârötf
(
f
, " gws_›codê%d (%s)\n", 
fmt
->
gws_›code
, 
	`m≠_vÆue
(&
fmt_cf_gws_w‹d0_gws_›code_m≠
, fmt->gws_opcode));

218 
	}
}

227 
°rög_m≠_t
 
	gfmt_cf_w‹d1_c⁄d_m≠
 = {

237 
	$fmt_cf_w‹d1_dump
(*
buf
, 
FILE
 *
f
)

239 
fmt_cf_w‹d1_t
 *
fmt
 = (fmt_cf_w‹d1_à*Ë
buf
;

241 
	`Ârötf
(
f
, "CF_WORD1\n");

242 
	`Ârötf
(
f
, "Ö›_cou¡ = %d\n", 
fmt
->
p›_cou¡
);

243 
	`Ârötf
(
f
, " cf_c⁄° = %d\n", 
fmt
->
cf_c⁄°
);

244 
	`Ârötf
(
f
, " c⁄d = %d (%s)\n", 
fmt
->
c⁄d
, 
	`m≠_vÆue
(&
fmt_cf_w‹d1_c⁄d_m≠
, fmt->cond));

245 
	`Ârötf
(
f
, " cou¡ = %d\n", 
fmt
->
cou¡
);

246 
	`Ârötf
(
f
, " vÆix_pixñ_modê%d\n", 
fmt
->
vÆid_pixñ_mode
);

247 
	`Ârötf
(
f
, "Énd_of_¥ogøm = %d\n", 
fmt
->
íd_of_¥ogøm
);

248 
	`Ârötf
(
f
, " cf_ö° = %d (%s)\n", 
fmt
->
cf_ö°
, 
	`m≠_vÆue
(&
fmt_cf_ö°_m≠
, fmt->cf_inst));

249 
	`Ârötf
(
f
, " whﬁe_quad_modê%d\n", 
fmt
->
whﬁe_quad_mode
);

250 
	`Ârötf
(
f
, " b¨rõ∏%d\n", 
fmt
->
b¨rõr
);

251 
	}
}

261 
	$fmt_cf_Æu_w‹d0_dump
(*
buf
, 
FILE
 *
f
)

263 
fmt_cf_Æu_w‹d0_t
 *
fmt
 = (fmt_cf_Æu_w‹d0_à*Ë
buf
;

265 
	`Ârötf
(
f
, "CF_ALU_WORD0\n");

266 
	`Ârötf
(
f
, "ádd∏%d\n", 
fmt
->
addr
);

267 
	`Ârötf
(
f
, " kˇche_b™k0 = %d\n", 
fmt
->
kˇche_b™k0
);

268 
	`Ârötf
(
f
, " kˇche_b™k1 = %d\n", 
fmt
->
kˇche_b™k1
);

269 
	`Ârötf
(
f
, " kˇche_mode0 = %d (%s)\n", 
fmt
->
kˇche_mode0
, 
	`m≠_vÆue
(&
fmt_kˇche_mode_m≠
, fmt->kcache_mode0));

270 
	}
}

279 
°rög_m≠_t
 
	gfmt_cf_Æu_ö°_m≠
 = {

293 
	$fmt_cf_Æu_w‹d1_dump
(*
buf
, 
FILE
 *
f
)

295 
fmt_cf_Æu_w‹d1_t
 *
fmt
 = (fmt_cf_Æu_w‹d1_à*Ë
buf
;

297 
	`Ârötf
(
f
, "CF_ALU_WORD1\n");

298 
	`Ârötf
(
f
, " kˇche_mode1 = %d (%s)\n", 
fmt
->
kˇche_mode1
, 
	`m≠_vÆue
(&
fmt_kˇche_mode_m≠
, fmt->kcache_mode1));

299 
	`Ârötf
(
f
, " kˇche_addr0 = 0x%x\n", 
fmt
->
kˇche_addr0
);

300 
	`Ârötf
(
f
, " kˇche_addr1 = 0x%x\n", 
fmt
->
kˇche_addr1
);

301 
	`Ârötf
(
f
, " cou¡=%d\n", 
fmt
->
cou¡
);

302 
	`Ârötf
(
f
, "á…_c⁄°=%d\n", 
fmt
->
Æt_c⁄°
);

303 
	`Ârötf
(
f
, " cf_ö°=%d (%s)\n", 
fmt
->
cf_ö°
, 
	`m≠_vÆue
(&
fmt_cf_Æu_ö°_m≠
, fmt->cf_inst));

304 
	`Ârötf
(
f
, " whﬁe_quad_mode=%d\n", 
fmt
->
whﬁe_quad_mode
);

305 
	`Ârötf
(
f
, " b¨rõr=%d\n", 
fmt
->
b¨rõr
);

306 
	}
}

315 
	$fmt_cf_Æu_w‹d0_ext_dump
(*
buf
, 
FILE
 *
f
)

317 
fmt_cf_Æu_w‹d0_ext_t
 *
fmt
 = (fmt_cf_Æu_w‹d0_ext_à*Ë
buf
;

319 
	`Ârötf
(
f
, "CF_ALU_WORD0_EXT\n");

320 
	`Ârötf
(
f
, " kˇche_b™k_ödex_mode0 = %d (%s)\n", 
fmt
->
kˇche_b™k_ödex_mode0
,

321 
	`m≠_vÆue
(&
fmt_cf_ödex_mode_m≠
, 
fmt
->
kˇche_b™k_ödex_mode0
));

322 
	`Ârötf
(
f
, " kˇche_b™k_ödex_mode1 = %d (%s)\n", 
fmt
->
kˇche_b™k_ödex_mode1
,

323 
	`m≠_vÆue
(&
fmt_cf_ödex_mode_m≠
, 
fmt
->
kˇche_b™k_ödex_mode1
));

324 
	`Ârötf
(
f
, " kˇche_b™k_ödex_mode2 = %d (%s)\n", 
fmt
->
kˇche_b™k_ödex_mode2
,

325 
	`m≠_vÆue
(&
fmt_cf_ödex_mode_m≠
, 
fmt
->
kˇche_b™k_ödex_mode2
));

326 
	`Ârötf
(
f
, " kˇche_b™k_ödex_mode3 = %d (%s)\n", 
fmt
->
kˇche_b™k_ödex_mode3
,

327 
	`m≠_vÆue
(&
fmt_cf_ödex_mode_m≠
, 
fmt
->
kˇche_b™k_ödex_mode3
));

328 
	`Ârötf
(
f
, " kˇche_b™k2 = %d\n", 
fmt
->
kˇche_b™k2
);

329 
	`Ârötf
(
f
, " kˇche_b™k3 = %d\n", 
fmt
->
kˇche_b™k3
);

330 
	`Ârötf
(
f
, " kˇche_mode2 = %d (%s)\n", 
fmt
->
kˇche_mode2
, 
	`m≠_vÆue
(&
fmt_kˇche_mode_m≠
, fmt->kcache_mode2));

331 
	}
}

341 
	$fmt_cf_Æu_w‹d1_ext_dump
(*
buf
, 
FILE
 *
f
)

343 
fmt_cf_Æu_w‹d1_ext_t
 *
fmt
 = (fmt_cf_Æu_w‹d1_ext_à*Ë
buf
;

345 
	`Ârötf
(
f
, "CF_ALU_WORD1_EXT\n");

346 
	`Ârötf
(
f
, " kˇche_mode3 = %d (%s)\n", 
fmt
->
kˇche_mode3
, 
	`m≠_vÆue
(&
fmt_kˇche_mode_m≠
, fmt->kcache_mode3));

347 
	`Ârötf
(
f
, " kˇche_addr2 = 0x%x\n", 
fmt
->
kˇche_addr2
);

348 
	`Ârötf
(
f
, " kˇche_addr3 = 0x%x\n", 
fmt
->
kˇche_addr3
);

349 
	`Ârötf
(
f
, " cf_ö° = %d (%s)\n", 
fmt
->
cf_ö°
, 
	`m≠_vÆue
(&
fmt_cf_Æu_ö°_m≠
, fmt->cf_inst));

350 
	`Ârötf
(
f
, " b¨rõ∏%d\n", 
fmt
->
b¨rõr
);

351 
	}
}

360 
°rög_m≠_t
 
	gfmt_cf_Æloc_exp‹t_ty≥_m≠
 = {

370 
	$fmt_cf_Æloc_exp‹t_w‹d0_dump
(*
buf
, 
FILE
 *
f
)

372 
fmt_cf_Æloc_exp‹t_w‹d0_t
 *
fmt
 = (fmt_cf_Æloc_exp‹t_w‹d0_à*Ë
buf
;

374 
	`Ârötf
(
f
, "CF_ALLOC_EXPORT_WORD0\n");

375 
	`Ârötf
(
f
, "áºay_ba£ = %d\n", 
fmt
->
¨øy_ba£
);

376 
	`Ârötf
(
f
, "Åy≥ = %d (%s)\n", 
fmt
->
ty≥
, 
	`m≠_vÆue
(&
fmt_cf_Æloc_exp‹t_ty≥_m≠
, fmt->type));

377 
	`Ârötf
(
f
, "Ñw_g¥ = %d\n", 
fmt
->
rw_g¥
);

378 
	`Ârötf
(
f
, "Ñw_ª»%d (%s)\n", 
fmt
->
º
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->rr));

379 
	`Ârötf
(
f
, " index_gΩ = %d\n", 
fmt
->
ödex_g¥
);

380 
	`Ârötf
(
f
, "ÉÀm_sizê%d\n", 
fmt
->
ñem_size
);

381 
	}
}

390 
°rög_m≠_t
 
	gfmt_cf_Æloc_exp‹t_øt_ö°_m≠
 = {

435 
	$fmt_cf_Æloc_exp‹t_w‹d0_øt_dump
(*
buf
, 
FILE
 *
f
)

437 
fmt_cf_Æloc_exp‹t_w‹d0_øt_t
 *
fmt
 = (fmt_cf_Æloc_exp‹t_w‹d0_øt_à*Ë
buf
;

439 
	`Ârötf
(
f
, "CF_ALLOC_EXPORT_WORD0_RAT\n");

440 
	`Ârötf
(
f
, "Ñ©_id = %d\n", 
fmt
->
øt_id
);

441 
	`Ârötf
(
f
, "Ñ©_ö° = %d (%s)\n", 
fmt
->
øt_ö°
, 
	`m≠_vÆue
(&
fmt_cf_Æloc_exp‹t_øt_ö°_m≠
, fmt->rat_inst));

442 
	`Ârötf
(
f
, "Ñ©_ödex_modê%d (%s)\n", 
fmt
->
øt_ödex_mode
, 
	`m≠_vÆue
(&
fmt_cf_ödex_mode_m≠
, fmt->rat_index_mode));

443 
	`Ârötf
(
f
, "Åy≥ = %d (%s)\n", 
fmt
->
ty≥
, 
	`m≠_vÆue
(&
fmt_cf_Æloc_exp‹t_ty≥_m≠
, fmt->type));

444 
	`Ârötf
(
f
, "Ñw_g¥ = %d\n", 
fmt
->
rw_g¥
);

445 
	`Ârötf
(
f
, "Ñw_ª»%d (%s)\n", 
fmt
->
º
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->rr));

446 
	`Ârötf
(
f
, " index_g¥ = %d\n", 
fmt
->
ödex_g¥
);

447 
	`Ârötf
(
f
, "ÉÀm_sizê%d\n", 
fmt
->
ñem_size
);

448 
	}
}

456 
	$fmt_cf_Æloc_exp‹t_w‹d1_buf_dump
(*
buf
, 
FILE
 *
f
)

458 
fmt_cf_Æloc_exp‹t_w‹d1_buf_t
 *
fmt
 = (fmt_cf_Æloc_exp‹t_w‹d1_buf_à*Ë
buf
;

460 
	`Ârötf
(
f
, "CF_ALLOC_EXPORT_WORD1_BUF\n");

461 
	`Ârötf
(
f
, "áºay_sizê%d\n", 
fmt
->
¨øy_size
);

462 
	`Ârötf
(
f
, " comp_mask = 0x%x\n", 
fmt
->
comp_mask
);

463 
	`Ârötf
(
f
, " bur°_cou¡ = %d\n", 
fmt
->
bur°_cou¡
);

464 
	`Ârötf
(
f
, " vÆid_pixñ_modê%d\n", 
fmt
->
vÆid_pixñ_mode
);

465 
	`Ârötf
(
f
, "Énd_of_¥ogøm = %d\n", 
fmt
->
íd_of_¥ogøm
);

466 
	`Ârötf
(
f
, " cf_ö° = %d (%s)\n", 
fmt
->
cf_ö°
, 
	`m≠_vÆue
(&
fmt_cf_ö°_m≠
, fmt->cf_inst));

467 
	`Ârötf
(
f
, " m¨k = %d\n", 
fmt
->
m¨k
);

468 
	`Ârötf
(
f
, " b¨rõ∏%d\n", 
fmt
->
b¨rõr
);

469 
	}
}

478 
	$fmt_cf_Æloc_exp‹t_w‹d1_swiz_dump
(*
buf
, 
FILE
 *
f
)

480 
fmt_cf_Æloc_exp‹t_w‹d1_swiz_t
 *
fmt
 = (fmt_cf_Æloc_exp‹t_w‹d1_swiz_à*Ë
buf
;

482 
	`Ârötf
(
f
, "CF_ALLOC_EXPORT_WORD1_SWIZ\n");

483 
	`Ârötf
(
f
, " sñ_x = %d (%s)\n", 
fmt
->
£l_x
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->sel_x));

484 
	`Ârötf
(
f
, " sñ_y = %d (%s)\n", 
fmt
->
£l_y
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->sel_y));

485 
	`Ârötf
(
f
, " sñ_z = %d (%s)\n", 
fmt
->
£l_z
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->sel_z));

486 
	`Ârötf
(
f
, " sñ_w = %d (%s)\n", 
fmt
->
£l_w
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->sel_w));

487 
	`Ârötf
(
f
, " bur°_cou¡ = %d\n", 
fmt
->
bur°_cou¡
);

488 
	`Ârötf
(
f
, " vÆid_pixñ_modê%d\n", 
fmt
->
vÆid_pixñ_mode
);

489 
	`Ârötf
(
f
, "Énd_of_¥ogøm = %d\n", 
fmt
->
íd_of_¥ogøm
);

490 
	`Ârötf
(
f
, " cf_ö° = %d (%s)\n", 
fmt
->
cf_ö°
, 
	`m≠_vÆue
(&
fmt_cf_ö°_m≠
, fmt->cf_inst));

491 
	`Ârötf
(
f
, " m¨k = %d\n", 
fmt
->
m¨k
);

492 
	`Ârötf
(
f
, " b¨rõ∏%d\n", 
fmt
->
b¨rõr
);

493 
	}
}

502 
°rög_m≠_t
 
	gfmt_Æu_§c_£l_m≠
 =

542 
°rög_m≠_t
 
	gfmt_Æu_w‹d0_ödex_mode_m≠
 = {

551 
°rög_m≠_t
 
	gfmt_Æu_w‹d0_¥ed_£l_m≠
 = {

559 
	$fmt_Æu_§c_£l_dump_buf
(
uöt32_t
 
§c_£l
, **
pbuf
, *
psize
)

561 i‡(
	`IN_RANGE
(
§c_£l
, 0, 127))

562 
	`dump_buf
(
pbuf
, 
psize
, "GPR[%d]", 
§c_£l
);

563 i‡(
	`IN_RANGE
(
§c_£l
, 128, 159))

564 
	`dump_buf
(
pbuf
, 
psize
, "Kˇchêc⁄è¡ %d i¿b™k 0", 
§c_£l
 - 128);

565 i‡(
	`IN_RANGE
(
§c_£l
, 160, 191))

566 
	`dump_buf
(
pbuf
, 
psize
, "Kˇchêc⁄°™à%d i¿b™k 1", 
§c_£l
 - 160);

567 i‡(
	`IN_RANGE
(
§c_£l
, 256, 287))

568 
	`dump_buf
(
pbuf
, 
psize
, "Kˇchêc⁄°™à%d i¿b™k 2", 
§c_£l
 - 256);

569 i‡(
	`IN_RANGE
(
§c_£l
, 288, 319))

570 
	`dump_buf
(
pbuf
, 
psize
, "Kˇchêc⁄°™à%d i¿b™k 3", 
§c_£l
 - 288);

572 
	`dump_buf
(
pbuf
, 
psize
, "%s", 
	`m≠_vÆue
(&
fmt_Æu_§c_£l_m≠
, 
§c_£l
));

573 
	}
}

576 
	$fmt_Æu_w‹d0_dump
(*
buf
, 
FILE
 *
f
)

578 
fmt_Æu_w‹d0_t
 *
fmt
 = (fmt_Æu_w‹d0_à*Ë
buf
;

579 
§c0_£l_°r
[
MAX_STRING_SIZE
];

580 
§c1_£l_°r
[
MAX_STRING_SIZE
];

581 *
°r
;

582 
size
;

584 
°r
 = 
§c0_£l_°r
;

585 
size
 = 
MAX_STRING_SIZE
;

586 
	`fmt_Æu_§c_£l_dump_buf
(
fmt
->
§c0_£l
, &
°r
, &
size
);

588 
°r
 = 
§c1_£l_°r
;

589 
size
 = 
MAX_STRING_SIZE
;

590 
	`fmt_Æu_§c_£l_dump_buf
(
fmt
->
§c1_£l
, &
°r
, &
size
);

592 
	`Ârötf
(
f
, "ALU_WORD0\n");

593 
	`Ârötf
(
f
, " src0_£»%d (%s)\n", 
fmt
->
§c0_£l
, 
§c0_£l_°r
);

594 
	`Ârötf
(
f
, " src1_£»%d (%s)\n", 
fmt
->
§c1_£l
, 
§c1_£l_°r
);

595 
	`Ârötf
(
f
, " src0_ª»%d (%s)\n", 
fmt
->
§c0_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->src0_rel));

596 
	`Ârötf
(
f
, " src1_ª»%d (%s)\n", 
fmt
->
§c1_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->src1_rel));

597 
	`Ârötf
(
f
, " src0_ch™ = %d (%s)\n", 
fmt
->
§c0_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->src0_chan));

598 
	`Ârötf
(
f
, " src1_ch™ = %d (%s)\n", 
fmt
->
§c1_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->src1_chan));

599 
	`Ârötf
(
f
, " src0_√g = %d\n", 
fmt
->
§c0_√g
);

600 
	`Ârötf
(
f
, " src1_√g = %d\n", 
fmt
->
§c1_√g
);

601 
	`Ârötf
(
f
, " index_modê%d (%s)\n", 
fmt
->
ödex_mode
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d0_ödex_mode_m≠
, fmt->index_mode));

602 
	`Ârötf
(
f
, "Öªd_£»%d (%s)\n", 
fmt
->
¥ed_£l
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d0_¥ed_£l_m≠
, fmt->pred_sel));

603 
	`Ârötf
(
f
, "Üa° = %d\n", 
fmt
->
œ°
);

604 
	}
}

613 
°rög_m≠_t
 
	gfmt_Æu_w‹d1_›2_omod_m≠
 = {

622 
°rög_m≠_t
 
	gfmt_Æu_w‹d1_›2_Æu_ö°_m≠
 = {

803 
°rög_m≠_t
 
	gfmt_Æu_b™k_swizzÀ_m≠
 = {

815 
	$fmt_Æu_w‹d1_›2_dump
(*
buf
, 
FILE
 *
f
)

817 
fmt_Æu_w‹d1_›2_t
 *
fmt
 = (fmt_Æu_w‹d1_›2_à*Ë
buf
;

819 
	`Ârötf
(
f
, "ALU_WORD1_OP2\n");

820 
	`Ârötf
(
f
, " src0_ab†%d\n", 
fmt
->
§c0_abs
);

821 
	`Ârötf
(
f
, " src1_ab†%d\n", 
fmt
->
§c1_abs
);

822 
	`Ârötf
(
f
, " upd©e_exec_mask = %d\n", 
fmt
->
upd©e_exec_mask
);

823 
	`Ârötf
(
f
, " upd©e_¥ed = %d\n", 
fmt
->
upd©e_¥ed
);

824 
	`Ârötf
(
f
, " wrôe_mask = %d\n", 
fmt
->
wrôe_mask
);

825 
	`Ârötf
(
f
, " omod = %d (%s)\n", 
fmt
->
omod
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d1_›2_omod_m≠
, fmt->omod));

826 
	`Ârötf
(
f
, "álu_ö° = %d (%s)\n", 
fmt
->
Æu_ö°
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d1_›2_Æu_ö°_m≠
, fmt->alu_inst));

827 
	`Ârötf
(
f
, " b™k_swizzÀ = %d (%s)\n", 
fmt
->
b™k_swizzÀ
, 
	`m≠_vÆue
(&
fmt_Æu_b™k_swizzÀ_m≠
, fmt->bank_swizzle));

828 
	`Ârötf
(
f
, " d°_g¥ = %d\n", 
fmt
->
d°_g¥
);

829 
	`Ârötf
(
f
, " d°_ª»%d (%s)\n", 
fmt
->
d°_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->dst_rel));

830 
	`Ârötf
(
f
, " d°_ch™ = %d (%s)\n", 
fmt
->
d°_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->dst_chan));

831 
	`Ârötf
(
f
, " cœm∞%d\n", 
fmt
->
˛amp
);

832 
	}
}

841 
°rög_m≠_t
 
	gfmt_Æu_w‹d1_›3_Æu_ö°_m≠
 = {

872 
	$fmt_Æu_w‹d1_›3_dump
(*
buf
, 
FILE
 *
f
)

874 
fmt_Æu_w‹d1_›3_t
 *
fmt
 = (fmt_Æu_w‹d1_›3_à*Ë
buf
;

875 
§c2_£l_°r
[
MAX_STRING_SIZE
];

876 *
°r
;

877 
size
;

879 
°r
 = 
§c2_£l_°r
;

880 
size
 = 
MAX_STRING_SIZE
;

881 
	`fmt_Æu_§c_£l_dump_buf
(
fmt
->
§c2_£l
, &
°r
, &
size
);

883 
	`Ârötf
(
f
, "ALU_WORD1_OP3\n");

884 
	`Ârötf
(
f
, " src2_£»%d (%s)\n", 
fmt
->
§c2_£l
, 
§c2_£l_°r
);

885 
	`Ârötf
(
f
, " src2_ª»%d (%s)\n", 
fmt
->
§c2_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->src2_rel));

886 
	`Ârötf
(
f
, " src2_ch™ = %d (%s)\n", 
fmt
->
§c2_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->src2_chan));

887 
	`Ârötf
(
f
, " src2_√g = %d\n", 
fmt
->
§c2_√g
);

888 
	`Ârötf
(
f
, "álu_ö° = %d (%s)\n", 
fmt
->
Æu_ö°
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d1_›3_Æu_ö°_m≠
, fmt->alu_inst));

889 
	`Ârötf
(
f
, " b™k_swizzÀ = %d (%s)\n", 
fmt
->
b™k_swizzÀ
, 
	`m≠_vÆue
(&
fmt_Æu_b™k_swizzÀ_m≠
, fmt->bank_swizzle));

890 
	`Ârötf
(
f
, " d°_g¥ = %d\n", 
fmt
->
d°_g¥
);

891 
	`Ârötf
(
f
, " d°_ª»%d (%s)\n", 
fmt
->
d°_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->dst_rel));

892 
	`Ârötf
(
f
, " d°_ch™ = %d (%s)\n", 
fmt
->
d°_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->dst_chan));

893 
	`Ârötf
(
f
, " cœm∞%d\n", 
fmt
->
˛amp
);

894 
	}
}

902 
	$fmt_Æu_w‹d0_lds_idx_›_dump
(*
buf
, 
FILE
 *
f
)

904 
fmt_Æu_w‹d0_lds_idx_›_t
 *
fmt
 = (fmt_Æu_w‹d0_lds_idx_›_à*Ë
buf
;

905 
§c0_£l_°r
[
MAX_STRING_SIZE
];

906 
§c1_£l_°r
[
MAX_STRING_SIZE
];

907 *
°r
;

908 
size
;

910 
°r
 = 
§c0_£l_°r
;

911 
size
 = 
MAX_STRING_SIZE
;

912 
	`fmt_Æu_§c_£l_dump_buf
(
fmt
->
§c0_£l
, &
°r
, &
size
);

914 
°r
 = 
§c1_£l_°r
;

915 
size
 = 
MAX_STRING_SIZE
;

916 
	`fmt_Æu_§c_£l_dump_buf
(
fmt
->
§c1_£l
, &
°r
, &
size
);

918 
	`Ârötf
(
f
, "ALU_WORD0_LDS_IDX_OP\n");

919 
	`Ârötf
(
f
, " src0_£»%d (%s)\n", 
fmt
->
§c0_£l
, 
§c0_£l_°r
);

920 
	`Ârötf
(
f
, " src0_ª»%d (%s)\n", 
fmt
->
§c0_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->src0_rel));

921 
	`Ârötf
(
f
, " src0_ch™ = %d (%s)\n", 
fmt
->
§c0_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->src0_chan));

922 
	`Ârötf
(
f
, " idx_off£t_4 = %d\n", 
fmt
->
idx_off£t_4
);

923 
	`Ârötf
(
f
, " src1_£»%d (%s)\n", 
fmt
->
§c1_£l
, 
§c1_£l_°r
);

924 
	`Ârötf
(
f
, " src1_ª»%d (%s)\n", 
fmt
->
§c1_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->src1_rel));

925 
	`Ârötf
(
f
, " src1_ch™ = %d (%s)\n", 
fmt
->
§c1_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->src1_chan));

926 
	`Ârötf
(
f
, " idx_off£t_5 = %d\n", 
fmt
->
idx_off£t_5
);

927 
	`Ârötf
(
f
, " index_modê%d (%s)\n", 
fmt
->
ödex_mode
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d0_ödex_mode_m≠
, fmt->index_mode));

928 
	`Ârötf
(
f
, "Öªd_£»%d (%s)\n", 
fmt
->
¥ed_£l
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d0_¥ed_£l_m≠
, fmt->pred_sel));

929 
	`Ârötf
(
f
, "Üa° = %d\n", 
fmt
->
œ°
);

930 
	}
}

939 
°rög_m≠_t
 
	gfmt_lds_›_m≠
 = {

990 
	$fmt_Æu_w‹d1_lds_idx_›_dump
(*
buf
, 
FILE
 *
f
)

992 
fmt_Æu_w‹d1_lds_idx_›_t
 *
fmt
 = (fmt_Æu_w‹d1_lds_idx_›_à*Ë
buf
;

993 
§c2_£l_°r
[
MAX_STRING_SIZE
];

994 *
°r
;

995 
size
;

997 
°r
 = 
§c2_£l_°r
;

998 
size
 = 
MAX_STRING_SIZE
;

999 
	`fmt_Æu_§c_£l_dump_buf
(
fmt
->
§c2_£l
, &
°r
, &
size
);

1001 
	`Ârötf
(
f
, "ALU_WORD1_LDS_IDX_OP\n");

1002 
	`Ârötf
(
f
, " src2_£»%d (%s)\n", 
fmt
->
§c2_£l
, 
§c2_£l_°r
);

1003 
	`Ârötf
(
f
, " src2_ª»%d (%s)\n", 
fmt
->
§c2_ªl
, 
	`m≠_vÆue
(&
fmt_ªl_m≠
, fmt->src2_rel));

1004 
	`Ârötf
(
f
, " src2_ch™ = %d (%s)\n", 
fmt
->
§c2_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->src2_chan));

1005 
	`Ârötf
(
f
, " idx_off£t_1 = %d\n", 
fmt
->
idx_off£t_1
);

1006 
	`Ârötf
(
f
, "álu_ö° = %d (%s)\n", 
fmt
->
Æu_ö°
, 
	`m≠_vÆue
(&
fmt_Æu_w‹d1_›3_Æu_ö°_m≠
, fmt->alu_inst));

1007 
	`Ârötf
(
f
, " b™k_swizzÀ = %d (%s)\n", 
fmt
->
b™k_swizzÀ
, 
	`m≠_vÆue
(&
fmt_Æu_b™k_swizzÀ_m≠
, fmt->bank_swizzle));

1008 
	`Ârötf
(
f
, "Üds_› = %d (DS_INST_%s)\n", 
fmt
->
lds_›
, 
	`m≠_vÆue
(&
fmt_lds_›_m≠
, fmt->lds_op));

1009 
	`Ârötf
(
f
, " idx_off£t_0 = %d\n", 
fmt
->
idx_off£t_0
);

1010 
	`Ârötf
(
f
, " idx_off£t_2 = %d\n", 
fmt
->
idx_off£t_2
);

1011 
	`Ârötf
(
f
, " d°_ch™ = %d (%s)\n", 
fmt
->
d°_ch™
, 
	`m≠_vÆue
(&
fmt_ch™_m≠
, fmt->dst_chan));

1012 
	`Ârötf
(
f
, " index_off£t_3 = %d\n", 
fmt
->
idx_off£t_3
);

1013 
	}
}

1021 
°rög_m≠_t
 
	gfmt_vc_ö°_m≠
 = {

1030 
°rög_m≠_t
 
	gfmt_vtx_„tch_ty≥_m≠
 = {

1039 
°rög_m≠_t
 
	gfmt_vtx_§c_£l_m≠
 = {

1049 
	$fmt_vtx_w‹d0_dump
(*
buf
, 
FILE
 *
f
)

1051 
fmt_vtx_w‹d0_t
 *
fmt
 = (fmt_vtx_w‹d0_à*Ë
buf
;

1053 
	`Ârötf
(
f
, "VTX_WORD0\n");

1054 
	`Ârötf
(
f
, " vc_ö° = %d (%s)\n", 
fmt
->
vc_ö°
, 
	`m≠_vÆue
(&
fmt_vc_ö°_m≠
, fmt->vc_inst));

1055 
	`Ârötf
(
f
, " fëch_ty≥ = %d (%s)\n", 
fmt
->
„tch_ty≥
, 
	`m≠_vÆue
(&
fmt_vtx_„tch_ty≥_m≠
, fmt->fetch_type));

1056 
	`Ârötf
(
f
, " fëch_whﬁe_quad = %d\n", 
fmt
->
„tch_whﬁe_quad
);

1057 
	`Ârötf
(
f
, " buf„r_id = %d\n", 
fmt
->
buf„r_id
);

1058 
	`Ârötf
(
f
, " src_g¥ = %d\n", 
fmt
->
§c_g¥
);

1059 
	`Ârötf
(
f
, " src_ª»%d\n", 
fmt
->
§c_ªl
);

1060 
	`Ârötf
(
f
, " src_£l_x = %d (%s)\n", 
fmt
->
§c_£l_x
, 
	`m≠_vÆue
(&
fmt_vtx_§c_£l_m≠
, fmt->src_sel_x));

1061 
	`Ârötf
(
f
, " mega_„tch_cou¡ = %d\n", 
fmt
->
mega_„tch_cou¡
);

1062 
	}
}

1071 
°rög_m≠_t
 
	gfmt_vtx_d©a_f‹m©_m≠
 = {

1141 
°rög_m≠_t
 
	gfmt_vtx_num_f‹m©_m≠
 = {

1150 
°rög_m≠_t
 
	gfmt_vtx_f‹m©_comp_m≠
 = {

1158 
°rög_m≠_t
 
	gfmt_vtx_§f_mode_m≠
 = {

1166 
	$fmt_vtx_w‹d1_g¥_dump
(*
buf
, 
FILE
 *
f
)

1168 
fmt_vtx_w‹d1_g¥_t
 *
fmt
 = (fmt_vtx_w‹d1_g¥_à*Ë
buf
;

1170 
	`Ârötf
(
f
, "VTX_WORD1_GPR\n");

1171 
	`Ârötf
(
f
, " d°_g¥ = %d\n", 
fmt
->
d°_g¥
);

1172 
	`Ârötf
(
f
, " d°_ª»%d\n", 
fmt
->
d°_ªl
);

1173 
	`Ârötf
(
f
, " d°_£l_x = %d (%s)\n", 
fmt
->
d°_£l_x
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->dst_sel_x));

1174 
	`Ârötf
(
f
, " d°_£l_y = %d (%s)\n", 
fmt
->
d°_£l_y
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->dst_sel_y));

1175 
	`Ârötf
(
f
, " d°_£l_z = %d (%s)\n", 
fmt
->
d°_£l_z
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->dst_sel_z));

1176 
	`Ârötf
(
f
, " d°_£l_w = %d (%s)\n", 
fmt
->
d°_£l_w
, 
	`m≠_vÆue
(&
fmt_£l_m≠
, fmt->dst_sel_w));

1177 
	`Ârötf
(
f
, " u£_c⁄°_fõld†%d\n", 
fmt
->
u£_c⁄°_fõlds
);

1178 
	`Ârötf
(
f
, " d©a_f‹m© = %d (%s)\n", 
fmt
->
d©a_f‹m©
, 
	`m≠_vÆue
(&
fmt_vtx_d©a_f‹m©_m≠
, fmt->data_format));

1179 
	`Ârötf
(
f
, "Çum_f‹m©_Æ»%d (%s)\n", 
fmt
->
num_f‹m©_Æl
, 
	`m≠_vÆue
(&
fmt_vtx_num_f‹m©_m≠
, fmt->num_format_all));

1180 
	`Ârötf
(
f
, " f‹m©_comp_Æ»%d (%s)\n", 
fmt
->
f‹m©_comp_Æl
, 
	`m≠_vÆue
(&
fmt_vtx_f‹m©_comp_m≠
, fmt->format_comp_all));

1181 
	`Ârötf
(
f
, " srf_mode_Æ»%d (%s)\n", 
fmt
->
§f_mode_Æl
, 
	`m≠_vÆue
(&
fmt_vtx_§f_mode_m≠
, fmt->srf_mode_all));

1182 
	}
}

1191 
°rög_m≠_t
 
	gfmt_vtx_ídün_sw≠_m≠
 = {

1200 
	$fmt_vtx_w‹d2_dump
(*
buf
, 
FILE
 *
f
)

1202 
fmt_vtx_w‹d2_t
 *
fmt
 = (fmt_vtx_w‹d2_à*Ë
buf
;

1204 
	`Ârötf
(
f
, "VTX_WORD2\n");

1205 
	`Ârötf
(
f
, " off£à0x%x\n", 
fmt
->
off£t
);

1206 
	`Ârötf
(
f
, "Éndün_sw≠ = %d (%s)\n", 
fmt
->
ídün_sw≠
, 
	`m≠_vÆue
(&
fmt_vtx_ídün_sw≠_m≠
, fmt->endian_swap));

1207 
	`Ârötf
(
f
, " c⁄°_buf_no_°ridê%d\n", 
fmt
->
c⁄°_buf_no_°ride
);

1208 
	`Ârötf
(
f
, " mega_„tch = %d\n", 
fmt
->
mega_„tch
);

1212 
	}
}

1222 
fmt_dump_func_t
 
	gfmt_dump_func_li°
[
FMT_COUNT
] = {

1224 
fmt_övÆid_dump
,

1226 
fmt_cf_w‹d0_dump
,

1227 
fmt_cf_gws_w‹d0_dump
,

1228 
fmt_cf_w‹d1_dump
,

1230 
fmt_cf_Æu_w‹d0_dump
,

1231 
fmt_cf_Æu_w‹d1_dump
,

1233 
fmt_cf_Æu_w‹d0_ext_dump
,

1234 
fmt_cf_Æu_w‹d1_ext_dump
,

1236 
fmt_cf_Æloc_exp‹t_w‹d0_dump
,

1237 
fmt_cf_Æloc_exp‹t_w‹d0_øt_dump
,

1238 
fmt_cf_Æloc_exp‹t_w‹d1_buf_dump
,

1239 
fmt_cf_Æloc_exp‹t_w‹d1_swiz_dump
,

1241 
fmt_Æu_w‹d0_dump
,

1242 
fmt_Æu_w‹d1_›2_dump
,

1243 
fmt_Æu_w‹d1_›3_dump
,

1245 
fmt_Æu_w‹d0_lds_idx_›_dump
,

1246 
fmt_Æu_w‹d1_lds_idx_›_dump
,

1247 
fmt_övÆid_dump
,

1248 
fmt_övÆid_dump
,

1250 
fmt_vtx_w‹d0_dump
,

1251 
fmt_vtx_w‹d1_g¥_dump
,

1252 
fmt_övÆid_dump
,

1253 
fmt_vtx_w‹d2_dump
,

1255 
fmt_övÆid_dump
,

1256 
fmt_övÆid_dump
,

1257 
fmt_övÆid_dump
,

1259 
fmt_övÆid_dump
,

1260 
fmt_övÆid_dump
,

1261 
fmt_övÆid_dump
,

1263 
fmt_övÆid_dump
,

1264 
fmt_övÆid_dump
,

1265 
fmt_övÆid_dump
,

1269 
	$fmt_w‹d_dump
(*
buf
, 
fmt_íum
 
fmt
, 
FILE
 *
f
)

1271 
fmt_dump_func_t
 
dump_func
;

1272 
i
;

1275 
	`Ârötf
(
f
, "Hex dump: ");

1276 
i
 = 0; i < 4; i++)

1277 
	`Ârötf
(
f
, "%02x ", ((*Ë
buf
)[
i
]);

1278 
	`Ârötf
(
f
, "\n");

1280 
dump_func
 = 
fmt_dump_func_li°
[
fmt
];

1281 
	`dump_func
(
buf
, 
f
);

1282 
	}
}

	@libgpukernel/cal-abi.c

20 
	~<gpukî√l-loˇl.h
>

23 
	#CAL_ABI_NOT_SUPPORTED
(
__v¨
) \

24 
	`Áèl
("kî√»bö¨yÖ¨£r: vÆuê0x%xÇŸ suµ‹ãd f‹Ö¨amëî '" #__v¨ "'", (
__v¨
))

	)

25 
	#CAL_ABI_NOT_SUPPORTED_NEQ
(
__v¨
, 
__vÆ
) \

26 i‡((
__v¨
Ë!(
__vÆ
)) \

27 
	`Áèl
("kî√»bö¨yÖ¨£r:Ö¨amëî '" #__v¨ "' wa†ex≥˘edÅÿbê0x%x", (
__vÆ
))

	)

31 
Elf32_W‹d
 
	md_machöe
;

32 
Elf32_W‹d
 
	md_ty≥
;

33 
Elf32_Off
 
	md_off£t
;

34 
Elf32_W‹d
 
	md_size
;

35 
Elf32_W‹d
 
	md_Êags
;

36 } 
	tCALEncodögDi˘i⁄¨yE¡ry
;

40 
Elf32_W‹d
 
	m«mesz
;

41 
Elf32_W‹d
 
	mdescsz
;

42 
Elf32_W‹d
 
	mty≥
;

43 
	m«me
[8];

44 } 
	tCALNŸeHódî
;

47 
°rög_m≠_t
 
	g±_nŸe_ty≥_m≠
 = {

71 
Elf32_W‹d
 
	moff£t
;

72 
Elf32_W‹d
 
	msize
;

73 } 
	tCALD©aSegmítDesc
;

77 
Elf32_W‹d
 
	mödex
;

78 
Elf32_W‹d
 
	msize
;

79 } 
	tCALC⁄°™tBuf„rMask
;

83 
Elf32_W‹d
 
	maddªss
;

84 
Elf32_W‹d
 
	mvÆue
;

85 } 
	tCALProgømInfoE¡ry
;

88 
	$ˇl_abi_™Æyze_nŸe_hódî
(
ˇl_abi_t
 *
ˇl_abi
, *
±_nŸe_±r
)

90 *
±_nŸe_ty≥
;

91 
CALNŸeHódî
 *
±_nŸe_hódî
 = 
±_nŸe_±r
;

93 
	`debug_èb
(
›í˛_debug_ˇãg‹y
, 4);

94 
±_nŸe_ty≥
 = 
	`m≠_vÆue
(&
±_nŸe_ty≥_m≠
, 
±_nŸe_hódî
->
ty≥
);

95 
	`›í˛_debug
("±_nŸe:Åy≥=%d (%s), descsz=%d\n", 
±_nŸe_hódî
->
ty≥
,

96 
±_nŸe_ty≥
, 
±_nŸe_hódî
->
descsz
);

99 
±_nŸe_hódî
->
ty≥
) {

103 
¥og_öfo_cou¡
;

104 
CALProgømInfoE¡ry
 *
¥og_öfo_íåy
;

105 
i
;

108 
¥og_öfo_cou¡
 = 
±_nŸe_hódî
->
descsz
 / (
CALProgømInfoE¡ry
);

109 
	`›í˛_debug
("Note including device configuration uniqueÅoÅheÖrogram (%dÉntries)\n",

110 
¥og_öfo_cou¡
);

113 
i
 = 0; i < 
¥og_öfo_cou¡
; i++) {

114 
¥og_öfo_íåy
 = 
±_nŸe_±r
 + (
CALNŸeHódî
Ë+ 
i
 * (
CALProgømInfoE¡ry
);

115 
	`›í˛_debug
("Örog_info_entry:áddress=0x%x, value=0x%x\n",

116 
¥og_öfo_íåy
->
addªss
,Örog_öfo_íåy->
vÆue
);

125 i‡(
±_nŸe_hódî
->
descsz
)

126 
	`w¨nög
("%s:Öt_nŸê'%s' wôh descsz !0 ign‹ed", 
±_nŸe_ty≥
, 
__FUNCTION__
);

134 i‡(
±_nŸe_hódî
->
descsz
)

135 
	`w¨nög
("%s:Öt_nŸê'%s' wôh descsz !0 ign‹ed", 
±_nŸe_ty≥
, 
__FUNCTION__
);

147 
d©a_£gmít_desc_cou¡
;

148 
CALD©aSegmítDesc
 *
d©a_£gmít_desc
;

149 
j
, 
k
;

150 
uöt32_t
 
c
;

151 
f
;

154 
d©a_£gmít_desc_cou¡
 = 
±_nŸe_hódî
->
descsz
 / (
CALD©aSegmítDesc
);

155 
	`›í˛_debug
("Note including data for constant buffers (%dÉntries)\n",

156 
d©a_£gmít_desc_cou¡
);

159 
j
 = 0; j < 
d©a_£gmít_desc_cou¡
; j++) {

160 
d©a_£gmít_desc
 = 
±_nŸe_±r
 + (
CALNŸeHódî
Ë+ 
j
 * (
CALD©aSegmítDesc
);

161 
	`›í˛_debug
("d©a_£gmít_desc[%d]:\n", 
j
);

162 
	`debug_èb_öc
(
›í˛_debug_ˇãg‹y
, 2);

163 
	`›í˛_debug
("off£à = 0x%x\n", 
d©a_£gmít_desc
->
off£t
);

164 
	`›í˛_debug
("sizê = %u\n", 
d©a_£gmít_desc
->
size
);

167 
	`debug_èb_öc
(
›í˛_debug_ˇãg‹y
, 2);

168 
k
 = 0; k < 
d©a_£gmít_desc
->
size
; k += 4) {

169 
c
 = * (
uöt32_t
 *Ë(
ˇl_abi
->
d©a_buf„r
 + 
d©a_£gmít_desc
->
off£t
);

170 
f
 = * (*Ë(
ˇl_abi
->
d©a_buf„r
 + 
d©a_£gmít_desc
->
off£t
);

171 
	`›í˛_debug
("c⁄°™t[%02d] = 0x%08x, %gf\n", 
k
 / 4, 
c
, 
f
);

173 
	`debug_èb_dec
(
›í˛_debug_ˇãg‹y
, 2);

174 
	`debug_èb_dec
(
›í˛_debug_ˇãg‹y
, 2);

182 
Elf32_W‹d
 
óæy_exô
;

185 
óæy_exô
 = 
±_nŸe_hódî
->
descsz
 ? * (*Ë(
±_nŸe_±r
 + (
CALNŸeHódî
)) : 0;

186 
	`›í˛_debug
("É¨ly_exô = %s\n", 
óæy_exô
 ? "TRUE" : "FALSE");

193 
Elf32_W‹d
 
globÆ_buf„rs
;

194 
globÆ_buf„rs
 = 
±_nŸe_hódî
->
descsz
 ? * (*Ë(
±_nŸe_±r
 + (
CALNŸeHódî
)) : 0;

195 
	`›í˛_debug
(" globÆ_buf„r†%s\n", 
globÆ_buf„rs
 ? "TRUE" : "FALSE");

202 
c⁄°™t_buf„r_cou¡
;

203 
CALC⁄°™tBuf„rMask
 *
c⁄°™t_buf„r_mask
;

204 
i
;

207 
c⁄°™t_buf„r_cou¡
 = 
±_nŸe_hódî
->
descsz
 / (
CALC⁄°™tBuf„rMask
);

208 
	`debug_èb_öc
(
›í˛_debug_ˇãg‹y
, 2);

209 
	`›í˛_debug
("Note includingÇumberánd size of constant buffers (%dÉntries)\n",

210 
c⁄°™t_buf„r_cou¡
);

213 
i
 = 0; i < 
c⁄°™t_buf„r_cou¡
; i++) {

214 
c⁄°™t_buf„r_mask
 = 
±_nŸe_±r
 + (
CALNŸeHódî
Ë+ 
i
 * (
CALC⁄°™tBuf„rMask
);

215 
	`›í˛_debug
("constant_buffer[%d].size = %d (vec4f constants)\n",

216 
c⁄°™t_buf„r_mask
->
ödex
, c⁄°™t_buf„r_mask->
size
);

218 
	`debug_èb_dec
(
›í˛_debug_ˇãg‹y
, 2);

228 
Elf32_W‹d
 
≥rsi°ít_buf„rs
;

229 
≥rsi°ít_buf„rs
 = 
±_nŸe_hódî
->
descsz
 ? * (*Ë(
±_nŸe_±r
 + (
CALNŸeHódî
)) : 0;

230 
	`›í˛_debug
("Öîsi°ít_buf„r†%s\n", 
≥rsi°ít_buf„rs
 ? "TRUE" : "FALSE");

237 
Elf32_W‹d
 
s¸©ch_buf„rs
;

238 
s¸©ch_buf„rs
 = 
±_nŸe_hódî
->
descsz
 ? * (*Ë(
±_nŸe_±r
 + (
CALNŸeHódî
)) : 0;

239 
	`›í˛_debug
(" s¸©ch_buf„r†%s\n", 
s¸©ch_buf„rs
 ? "TRUE" : "FALSE");

257 
	`›í˛_debug
("unknownÅype\n");

261 
	`›í˛_debug
("\n");

262 
	}
}

267 
	$ˇl_abi_ªad_£gmíts
(
ˇl_abi_t
 *
ˇl_abi
, 
CALEncodögDi˘i⁄¨yE¡ry
 *
íc_di˘_íåy
)

269 
ñf_fûe_t
 *
ñf
 = 
ˇl_abi
->elf;

270 
phidx
;

271 
Elf32_Phdr
 *
phdr
;

273 
	`as£π
(!
ˇl_abi
->
±_nŸe_buf„r
);

274 
	`as£π
(!
ˇl_abi
->
±_lﬂd_buf„r
);

275 
phidx
 = 0;Öhidx < 
ñf
->
ehdr
.
e_phnum
;Öhidx++) {

278 
phdr
 = &
ñf
->phdr[
phidx
];

279 i‡(!
	`IN_RANGE
(
phdr
->
p_off£t
, 
íc_di˘_íåy
->
d_off£t
,Énc_di˘_íåy->d_off£à+Énc_di˘_íåy->
d_size
 - 1))

283 i‡(
phdr
->
p_ty≥
 =
PT_NOTE
) {

284 i‡(
ˇl_abi
->
±_nŸe_buf„r
)

285 
	`Áèl
("%s: m‹êth™ o√ PT_NOTE segmíàf‹Éncodög di˘i⁄¨yÉ¡ry", 
__FUNCTION__
);

286 
ˇl_abi
->
±_nŸe_phdr
 = 
phdr
;

287 
ˇl_abi
->
±_nŸe_buf„r
 = 
	`ñf_ªad_buf„r
(
ñf
, 
phdr
->
p_off£t
,Öhdr->
p_fûesz
);

291 i‡(
phdr
->
p_ty≥
 =
PT_LOAD
) {

292 i‡(
ˇl_abi
->
±_lﬂd_buf„r
)

293 
	`Áèl
("%s: m‹êth™ o√ PT_LOAD segmíàf‹Éncodög di˘i⁄¨yÉ¡ry", 
__FUNCTION__
);

294 
ˇl_abi
->
±_lﬂd_phdr
 = 
phdr
;

295 
ˇl_abi
->
±_lﬂd_buf„r
 = 
	`ñf_ªad_buf„r
(
ñf
, 
phdr
->
p_off£t
,Öhdr->
p_fûesz
);

300 i‡(!
ˇl_abi
->
±_nŸe_buf„r
)

301 
	`Áèl
("%s:ÇÿPT_NOTE segmíàfound f‹Éncodög di˘i⁄¨yÉ¡ry", 
__FUNCTION__
);

302 i‡(!
ˇl_abi
->
±_lﬂd_buf„r
)

303 
	`Áèl
("%s:ÇÿPT_LOAD segmíàfound f‹Éncodög di˘i⁄¨yÉ¡ry", 
__FUNCTION__
);

304 
	}
}

308 
	$ˇl_abi_ªad_±_lﬂd_£˘i⁄s
(
ˇl_abi_t
 *
ˇl_abi
)

310 
ñf_fûe_t
 *
ñf
 = 
ˇl_abi
->elf;

311 *
£˘i⁄_«me
;

312 *
£˘i⁄_buf„r
;

313 
Elf32_Shdr
 *
shdr
;

314 
i
;

316 
	`as£π
(!
ˇl_abi
->
ãxt_buf„r
);

317 
	`as£π
(!
ˇl_abi
->
d©a_buf„r
);

318 
	`as£π
(!
ˇl_abi
->
symèb_buf„r
);

319 
	`as£π
(!
ˇl_abi
->
°πab_buf„r
);

322 
i
 = 0; i < 
	`ñf_£˘i⁄_cou¡
(
ñf
); i++) {

325 
shdr
 = &
ñf
->shdr[
i
];

326 
	`ñf_£˘i⁄_öfo
(
ñf
, 
i
, &
£˘i⁄_«me
, 
NULL
, NULL, NULL);

327 i‡(!
	`IN_RANGE
(
shdr
->
sh_off£t
, 
ˇl_abi
->
±_lﬂd_phdr
->
p_off£t
, cal_abi->pt_load_phdr->p_offset

328 + 
ˇl_abi
->
±_lﬂd_phdr
->
p_fûesz
 - 1))

333 
£˘i⁄_buf„r
 = 
ˇl_abi
->
±_lﬂd_buf„r
 + 
shdr
->
sh_off£t
 - cÆ_abi->
±_lﬂd_phdr
->
p_off£t
;

336 i‡(!
	`°rcmp
(
£˘i⁄_«me
, ".text")) {

337 i‡(
ˇl_abi
->
ãxt_buf„r
)

338 
	`Áèl
("%s: du∂iˇãd '.ãxt' se˘i⁄", 
__FUNCTION__
);

339 
ˇl_abi
->
ãxt_shdr
 = 
shdr
;

340 
ˇl_abi
->
ãxt_buf„r
 = 
£˘i⁄_buf„r
;

341 } i‡(!
	`°rcmp
(
£˘i⁄_«me
, ".data")) {

342 i‡(
ˇl_abi
->
d©a_buf„r
)

343 
	`Áèl
("%s: du∂iˇãd '.d©a' se˘i⁄", 
__FUNCTION__
);

344 
ˇl_abi
->
d©a_shdr
 = 
shdr
;

345 
ˇl_abi
->
d©a_buf„r
 = 
£˘i⁄_buf„r
;

346 } i‡(!
	`°rcmp
(
£˘i⁄_«me
, ".symtab")) {

347 i‡(
ˇl_abi
->
symèb_buf„r
)

348 
	`Áèl
("%s: du∂iˇãd '.symèb' se˘i⁄", 
__FUNCTION__
);

349 
ˇl_abi
->
symèb_shdr
 = 
shdr
;

350 
ˇl_abi
->
symèb_buf„r
 = 
£˘i⁄_buf„r
;

351 } i‡(!
	`°rcmp
(
£˘i⁄_«me
, ".strtab")) {

352 i‡(
ˇl_abi
->
°πab_buf„r
)

353 
	`Áèl
("%s: du∂iˇãd '.°πab' se˘i⁄", 
__FUNCTION__
);

354 
ˇl_abi
->
°πab_shdr
 = 
shdr
;

355 
ˇl_abi
->
°πab_buf„r
 = 
£˘i⁄_buf„r
;

357 
	`Áèl
("%s:ÇŸÑecognized se˘i⁄Çame: '%s'", 
__FUNCTION__
, 
£˘i⁄_«me
);

361 i‡(!
ˇl_abi
->
ãxt_buf„r
 || !ˇl_abi->
d©a_buf„r
 || !ˇl_abi->
symèb_buf„r
 || !ˇl_abi->
°πab_buf„r
)

362 
	`Áèl
("%s: somê£˘i⁄ wa†nŸ found: .ãxà.d©®.symèb .°πab", 
__FUNCTION__
);

363 
	}
}

366 
	$ˇl_abi_∑r£_ñf
(
ˇl_abi_t
 *
ˇl_abi
, *
fûe_«me
)

369 
CALEncodögDi˘i⁄¨yE¡ry
 *
íc_di˘_íåõs
, *
íc_di˘_íåy
;

372 *
±_nŸe_±r
;

373 
CALNŸeHódî
 *
±_nŸe_hódî
;

375 
i
;

376 
ñf_fûe_t
 *
ñf
;

379 
	`°∫˝y
(
ˇl_abi
->
fûe_«me
, fûe_«me, 
MAX_PATH_SIZE
);

380 
	`›í˛_debug
("CAL ABIá«lyzî:Ö¨sög fûê'%s'\n", 
ˇl_abi
->
fûe_«me
);

381 
ˇl_abi
->
ñf
 =Él‡
	`ñf_›í
(ˇl_abi->
fûe_«me
);

384 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_idít
[
EI_CLASS
], 
ELFCLASS32
);

385 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_idít
[
EI_DATA
], 
ELFDATA2LSB
);

386 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_idít
[
EI_OSABI
], 0x64);

387 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_idít
[
EI_ABIVERSION
], 1);

388 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_ty≥
, 
ET_EXEC
);

389 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_machöe
, 0x7d);

390 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ñf
->
ehdr
.
e_íåy
, 0);

393 
	`›í˛_debug
(" ParsingÉncoding dictionary\n");

394 
ˇl_abi
->
íc_di˘_phdr_idx
 = 0;

395 
ˇl_abi
->
íc_di˘_phdr_idx
 < 
ñf
->
ehdr
.
e_phnum
 &&Élf->
phdr
[ˇl_abi->íc_di˘_phdr_idx].
p_ty≥
 !
PT_LOPROC
 + 2;

396 
ˇl_abi
->
íc_di˘_phdr_idx
++);

397 i‡(
ˇl_abi
->
íc_di˘_phdr_idx
 =
ñf
->
ehdr
.
e_phnum
)

398 
	`CAL_ABI_NOT_SUPPORTED
(
ˇl_abi
->
íc_di˘_phdr_idx
);

399 
ˇl_abi
->
íc_di˘_phdr
 = &
ñf
->
phdr
[ˇl_abi->
íc_di˘_phdr_idx
];

402 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ˇl_abi
->
íc_di˘_phdr
->
p_vaddr
, 0);

403 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ˇl_abi
->
íc_di˘_phdr
->
p_∑ddr
, 0);

404 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ˇl_abi
->
íc_di˘_phdr
->
p_memsz
, 0);

405 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ˇl_abi
->
íc_di˘_phdr
->
p_Êags
, 0);

406 
	`CAL_ABI_NOT_SUPPORTED_NEQ
(
ˇl_abi
->
íc_di˘_phdr
->
p_Æign
, 0);

407 
ˇl_abi
->
íc_di˘_íåy_cou¡
 = cÆ_abi->
íc_di˘_phdr
->
p_fûesz
 / (
CALEncodögDi˘i⁄¨yE¡ry
);

408 
	`›í˛_debug
("%dÉ¡rõs\n", 
ˇl_abi
->
íc_di˘_íåy_cou¡
);

411 
íc_di˘_íåõs
 = 
	`ñf_ªad_buf„r
(
ñf
, 
ˇl_abi
->
íc_di˘_phdr
->
p_off£t
, cÆ_abi->íc_di˘_phdr->
p_fûesz
);

412 
ˇl_abi
->
íc_di˘_íåy_idx
 = -1;

413 
i
 = 0; i < 
ˇl_abi
->
íc_di˘_íåy_cou¡
; i++) {

416 
íc_di˘_íåy
 = &
íc_di˘_íåõs
[
i
];

417 
	`debug_èb
(
›í˛_debug_ˇãg‹y
, 2);

418 
	`›í˛_debug
("Encodög di˘i⁄¨yÉ¡ry %d:\n", 
i
);

419 
	`debug_èb
(
›í˛_debug_ˇãg‹y
, 4);

420 
	`›í˛_debug
("d_machöê0x%x\n", 
íc_di˘_íåy
->
d_machöe
);

421 
	`›í˛_debug
("d_ty≥ = 0x%x\n", 
íc_di˘_íåy
->
d_ty≥
);

422 
	`›í˛_debug
("d_off£à = 0x%x\n", 
íc_di˘_íåy
->
d_off£t
);

423 
	`›í˛_debug
("d_sizê = 0x%x\n", 
íc_di˘_íåy
->
d_size
);

424 
	`›í˛_debug
("d_Êag† = 0x%x\n", 
íc_di˘_íåy
->
d_Êags
);

427 i‡(
íc_di˘_íåy
->
d_machöe
 == 0x9) {

428 i‡(
ˇl_abi
->
íc_di˘_íåy_idx
 >= 0)

429 
	`Áèl
("%s:Åwÿícodög di˘i⁄¨yÉ¡rõ†wôh 'd_machöe' = 0x9", 
__FUNCTION__
);

430 
ˇl_abi
->
íc_di˘_íåy_idx
 = 
i
;

435 i‡(
ˇl_abi
->
íc_di˘_íåy_idx
 < 0)

436 
	`Áèl
("%s:Çÿícodög di˘i⁄¨yÉ¡ry wôh 'd_machöe'=0x9 found", 
__FUNCTION__
);

437 
íc_di˘_íåy
 = &
íc_di˘_íåõs
[
ˇl_abi
->
íc_di˘_íåy_idx
];

438 
	`debug_èb
(
›í˛_debug_ˇãg‹y
, 2);

439 
	`›í˛_debug
("\n");

440 
	`›í˛_debug
("Encodög di˘i⁄¨yÉ¡ry sñe˘ed f‹Üﬂdög: %d\n", 
ˇl_abi
->
íc_di˘_íåy_idx
);

444 
	`ˇl_abi_ªad_£gmíts
(
ˇl_abi
, 
íc_di˘_íåy
);

445 
	`ˇl_abi_ªad_±_lﬂd_£˘i⁄s
(
ˇl_abi
);

448 
±_nŸe_±r
 = 
ˇl_abi
->
±_nŸe_buf„r
;

449 
±_nŸe_±r
 < 
ˇl_abi
->
±_nŸe_buf„r
 + cÆ_abi->
±_nŸe_phdr
->
p_fûesz
) {

450 
	`ˇl_abi_™Æyze_nŸe_hódî
(
ˇl_abi
, 
±_nŸe_±r
);

451 
±_nŸe_hódî
 = 
±_nŸe_±r
;

452 
±_nŸe_±r
 +(
CALNŸeHódî
Ë+ 
±_nŸe_hódî
->
descsz
;

456 i‡(!
ˇl_abi
->
ãxt_buf„r
)

457 
	`Áèl
("%s:Çÿíåy wôh d_machöe=0x9 found", 
__FUNCTION__
);

460 
	`ñf_‰ì_buf„r
(
íc_di˘_íåõs
);

461 
	`debug_èb
(
›í˛_debug_ˇãg‹y
, 0);

462 
	}
}

466 
ˇl_abi_t
 *
	$ˇl_abi_¸óã
()

468 
ˇl_abi_t
 *
ˇl_abi
;

470 
ˇl_abi
 = 
	`ˇŒoc
(1, (
ˇl_abi_t
));

471  
ˇl_abi
;

472 
	}
}

475 
	$ˇl_abi_‰ì
(
ˇl_abi_t
 *
ˇl_abi
)

477 i‡(
ˇl_abi
->
ñf
) {

478 
	`ñf_‰ì_buf„r
(
ˇl_abi
->
±_nŸe_buf„r
);

479 
	`ñf_‰ì_buf„r
(
ˇl_abi
->
±_lﬂd_buf„r
);

480 
	`ñf_˛o£
(
ˇl_abi
->
ñf
);

482 
	`‰ì
(
ˇl_abi
);

483 
	}
}

	@libgpukernel/gpuisa.c

20 
	~<gpukî√l-loˇl.h
>

21 
	~<gpudißsm.h
>

22 
	~<ªpos.h
>

27 
gpu_w¨p_t
 *
	ggpu_iß_w¨p
;

28 
gpu_thªad_t
 *
	ggpu_iß_thªad
;

29 
amd_ö°_t
 *
	ggpu_iß_ö°
;

30 
amd_ö°_t
 *
	ggpu_iß_cf_ö°
;

31 
amd_Æu_group_t
 *
	ggpu_iß_Æu_group
;

33 
gpu_thªad_t
 **
	ggpu_iß_thªads
;

37 
ªpos_t
 *
	ggpu_iß_wrôe_èsk_ªpos
;

40 
amd_ö°_im∂_t
 *
	gamd_ö°_im∂
;

43 
	ggpu_iß_debug_ˇãg‹y
;

54 
	$gpu_iß_öô
()

57 
amd_ö°_im∂
 = 
	`ˇŒoc
(
AMD_INST_COUNT
, (
amd_ö°_im∂_t
));

58 
	#DEFINST
(
_«me
, 
_fmt_°r
, 
_fmt0
, 
_fmt1
, 
_fmt2
, 
_ˇãg‹y
, 
_›code
, 
_Êags
) \

59 
amd_ö°_
##
_«me
##
	`_im∂
(); \

60 
amd_ö°_im∂
[
AMD_INST_
##
_«me
] = 
amd_ö°_
##_«me##
_im∂
;

	)

61 
	~<gpudißsm.d©
>

62 #unde‡
DEFINST


65 
gpu_iß_wrôe_èsk_ªpos
 = 
	`ªpos_¸óã
((
gpu_iß_wrôe_èsk_t
),

67 
	}
}

70 
	$gpu_iß_d⁄e
()

73 
	`‰ì
(
amd_ö°_im∂
);

76 
	`ªpos_‰ì
(
gpu_iß_wrôe_èsk_ªpos
);

77 
	}
}

86 
	$gpu_iß_c⁄°_mem_wrôe
(
b™k
, 
ve˘‹
, 
ñem
, *
pvÆue
)

88 
uöt32_t
 
addr
;

91 i‡(!
b™k
 && 
ve˘‹
 < 9)

92 
gk
->
c⁄°_mem_cb0_öô
[
ve˘‹
 * 4 + 
ñem
] = 1;

95 
addr
 = 
b™k
 * 16384 + 
ve˘‹
 * 16 + 
ñem
 * 4;

96 
	`mem_wrôe
(
gk
->
c⁄°_mem
, 
addr
, 4, 
pvÆue
);

97 
	}
}

100 
	$gpu_iß_c⁄°_mem_ªad
(
b™k
, 
ve˘‹
, 
ñem
, *
pvÆue
)

102 
uöt32_t
 
addr
;

105 i‡(!
b™k
 && 
ve˘‹
 < 9 && !
gk
->
c⁄°_mem_cb0_öô
[ve˘‹ * 4 + 
ñem
])

106 
	`w¨nög
("CB0[%d].%¯i†u£d unöôülized", 
ve˘‹
, "xyzw"[
ñem
]);

109 
addr
 = 
b™k
 * 16384 + 
ve˘‹
 * 16 + 
ñem
 * 4;

110 
	`mem_ªad
(
gk
->
c⁄°_mem
, 
addr
, 4, 
pvÆue
);

111 
	}
}

122 
	$gpu_iß_c⁄°_mem_öô
(
›í˛_kî√l_t
 *
kî√l
)

124 
uöt32_t
 
zîo
 = 0;

125 
f
;

130 
	`gpu_iß_c⁄°_mem_wrôe
(0, 0, 0, &
kî√l
->
globÆ_size3
[0]);

131 
	`gpu_iß_c⁄°_mem_wrôe
(0, 0, 1, &
kî√l
->
globÆ_size3
[1]);

132 
	`gpu_iß_c⁄°_mem_wrôe
(0, 0, 2, &
kî√l
->
globÆ_size3
[2]);

133 
	`gpu_iß_c⁄°_mem_wrôe
(0, 0, 3, &
kî√l
->
w‹k_dim
);

138 
	`gpu_iß_c⁄°_mem_wrôe
(0, 1, 0, &
kî√l
->
loˇl_size3
[0]);

139 
	`gpu_iß_c⁄°_mem_wrôe
(0, 1, 1, &
kî√l
->
loˇl_size3
[1]);

140 
	`gpu_iß_c⁄°_mem_wrôe
(0, 1, 2, &
kî√l
->
loˇl_size3
[2]);

145 
	`gpu_iß_c⁄°_mem_wrôe
(0, 2, 0, &
kî√l
->
group_cou¡3
[0]);

146 
	`gpu_iß_c⁄°_mem_wrôe
(0, 2, 1, &
kî√l
->
group_cou¡3
[1]);

147 
	`gpu_iß_c⁄°_mem_wrôe
(0, 2, 2, &
kî√l
->
group_cou¡3
[2]);

167 
f
 = 0.0f;

168 
	`gpu_iß_c⁄°_mem_wrôe
(0, 5, 0, &
f
);

169 
f
 = 0.5f;

170 
	`gpu_iß_c⁄°_mem_wrôe
(0, 5, 1, &
f
);

171 
f
 = 1.0f;

172 
	`gpu_iß_c⁄°_mem_wrôe
(0, 5, 2, &
f
);

173 
f
 = 2.0f;

174 
	`gpu_iß_c⁄°_mem_wrôe
(0, 5, 3, &
f
);

179 
	`gpu_iß_c⁄°_mem_wrôe
(0, 6, 0, &
zîo
);

180 
	`gpu_iß_c⁄°_mem_wrôe
(0, 6, 1, &
zîo
);

181 
	`gpu_iß_c⁄°_mem_wrôe
(0, 6, 2, &
zîo
);

182 
	`gpu_iß_c⁄°_mem_wrôe
(0, 6, 3, &
zîo
);

187 
	`gpu_iß_c⁄°_mem_wrôe
(0, 7, 0, &
zîo
);

188 
	`gpu_iß_c⁄°_mem_wrôe
(0, 7, 1, &
zîo
);

189 
	`gpu_iß_c⁄°_mem_wrôe
(0, 7, 2, &
zîo
);

190 
	`gpu_iß_c⁄°_mem_wrôe
(0, 7, 3, &
zîo
);

196 
	}
}

199 
	$gpu_iß_run
(
›í˛_kî√l_t
 *
kî√l
)

201 
›í˛_¥ogøm_t
 *
¥ogøm
;

202 *
code_buf„r
;

204 
amd_ö°_t
 
cf_ö°
;

206 
amd_Æu_group_t
 
Æu_group
;

208 
amd_ö°_t
 
tc_ö°
;

210 
i
, 
x
, 
y
, 
z
;

211 
globÆ_id
;

214 
gk_kî√l_executi⁄_cou¡
++;

215 i‡(
gk_ªp‹t_fûe
) {

216 
	`Ârötf
(
gk_ªp‹t_fûe
, "[ Kî√lExecuti⁄ %d ]\n\n", 
gk_kî√l_executi⁄_cou¡
 - 1);

217 
	`Ârötf
(
gk_ªp‹t_fûe
, "Kî√lNamê%s\n", 
kî√l
->
«me
);

218 
	`Ârötf
(
gk_ªp‹t_fûe
, "\n\n");

222 
¥ogøm
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PROGRAM
, 
kî√l
->
¥ogøm_id
);

225 
gpu_iß_thªads
 = 
	`ˇŒoc
(
kî√l
->
globÆ_size
, (*));

226 
gpu_iß_w¨p
 = 
	`gpu_w¨p_¸óã
(
gpu_iß_thªads
, 
kî√l
->
globÆ_size
, 0);

229 
x
 = 0; x < 
kî√l
->
globÆ_size3
[0]; x++) {

230 
y
 = 0; y < 
kî√l
->
globÆ_size3
[1]; y++) {

231 
z
 = 0; z < 
kî√l
->
globÆ_size3
[2]; z++) {

232 
globÆ_id
 = 
z
 * 
kî√l
->
globÆ_size3
[1] * kernel->global_size3[0]

233 + 
y
 * 
kî√l
->
globÆ_size3
[0] + 
x
;

234 
gpu_iß_thªads
[
globÆ_id
] = 
	`gpu_thªad_¸óã
();

235 
gpu_iß_thªad
 = 
gpu_iß_thªads
[
globÆ_id
];

237 
GPU_THR
.
w¨p
 = 
gpu_iß_w¨p
;

238 
GPU_THR
.
w¨p_id
 = 
globÆ_id
;

240 
GPU_THR
.
globÆ_id3
[0] = 
x
;

241 
GPU_THR
.
globÆ_id3
[1] = 
y
;

242 
GPU_THR
.
globÆ_id3
[2] = 
z
;

243 
GPU_THR
.
globÆ_id
 = global_id;

245 
GPU_THR
.
group_id3
[0] = 
	`GPU_GPR_X
(1Ë
x
 / 
kî√l
->
loˇl_size3
[0];

246 
GPU_THR
.
group_id3
[1] = 
	`GPU_GPR_Y
(1Ë
y
 / 
kî√l
->
loˇl_size3
[1];

247 
GPU_THR
.
group_id3
[2] = 
	`GPU_GPR_Z
(1Ë
z
 / 
kî√l
->
loˇl_size3
[2];

248 
GPU_THR
.
group_id
 = GPU_THR.
group_id3
[2] * 
kî√l
->
group_cou¡3
[1] * kernel->group_count3[0]

249 + 
GPU_THR
.
group_id3
[1] * 
kî√l
->
group_cou¡3
[0]

250 + 
GPU_THR
.
group_id3
[0];

252 
GPU_THR
.
loˇl_id3
[0] = 
	`GPU_GPR_X
(0Ë
x
 % 
kî√l
->
loˇl_size3
[0];

253 
GPU_THR
.
loˇl_id3
[1] = 
	`GPU_GPR_Y
(0Ë
y
 % 
kî√l
->
loˇl_size3
[1];

254 
GPU_THR
.
loˇl_id3
[2] = 
	`GPU_GPR_Z
(0Ë
z
 % 
kî√l
->
loˇl_size3
[2];

255 
GPU_THR
.
loˇl_id
 = GPU_THR.
loˇl_id3
[2] * 
kî√l
->
loˇl_size3
[1] * kernel->local_size3[0]

256 + 
GPU_THR
.
loˇl_id3
[1] * 
kî√l
->
loˇl_size3
[0]

257 + 
GPU_THR
.
loˇl_id3
[0];

260 
	`bô_m≠_£t
(
gpu_iß_w¨p
->
a˘ive_°ack
, 
globÆ_id
, 1, 1);

266 
	`gpu_iß_c⁄°_mem_öô
(
kî√l
);

269 
gk
->
loˇl_mem
 = 
	`ˇŒoc
(
kî√l
->
group_cou¡
, (
mem_t
 *));

270 
i
 = 0; i < 
kî√l
->
group_cou¡
; i++) {

271 
gk
->
loˇl_mem
[
i
] = 
	`mem_¸óã
();

272 
gk
->
loˇl_mem
[
i
]->
ß„
 = 0;

276 
i
 = 0; i < 
	`li°_cou¡
(
kî√l
->
¨g_li°
); i++) {

278 
›í˛_kî√l_¨g_t
 *
¨g
;

279 
¨g
 = 
	`li°_gë
(
kî√l
->
¨g_li°
, 
i
);

280 
	`as£π
(
¨g
);

283 i‡(!
¨g
->
£t
)

284 
	`Áèl
("kernel '%s':árgument '%s' hasÇot beenássigned with 'clKernelSetArg'.",

285 
kî√l
->
«me
, 
¨g
->name);

288 
¨g
->
köd
) {

290 
OPENCL_KERNEL_ARG_KIND_VALUE
: {

293 
	`gpu_iß_c⁄°_mem_wrôe
(1, 
i
, 0, &
¨g
->
vÆue
);

294 
	`›í˛_debug
("árg %d: vÆuê'0x%x'Üﬂded\n", 
i
, 
¨g
->
vÆue
);

298 
OPENCL_KERNEL_ARG_KIND_POINTER
:

300 
¨g
->
mem_sc›e
) {

302 
OPENCL_MEM_SCOPE_GLOBAL
:

304 
›í˛_mem_t
 *
mem
;

309 
mem
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_MEM
, 
¨g
->
vÆue
);

310 
	`gpu_iß_c⁄°_mem_wrôe
(1, 
i
, 0, &
mem
->
devi˚_±r
);

311 
	`›í˛_debug
("árg %d: opencl_mem id 0x%xÜoaded, device_ptr=0x%x\n",

312 
i
, 
¨g
->
vÆue
, 
mem
->
devi˚_±r
);

316 
OPENCL_MEM_SCOPE_LOCAL
:

320 
	`gpu_iß_c⁄°_mem_wrôe
(1, 
i
, 0, &
kî√l
->
loˇl_mem_t›
);

321 
	`›í˛_debug
("árg %d: %d bytesÑeserved inÜocal memoryát 0x%x\n",

322 
i
, 
¨g
->
size
, 
kî√l
->
loˇl_mem_t›
);

323 
kî√l
->
loˇl_mem_t›
 +
¨g
->
size
;

328 
	`Áèl
("%s:árgument in memory scope %dÇot supported",

329 
__FUNCTION__
, 
¨g
->
mem_sc›e
);

335 
	`Áèl
("%s:árgumíàty≥ÇŸÑecognized", 
__FUNCTION__
);

340 
code_buf„r
 = 
kî√l
->
ˇl_abi
->
ãxt_buf„r
;

341 i‡(!
code_buf„r
)

342 
	`Áèl
("%s: c™nŸÜﬂd kî√»code", 
__FUNCTION__
);

343 
gpu_iß_w¨p
->
cf_buf_°¨t
 = 
code_buf„r
;

344 
gpu_iß_w¨p
->
cf_buf
 = 
code_buf„r
;

345 
gpu_iß_w¨p
->
˛au£_köd
 = 
GPU_CLAUSE_CF
;

348 
gpu_iß_w¨p
->
˛au£_köd
 !
GPU_CLAUSE_CF
 || gpu_iß_w¨p->
cf_buf
) {

350 
gpu_iß_w¨p
->
˛au£_köd
) {

352 
GPU_CLAUSE_CF
:

354 
ö°_num
;

357 
ö°_num
 = (
gpu_iß_w¨p
->
cf_buf
 - 
code_buf„r
) / 8;

358 
gpu_iß_w¨p
->
cf_buf
 = 
	`amd_ö°_decode_cf
(gpu_iß_w¨p->cf_buf, &
cf_ö°
);

361 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

362 
	`gpu_iß_debug
("\n\n");

363 
	`amd_ö°_dump
(&
cf_ö°
, 
ö°_num
, 0,

364 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

368 
gpu_iß_ö°
 = &
cf_ö°
;

369 
gpu_iß_cf_ö°
 = &
cf_ö°
;

370 
gpu_iß_thªad
 = 
NULL
;

371 (*
amd_ö°_im∂
[
gpu_iß_ö°
->
öfo
->
ö°
])();

374 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_ACT_MASK
) {

375 
globÆ_id
 = 
gpu_iß_w¨p
->global_id; global_id < gpu_isa_warp->global_id +

376 
gpu_iß_w¨p
->
thªad_cou¡
; 
globÆ_id
++)

378 
gpu_iß_thªad
 = 
gpu_iß_thªads
[
globÆ_id
];

379 
	`gpu_thªad_upd©e_bønch_dige°
(
gpu_iß_thªad
, 
gpu_iß_w¨p
->
cf_ö°_cou¡
, 
ö°_num
);

384 
gpu_iß_w¨p
->
ö°_cou¡
++;

385 
gpu_iß_w¨p
->
cf_ö°_cou¡
++;

386 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_MEM
) {

387 
gpu_iß_w¨p
->
globÆ_mem_ö°_cou¡
++;

388 
gpu_iß_w¨p
->
cf_ö°_globÆ_mem_wrôe_cou¡
++;

394 
GPU_CLAUSE_ALU
:

397 
gpu_iß_w¨p
->
˛au£_buf
 = 
	`amd_ö°_decode_Æu_group
(gpu_isa_warp->clause_buf,

398 
gpu_iß_w¨p
->
Æu_group_cou¡
, &
Æu_group
);

401 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

402 
	`gpu_iß_debug
("\n\n");

403 
	`amd_Æu_group_dump
(&
Æu_group
, 0, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

407 
gpu_iß_cf_ö°
 = &
cf_ö°
;

408 
gpu_iß_Æu_group
 = &
Æu_group
;

409 
globÆ_id
 = 
gpu_iß_w¨p
->global_id; global_id < gpu_isa_warp->global_id +

410 
gpu_iß_w¨p
->
thªad_cou¡
; 
globÆ_id
++)

412 
gpu_iß_thªad
 = 
gpu_iß_thªads
[
globÆ_id
];

413 
i
 = 0; i < 
gpu_iß_Æu_group
->
ö°_cou¡
; i++) {

414 
gpu_iß_ö°
 = &
gpu_iß_Æu_group
->
ö°
[
i
];

415 (*
amd_ö°_im∂
[
gpu_iß_ö°
->
öfo
->
ö°
])();

417 
	`gpu_iß_wrôe_èsk_commô
();

421 
gpu_iß_w¨p
->
ö°_cou¡
 +
gpu_iß_Æu_group
->inst_count;

422 
gpu_iß_w¨p
->
Æu_ö°_cou¡
 +
gpu_iß_Æu_group
->
ö°_cou¡
;

423 
gpu_iß_w¨p
->
Æu_group_cou¡
++;

424 
	`as£π
(
gpu_iß_Æu_group
->
ö°_cou¡
 > 0 && gpu_isa_alu_group->inst_count < 6);

425 
gpu_iß_w¨p
->
Æu_group_size
[
gpu_iß_Æu_group
->
ö°_cou¡
 - 1]++;

426 
i
 = 0; i < 
gpu_iß_Æu_group
->
ö°_cou¡
; i++) {

427 
gpu_iß_ö°
 = &
gpu_iß_Æu_group
->
ö°
[
i
];

428 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_LDS
) {

429 
gpu_iß_w¨p
->
loˇl_mem_ö°_cou¡
++;

430 
gpu_iß_w¨p
->
Æu_ö°_loˇl_mem_cou¡
++;

435 
	`as£π
(
gpu_iß_w¨p
->
˛au£_buf
 <gpu_iß_w¨p->
˛au£_buf_íd
);

436 i‡(
gpu_iß_w¨p
->
˛au£_buf
 >gpu_iß_w¨p->
˛au£_buf_íd
) {

437 
	`gpu_iß_Æu_˛au£_íd
();

438 
gpu_iß_w¨p
->
˛au£_köd
 = 
GPU_CLAUSE_CF
;

444 
GPU_CLAUSE_TC
:

447 
gpu_iß_w¨p
->
˛au£_buf
 = 
	`amd_ö°_decode_tc
(gpu_iß_w¨p->˛au£_buf, &
tc_ö°
);

450 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

451 
	`gpu_iß_debug
("\n\n");

452 
	`amd_ö°_dump
(&
tc_ö°
, 0, 0, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

456 
gpu_iß_ö°
 = &
tc_ö°
;

457 
gpu_iß_cf_ö°
 = &
cf_ö°
;

458 
globÆ_id
 = 
gpu_iß_w¨p
->global_id; global_id < gpu_isa_warp->global_id +

459 
gpu_iß_w¨p
->
thªad_cou¡
; 
globÆ_id
++)

461 
gpu_iß_thªad
 = 
gpu_iß_thªads
[
globÆ_id
];

462 (*
amd_ö°_im∂
[
gpu_iß_ö°
->
öfo
->
ö°
])();

466 
gpu_iß_w¨p
->
ö°_cou¡
++;

467 
gpu_iß_w¨p
->
tc_ö°_cou¡
++;

468 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_MEM
) {

469 
gpu_iß_w¨p
->
globÆ_mem_ö°_cou¡
++;

470 
gpu_iß_w¨p
->
tc_ö°_globÆ_mem_ªad_cou¡
++;

474 
	`as£π
(
gpu_iß_w¨p
->
˛au£_buf
 <gpu_iß_w¨p->
˛au£_buf_íd
);

475 i‡(
gpu_iß_w¨p
->
˛au£_buf
 =gpu_iß_w¨p->
˛au£_buf_íd
) {

476 
	`gpu_iß_tc_˛au£_íd
();

477 
gpu_iß_w¨p
->
˛au£_köd
 = 
GPU_CLAUSE_CF
;

484 
	`ab‹t
();

490 
	`gpu_w¨p_dump
(
gpu_iß_w¨p
, 
gk_ªp‹t_fûe
);

493 
i
 = 0; i < 
kî√l
->
globÆ_size
; i++)

494 
	`gpu_thªad_‰ì
(
gpu_iß_thªads
[
i
]);

495 
	`‰ì
(
gpu_iß_thªads
);

496 
	`gpu_w¨p_‰ì
(
gpu_iß_w¨p
);

499 
i
 = 0; i < 
kî√l
->
group_cou¡
; i++)

500 
	`mem_‰ì
(
gk
->
loˇl_mem
[
i
]);

501 
	`‰ì
(
gk
->
loˇl_mem
);

502 
	}
}

512 
	$gpu_iß_Æu_˛au£_°¨t
()

515 
	`bô_m≠_c›y
(
gpu_iß_w¨p
->
¥ed
, 0, gpu_iß_w¨p->
a˘ive_°ack
,

516 
gpu_iß_w¨p
->
°ack_t›
 * gpu_iß_w¨p->
thªad_cou¡
, gpu_isa_warp->thread_count);

517 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

518 
	`gpu_iß_debug
(" %s:¥ed=", 
gpu_iß_w¨p
->
«me
);

519 
	`bô_m≠_dump
(
gpu_iß_w¨p
->
¥ed
, 0, gpu_iß_w¨p->
thªad_cou¡
,

520 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

524 
gpu_iß_w¨p
->
push_bef‹e_d⁄e
 = 0;

527 
gpu_iß_w¨p
->
Æu_˛au£_cou¡
++;

528 
	}
}

532 
	$gpu_iß_Æu_˛au£_íd
()

535 i‡(
gpu_iß_cf_ö°
->
öfo
->
ö°
 =
AMD_INST_ALU_POP_AFTER
)

536 
	`gpu_w¨p_°ack_p›
(
gpu_iß_w¨p
, 1);

537 
	}
}

547 
	$gpu_iß_tc_˛au£_°¨t
()

550 
gpu_iß_w¨p
->
tc_˛au£_cou¡
++;

551 
	}
}

555 
	$gpu_iß_tc_˛au£_íd
()

557 
	}
}

568 
	$gpu_iß_de°_vÆue_dump
(*
pvÆue
, 
FILE
 *
f
)

570 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_DST_INT
)

571 
	`Ârötf
(
f
, "%d", * (*Ë
pvÆue
);

573 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_DST_UINT
)

574 
	`Ârötf
(
f
, "0x%x", * (*Ë
pvÆue
);

576 i‡(
gpu_iß_ö°
->
öfo
->
Êags
 & 
AMD_INST_FLAG_DST_FLOAT
)

577 
	`Ârötf
(
f
, "%gf", * (*Ë
pvÆue
);

580 
	`Ârötf
(
f
, "(0x%x,%gf)", * (*Ë
pvÆue
, * (*)Övalue);

581 
	}
}

585 
uöt32_t
 
	$gpu_iß_ªad_g¥
(
g¥
, 
ªl
, 
ch™
, 
im
)

587 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
ch™
, 0, 4);

588 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
g¥
, 0, 127);

589 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
ªl
, 0);

590 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
im
, 0);

591  
	`GPU_GPR_ELEM
(
g¥
, 
ch™
);

592 
	}
}

596 
	$gpu_iß_ªad_g¥_Êﬂt
(
g¥
, 
ªl
, 
ch™
, 
im
)

598 
uöt32_t
 
vÆue
;

599 
vÆue_Êﬂt
;

601 
vÆue
 = 
	`gpu_iß_ªad_g¥
(
g¥
, 
ªl
, 
ch™
, 
im
);

602 
vÆue_Êﬂt
 = * (*Ë&
vÆue
;

603  
vÆue_Êﬂt
;

604 
	}
}

607 
	$gpu_iß_wrôe_g¥
(
g¥
, 
ªl
, 
ch™
, 
uöt32_t
 
vÆue
)

609 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
ch™
, 0, 4);

610 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
g¥
, 0, 127);

611 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
ªl
, 0);

612 
	`GPU_GPR_ELEM
(
g¥
, 
ch™
Ë
vÆue
;

613 
	}
}

616 
	$gpu_iß_wrôe_g¥_Êﬂt
(
g¥
, 
ªl
, 
ch™
, 
vÆue_Êﬂt
)

618 
uöt32_t
 
vÆue
;

620 
vÆue
 = * (
uöt32_t
 *Ë&
vÆue_Êﬂt
;

621 
	`gpu_iß_wrôe_g¥
(
g¥
, 
ªl
, 
ch™
, 
vÆue
);

622 
	}
}

626 
uöt32_t
 
	$gpu_iß_ªad_›_§c
(
§c_idx
)

628 
£l
, 
ªl
, 
ch™
, 
√g
, 
abs
;

629 
öt32_t
 
vÆue
 = 0;

632 
	`amd_ö°_gë_›_§c
(
gpu_iß_ö°
, 
§c_idx
, &
£l
, &
ªl
, &
ch™
, &
√g
, &
abs
);

635 i‡(
	`IN_RANGE
(
£l
, 0, 127)) {

636 
ödex_mode
;

637 
ödex_mode
 = 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0
.index_mode;

638 
vÆue
 = 
	`gpu_iß_ªad_g¥
(
£l
, 
ªl
, 
ch™
, 
ödex_mode
);

639 
íd
;

643 i‡(
	`IN_RANGE
(
£l
, 128, 159)) {

645 
uöt32_t
 
kˇche_b™k
, 
kˇche_mode
, 
kˇche_addr
;

647 
	`as£π
(
gpu_iß_cf_ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALU_WORD0
 && gpu_iß_cf_ö°->öfo->fmt[1] =
FMT_CF_ALU_WORD1
);

648 
kˇche_b™k
 = 
gpu_iß_cf_ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
kˇche_b™k0
;

649 
kˇche_mode
 = 
gpu_iß_cf_ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
kˇche_mode0
;

650 
kˇche_addr
 = 
gpu_iß_cf_ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
kˇche_addr0
;

652 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
kˇche_mode
, 1);

653 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
ch™
, 0, 3);

654 
	`gpu_iß_c⁄°_mem_ªad
(
kˇche_b™k
, 
kˇche_addr
 * 16 + 
£l
 - 128, 
ch™
, &
vÆue
);

655 
íd
;

659 i‡(
	`IN_RANGE
(
£l
, 160, 191)) {

661 
uöt32_t
 
kˇche_b™k
, 
kˇche_mode
, 
kˇche_addr
;

663 
	`as£π
(
gpu_iß_cf_ö°
->
öfo
->
fmt
[0] =
FMT_CF_ALU_WORD0
 && gpu_iß_cf_ö°->öfo->fmt[1] =
FMT_CF_ALU_WORD1
);

664 
kˇche_b™k
 = 
gpu_iß_cf_ö°
->
w‹ds
[0].
cf_Æu_w‹d0
.
kˇche_b™k1
;

665 
kˇche_mode
 = 
gpu_iß_cf_ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
kˇche_mode1
;

666 
kˇche_addr
 = 
gpu_iß_cf_ö°
->
w‹ds
[1].
cf_Æu_w‹d1
.
kˇche_addr1
;

668 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
kˇche_mode
, 1);

669 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
ch™
, 0, 3);

670 
	`gpu_iß_c⁄°_mem_ªad
(
kˇche_b™k
, 
kˇche_addr
 * 16 + 
£l
 - 160, 
ch™
, &
vÆue
);

671 
íd
;

675 i‡(
£l
 == 219 || sel == 221) {

676 
uöt32_t
 *
pvÆue
;

677 
pvÆue
 = (
uöt32_t
 *Ë
	`li°_dequeue
(
gpu_iß_thªad
->
lds_oqa
);

678 i‡(!
pvÆue
)

679 
	`Áèl
("%s: LDS queuêA i†em±y", 
__FUNCTION__
);

680 
vÆue
 = *
pvÆue
;

681 i‡(
£l
 == 219)

682 
	`li°_íqueue
(
gpu_iß_thªad
->
lds_oqa
, 
pvÆue
);

684 
	`‰ì
(
pvÆue
);

685 
íd
;

689 i‡(
£l
 == 220 || sel == 222) {

690 
uöt32_t
 *
pvÆue
;

691 
pvÆue
 = (
uöt32_t
 *Ë
	`li°_dequeue
(
gpu_iß_thªad
->
lds_oqb
);

692 i‡(!
pvÆue
)

693 
	`Áèl
("%s: LDS queuêB i†em±y", 
__FUNCTION__
);

694 
vÆue
 = *
pvÆue
;

695 i‡(
£l
 == 220)

696 
	`li°_íqueue
(
gpu_iß_thªad
->
lds_oqb
, 
pvÆue
);

698 
	`‰ì
(
pvÆue
);

699 
íd
;

703 i‡(
£l
 == 248) {

704 
vÆue
 = 0;

705 
íd
;

709 i‡(
£l
 == 249) {

710 
f
 = 1.0f;

711 
vÆue
 = * (
uöt32_t
 *Ë&
f
;

712 
íd
;

716 i‡(
£l
 == 250) {

717 
vÆue
 = 1;

718 
íd
;

722 i‡(
£l
 == 251) {

723 
vÆue
 = -1;

724 
íd
;

728 i‡(
£l
 == 253) {

729 
	`as£π
(
gpu_iß_ö°
->
Æu_group
);

730 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
ch™
, 0, 3);

731 
vÆue
 = * (
uöt32_t
 *Ë&
gpu_iß_ö°
->
Æu_group
->
lôîÆ
[
ch™
];

732 
íd
;

736 i‡(
£l
 == 254) {

737 
	`GPU_PARAM_NOT_SUPPORTED_OOR
(
ch™
, 0, 3);

738 
vÆue
 = 
GPU_THR
.
pv
.
ñem
[
ch™
];

739 
íd
;

743 i‡(
£l
 == 255) {

744 
vÆue
 = 
GPU_THR
.
pv
.
ñem
[4];

745 
íd
;

748 
	`Áèl
("gpu_iß_ªad_›_§c: src_idx=%d,ÇŸ im∂emíãd f‹ sñ=%d", 
§c_idx
, 
£l
);

750 
íd
:

752 i‡(
abs
 && 
vÆue
 < 0)

753 
vÆue
 = -value;

754 i‡(
√g
)

755 
vÆue
 = -value;

756  
vÆue
;

757 
	}
}

760 
	$gpu_iß_ªad_›_§c_Êﬂt
(
§c_idx
)

762 
uöt32_t
 
vÆue
;

763 
vÆue_Êﬂt
;

765 
vÆue
 = 
	`gpu_iß_ªad_›_§c
(
§c_idx
);

766 
vÆue_Êﬂt
 = * (*Ë&
vÆue
;

767  
vÆue_Êﬂt
;

768 
	}
}

778 
	$gpu_iß_íqueue_wrôe_lds
(
uöt32_t
 
addr
, uöt32_à
vÆue
)

780 
gpu_iß_wrôe_èsk_t
 *
wt
;

783 i‡(!
	`gpu_thªad_gë_¥ed
(
gpu_iß_thªad
))

787 
wt
 = 
	`ªpos_¸óã_obje˘
(
gpu_iß_wrôe_èsk_ªpos
);

788 
wt
->
köd
 = 
GPU_ISA_WRITE_TASK_WRITE_LDS
;

789 
wt
->
ö°
 = 
gpu_iß_ö°
;

790 
wt
->
lds_addr
 = 
addr
;

791 
wt
->
lds_vÆue
 = 
vÆue
;

794 
	` li°_add
(
GPU_THR
.
wrôe_èsk_li°
, 
wt
);

795 
	}
}

799 
	$gpu_iß_íqueue_wrôe_de°
(
uöt32_t
 
vÆue
)

801 
gpu_iß_wrôe_èsk_t
 *
wt
;

804 
	`as£π
(
gpu_iß_ö°
->
öfo
->
fmt
[0] =
FMT_ALU_WORD0
);

805 i‡(!
	`gpu_thªad_gë_¥ed
(
gpu_iß_thªad
))

810 
wt
 = 
	`ªpos_¸óã_obje˘
(
gpu_iß_wrôe_èsk_ªpos
);

811 
wt
->
köd
 = 
GPU_ISA_WRITE_TASK_WRITE_DEST
;

812 
wt
->
ö°
 = 
gpu_iß_ö°
;

813 
wt
->
g¥
 = 
ALU_WORD1_OP2
.
d°_g¥
;

814 
wt
->
ªl
 = 
ALU_WORD1_OP2
.
d°_ªl
;

815 
wt
->
ch™
 = 
ALU_WORD1_OP2
.
d°_ch™
;

816 
wt
->
ödex_mode
 = 
ALU_WORD0
.index_mode;

817 
wt
->
vÆue
 = value;

820 
wt
->
wrôe_mask
 = 1;

821 i‡(
gpu_iß_ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
 && !
ALU_WORD1_OP2
.
wrôe_mask
)

822 
wt
->
wrôe_mask
 = 0;

825 
	` li°_add
(
GPU_THR
.
wrôe_èsk_li°
, 
wt
);

826 
	}
}

829 
	$gpu_iß_íqueue_wrôe_de°_Êﬂt
(
vÆue_Êﬂt
)

831 
uöt32_t
 
vÆue
;

833 
vÆue
 = * (
uöt32_t
 *Ë&
vÆue_Êﬂt
;

834 
	`gpu_iß_íqueue_wrôe_de°
(
vÆue
);

835 
	}
}

838 
	$gpu_iß_íqueue_push_bef‹e
()

840 
gpu_iß_wrôe_èsk_t
 *
wt
;

843 i‡(
gpu_iß_cf_ö°
->
öfo
->
ö°
 !
AMD_INST_ALU_PUSH_BEFORE
)

847 
wt
 = 
	`ªpos_¸óã_obje˘
(
gpu_iß_wrôe_èsk_ªpos
);

848 
wt
->
köd
 = 
GPU_ISA_WRITE_TASK_PUSH_BEFORE
;

849 
wt
->
ö°
 = 
gpu_iß_ö°
;

850 
	` li°_add
(
GPU_THR
.
wrôe_èsk_li°
, 
wt
);

851 
	}
}

854 
	$gpu_iß_íqueue_¥ed_£t
(
c⁄d
)

856 
gpu_iß_wrôe_èsk_t
 *
wt
;

859 
	`as£π
(
gpu_iß_ö°
->
öfo
->
fmt
[0] =
FMT_ALU_WORD0
);

860 
	`as£π
(
gpu_iß_ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
);

861 i‡(!
	`gpu_thªad_gë_¥ed
(
gpu_iß_thªad
))

865 
wt
 = 
	`ªpos_¸óã_obje˘
(
gpu_iß_wrôe_èsk_ªpos
);

866 
wt
->
köd
 = 
GPU_ISA_WRITE_TASK_SET_PRED
;

867 
wt
->
ö°
 = 
gpu_iß_ö°
;

868 
wt
->
c⁄d
 = cond;

869 
	` li°_add
(
GPU_THR
.
wrôe_èsk_li°
, 
wt
);

870 
	}
}

873 
	$gpu_iß_wrôe_èsk_commô
()

875 
 li°_t
 *
èsk_li°
 = 
GPU_THR
.
wrôe_èsk_li°
;

876 
gpu_iß_wrôe_èsk_t
 *
wt
;

882 
	` li°_hód
(
èsk_li°
); !
	` li°_eﬁ
(task_list); )

886 
wt
 = 
	` li°_gë
(
èsk_li°
);

887 
gpu_iß_ö°
 = 
wt
->
ö°
;

889 
wt
->
köd
) {

891 
GPU_ISA_WRITE_TASK_WRITE_DEST
:

893 i‡(
wt
->
wrôe_mask
)

894 
	`gpu_iß_wrôe_g¥
(
wt
->
g¥
, wt->
ªl
, wt->
ch™
, wt->
vÆue
);

895 
GPU_THR
.
pv
.
ñem
[
wt
->
ö°
->
Æu
] = wt->
vÆue
;

898 i‡(
	`gpu_iß_debuggög
()) {

899 
	`gpu_iß_debug
(" i%d:%s", 
gpu_iß_thªad
->
globÆ_id
,

900 
	`m≠_vÆue
(&
amd_pv_m≠
, 
wt
->
ö°
->
Æu
));

901 i‡(
wt
->
wrôe_mask
) {

902 
	`gpu_iß_debug
(",");

903 
	`amd_ö°_dump_g¥
(
wt
->
g¥
, wt->
ªl
, wt->
ch™
, 0,

904 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

906 
	`gpu_iß_debug
("<=");

907 
	`gpu_iß_de°_vÆue_dump
(&
wt
->
vÆue
, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

913 
GPU_ISA_WRITE_TASK_WRITE_LDS
:

915 
mem_t
 *
loˇl_mem
;

917 
loˇl_mem
 = 
gk
->loˇl_mem[
gpu_iß_thªad
->
group_id
];

918 
	`as£π
(
loˇl_mem
);

919 
	`mem_wrôe
(
loˇl_mem
, 
wt
->
lds_addr
, 4, &wt->
lds_vÆue
);

920 
	`gpu_iß_debug
(" i%d:LDS[0x%x]<=(%u,%gf)", 
GPU_THR
.
globÆ_id
, 
wt
->
lds_addr
,

921 
wt
->
lds_vÆue
, * (*) &wt->lds_value);

926 
	` li°_√xt
(
èsk_li°
);

931 
	`ªpos_‰ì_obje˘
(
gpu_iß_wrôe_èsk_ªpos
, 
wt
);

932 
	` li°_ªmove
(
èsk_li°
);

936 
	` li°_hód
(
èsk_li°
); !
	` li°_eﬁ
(task_list); ) {

939 
wt
 = 
	` li°_gë
(
èsk_li°
);

940 
gpu_iß_ö°
 = 
wt
->
ö°
;

943 
wt
->
köd
) {

945 
GPU_ISA_WRITE_TASK_PUSH_BEFORE
:

947 i‡(!
gpu_iß_w¨p
->
push_bef‹e_d⁄e
)

948 
	`gpu_w¨p_°ack_push
(
gpu_iß_w¨p
);

949 
gpu_iß_w¨p
->
push_bef‹e_d⁄e
 = 1;

953 
GPU_ISA_WRITE_TASK_SET_PRED
:

955 
upd©e_¥ed
 = 
ALU_WORD1_OP2
.update_pred;

956 
upd©e_exec_mask
 = 
ALU_WORD1_OP2
.update_exec_mask;

958 
	`as£π
(
gpu_iß_ö°
->
öfo
->
fmt
[1] =
FMT_ALU_WORD1_OP2
);

959 i‡(
upd©e_¥ed
)

960 
	`gpu_thªad_£t_¥ed
(
gpu_iß_thªad
, 
wt
->
c⁄d
);

961 i‡(
upd©e_exec_mask
)

962 
	`gpu_thªad_£t_a˘ive
(
gpu_iß_thªad
, 
wt
->
c⁄d
);

965 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

966 i‡(
upd©e_¥ed
 && 
upd©e_exec_mask
)

967 
	`gpu_iß_debug
(" i%d:a˘/¥ed<=%d", 
GPU_THR
.
globÆ_id
, 
wt
->
c⁄d
);

968 i‡(
upd©e_¥ed
)

969 
	`gpu_iß_debug
(" i%d:¥ed=%d", 
GPU_THR
.
globÆ_id
, 
wt
->
c⁄d
);

970 i‡(
upd©e_exec_mask
)

971 
	`gpu_iß_debug
(" i%d:¥ed=%d", 
GPU_THR
.
globÆ_id
, 
wt
->
c⁄d
);

977 
	`ab‹t
();

981 
	`ªpos_‰ì_obje˘
(
gpu_iß_wrôe_èsk_ªpos
, 
wt
);

982 
	` li°_ªmove
(
èsk_li°
);

986 
	`as£π
(!
	` li°_cou¡
(
èsk_li°
));

987 
	}
}

	@libgpukernel/gpukernel-local.h

20 #i‚de‡
GPUKERNEL_LOCAL_H


21 
	#GPUKERNEL_LOCAL_H


	)

23 
	~<gpukî√l.h
>

24 
	~<m2skî√l.h
>

25 
	~<°döt.h
>

31 *
gk_ªp‹t_fûe_«me
;

32 
FILE
 *
gk_ªp‹t_fûe
;

34 
gk_kî√l_executi⁄_cou¡
;

40 *
îr_›í˛_nŸe
;

41 *
îr_›í˛_∑øm_nŸe
;

49 
	sˇl_abi_t


52 
	mfûe_«me
[
MAX_PATH_SIZE
];

53 
ñf_fûe_t
 *
	mñf
;

56 
	míc_di˘_phdr_idx
;

57 
Elf32_Phdr
 *
	míc_di˘_phdr
;

58 
	míc_di˘_íåy_cou¡
;

59 
	míc_di˘_íåy_idx
;

62 
Elf32_Phdr
 *
	m±_nŸe_phdr
;

63 *
	m±_nŸe_buf„r
;

66 
Elf32_Phdr
 *
	m±_lﬂd_phdr
;

67 *
	m±_lﬂd_buf„r
;

70 
Elf32_Shdr
 *
	mãxt_shdr
, *
	md©a_shdr
, *
	msymèb_shdr
, *
	m°πab_shdr
;

71 *
	mãxt_buf„r
, *
	md©a_buf„r
, *
	msymèb_buf„r
, *
	m°πab_buf„r
;

74 
ˇl_abi_∑r£_ñf
(
ˇl_abi_t
 *
ˇl_abi
, *
fûe_«me
);

75 
ˇl_abi_t
 *
ˇl_abi_¸óã
();

76 
ˇl_abi_‰ì
(
ˇl_abi_t
 *
ˇl_abi
);

86 
	e›í˛_obj_íum
 {

87 
	mOPENCL_OBJ_PLATFORM
 = 1,

88 
	mOPENCL_OBJ_DEVICE
,

89 
	mOPENCL_OBJ_CONTEXT
,

90 
	mOPENCL_OBJ_COMMAND_QUEUE
,

91 
	mOPENCL_OBJ_PROGRAM
,

92 
	mOPENCL_OBJ_KERNEL
,

93 
	mOPENCL_OBJ_MEM
,

94 
	mOPENCL_OBJ_EVENT


97 
 li°_t
 *
›í˛_obje˘_li°
;

99 
›í˛_obje˘_add
(*
obje˘
);

100 
›í˛_obje˘_ªmove
(*
obje˘
);

101 *
›í˛_obje˘_gë
(
›í˛_obj_íum
 
ty≥
, 
uöt32_t
 
id
);

102 *
›í˛_obje˘_gë_ty≥
(
›í˛_obj_íum
 
ty≥
);

103 
uöt32_t
 
›í˛_obje˘_√w_id
(
›í˛_obj_íum
 
ty≥
);

104 
›í˛_obje˘_‰ì_Æl
();

111 
	s›í˛_∂©f‹m_t


113 
uöt32_t
 
	mid
;

116 
›í˛_∂©f‹m_t
 *
›í˛_∂©f‹m
;

118 
›í˛_∂©f‹m_t
 *
›í˛_∂©f‹m_¸óã
();

119 
›í˛_∂©f‹m_‰ì
(
›í˛_∂©f‹m_t
 *
∂©f‹m
);

120 
uöt32_t
 
›í˛_∂©f‹m_gë_öfo
(
›í˛_∂©f‹m_t
 *
∂©f‹m
, uöt32_à
«me
, 
mem_t
 *
mem
, uöt32_à
addr
, uöt32_à
size
);

127 
	s›í˛_devi˚_t


129 
uöt32_t
 
	mid
;

132 
›í˛_devi˚_t
 *
›í˛_devi˚_¸óã
();

133 
›í˛_devi˚_‰ì
(
›í˛_devi˚_t
 *
devi˚
);

134 
uöt32_t
 
›í˛_devi˚_gë_öfo
(
›í˛_devi˚_t
 *
devi˚
, uöt32_à
«me
, 
mem_t
 *
mem
, uöt32_à
addr
, uöt32_à
size
);

141 
	s›í˛_c⁄ãxt_t


143 
uöt32_t
 
	mid
;

144 
	mªf_cou¡
;

146 
uöt32_t
 
	m∂©f‹m_id
;

147 
uöt32_t
 
	mdevi˚_id
;

150 
›í˛_c⁄ãxt_t
 *
›í˛_c⁄ãxt_¸óã
();

151 
›í˛_c⁄ãxt_‰ì
(
›í˛_c⁄ãxt_t
 *
c⁄ãxt
);

152 
uöt32_t
 
›í˛_c⁄ãxt_gë_öfo
(
›í˛_c⁄ãxt_t
 *
c⁄ãxt
, uöt32_à
«me
, 
mem_t
 *
mem
, uöt32_à
addr
, uöt32_à
size
);

153 
›í˛_c⁄ãxt_£t_¥›îtõs
(
›í˛_c⁄ãxt_t
 *
c⁄ãxt
, 
mem_t
 *
mem
, 
uöt32_t
 
addr
);

160 
	s›í˛_comm™d_queue_t


162 
uöt32_t
 
	mid
;

163 
	mªf_cou¡
;

165 
uöt32_t
 
	mdevi˚_id
;

166 
uöt32_t
 
	mc⁄ãxt_id
;

167 
uöt32_t
 
	m¥›îtõs
;

170 
›í˛_comm™d_queue_t
 *
›í˛_comm™d_queue_¸óã
();

171 
›í˛_comm™d_queue_‰ì
(
›í˛_comm™d_queue_t
 *
comm™d_queue
);

178 
	s›í˛_¥ogøm_t


180 
uöt32_t
 
	mid
;

181 
	mªf_cou¡
;

183 
uöt32_t
 
	mdevi˚_id
;

184 
uöt32_t
 
	mc⁄ãxt_id
;

187 
FILE
 *
	mbö¨y_fûe
;

188 
	mbö¨y_fûe_«me
[
MAX_PATH_SIZE
];

189 
ñf_fûe_t
 *
	mbö¨y_fûe_ñf
;

192 
›í˛_¥ogøm_t
 *
›í˛_¥ogøm_¸óã
();

193 
›í˛_¥ogøm_‰ì
(
›í˛_¥ogøm_t
 *
¥ogøm
);

194 
›í˛_¥ogøm_buûd
(
›í˛_¥ogøm_t
 *
¥ogøm
);

201 
	e›í˛_mem_sc›e_íum
 {

202 
	mOPENCL_MEM_SCOPE_NONE
 = 0,

203 
	mOPENCL_MEM_SCOPE_GLOBAL
,

204 
	mOPENCL_MEM_SCOPE_LOCAL
,

205 
	mOPENCL_MEM_SCOPE_PRIVATE
,

206 
	mOPENCL_MEM_SCOPE_CONSTANT


209 
	e›í˛_kî√l_¨g_köd_íum
 {

210 
	mOPENCL_KERNEL_ARG_KIND_VALUE
 = 1,

211 
	mOPENCL_KERNEL_ARG_KIND_POINTER


214 
	s›í˛_kî√l_¨g_t


217 
›í˛_kî√l_¨g_köd_íum
 
	mköd
;

218 
›í˛_mem_sc›e_íum
 
	mmem_sc›e
;

219 
	mñem_size
;

222 
	m£t
;

223 
uöt32_t
 
	mvÆue
;

224 
uöt32_t
 
	msize
;

227 
	m«me
[0];

230 
	s›í˛_kî√l_t


232 
uöt32_t
 
	mid
;

233 
	mªf_cou¡
;

234 
uöt32_t
 
	m¥ogøm_id
;

235 
	m«me
[
MAX_STRING_SIZE
];

236 
li°_t
 *
	m¨g_li°
;

240 
FILE
 *
	mmëad©a_fûe
;

241 
	mmëad©a_fûe_«me
[
MAX_PATH_SIZE
];

244 
FILE
 *
	mkî√l_fûe
;

245 
	mkî√l_fûe_«me
[
MAX_PATH_SIZE
];

248 
ˇl_abi_t
 *
	mˇl_abi
;

251 
	mfunc_uniqueid
;

252 
	mfunc_mem_loˇl
;

253 
FILE
 *
	mfunc_fûe
;

254 
	mfunc_fûe_«me
[
MAX_PATH_SIZE
];

257 
	mw‹k_dim
;

260 
	mglobÆ_size3
[3];

261 
	mloˇl_size3
[3];

262 
	mgroup_cou¡3
[3];

266 
	mglobÆ_size
;

267 
	mloˇl_size
;

268 
	mgroup_cou¡
;

272 
uöt32_t
 
	mloˇl_mem_t›
;

275 
›í˛_kî√l_t
 *
›í˛_kî√l_¸óã
();

276 
›í˛_kî√l_‰ì
(
›í˛_kî√l_t
 *
kî√l
);

278 
›í˛_kî√l_¨g_t
 *
›í˛_kî√l_¨g_¸óã
(*
«me
);

279 
›í˛_kî√l_¨g_‰ì
(
›í˛_kî√l_¨g_t
 *
¨g
);

281 
›í˛_kî√l_lﬂd
(
›í˛_kî√l_t
 *
kî√l
, *
kî√l_«me
);

282 
uöt32_t
 
›í˛_kî√l_gë_w‹k_group_öfo
(
›í˛_kî√l_t
 *
kî√l
, uöt32_à
«me
,

283 
mem_t
 *
mem
, 
uöt32_t
 
addr
, uöt32_à
size
);

290 
	s›í˛_mem_t


292 
uöt32_t
 
	mid
;

293 
	mªf_cou¡
;

295 
uöt32_t
 
	msize
;

296 
uöt32_t
 
	mÊags
;

297 
uöt32_t
 
	mho°_±r
;

299 
uöt32_t
 
	mdevi˚_±r
;

302 
›í˛_mem_t
 *
›í˛_mem_¸óã
();

303 
›í˛_mem_‰ì
(
›í˛_mem_t
 *
mem
);

310 
	e›í˛_evít_köd_íum
 {

311 
	mOPENCL_EVENT_NONE
 = 0,

312 
	mOPENCL_EVENT_NDRANGE_KERNEL
,

313 
	mOPENCL_EVENT_TASK
,

314 
	mOPENCL_EVENT_NATIVE_KERNEL
,

315 
	mOPENCL_EVENT_READ_BUFFER
,

316 
	mOPENCL_EVENT_WRITE_BUFFER
,

317 
	mOPENCL_EVENT_MAP_BUFFER
,

318 
	mOPENCL_EVENT_UNMAP_MEM_OBJECT
,

319 
	mOPENCL_EVENT_READ_BUFFER_RECT
,

320 
	mOPENCL_EVENT_WRITE_BUFFER_RECT
,

321 
	mOPENCL_EVENT_READ_IMAGE
,

322 
	mOPENCL_EVENT_WRITE_IMAGE
,

323 
	mOPENCL_EVENT_MAP_IMAGE
,

324 
	mOPENCL_EVENT_COPY_BUFFER
,

325 
	mOPENCL_EVENT_COPY_IMAGE
,

326 
	mOPENCL_EVENT_COPY_BUFFER_RECT
,

327 
	mOPENCL_EVENT_COPY_BUFFER_TO_IMAGE
,

328 
	mOPENCL_EVENT_COPY_IMAGE_TO_BUFFER
,

329 
	mOPENCL_EVENT_MARKER
,

330 
	mOPENCL_EVENT_COUNT


333 
	e›í˛_evít_°©us_íum
 {

334 
	mOPENCL_EVENT_STATUS_NONE
 = 0,

335 
	mOPENCL_EVENT_STATUS_QUEUED
,

336 
	mOPENCL_EVENT_STATUS_SUBMITTED
,

337 
	mOPENCL_EVENT_STATUS_RUNNING
,

338 
	mOPENCL_EVENT_STATUS_COMPLETE


341 
	s›í˛_evít_t


343 
uöt32_t
 
	mid
;

344 
	mªf_cou¡
;

345 
›í˛_evít_köd_íum
 
	mköd
;

346 
›í˛_evít_°©us_íum
 
	m°©us
;

348 
uöt64_t
 
	mtime_queued
;

349 
uöt64_t
 
	mtime_submô
;

350 
uöt64_t
 
	mtime_°¨t
;

351 
uöt64_t
 
	mtime_íd
;

354 
›í˛_evít_t
 *
›í˛_evít_¸óã
(
›í˛_evít_köd_íum
 
köd
);

355 
›í˛_evít_‰ì
(
›í˛_evít_t
 *
evít
);

357 
uöt32_t
 
›í˛_evít_gë_¥ofûög_öfo
(
›í˛_evít_t
 *
evít
, uöt32_à
«me
,

358 
mem_t
 *
mem
, 
uöt32_t
 
addr
, uöt32_à
size
);

359 
uöt64_t
 
›í˛_evít_timî
();

368 
	egpu_iß_wrôe_èsk_köd_íum
 {

369 
	mGPU_ISA_WRITE_TASK_NONE
 = 0,

370 
	mGPU_ISA_WRITE_TASK_WRITE_LDS
,

371 
	mGPU_ISA_WRITE_TASK_WRITE_DEST
,

372 
	mGPU_ISA_WRITE_TASK_PUSH_BEFORE
,

373 
	mGPU_ISA_WRITE_TASK_SET_PRED


377 
	sgpu_iß_wrôe_èsk_t
 {

380 
gpu_iß_wrôe_èsk_köd_íum
 
	mköd
;

381 
amd_ö°_t
 *
	mö°
;

384 
	mg¥
, 
	mªl
, 
	mch™
, 
	mödex_mode
, 
	mwrôe_mask
;

385 
uöt32_t
 
	mvÆue
;

388 
uöt32_t
 
	mlds_addr
;

389 
uöt32_t
 
	mlds_vÆue
;

392 
	mc⁄d
;

397 
ªpos_t
 *
gpu_iß_wrôe_èsk_ªpos
;

401 
gpu_iß_íqueue_wrôe_lds
(
uöt32_t
 
addr
, uöt32_à
vÆue
);

402 
gpu_iß_íqueue_wrôe_de°
(
uöt32_t
 
vÆue
);

403 
gpu_iß_íqueue_wrôe_de°_Êﬂt
(
vÆue
);

404 
gpu_iß_íqueue_push_bef‹e
();

405 
gpu_iß_íqueue_¥ed_£t
(
c⁄d
);

406 
gpu_iß_wrôe_èsk_commô
();

416 
	egpu_˛au£_köd_íum
 {

417 
	mGPU_CLAUSE_NONE
 = 0,

418 
	mGPU_CLAUSE_CF
,

419 
	mGPU_CLAUSE_ALU
,

420 
	mGPU_CLAUSE_TC
,

421 
	mGPU_CLAUSE_VC


426 
	#GPU_MAX_STACK_SIZE
 32

	)

427 
	sgpu_w¨p_t


429 
gpu_thªad_t
 **
	mthªads
;

430 
	mthªad_cou¡
;

431 
	mglobÆ_id
;

432 
uöt64_t
 
	mw¨p_id
;

433 *
	m«me
;

436 
gpu_˛au£_köd_íum
 
	m˛au£_köd
;

439 *
	mcf_buf_°¨t
;

440 *
	mcf_buf
;

441 
amd_ö°_t
 *
	mcf_ö°
;

444 *
	m˛au£_buf
;

445 *
	m˛au£_buf_íd
;

448 
bô_m≠_t
 *
	ma˘ive_°ack
;

449 
	m°ack_t›
;

452 
bô_m≠_t
 *
	m¥ed
;

456 
	mpush_bef‹e_d⁄e
;

459 
uöt64_t
 
	mö°_cou¡
;

460 
uöt64_t
 
	mglobÆ_mem_ö°_cou¡
;

461 
uöt64_t
 
	mloˇl_mem_ö°_cou¡
;

463 
uöt64_t
 
	mcf_ö°_cou¡
;

464 
uöt64_t
 
	mcf_ö°_globÆ_mem_wrôe_cou¡
;

466 
uöt64_t
 
	mÆu_˛au£_cou¡
;

467 
uöt64_t
 
	mÆu_group_cou¡
;

468 
uöt64_t
 
	mÆu_group_size
[5];

469 
uöt64_t
 
	mÆu_ö°_cou¡
;

470 
uöt64_t
 
	mÆu_ö°_loˇl_mem_cou¡
;

472 
uöt64_t
 
	mtc_˛au£_cou¡
;

473 
uöt64_t
 
	mtc_ö°_cou¡
;

474 
uöt64_t
 
	mtc_ö°_globÆ_mem_ªad_cou¡
;

477 
gpu_w¨p_t
 *
gpu_w¨p_¸óã
(
gpu_thªad_t
 **
thªads
, 
thªad_cou¡
, 
globÆ_id
);

478 
gpu_w¨p_‰ì
(
gpu_w¨p_t
 *
w¨p
);

479 
gpu_w¨p_dump
(
gpu_w¨p_t
 *
w¨p
, 
FILE
 *
f
);

481 
gpu_w¨p_°ack_push
(
gpu_w¨p_t
 *
w¨p
);

482 
gpu_w¨p_°ack_p›
(
gpu_w¨p_t
 *
w¨p
, 
cou¡
);

491 
	#GPU_MAX_GPR_ELEM
 5

	)

492 
	sgpu_g¥_t


494 
uöt32_t
 
	mñem
[
GPU_MAX_GPR_ELEM
];

497 
	sgpu_thªad_t


500 
gpu_w¨p_t
 *
	mw¨p
;

503 
gpu_g¥_t
 
	mg¥
[128];

504 
gpu_g¥_t
 
	mpv
;

507 
	mw¨p_id
;

508 
	mloˇl_id
;

509 
	mglobÆ_id
;

510 
	mgroup_id
;

513 
	mloˇl_id3
[3];

514 
	mglobÆ_id3
[3];

515 
	mgroup_id3
[3];

519 
 li°_t
 *
	mwrôe_èsk_li°
;

522 
li°_t
 *
	mlds_oqa
;

523 
li°_t
 *
	mlds_oqb
;

530 
uöt32_t
 
	mbønch_dige°
;

534 
gpu_thªad_t
 *
gpu_thªad_¸óã
();

535 
gpu_thªad_‰ì
(
gpu_thªad_t
 *
thªad
);

538 
gpu_thªad_£t_a˘ive
(
gpu_thªad_t
 *
thªad
, 
a˘ive
);

539 
gpu_thªad_gë_a˘ive
(
gpu_thªad_t
 *
thªad
);

540 
gpu_thªad_£t_¥ed
(
gpu_thªad_t
 *
thªad
, 
¥ed
);

541 
gpu_thªad_gë_¥ed
(
gpu_thªad_t
 *
thªad
);

542 
gpu_thªad_upd©e_bønch_dige°
(
gpu_thªad_t
 *
thªad
,

543 
uöt64_t
 
ö°_cou¡
, 
uöt32_t
 
ö°_addr
);

553 
	#GPU_THR
 (*
gpu_iß_thªad
)

	)

554 
	#GPU_THR_I
(
I
Ë(*
gpu_iß_thªads
[(I)])

	)

556 
	#GPU_GPR_ELEM
(
_g¥
, 
_ñem
Ë(
gpu_iß_thªad
->
g¥
[(_g¥)].
ñem
[(_ñem)])

	)

557 
	#GPU_GPR_X
(
_g¥
Ë
	`GPU_GPR_ELEM
((_g¥), 0)

	)

558 
	#GPU_GPR_Y
(
_g¥
Ë
	`GPU_GPR_ELEM
((_g¥), 1)

	)

559 
	#GPU_GPR_Z
(
_g¥
Ë
	`GPU_GPR_ELEM
((_g¥), 2)

	)

560 
	#GPU_GPR_W
(
_g¥
Ë
	`GPU_GPR_ELEM
((_g¥), 3)

	)

561 
	#GPU_GPR_T
(
_g¥
Ë
	`GPU_GPR_ELEM
((_g¥), 4)

	)

563 
	#GPU_GPR_FLOAT_ELEM
(
_g¥
, 
_ñem
Ë(* (*Ë&
gpu_iß_thªad
->
g¥
[(_g¥)].
ñem
[(_ñem)])

	)

564 
	#GPU_GPR_FLOAT_X
(
_g¥
Ë
	`GPU_GPR_FLOAT_ELEM
((_g¥), 0)

	)

565 
	#GPU_GPR_FLOAT_Y
(
_g¥
Ë
	`GPU_GPR_FLOAT_ELEM
((_g¥), 1)

	)

566 
	#GPU_GPR_FLOAT_Z
(
_g¥
Ë
	`GPU_GPR_FLOAT_ELEM
((_g¥), 2)

	)

567 
	#GPU_GPR_FLOAT_W
(
_g¥
Ë
	`GPU_GPR_FLOAT_ELEM
((_g¥), 3)

	)

568 
	#GPU_GPR_FLOAT_T
(
_g¥
Ë
	`GPU_GPR_FLOAT_ELEM
((_g¥), 4)

	)

572 *
îr_gpu_machöe_nŸe
;

574 
	#GPU_PARAM_NOT_SUPPORTED
(
p
) \

575 
	`Áèl
("%s: %s:Çot supported for '" #p "' = 0x%x\n%s", \

576 
__FUNCTION__
, 
gpu_iß_ö°
->
öfo
->
«me
, (
p
), 
îr_gpu_machöe_nŸe
);

	)

577 
	#GPU_PARAM_NOT_SUPPORTED_NEQ
(
p
, 
v
) \

578 { i‡((
p
Ë!(
v
)Ë
	`Áèl
("%s: %s:Çot supported for '" #p "' != 0x%x\n%s", \

579 
__FUNCTION__
, 
gpu_iß_ö°
->
öfo
->
«me
, (
v
), 
îr_gpu_machöe_nŸe
); }

	)

580 
	#GPU_PARAM_NOT_SUPPORTED_OOR
(
p
, 
mö
, 
max
) \

581 { i‡((
p
Ë< (
mö
Ë|| (pË> (
max
)Ë
	`Áèl
("%s: %s:Çot supported for '" #p "' out ofÑange [%d:%d]\n%s", \

582 
__FUNCTION__
, 
gpu_iß_ö°
->
öfo
->
«me
, (
mö
), (
max
), 
îr_›í˛_∑øm_nŸe
); }

	)

586 
	#CF_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
cf_w‹d0


	)

587 
	#CF_GWS_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
cf_gws_w‹d0


	)

588 
	#CF_WORD1
 
gpu_iß_ö°
->
w‹ds
[1].
cf_w‹d1


	)

590 
	#CF_ALU_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
cf_Æu_w‹d0


	)

591 
	#CF_ALU_WORD1
 
gpu_iß_ö°
->
w‹ds
[1].
cf_Æu_w‹d1


	)

592 
	#CF_ALU_WORD0_EXT
 
gpu_iß_ö°
->
w‹ds
[0].
cf_Æu_w‹d0_ext


	)

593 
	#CF_ALU_WORD1_EXT
 
gpu_iß_ö°
->
w‹ds
[1].
cf_Æu_w‹d1_ext


	)

595 
	#CF_ALLOC_EXPORT_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0


	)

596 
	#CF_ALLOC_EXPORT_WORD0_RAT
 
gpu_iß_ö°
->
w‹ds
[0].
cf_Æloc_exp‹t_w‹d0_øt


	)

597 
	#CF_ALLOC_EXPORT_WORD1_BUF
 
gpu_iß_ö°
->
w‹ds
[1].
cf_Æloc_exp‹t_w‹d1_buf


	)

598 
	#CF_ALLOC_EXPORT_WORD1_SWIZ
 
gpu_iß_ö°
->
w‹ds
[1].
cf_Æloc_exp‹t_w‹d1_swiz


	)

600 
	#ALU_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

601 
	#ALU_WORD1_OP2
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

602 
	#ALU_WORD1_OP3
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›3


	)

604 
	#ALU_WORD0_LDS_IDX_OP
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0_lds_idx_›


	)

605 
	#ALU_WORD1_LDS_IDX_OP
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_lds_idx_›


	)

607 
	#VTX_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
vtx_w‹d0


	)

608 
	#VTX_WORD1_GPR
 
gpu_iß_ö°
->
w‹ds
[1].
vtx_w‹d1_g¥


	)

609 
	#VTX_WORD1_SEM
 
gpu_iß_ö°
->
w‹ds
[1].
vtx_w‹d1_£m


	)

610 
	#VTX_WORD2
 
gpu_iß_ö°
->
w‹ds
[2].
vtx_w‹d2


	)

612 
	#TEX_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
ãx_w‹d0


	)

613 
	#TEX_WORD1
 
gpu_iß_ö°
->
w‹ds
[1].
ãx_w‹d1


	)

614 
	#TEX_WORD2
 
gpu_iß_ö°
->
w‹ds
[2].
ãx_w‹d2


	)

616 
	#MEM_RD_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
mem_rd_w‹d0


	)

617 
	#MEM_RD_WORD1
 
gpu_iß_ö°
->
w‹ds
[1].
mem_rd_w‹d1


	)

618 
	#MEM_RD_WORD2
 
gpu_iß_ö°
->
w‹ds
[2].
mem_rd_w‹d2


	)

620 
	#MEM_GDS_WORD0
 
gpu_iß_ö°
->
w‹ds
[0].
mem_gds_w‹d0


	)

621 
	#MEM_GDS_WORD1
 
gpu_iß_ö°
->
w‹ds
[1].
mem_gds_w‹d1


	)

622 
	#MEM_GDS_WORD2
 
gpu_iß_ö°
->
w‹ds
[2].
mem_gds_w‹d2


	)

626 
gpu_thªad_t
 *
gpu_iß_thªad
;

627 
gpu_thªad_t
 **
gpu_iß_thªads
;

628 
gpu_w¨p_t
 *
gpu_iß_w¨p
;

629 
amd_ö°_t
 *
gpu_iß_ö°
;

630 
amd_Æu_group_t
 *
gpu_iß_Æu_group
;

633 (*
	tamd_ö°_im∂_t
)();

634 
amd_ö°_im∂_t
 *
amd_ö°_im∂
;

637 
	`gpu_iß_c⁄°_mem_wrôe
(
b™k
, 
ve˘‹
, 
ñem
, *
pvÆue
);

638 
	`gpu_iß_c⁄°_mem_ªad
(
b™k
, 
ve˘‹
, 
ñem
, *
pvÆue
);

641 
	`gpu_iß_Æu_˛au£_°¨t
();

642 
	`gpu_iß_Æu_˛au£_íd
();

645 
	`gpu_iß_tc_˛au£_°¨t
();

646 
	`gpu_iß_tc_˛au£_íd
();

649 
uöt32_t
 
	`gpu_iß_ªad_g¥
(
g¥
, 
ªl
, 
ch™
, 
im
);

650 
	`gpu_iß_ªad_g¥_Êﬂt
(
g¥
, 
ªl
, 
ch™
, 
im
);

651 
	`gpu_iß_wrôe_g¥
(
g¥
, 
ªl
, 
ch™
, 
uöt32_t
 
vÆue
);

652 
	`gpu_iß_wrôe_g¥_Êﬂt
(
g¥
, 
ªl
, 
ch™
, 
vÆue
);

654 
uöt32_t
 
	`gpu_iß_ªad_›_§c
(
§c_idx
);

655 
	`gpu_iß_ªad_›_§c_Êﬂt
(
§c_idx
);

657 
	`gpu_iß_öô
();

658 
	`gpu_iß_d⁄e
();

659 
	`gpu_iß_run
(
›í˛_kî√l_t
 *
kî√l
);

669 
	sgk_t
 {

677 
mem_t
 *
c⁄°_mem
;

682 
c⁄°_mem_cb0_öô
[9 * 4];

685 
mem_t
 *
globÆ_mem
;

686 
uöt32_t
 
globÆ_mem_t›
;

690 
mem_t
 **
loˇl_mem
;

693 
gk_t
 *
gk
;

694 *
gk_›í˛_bö¨y_«me
;

	@libgpukernel/gpukernel.c

20 
	~<gpukî√l-loˇl.h
>

21 
	~<as£π.h
>

22 
	~<debug.h
>

23 
	~< li°.h
>

24 
	~<°dlib.h
>

25 
	~<m2skî√l.h
>

26 
	~<gpudißsm.h
>

27 
	~<›ti⁄s.h
>

28 
	~<hash.h
>

33 
gk_t
 *
	ggk
;

34 *
	ggk_›í˛_bö¨y_«me
 = "";

35 *
	ggk_ªp‹t_fûe_«me
 = "";

36 
FILE
 *
	ggk_ªp‹t_fûe
 = 
NULL
;

37 
	ggk_kî√l_executi⁄_cou¡
 = 0;

42 
	$gk_öô
()

44 
›í˛_devi˚_t
 *
devi˚
;

47 
›í˛_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

48 
gpu_iß_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

51 i‡(
gk_ªp‹t_fûe_«me
[0]) {

52 
gk_ªp‹t_fûe
 = 
	`›í_wrôe
(
gk_ªp‹t_fûe_«me
);

53 i‡(!
gk_ªp‹t_fûe
)

54 
	`Áèl
("%s: c™nŸ o≥¿GPUÑï‹àfûê", 
gk_ªp‹t_fûe_«me
);

58 
gk
 = 
	`ˇŒoc
(1, (
gk_t
));

59 
gk
->
c⁄°_mem
 = 
	`mem_¸óã
();

60 
gk
->
c⁄°_mem
->
ß„
 = 0;

61 
gk
->
globÆ_mem
 = 
	`mem_¸óã
();

62 
gk
->
globÆ_mem
->
ß„
 = 0;

65 
	`amd_dißsm_öô
();

68 
	`gpu_iß_öô
();

71 
›í˛_obje˘_li°
 = 
	` li°_¸óã
();

72 
›í˛_∂©f‹m
 = 
	`›í˛_∂©f‹m_¸óã
();

73 
devi˚
 = 
	`›í˛_devi˚_¸óã
();

74 
	}
}

78 
	$gk_d⁄e
()

81 i‡(
gk_ªp‹t_fûe
)

82 
	`f˛o£
(
gk_ªp‹t_fûe
);

85 
	`›í˛_obje˘_‰ì_Æl
();

86 
	` li°_‰ì
(
›í˛_obje˘_li°
);

89 
	`amd_dißsm_d⁄e
();

92 
	`gpu_iß_d⁄e
();

95 
	`mem_‰ì
(
gk
->
c⁄°_mem
);

96 
	`mem_‰ì
(
gk
->
globÆ_mem
);

97 
	`‰ì
(
gk
);

98 
	}
}

102 
	$gk_ªg_›ti⁄s
()

104 
	`›t_ªg_°rög
("-opencl:binary", "Pre-compiled binary for OpenCLápplications",

105 &
gk_›í˛_bö¨y_«me
);

106 
	`›t_ªg_°rög
("-report:gpu", "Report for GPU statistics",

107 &
gk_ªp‹t_fûe_«me
);

108 
	}
}

113 
	$gk_lib›í˛_ªdúe˘
(*
fuŒ∑th
, 
size
)

115 
fuŒ∑th_‹igöÆ
[
MAX_PATH_SIZE
];

116 
buf
[
MAX_PATH_SIZE
];

117 
Àngth
;

118 
FILE
 *
f
;

121 
	`°∫˝y
(
fuŒ∑th_‹igöÆ
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

122 
Àngth
 = 
	`°æí
(
fuŒ∑th
);

125 i‡(
Àngth
 >17 && !
	`°rcmp
(
fuŒ∑th
 +Üength - 17, "/libm2s-opencl.so")) {

126 
f
 = 
	`f›í
(
fuŒ∑th
, "r");

127 i‡(
f
) {

128 
	`f˛o£
(
f
);

129 
iß_˘x
->
lib›í˛_›í_©ãm±
 = 0;

131 
iß_˘x
->
lib›í˛_›í_©ãm±
 = 1;

135 i‡(
Àngth
 >13 && !
	`°rcmp
(
fuŒ∑th
 +Üength - 13, "/libOpenCL.so")) {

138 
fuŒ∑th
[
Àngth
 - 13] = '\0';

139 
	`¢¥ötf
(
buf
, 
MAX_STRING_SIZE
, "%s/libm2s-›í˛.so", 
fuŒ∑th
);

140 
	`°∫˝y
(
fuŒ∑th
, 
buf
, 
size
);

143 
f
 = 
	`f›í
(
fuŒ∑th
, "r");

144 i‡(
f
) {

145 
	`f˛o£
(
f
);

146 
	`w¨nög
("path '%s' has beenÑedirectedÅo '%s'\n"

151 
fuŒ∑th_‹igöÆ
, 
fuŒ∑th
);

152 
iß_˘x
->
lib›í˛_›í_©ãm±
 = 0;

154 
iß_˘x
->
lib›í˛_›í_©ãm±
 = 1;

156 
	}
}

160 
	$gk_lib›í˛_Áûed
(
pid
)

162 
	`w¨nög
("context %d finishedáfter failingÅoáccess OpenCLÜibrary.\n"

168 
pid
);

169 
	}
}

178 
uöt64_t
 
	gw¨p_id
;

181 
gpu_w¨p_t
 *
	$gpu_w¨p_¸óã
(
gpu_thªad_t
 **
thªads
, 
thªad_cou¡
, 
globÆ_id
)

183 
gpu_w¨p_t
 *
w¨p
;

184 
°r
[
MAX_STRING_SIZE
];

186 
w¨p
 = 
	`ˇŒoc
(1, (
gpu_w¨p_t
));

187 
w¨p
->
thªads
 =Åhreads;

188 
w¨p
->
thªad_cou¡
 =Åhread_count;

189 
w¨p
->
globÆ_id
 = global_id;

190 
w¨p
->
w¨p_id
 = warp_id++;

192 
w¨p
->
a˘ive_°ack
 = 
	`bô_m≠_¸óã
(
GPU_MAX_STACK_SIZE
 * 
thªad_cou¡
);

193 
w¨p
->
¥ed
 = 
	`bô_m≠_¸óã
(
thªad_cou¡
);

194 
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "work-items[%d..%d]",

195 
globÆ_id
, globÆ_id + 
thªad_cou¡
 - 1);

196 
w¨p
->
«me
 = 
	`°rdup
(
°r
);

197  
w¨p
;

198 
	}
}

201 
	$gpu_w¨p_‰ì
(
gpu_w¨p_t
 *
w¨p
)

204 
	`bô_m≠_‰ì
(
w¨p
->
a˘ive_°ack
);

205 
	`bô_m≠_‰ì
(
w¨p
->
¥ed
);

206 
	`‰ì
(
w¨p
->
«me
);

207 
	`‰ì
(
w¨p
);

208 
	}
}

212 
	$gpu_w¨p_divîgí˚_com∑ª
(c⁄° *
ñem1
, c⁄° *
ñem2
)

214 
cou¡1
 = * (*Ë
ñem1
;

215 
cou¡2
 = * (*Ë
ñem2
;

217 i‡(
cou¡1
 < 
cou¡2
)

219 i‡(
cou¡1
 > 
cou¡2
)

222 
	}
}

225 
	$gpu_w¨p_divîgí˚_dump
(
gpu_w¨p_t
 *
w¨p
, 
FILE
 *
f
)

227 
gpu_thªad_t
 *
thªad
;

228 
	sñem_t
 {

229 
cou¡
;

230 
li°_ödex
;

231 
uöt32_t
 
bønch_dige°
;

233 
ñem_t
 *
ñem
;

234 
li°_t
 *
li°
;

235 
hashèbÀ_t
 *
ht
;

236 
°r
[10];

237 
i
, 
j
;

240 
li°
 = 
	`li°_¸óã
(20);

241 
ht
 = 
	`hashèbÀ_¸óã
(20, 1);

245 
i
 = 0; i < 
w¨p
->
thªad_cou¡
; i++) {

246 
thªad
 = 
w¨p
->
thªads
[
i
];

247 
	`•rötf
(
°r
, "%08x", 
thªad
->
bønch_dige°
);

248 
ñem
 = 
	`hashèbÀ_gë
(
ht
, 
°r
);

249 i‡(!
ñem
) {

250 
ñem
 = 
	`ˇŒoc
(1, (
ñem_t
));

251 
	`hashèbÀ_ö£π
(
ht
, 
°r
, 
ñem
);

252 
ñem
->
li°_ödex
 = 
	`li°_cou¡
(
li°
);

253 
ñem
->
bønch_dige°
 = 
thªad
->branch_digest;

254 
	`li°_add
(
li°
, 
ñem
);

256 
ñem
->
cou¡
++;

260 
	`li°_s‹t
(
li°
, 
gpu_w¨p_divîgí˚_com∑ª
);

261 
	`Ârötf
(
f
, "ThªadDivîgí˚Group†%d\n", 
	`li°_cou¡
(
li°
));

264 
	`Ârötf
(
f
, "ThreadDivergenceGroupsSize =");

265 
i
 = 0; i < 
	`li°_cou¡
(
li°
); i++) {

266 
ñem
 = 
	`li°_gë
(
li°
, 
i
);

267 
	`Ârötf
(
f
, " %d", 
ñem
->
cou¡
);

269 
	`Ârötf
(
f
, "\n\n");

272 
i
 = 0; i < 
	`li°_cou¡
(
li°
); i++) {

273 
ñem
 = 
	`li°_gë
(
li°
, 
i
);

274 
	`Ârötf
(
f
, "ThªadDivîgí˚Group[%d] =", 
i
);

276 
j
 = 0; j < 
w¨p
->
thªad_cou¡
; j++) {

277 
fú°
, 
œ°
;

278 
fú°
 = 
w¨p
->
thªads
[
j
]->
bønch_dige°
 =
ñem
->branch_digest &&

279 (
j
 =0 || 
w¨p
->
thªads
[j - 1]->
bønch_dige°
 !
ñem
->branch_digest);

280 
œ°
 = 
w¨p
->
thªads
[
j
]->
bønch_dige°
 =
ñem
->branch_digest &&

281 (
j
 =
w¨p
->
thªad_cou¡
 - 1 || w¨p->
thªads
[j + 1]->
bønch_dige°
 !
ñem
->branch_digest);

282 i‡(
fú°
)

283 
	`Ârötf
(
f
, " %d", 
j
);

284 i‡(
œ°
)

285 
	`Ârötf
(
f
, "-%d", 
j
);

287 
	`Ârötf
(
f
, "\n");

289 
	`Ârötf
(
f
, "\n");

292 
i
 = 0; i < 
	`li°_cou¡
(
li°
); i++)

293 
	`‰ì
(
	`li°_gë
(
li°
, 
i
));

294 
	`li°_‰ì
(
li°
);

295 
	`hashèbÀ_‰ì
(
ht
);

296 
	}
}

299 
	$gpu_w¨p_dump
(
gpu_w¨p_t
 *
w¨p
, 
FILE
 *
f
)

301 
i
;

303 i‡(!
f
)

307 
	`Ârötf
(
f
, "[ W¨∞%Œd ]\n\n", (Ë
w¨p
->
w¨p_id
);

309 
	`Ârötf
(
f
, "Kî√lExecuti⁄ = %d\n", 
gk_kî√l_executi⁄_cou¡
 - 1);

310 
	`Ârötf
(
f
, "Namê%s\n", 
w¨p
->
«me
);

311 
	`Ârötf
(
f
, "GlobÆ_Id = %d\n", 
w¨p
->
globÆ_id
);

312 
	`Ârötf
(
f
, "Thªad_Cou¡ = %d\n", 
w¨p
->
thªad_cou¡
);

313 
	`Ârötf
(
f
, "\n");

315 
	`Ârötf
(
f
, "In°_Cou¡ = %Œd\n", (Ë
w¨p
->
ö°_cou¡
);

316 
	`Ârötf
(
f
, "GlobÆ_Mem_In°_Cou¡ = %Œd\n", (Ë
w¨p
->
globÆ_mem_ö°_cou¡
);

317 
	`Ârötf
(
f
, "Loˇl_Mem_In°_Cou¡ = %Œd\n", (Ë
w¨p
->
loˇl_mem_ö°_cou¡
);

318 
	`Ârötf
(
f
, "\n");

320 
	`Ârötf
(
f
, "CF_In°_Cou¡ = %Œd\n", (Ë
w¨p
->
cf_ö°_cou¡
);

321 
	`Ârötf
(
f
, "CF_In°_GlobÆ_Mem_Wrôe_Cou¡ = %Œd\n", (Ë
w¨p
->
cf_ö°_globÆ_mem_wrôe_cou¡
);

322 
	`Ârötf
(
f
, "\n");

324 
	`Ârötf
(
f
, "ALU_Cœu£_Cou¡ = %Œd\n", (Ë
w¨p
->
Æu_˛au£_cou¡
);

325 
	`Ârötf
(
f
, "ALU_Group_Cou¡ = %Œd\n", (Ë
w¨p
->
Æu_group_cou¡
);

326 
	`Ârötf
(
f
, "ALU_Group_Size =");

327 
i
 = 0; i < 5; i++)

328 
	`Ârötf
(
f
, " %Œd", (Ë
w¨p
->
Æu_group_size
[
i
]);

329 
	`Ârötf
(
f
, "\n");

330 
	`Ârötf
(
f
, "ALU_In°_Cou¡ = %Œd\n", (Ë
w¨p
->
Æu_ö°_cou¡
);

331 
	`Ârötf
(
f
, "ALU_In°_Loˇl_Mem_Cou¡ = %Œd\n", (Ë
w¨p
->
Æu_ö°_loˇl_mem_cou¡
);

332 
	`Ârötf
(
f
, "\n");

334 
	`Ârötf
(
f
, "TC_Cœu£_Cou¡ = %Œd\n", (Ë
w¨p
->
tc_˛au£_cou¡
);

335 
	`Ârötf
(
f
, "TC_In°_Cou¡ = %Œd\n", (Ë
w¨p
->
tc_ö°_cou¡
);

336 
	`Ârötf
(
f
, "TC_In°_GlobÆ_Mem_Ród_Cou¡ = %Œd\n", (Ë
w¨p
->
tc_ö°_globÆ_mem_ªad_cou¡
);

337 
	`Ârötf
(
f
, "\n");

339 
	`gpu_w¨p_divîgí˚_dump
(
w¨p
, 
f
);

341 
	`Ârötf
(
f
, "\n");

342 
	}
}

345 
	$gpu_w¨p_°ack_push
(
gpu_w¨p_t
 *
w¨p
)

347 i‡(
w¨p
->
°ack_t›
 =
GPU_MAX_STACK_SIZE
 - 1)

348 
	`Áèl
("%s: sèck ovîÊow", 
gpu_iß_ö°
->
öfo
->
«me
);

349 
w¨p
->
°ack_t›
++;

350 
	`bô_m≠_c›y
(
w¨p
->
a˘ive_°ack
, w¨p->
°ack_t›
 * w¨p->
thªad_cou¡
,

351 
w¨p
->
a˘ive_°ack
, (w¨p->
°ack_t›
 - 1Ë* w¨p->
thªad_cou¡
,

352 
w¨p
->
thªad_cou¡
);

353 
	`gpu_iß_debug
(" %s:push", 
w¨p
->
«me
);

354 
	}
}

357 
	$gpu_w¨p_°ack_p›
(
gpu_w¨p_t
 *
w¨p
, 
cou¡
)

359 i‡(!
cou¡
)

361 i‡(
w¨p
->
°ack_t›
 < 
cou¡
)

362 
	`Áèl
("%s: sèck undîÊow", 
gpu_iß_ö°
->
öfo
->
«me
);

363 
w¨p
->
°ack_t›
 -
cou¡
;

364 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

365 
	`gpu_iß_debug
(" %s:p›(%d),a˘=", 
w¨p
->
«me
, 
cou¡
);

366 
	`bô_m≠_dump
(
w¨p
->
a˘ive_°ack
, w¨p->
°ack_t›
 * w¨p->
thªad_cou¡
,

367 
w¨p
->
thªad_cou¡
, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

369 
	}
}

378 
gpu_thªad_t
 *
	$gpu_thªad_¸óã
()

380 
gpu_thªad_t
 *
thªad
;

381 
thªad
 = 
	`ˇŒoc
(1, (
gpu_thªad_t
));

382 
thªad
->
wrôe_èsk_li°
 = 
	` li°_¸óã
();

383 
thªad
->
lds_oqa
 = 
	`li°_¸óã
(5);

384 
thªad
->
lds_oqb
 = 
	`li°_¸óã
(5);

385  
thªad
;

386 
	}
}

389 
	$gpu_thªad_‰ì
(
gpu_thªad_t
 *
thªad
)

392 
	`li°_cou¡
(
thªad
->
lds_oqa
))

393 
	`‰ì
(
	`li°_dequeue
(
thªad
->
lds_oqa
));

394 
	`li°_cou¡
(
thªad
->
lds_oqb
))

395 
	`‰ì
(
	`li°_dequeue
(
thªad
->
lds_oqb
));

396 
	`li°_‰ì
(
thªad
->
lds_oqa
);

397 
	`li°_‰ì
(
thªad
->
lds_oqb
);

398 
	` li°_‰ì
(
thªad
->
wrôe_èsk_li°
);

401 
	`‰ì
(
thªad
);

402 
	}
}

405 
	$gpu_thªad_£t_a˘ive
(
gpu_thªad_t
 *
thªad
, 
a˘ive
)

407 
gpu_w¨p_t
 *
w¨p
 = 
thªad
->warp;

408 
	`as£π
(
thªad
->
globÆ_id
 >
w¨p
->global_id &&

409 
thªad
->
globÆ_id
 < 
w¨p
->globÆ_id + w¨p->
thªad_cou¡
);

410 
	`as£π
(
thªad
->
w¨p_id
 < 
w¨p
->
thªad_cou¡
);

411 
	`bô_m≠_£t
(
w¨p
->
a˘ive_°ack
, w¨p->
°ack_t›
 * w¨p->
thªad_cou¡


412 + 
thªad
->
w¨p_id
, 1, !!
a˘ive
);

413 
	}
}

416 
	$gpu_thªad_gë_a˘ive
(
gpu_thªad_t
 *
thªad
)

418 
gpu_w¨p_t
 *
w¨p
 = 
thªad
->warp;

419 
	`as£π
(
thªad
->
globÆ_id
 >
w¨p
->global_id &&

420 
thªad
->
globÆ_id
 < 
w¨p
->globÆ_id + w¨p->
thªad_cou¡
);

421 
	`as£π
(
thªad
->
w¨p_id
 < 
w¨p
->
thªad_cou¡
);

422  
	`bô_m≠_gë
(
w¨p
->
a˘ive_°ack
, w¨p->
°ack_t›
 * w¨p->
thªad_cou¡


423 + 
thªad
->
w¨p_id
, 1);

424 
	}
}

427 
	$gpu_thªad_£t_¥ed
(
gpu_thªad_t
 *
thªad
, 
¥ed
)

429 
gpu_w¨p_t
 *
w¨p
 = 
thªad
->warp;

430 
	`as£π
(
thªad
->
globÆ_id
 >
w¨p
->global_id &&

431 
thªad
->
globÆ_id
 < 
w¨p
->globÆ_id + w¨p->
thªad_cou¡
);

432 
	`as£π
(
thªad
->
w¨p_id
 < 
w¨p
->
thªad_cou¡
);

433 
	`bô_m≠_£t
(
w¨p
->
¥ed
, 
thªad
->
w¨p_id
, 1, !!pred);

434 
	}
}

437 
	$gpu_thªad_gë_¥ed
(
gpu_thªad_t
 *
thªad
)

439 
gpu_w¨p_t
 *
w¨p
 = 
thªad
->warp;

440 
	`as£π
(
thªad
->
globÆ_id
 >
w¨p
->global_id &&

441 
thªad
->
globÆ_id
 < 
w¨p
->globÆ_id + w¨p->
thªad_cou¡
);

442 
	`as£π
(
thªad
->
w¨p_id
 < 
w¨p
->
thªad_cou¡
);

443  
	`bô_m≠_gë
(
w¨p
->
¥ed
, 
thªad
->
w¨p_id
, 1);

444 
	}
}

449 
	$gpu_thªad_upd©e_bønch_dige°
(
gpu_thªad_t
 *
thªad
, 
uöt64_t
 
ö°_cou¡
, 
uöt32_t
 
ö°_addr
)

451 
gpu_w¨p_t
 *
w¨p
 = 
thªad
->warp;

452 
uöt32_t
 
mask
 = 0;

455 i‡(!
	`bô_m≠_gë
(
w¨p
->
a˘ive_°ack
, w¨p->
°ack_t›
 * w¨p->
thªad_cou¡
 + 
thªad
->
w¨p_id
, 1))

459 
mask
 = (
uöt32_t
Ë
ö°_cou¡
 * 0x4919f71f;

462 
mask
 +
ö°_addr
 * 0x31f2e73b;

465 
thªad
->
bønch_dige°
 ^
mask
;

466 
	}
}

	@libgpukernel/gpukernel.h

20 #i‚de‡
GPUKERNEL_H


21 
	#GPUKERNEL_H


	)

23 
	~<°döt.h
>

30 
	#›í˛_debug
(...Ë
	`debug
(
›í˛_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

31 
›í˛_debug_ˇãg‹y
;

34 
	#OPENCL_FUNC_FIRST
 1000

	)

35 
	#OPENCL_FUNC_LAST
 1073

	)

36 
	#OPENCL_MAX_ARGS
 14

	)

39 
	e›í˛_func_íum
 {

40 
	#DEF_OPENCL_FUNC
(
_«me
, 
_¨gc
Ë
OPENCL_FUNC_
##_«me,

	)

41 
	~"›í˛.d©
"

42 #unde‡
DEF_OPENCL_FUNC


43 
	mOPENCL_FUNC_COUNT


47 *
›í˛_func_«mes
[];

48 
›í˛_func_¨gc
[];

51 
›í˛_func_run
(
code
, *
¨gs
);

59 
	#gpu_iß_debuggög
(Ë
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)

	)

60 
	#gpu_iß_debug
(...Ë
	`debug
(
gpu_iß_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

61 
gpu_iß_debug_ˇãg‹y
;

68 
gk_öô
();

69 
gk_d⁄e
();

70 
gk_ªg_›ti⁄s
();

72 
gk_lib›í˛_ªdúe˘
(*
∑th
, 
size
);

73 
gk_lib›í˛_Áûed
(
pid
);

	@libgpukernel/gpumachine.c

20 
	~<gpukî√l-loˇl.h
>

21 
	~<gpudißsm.h
>

22 
	~<m©h.h
>

24 *
	gîr_gpu_machöe_nŸe
 =

29 
	#NOT_IMPL
(Ë
	`Áèl
("GPU instruction '%s'Çot implemented\n%s", \

30 
gpu_iß_ö°
->
öfo
->
«me
, 
îr_gpu_machöe_nŸe
)

	)

37 
	#W0
 
CF_ALU_WORD0


	)

38 
	#W1
 
CF_ALU_WORD1


	)

39 
	$amd_ö°_ALU_im∂
()

41 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
Æt_c⁄°
, 0);

42 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
whﬁe_quad_mode
, 0);

48 
gpu_iß_w¨p
->
˛au£_buf
 = gpu_iß_w¨p->
cf_buf_°¨t
 + 
W0
.
addr
 * 8;

49 
gpu_iß_w¨p
->
˛au£_buf_íd
 = gpu_iß_w¨p->
˛au£_buf
 + (
W1
.
cou¡
 + 1) * 8;

50 
gpu_iß_w¨p
->
˛au£_köd
 = 
GPU_CLAUSE_ALU
;

51 
	`gpu_iß_Æu_˛au£_°¨t
();

52 
	}
}

53 #unde‡
W0


54 #unde‡
W1


57 
	$amd_ö°_ALU_BREAK_im∂
()

61 
	`amd_ö°_ALU_im∂
();

62 
	}
}

65 
	$amd_ö°_ALU_POP_AFTER_im∂
()

68 
	`amd_ö°_ALU_im∂
();

69 
	}
}

72 
	$amd_ö°_ALU_PUSH_BEFORE_im∂
()

75 
	`amd_ö°_ALU_im∂
();

76 
	}
}

79 
	#W0
 
CF_WORD0


	)

80 
	#W1
 
CF_WORD1


	)

81 
	$amd_ö°_ELSE_im∂
()

83 
a˘ive
, 
a˘ive_œ°
, 
a˘ive_√w
;

84 
a˘ive_cou¡
 = 0;

85 
i
;

87 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
jump_èbÀ_£l
, 0);

88 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cf_c⁄°
, 0);

89 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
c⁄d
, 0);

90 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cou¡
, 0);

91 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
vÆid_pixñ_mode
, 0);

92 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
whﬁe_quad_mode
, 0);

93 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
b¨rõr
, 1);

96 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

97 
	`gpu_iß_debug
(" %s:a˘=", 
gpu_iß_w¨p
->
«me
);

98 
	`bô_m≠_dump
(
gpu_iß_w¨p
->
a˘ive_°ack
, gpu_iß_w¨p->
°ack_t›
 *

99 
gpu_iß_w¨p
->
thªad_cou¡
, gpu_isa_warp->thread_count,

100 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

104 i‡(!
gpu_iß_w¨p
->
°ack_t›
)

105 
	`Áèl
("ELSE: cannotÉxecute for stack_top=0");

106 
i
 = 0; i < 
gpu_iß_w¨p
->
thªad_cou¡
; i++) {

107 
a˘ive
 = 
	`bô_m≠_gë
(
gpu_iß_w¨p
->
a˘ive_°ack
, gpu_iß_w¨p->
°ack_t›
 *

108 
gpu_iß_w¨p
->
thªad_cou¡
 + 
i
, 1);

109 
a˘ive_œ°
 = 
	`bô_m≠_gë
(
gpu_iß_w¨p
->
a˘ive_°ack
, (gpu_iß_w¨p->
°ack_t›
 - 1) *

110 
gpu_iß_w¨p
->
thªad_cou¡
 + 
i
, 1);

111 
a˘ive_√w
 = !
a˘ive
 && 
a˘ive_œ°
;

112 
a˘ive_cou¡
 +
a˘ive_√w
;

113 
	`bô_m≠_£t
(
gpu_iß_w¨p
->
a˘ive_°ack
, gpu_iß_w¨p->
°ack_t›
 *

114 
gpu_iß_w¨p
->
thªad_cou¡
 + 
i
, 1, 
a˘ive_√w
);

118 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

119 
	`gpu_iß_debug
(" %s:övît◊˘)=", 
gpu_iß_w¨p
->
«me
);

120 
	`bô_m≠_dump
(
gpu_iß_w¨p
->
a˘ive_°ack
, gpu_iß_w¨p->
°ack_t›
 *

121 
gpu_iß_w¨p
->
thªad_cou¡
, gpu_isa_warp->thread_count,

122 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

126 i‡(!
a˘ive_cou¡
) {

127 
	`gpu_w¨p_°ack_p›
(
gpu_iß_w¨p
, 
W1
.
p›_cou¡
);

128 
gpu_iß_w¨p
->
cf_buf
 = gpu_iß_w¨p->
cf_buf_°¨t
 + 
W0
.
addr
 * 8;

130 
	}
}

131 #unde‡
W0


132 #unde‡
W1


135 
	#W0
 
CF_WORD0


	)

136 
	#W1
 
CF_WORD1


	)

137 
	$amd_ö°_JUMP_im∂
()

139 
a˘ive_cou¡
;

141 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
jump_èbÀ_£l
, 0);

142 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cf_c⁄°
, 0);

143 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
c⁄d
, 0);

144 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cou¡
, 0);

145 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
vÆid_pixñ_mode
, 0);

146 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
whﬁe_quad_mode
, 0);

147 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
b¨rõr
, 1);

150 
a˘ive_cou¡
 = 
	`bô_m≠_cou¡_⁄es
(
gpu_iß_w¨p
->
a˘ive_°ack
,

151 
gpu_iß_w¨p
->
°ack_t›
 * gpu_iß_w¨p->
thªad_cou¡
, gpu_isa_warp->thread_count);

152 i‡(!
a˘ive_cou¡
) {

153 
	`gpu_w¨p_°ack_p›
(
gpu_iß_w¨p
, 
W1
.
p›_cou¡
);

154 
gpu_iß_w¨p
->
cf_buf
 = gpu_iß_w¨p->
cf_buf_°¨t
 + 
W0
.
addr
 * 8;

156 
	}
}

157 #unde‡
W0


158 #unde‡
W1


161 
	#W0
 
CF_WORD0


	)

162 
	#W1
 
CF_WORD1


	)

163 
	$amd_ö°_LOOP_END_im∂
()

165 
a˘ive_cou¡
;

167 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
jump_èbÀ_£l
, 0);

168 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
p›_cou¡
, 0);

169 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cf_c⁄°
, 0);

170 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
c⁄d
, 0);

171 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
vÆid_pixñ_mode
, 0);

172 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
whﬁe_quad_mode
, 0);

179 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

180 
	`gpu_iß_debug
(" %s:a˘=", 
gpu_iß_w¨p
->
«me
);

181 
	`bô_m≠_dump
(
gpu_iß_w¨p
->
a˘ive_°ack
, gpu_iß_w¨p->
°ack_t›
 *

182 
gpu_iß_w¨p
->
thªad_cou¡
, gpu_isa_warp->thread_count,

183 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

187 
a˘ive_cou¡
 = 
	`bô_m≠_cou¡_⁄es
(
gpu_iß_w¨p
->
a˘ive_°ack
,

188 
gpu_iß_w¨p
->
°ack_t›
 * gpu_iß_w¨p->
thªad_cou¡
, gpu_isa_warp->thread_count);

189 i‡(
a˘ive_cou¡
) {

190 
gpu_iß_w¨p
->
cf_buf
 = gpu_iß_w¨p->
cf_buf_°¨t
 + 
W0
.
addr
 * 8;

197 
	`gpu_w¨p_°ack_p›
(
gpu_iß_w¨p
, 1);

198 
	}
}

199 #unde‡
W0


200 #unde‡
W1


203 
	#W0
 
CF_WORD0


	)

204 
	#W1
 
CF_WORD1


	)

205 
	$amd_ö°_LOOP_START_DX10_im∂
()

207 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
jump_èbÀ_£l
, 0);

208 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cf_c⁄°
, 0);

209 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
c⁄d
, 0);

210 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cou¡
, 0);

211 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
vÆid_pixñ_mode
, 0);

212 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
whﬁe_quad_mode
, 0);

225 
	`gpu_w¨p_°ack_push
(
gpu_iß_w¨p
);

226 
	}
}

227 #unde‡
W0


228 #unde‡
W1


231 
	#W0
 
CF_ALLOC_EXPORT_WORD0_RAT


	)

232 
	#W1
 
CF_ALLOC_EXPORT_WORD1_BUF


	)

233 
	$amd_ö°_MEM_RAT_CACHELESS_im∂
()

235 
globÆ_id
;

237 
W0
.
øt_ö°
) {

241 
uöt32_t
 
vÆue
, 
addr
;

242 
vÆue_Êﬂt
;

243 
i
;

245 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
øt_id
, 1);

246 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
øt_ödex_mode
, 0);

247 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
ñem_size
, 0);

248 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
bur°_cou¡
, 0);

262 i‡(
W0
.
ty≥
 != 1 && W0.type != 3)

263 
	`GPU_PARAM_NOT_SUPPORTED
(
W0
.
ty≥
);

266 
globÆ_id
 = 
gpu_iß_w¨p
->global_id; global_id < gpu_isa_warp->global_id

267 + 
gpu_iß_w¨p
->
thªad_cou¡
; 
globÆ_id
++)

269 
gpu_iß_thªad
 = 
gpu_iß_thªads
[
globÆ_id
];

272 i‡(
W1
.
vÆid_pixñ_mode
 && !
	`gpu_thªad_gë_a˘ive
(
gpu_iß_thªad
))

281 
addr
 = 
	`gpu_iß_ªad_g¥
(
W0
.
ödex_g¥
, 0, 0, 0) * 4;

282 
	`gpu_iß_debug
("Å%d:wrôe(0x%x)", 
GPU_THR
.
globÆ_id
, 
addr
);

284 
i
 = 0; i < 4; i++) {

285 i‡(!(
W1
.
comp_mask
 & (1 << 
i
)))

287 
vÆue
 = 
	`gpu_iß_ªad_g¥
(
W0
.
rw_g¥
, W0.
º
, 
i
, 0);

288 
vÆue_Êﬂt
 = * (*Ë&
vÆue
;

290 
	`mem_wrôe
(
gk
->
globÆ_mem
, 
addr
 + 
i
 * 4, 4, &
vÆue
);

291 
	`gpu_iß_debug
(",");

292 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
))

293 
	`amd_ö°_dump_g¥
(
W0
.
rw_g¥
, W0.
º
, 
i
, 0, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

294 
	`gpu_iß_debug
("=(0x%x,%gf)", 
vÆue
, 
vÆue_Êﬂt
);

305 
	`GPU_PARAM_NOT_SUPPORTED
(
W0
.
øt_ö°
);

307 
	}
}

308 #unde‡
W0


309 #unde‡
W1


312 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
cf_w‹d0


	)

313 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
cf_w‹d1


	)

314 
	$amd_ö°_NOP_CF_im∂
()

316 
	}
}

317 #unde‡
W0


318 #unde‡
W1


321 
	#W0
 
CF_WORD0


	)

322 
	#W1
 
CF_WORD1


	)

323 
	$amd_ö°_POP_im∂
()

325 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
jump_èbÀ_£l
, 0);

326 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cf_c⁄°
, 0);

327 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
c⁄d
, 0);

328 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
cou¡
, 0);

329 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
vÆid_pixñ_mode
, 0);

330 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
whﬁe_quad_mode
, 0);

331 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
b¨rõr
, 1);

334 
	`gpu_w¨p_°ack_p›
(
gpu_iß_w¨p
, 
W1
.
p›_cou¡
);

335 
gpu_iß_w¨p
->
cf_buf
 = gpu_iß_w¨p->
cf_buf_°¨t
 + 
W0
.
addr
 * 8;

336 
	}
}

337 #unde‡
W0


338 #unde‡
W1


341 
	#W0
 
CF_WORD0


	)

342 
	#W1
 
CF_WORD1


	)

343 
	$amd_ö°_TC_im∂
()

345 
a˘ive
;

346 
i
;

348 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
jump_èbÀ_£l
, 0);

349 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
p›_cou¡
, 0);

350 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
c⁄d
, 0);

356 
gpu_iß_w¨p
->
˛au£_buf
 = gpu_iß_w¨p->
cf_buf_°¨t
 + 
W0
.
addr
 * 8;

357 
gpu_iß_w¨p
->
˛au£_buf_íd
 = gpu_iß_w¨p->
˛au£_buf
 + (
W1
.
cou¡
 + 1) * 16;

358 
gpu_iß_w¨p
->
˛au£_köd
 = 
GPU_CLAUSE_TC
;

359 
	`gpu_iß_tc_˛au£_°¨t
();

364 
i
 = 0; i < 
gpu_iß_w¨p
->
thªad_cou¡
; i++) {

365 
a˘ive
 = 
W1
.
vÆid_pixñ_mode
 ? 
	`bô_m≠_gë
(
gpu_iß_w¨p
->
a˘ive_°ack
,

366 
gpu_iß_w¨p
->
°ack_t›
 * gpu_iß_w¨p->
thªad_cou¡
 + 
i
, 1) : 1;

367 
	`bô_m≠_£t
(
gpu_iß_w¨p
->
¥ed
, 
i
, 1, 
a˘ive
);

369 
	}
}

370 #unde‡
W0


371 #unde‡
W1


374 
	$amd_ö°_WAIT_ACK_im∂
()

377 
	}
}

380 
	$amd_ö°_ADD_im∂
()

382 
§c0
, 
§c1
, 
d°
;

384 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

385 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

386 
d°
 = 
§c0
 + 
§c1
;

387 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

388 
	}
}

391 
	$amd_ö°_MUL_im∂
() {

392 
	`NOT_IMPL
();

393 
	}
}

396 
	$amd_ö°_MUL_IEEE_im∂
()

398 
§c0
, 
§c1
, 
d°
;

400 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

401 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

402 
d°
 = 
§c0
 * 
§c1
;

403 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

404 
	}
}

407 
	$amd_ö°_MAX_im∂
() {

408 
	`NOT_IMPL
();

409 
	}
}

412 
	$amd_ö°_MIN_im∂
() {

413 
	`NOT_IMPL
();

414 
	}
}

417 
	$amd_ö°_MAX_DX10_im∂
()

419 
§c0
, 
§c1
, 
d°
;

423 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

424 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

425 
d°
 = 
§c0
 > 
§c1
 ? src0 : src1;

426 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

427 
	}
}

430 
	$amd_ö°_MIN_DX10_im∂
()

432 
§c0
, 
§c1
, 
d°
;

436 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

437 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

438 
d°
 = 
§c0
 < 
§c1
 ? src0 : src1;

439 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

440 
	}
}

443 
	$amd_ö°_SETE_im∂
() {

444 
	`NOT_IMPL
();

445 
	}
}

448 
	$amd_ö°_SETGT_im∂
() {

449 
	`NOT_IMPL
();

450 
	}
}

453 
	$amd_ö°_SETGE_im∂
() {

454 
	`NOT_IMPL
();

455 
	}
}

458 
	$amd_ö°_SETNE_im∂
() {

459 
	`NOT_IMPL
();

460 
	}
}

463 
	$amd_ö°_SETE_DX10_im∂
() {

464 
	`NOT_IMPL
();

465 
	}
}

468 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

469 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

470 
	$amd_ö°_SETGT_DX10_im∂
()

472 
§c0
, 
§c1
;

473 
öt32_t
 
d°
;

474 
c⁄d
;

476 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

477 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

479 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

480 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

481 
c⁄d
 = 
§c0
 > 
§c1
;

482 
d°
 = 
c⁄d
 ? -1 : 0;

483 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

484 
	}
}

485 #unde‡
W0


486 #unde‡
W1


489 
	$amd_ö°_SETGE_DX10_im∂
() {

490 
	`NOT_IMPL
();

491 
	}
}

494 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

495 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

496 
	$amd_ö°_SETNE_DX10_im∂
()

498 
§c0
, 
§c1
;

499 
öt32_t
 
d°
;

500 
c⁄d
;

502 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

503 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

505 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

506 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

507 
c⁄d
 = 
§c0
 !
§c1
;

508 
d°
 = 
c⁄d
 ? -1 : 0;

509 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

510 
	}
}

511 #unde‡
W0


512 #unde‡
W1


515 
	$amd_ö°_FRACT_im∂
() {

516 
	`NOT_IMPL
();

517 
	}
}

520 
	$amd_ö°_TRUNC_im∂
()

522 
§c
, 
d°
;

524 
§c
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

525 
d°
 = 
	`åuncf
(
§c
);

526 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

527 
	}
}

530 
	$amd_ö°_CEIL_im∂
() {

531 
	`NOT_IMPL
();

532 
	}
}

535 
	$amd_ö°_RNDNE_im∂
() {

536 
	`NOT_IMPL
();

537 
	}
}

540 
	$amd_ö°_FLOOR_im∂
() {

541 
	`NOT_IMPL
();

542 
	}
}

545 
	$amd_ö°_ASHR_INT_im∂
()

547 
öt32_t
 
§c0
, 
d°
;

548 
uöt32_t
 
§c1
;

550 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

551 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

552 i‡(
§c1
 > 31)

553 
d°
 = 
§c0
 < 0 ? -1 : 0;

555 
d°
 = 
§c0
 >> 
§c1
;

556 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

557 
	}
}

560 
	$amd_ö°_LSHR_INT_im∂
()

562 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

564 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

565 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

566 
d°
 = 
§c0
 >> 
§c1
;

567 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

568 
	}
}

571 
	$amd_ö°_LSHL_INT_im∂
()

573 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

575 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

576 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

577 
d°
 = 
§c0
 << 
§c1
;

578 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

579 
	}
}

582 
	$amd_ö°_MOV_im∂
()

584 
uöt32_t
 
vÆue
;

585 
vÆue
 = 
	`gpu_iß_ªad_›_§c
(0);

586 
	`gpu_iß_íqueue_wrôe_de°
(
vÆue
);

587 
	}
}

590 
	$amd_ö°_NOP_ALU_im∂
()

592 
	}
}

595 
	$amd_ö°_MUL_64_im∂
() {

596 
	`NOT_IMPL
();

597 
	}
}

600 
	$amd_ö°_FLT64_TO_FLT32_im∂
() {

601 
	`NOT_IMPL
();

602 
	}
}

605 
	$amd_ö°_FLT32_TO_FLT64_im∂
() {

606 
	`NOT_IMPL
();

607 
	}
}

610 
	$amd_ö°_PRED_SETGT_UINT_im∂
() {

611 
	`NOT_IMPL
();

612 
	}
}

615 
	$amd_ö°_PRED_SETGE_UINT_im∂
() {

616 
	`NOT_IMPL
();

617 
	}
}

620 
	$amd_ö°_PRED_SETE_im∂
() {

621 
	`NOT_IMPL
();

622 
	}
}

625 
	$amd_ö°_PRED_SETGT_im∂
() {

626 
	`NOT_IMPL
();

627 
	}
}

630 
	$amd_ö°_PRED_SETGE_im∂
() {

631 
	`NOT_IMPL
();

632 
	}
}

635 
	$amd_ö°_PRED_SETNE_im∂
() {

636 
	`NOT_IMPL
();

637 
	}
}

640 
	$amd_ö°_PRED_SET_INV_im∂
() {

641 
	`NOT_IMPL
();

642 
	}
}

645 
	$amd_ö°_PRED_SET_POP_im∂
() {

646 
	`NOT_IMPL
();

647 
	}
}

650 
	$amd_ö°_PRED_SET_CLR_im∂
() {

651 
	`NOT_IMPL
();

652 
	}
}

655 
	$amd_ö°_PRED_SET_RESTORE_im∂
() {

656 
	`NOT_IMPL
();

657 
	}
}

660 
	$amd_ö°_PRED_SETE_PUSH_im∂
() {

661 
	`NOT_IMPL
();

662 
	}
}

665 
	$amd_ö°_PRED_SETGT_PUSH_im∂
() {

666 
	`NOT_IMPL
();

667 
	}
}

670 
	$amd_ö°_PRED_SETGE_PUSH_im∂
() {

671 
	`NOT_IMPL
();

672 
	}
}

675 
	$amd_ö°_PRED_SETNE_PUSH_im∂
() {

676 
	`NOT_IMPL
();

677 
	}
}

680 
	$amd_ö°_KILLE_im∂
() {

681 
	`NOT_IMPL
();

682 
	}
}

685 
	$amd_ö°_KILLGT_im∂
() {

686 
	`NOT_IMPL
();

687 
	}
}

690 
	$amd_ö°_KILLGE_im∂
() {

691 
	`NOT_IMPL
();

692 
	}
}

695 
	$amd_ö°_KILLNE_im∂
() {

696 
	`NOT_IMPL
();

697 
	}
}

700 
	$amd_ö°_AND_INT_im∂
()

702 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

704 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

705 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

706 
d°
 = 
§c0
 & 
§c1
;

707 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

708 
	}
}

711 
	$amd_ö°_OR_INT_im∂
()

713 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

715 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

716 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

717 
d°
 = 
§c0
 | 
§c1
;

718 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

719 
	}
}

722 
	$amd_ö°_XOR_INT_im∂
()

724 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

726 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

727 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

728 
d°
 = 
§c0
 ^ 
§c1
;

729 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

730 
	}
}

733 
	$amd_ö°_NOT_INT_im∂
() {

734 
	`NOT_IMPL
();

735 
	}
}

738 
	$amd_ö°_ADD_INT_im∂
()

740 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

742 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

743 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

744 
d°
 = 
§c0
 + 
§c1
;

745 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

746 
	}
}

749 
	$amd_ö°_SUB_INT_im∂
()

751 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

753 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

754 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

755 
d°
 = 
§c0
 - 
§c1
;

756 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

757 
	}
}

760 
	$amd_ö°_MAX_INT_im∂
()

762 
öt32_t
 
§c0
, 
§c1
, 
d°
;

764 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

765 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

766 
d°
 = 
§c0
 > 
§c1
 ? src0 : src1;

767 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

768 
	}
}

771 
	$amd_ö°_MIN_INT_im∂
()

773 
öt32_t
 
§c0
, 
§c1
, 
d°
;

775 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

776 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

777 
d°
 = 
§c0
 < 
§c1
 ? src0 : src1;

778 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

779 
	}
}

782 
	$amd_ö°_MAX_UINT_im∂
()

784 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

786 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

787 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

788 
d°
 = 
§c0
 > 
§c1
 ? src0 : src1;

789 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

790 
	}
}

793 
	$amd_ö°_MIN_UINT_im∂
()

795 
uöt32_t
 
§c0
, 
§c1
, 
d°
;

797 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

798 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

799 
d°
 = 
§c0
 < 
§c1
 ? src0 : src1;

800 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

801 
	}
}

804 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

805 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

806 
	$amd_ö°_SETE_INT_im∂
()

808 
uöt32_t
 
§c0
, 
§c1
;

809 
öt32_t
 
d°
;

810 
c⁄d
;

812 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

813 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

815 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

816 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

817 
c⁄d
 = 
§c0
 =
§c1
;

818 
d°
 = 
c⁄d
 ? -1 : 0;

819 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

820 
	}
}

821 #unde‡
W0


822 #unde‡
W1


825 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

826 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

827 
	$amd_ö°_SETGT_INT_im∂
()

829 
öt32_t
 
§c0
, 
§c1
;

830 
öt32_t
 
d°
;

831 
c⁄d
;

833 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

834 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

836 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

837 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

838 
c⁄d
 = 
§c0
 > 
§c1
;

839 
d°
 = 
c⁄d
 ? -1 : 0;

840 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

841 
	}
}

842 #unde‡
W0


843 #unde‡
W1


846 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

847 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

848 
	$amd_ö°_SETGE_INT_im∂
()

850 
öt32_t
 
§c0
, 
§c1
;

851 
öt32_t
 
d°
;

852 
c⁄d
;

854 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

855 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

857 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

858 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

859 
c⁄d
 = 
§c0
 >
§c1
;

860 
d°
 = 
c⁄d
 ? -1 : 0;

861 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

862 
	}
}

863 #unde‡
W0


864 #unde‡
W1


867 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

868 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

869 
	$amd_ö°_SETNE_INT_im∂
()

871 
öt32_t
 
§c0
, 
§c1
;

872 
öt32_t
 
d°
;

873 
c⁄d
;

875 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

876 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

878 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

879 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

880 
c⁄d
 = 
§c0
 !
§c1
;

881 
d°
 = 
c⁄d
 ? -1 : 0;

882 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

883 
	}
}

884 #unde‡
W0


885 #unde‡
W1


890 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

891 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

892 
	$amd_ö°_SETGT_UINT_im∂
()

894 
uöt32_t
 
§c0
, 
§c1
;

895 
öt32_t
 
d°
;

896 
c⁄d
;

898 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

899 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

901 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

902 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

903 
c⁄d
 = 
§c0
 > 
§c1
;

904 
d°
 = 
c⁄d
 ? -1 : 0;

905 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

906 
	}
}

907 #unde‡
W0


908 #unde‡
W1


911 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

912 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

913 
	$amd_ö°_SETGE_UINT_im∂
()

915 
uöt32_t
 
§c0
, 
§c1
;

916 
öt32_t
 
d°
;

917 
c⁄d
;

919 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

920 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

922 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

923 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

924 
c⁄d
 = 
§c0
 >
§c1
;

925 
d°
 = 
c⁄d
 ? -1 : 0;

926 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

927 
	}
}

928 #unde‡
W0


929 #unde‡
W1


932 
	$amd_ö°_KILLGT_UINT_im∂
() {

933 
	`NOT_IMPL
();

934 
	}
}

937 
	$amd_ö°_KILLGE_UINT_im∂
() {

938 
	`NOT_IMPL
();

939 
	}
}

942 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

943 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

944 
	$amd_ö°_PREDE_INT_im∂
()

946 
öt32_t
 
§c0
, 
§c1
;

947 
d°
;

948 
c⁄d
;

950 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
¥ed_£l
, 0);

951 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

952 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
b™k_swizzÀ
, 0);

953 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

955 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

956 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

957 
c⁄d
 = 
§c0
 =
§c1
;

958 
d°
 = 
c⁄d
 ? 0.0f : 1.0f;

959 
	`gpu_iß_íqueue_wrôe_de°
(* (
uöt32_t
 *Ë&
d°
);

962 
	`gpu_iß_íqueue_push_bef‹e
();

963 
	`gpu_iß_íqueue_¥ed_£t
(
c⁄d
);

964 
	}
}

965 #unde‡
W0


966 #unde‡
W1


969 
	$amd_ö°_PRED_SETGE_INT_im∂
() {

970 
	`NOT_IMPL
();

971 
	}
}

974 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

975 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

976 
	$amd_ö°_PRED_SETGT_INT_im∂
()

978 
öt32_t
 
§c0
, 
§c1
;

979 
d°
;

980 
c⁄d
;

982 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
¥ed_£l
, 0);

983 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

984 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
b™k_swizzÀ
, 0);

985 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

987 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

988 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

989 
c⁄d
 = 
§c0
 > 
§c1
;

990 
d°
 = 
c⁄d
 ? 0.0f : 1.0f;

991 
	`gpu_iß_íqueue_wrôe_de°
(* (
uöt32_t
 *Ë&
d°
);

994 
	`gpu_iß_íqueue_push_bef‹e
();

995 
	`gpu_iß_íqueue_¥ed_£t
(
c⁄d
);

996 
	}
}

997 #unde‡
W0


998 #unde‡
W1


1001 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0


	)

1002 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_›2


	)

1003 
	$amd_ö°_PRED_SETNE_INT_im∂
()

1005 
öt32_t
 
§c0
, 
§c1
;

1006 
d°
;

1007 
c⁄d
;

1009 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
¥ed_£l
, 0);

1010 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
omod
, 0);

1011 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
b™k_swizzÀ
, 0);

1012 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
˛amp
, 0);

1014 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

1015 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

1016 
c⁄d
 = 
§c0
 !
§c1
;

1017 
d°
 = 
c⁄d
 ? 0.0f : 1.0f;

1018 
	`gpu_iß_íqueue_wrôe_de°
(* (
uöt32_t
 *Ë&
d°
);

1021 
	`gpu_iß_íqueue_push_bef‹e
();

1022 
	`gpu_iß_íqueue_¥ed_£t
(
c⁄d
);

1023 
	}
}

1024 #unde‡
W0


1025 #unde‡
W1


1028 
	$amd_ö°_KILLE_INT_im∂
() {

1029 
	`NOT_IMPL
();

1030 
	}
}

1033 
	$amd_ö°_KILLGT_INT_im∂
() {

1034 
	`NOT_IMPL
();

1035 
	}
}

1038 
	$amd_ö°_KILLGE_INT_im∂
() {

1039 
	`NOT_IMPL
();

1040 
	}
}

1043 
	$amd_ö°_KILLNE_INT_im∂
() {

1044 
	`NOT_IMPL
();

1045 
	}
}

1048 
	$amd_ö°_PRED_SETE_PUSH_INT_im∂
() {

1049 
	`NOT_IMPL
();

1050 
	}
}

1053 
	$amd_ö°_PRED_SETGT_PUSH_INT_im∂
() {

1054 
	`NOT_IMPL
();

1055 
	}
}

1058 
	$amd_ö°_PRED_SETGE_PUSH_INT_im∂
() {

1059 
	`NOT_IMPL
();

1060 
	}
}

1063 
	$amd_ö°_PRED_SETNE_PUSH_INT_im∂
() {

1064 
	`NOT_IMPL
();

1065 
	}
}

1068 
	$amd_ö°_PRED_SETLT_PUSH_INT_im∂
() {

1069 
	`NOT_IMPL
();

1070 
	}
}

1073 
	$amd_ö°_PRED_SETLE_PUSH_INT_im∂
() {

1074 
	`NOT_IMPL
();

1075 
	}
}

1078 
	$amd_ö°_FLT_TO_INT_im∂
()

1080 
§c
;

1081 
öt32_t
 
d°
;

1083 
§c
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

1084 i‡(
	`isöf
(
§c
) == 1)

1085 
d°
 = 
INT32_MAX
;

1086 i‡(
	`isöf
(
§c
) == -1)

1087 
d°
 = 
INT32_MIN
;

1088 i‡(
	`i¢™
(
§c
))

1089 
d°
 = 0;

1091 
d°
 = 
§c
;

1092 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

1093 
	}
}

1096 
	$amd_ö°_BFREV_INT_im∂
() {

1097 
	`NOT_IMPL
();

1098 
	}
}

1101 
	$amd_ö°_ADDC_UINT_im∂
() {

1102 
	`NOT_IMPL
();

1103 
	}
}

1106 
	$amd_ö°_SUBB_UINT_im∂
() {

1107 
	`NOT_IMPL
();

1108 
	}
}

1111 
	$amd_ö°_GROUP_BARRIER_im∂
() {

1114 
	}
}

1117 
	$amd_ö°_GROUP_SEQ_BEGIN_im∂
() {

1118 
	`NOT_IMPL
();

1119 
	}
}

1122 
	$amd_ö°_GROUP_SEQ_END_im∂
() {

1123 
	`NOT_IMPL
();

1124 
	}
}

1127 
	$amd_ö°_SET_MODE_im∂
() {

1128 
	`NOT_IMPL
();

1129 
	}
}

1132 
	$amd_ö°_SET_CF_IDX0_im∂
() {

1133 
	`NOT_IMPL
();

1134 
	}
}

1137 
	$amd_ö°_SET_CF_IDX1_im∂
() {

1138 
	`NOT_IMPL
();

1139 
	}
}

1142 
	$amd_ö°_SET_LDS_SIZE_im∂
() {

1143 
	`NOT_IMPL
();

1144 
	}
}

1147 
	$amd_ö°_EXP_IEEE_im∂
() {

1148 
	`NOT_IMPL
();

1149 
	}
}

1152 
	$amd_ö°_LOG_CLAMPED_im∂
() {

1153 
	`NOT_IMPL
();

1154 
	}
}

1157 
	$amd_ö°_LOG_IEEE_im∂
() {

1158 
	`NOT_IMPL
();

1159 
	}
}

1162 
	$amd_ö°_RECIP_CLAMPED_im∂
() {

1163 
	`NOT_IMPL
();

1164 
	}
}

1167 
	$amd_ö°_RECIP_FF_im∂
() {

1168 
	`NOT_IMPL
();

1169 
	}
}

1172 
	$amd_ö°_RECIP_IEEE_im∂
()

1174 
§c
, 
d°
;

1176 
§c
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

1177 
d°
 = 1.0‡/ 
§c
;

1178 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

1179 
	}
}

1182 
	$amd_ö°_RECIPSQRT_CLAMPED_im∂
() {

1183 
	`NOT_IMPL
();

1184 
	}
}

1187 
	$amd_ö°_RECIPSQRT_FF_im∂
() {

1188 
	`NOT_IMPL
();

1189 
	}
}

1192 
	$amd_ö°_RECIPSQRT_IEEE_im∂
() {

1193 
	`NOT_IMPL
();

1194 
	}
}

1197 
	$amd_ö°_SQRT_IEEE_im∂
()

1199 
§c
, 
d°
;

1201 
§c
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

1202 
d°
 = 
	`sqπf
(
§c
);

1203 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

1204 
	}
}

1207 
	$amd_ö°_SIN_im∂
() {

1208 
	`NOT_IMPL
();

1209 
	}
}

1212 
	$amd_ö°_COS_im∂
() {

1213 
	`NOT_IMPL
();

1214 
	}
}

1217 
	$amd_ö°_MULLO_INT_im∂
()

1219 
öt64_t
 
§c0
, 
§c1
, 
d°
;

1221 
§c0
 = (
öt32_t
Ë
	`gpu_iß_ªad_›_§c
(0);

1222 
§c1
 = (
öt32_t
Ë
	`gpu_iß_ªad_›_§c
(1);

1223 
d°
 = 
§c0
 * 
§c1
;

1224 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

1225 
	}
}

1228 
	$amd_ö°_MULHI_INT_im∂
()

1230 
öt64_t
 
§c0
, 
§c1
, 
d°
;

1232 
§c0
 = (
öt32_t
Ë
	`gpu_iß_ªad_›_§c
(0);

1233 
§c1
 = (
öt32_t
Ë
	`gpu_iß_ªad_›_§c
(1);

1234 
d°
 = 
§c0
 * 
§c1
;

1235 
	`gpu_iß_íqueue_wrôe_de°
(
d°
 >> 32);

1236 
	}
}

1239 
	$amd_ö°_MULLO_UINT_im∂
()

1241 
uöt64_t
 
§c0
, 
§c1
, 
d°
;

1243 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

1244 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

1245 
d°
 = 
§c0
 * 
§c1
;

1246 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

1247 
	}
}

1250 
	$amd_ö°_MULHI_UINT_im∂
()

1252 
uöt64_t
 
§c0
, 
§c1
, 
d°
;

1254 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

1255 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

1256 
d°
 = 
§c0
 * 
§c1
;

1257 
	`gpu_iß_íqueue_wrôe_de°
(
d°
 >> 32);

1258 
	}
}

1261 
	$amd_ö°_RECIP_INT_im∂
() {

1262 
	`NOT_IMPL
();

1263 
	}
}

1266 
	$amd_ö°_RECIP_UINT_im∂
()

1268 
uöt32_t
 
§c
;

1269 
uöt32_t
 
d°
;

1271 
§c
 = 
	`gpu_iß_ªad_›_§c
(0);

1272 
d°
 = 0xfffffff‡/ 
§c
;

1273 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

1274 
	}
}

1277 
	$amd_ö°_RECIP_64_im∂
() {

1278 
	`NOT_IMPL
();

1279 
	}
}

1282 
	$amd_ö°_RECIP_CLAMPED_64_im∂
() {

1283 
	`NOT_IMPL
();

1284 
	}
}

1287 
	$amd_ö°_RECIPSQRT_64_im∂
() {

1288 
	`NOT_IMPL
();

1289 
	}
}

1292 
	$amd_ö°_RECIPSQRT_CLAMPED_64_im∂
() {

1293 
	`NOT_IMPL
();

1294 
	}
}

1297 
	$amd_ö°_SQRT_64_im∂
() {

1298 
	`NOT_IMPL
();

1299 
	}
}

1302 
	$amd_ö°_FLT_TO_UINT_im∂
()

1304 
§c
;

1305 
uöt32_t
 
d°
;

1307 
§c
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

1308 i‡(
	`isöf
(
§c
) == 1)

1309 
d°
 = 
UINT32_MAX
;

1310 i‡(
	`isöf
(
§c
Ë=-1 || 
	`i¢™
(src))

1311 
d°
 = 0;

1313 
d°
 = 
§c
;

1314 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

1315 
	}
}

1318 
	$amd_ö°_INT_TO_FLT_im∂
()

1320 
öt32_t
 
§c0
;

1321 
d°
;

1323 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

1324 
d°
 = (Ë
§c0
;

1325 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

1326 
	}
}

1329 
	$amd_ö°_UINT_TO_FLT_im∂
()

1331 
uöt32_t
 
§c0
;

1332 
d°
;

1334 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

1335 
d°
 = (Ë
§c0
;

1336 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

1337 
	}
}

1340 
	$amd_ö°_BFM_INT_im∂
() {

1341 
	`NOT_IMPL
();

1342 
	}
}

1345 
	$amd_ö°_FLT32_TO_FLT16_im∂
() {

1346 
	`NOT_IMPL
();

1347 
	}
}

1350 
	$amd_ö°_FLT16_TO_FLT32_im∂
() {

1351 
	`NOT_IMPL
();

1352 
	}
}

1355 
	$amd_ö°_UBYTE0_FLT_im∂
() {

1356 
	`NOT_IMPL
();

1357 
	}
}

1360 
	$amd_ö°_UBYTE1_FLT_im∂
() {

1361 
	`NOT_IMPL
();

1362 
	}
}

1365 
	$amd_ö°_UBYTE2_FLT_im∂
() {

1366 
	`NOT_IMPL
();

1367 
	}
}

1370 
	$amd_ö°_UBYTE3_FLT_im∂
() {

1371 
	`NOT_IMPL
();

1372 
	}
}

1375 
	$amd_ö°_BCNT_INT_im∂
() {

1376 
	`NOT_IMPL
();

1377 
	}
}

1380 
	$amd_ö°_FFBH_UINT_im∂
() {

1381 
	`NOT_IMPL
();

1382 
	}
}

1385 
	$amd_ö°_FFBL_INT_im∂
() {

1386 
	`NOT_IMPL
();

1387 
	}
}

1390 
	$amd_ö°_FFBH_INT_im∂
() {

1391 
	`NOT_IMPL
();

1392 
	}
}

1395 
	$amd_ö°_FLT_TO_UINT4_im∂
() {

1396 
	`NOT_IMPL
();

1397 
	}
}

1400 
	$amd_ö°_DOT_IEEE_im∂
() {

1401 
	`NOT_IMPL
();

1402 
	}
}

1405 
	$amd_ö°_FLT_TO_INT_RPI_im∂
() {

1406 
	`NOT_IMPL
();

1407 
	}
}

1410 
	$amd_ö°_FLT_TO_INT_FLOOR_im∂
() {

1411 
	`NOT_IMPL
();

1412 
	}
}

1415 
	$amd_ö°_MULHI_UINT24_im∂
() {

1416 
	`NOT_IMPL
();

1417 
	}
}

1420 
	$amd_ö°_MBCNT_32HI_INT_im∂
() {

1421 
	`NOT_IMPL
();

1422 
	}
}

1425 
	$amd_ö°_OFFSET_TO_FLT_im∂
() {

1426 
	`NOT_IMPL
();

1427 
	}
}

1430 
	$amd_ö°_MUL_UINT24_im∂
() {

1431 
	`NOT_IMPL
();

1432 
	}
}

1435 
	$amd_ö°_BCNT_ACCUM_PREV_INT_im∂
() {

1436 
	`NOT_IMPL
();

1437 
	}
}

1440 
	$amd_ö°_MBCNT_32LO_ACCUM_PREV_INT_im∂
() {

1441 
	`NOT_IMPL
();

1442 
	}
}

1445 
	$amd_ö°_SETE_64_im∂
() {

1446 
	`NOT_IMPL
();

1447 
	}
}

1450 
	$amd_ö°_SETNE_64_im∂
() {

1451 
	`NOT_IMPL
();

1452 
	}
}

1455 
	$amd_ö°_SETGT_64_im∂
() {

1456 
	`NOT_IMPL
();

1457 
	}
}

1460 
	$amd_ö°_SETGE_64_im∂
() {

1461 
	`NOT_IMPL
();

1462 
	}
}

1465 
	$amd_ö°_MIN_64_im∂
() {

1466 
	`NOT_IMPL
();

1467 
	}
}

1470 
	$amd_ö°_MAX_64_im∂
() {

1471 
	`NOT_IMPL
();

1472 
	}
}

1475 
	$amd_ö°_DOT4_im∂
() {

1476 
	`NOT_IMPL
();

1477 
	}
}

1480 
	$amd_ö°_DOT4_IEEE_im∂
() {

1481 
	`NOT_IMPL
();

1482 
	}
}

1485 
	$amd_ö°_CUBE_im∂
() {

1486 
	`NOT_IMPL
();

1487 
	}
}

1490 
	$amd_ö°_MAX4_im∂
() {

1491 
	`NOT_IMPL
();

1492 
	}
}

1495 
	$amd_ö°_FREXP_64_im∂
() {

1496 
	`NOT_IMPL
();

1497 
	}
}

1500 
	$amd_ö°_LDEXP_64_im∂
() {

1501 
	`NOT_IMPL
();

1502 
	}
}

1505 
	$amd_ö°_FRACT_64_im∂
() {

1506 
	`NOT_IMPL
();

1507 
	}
}

1510 
	$amd_ö°_PRED_SETGT_64_im∂
() {

1511 
	`NOT_IMPL
();

1512 
	}
}

1515 
	$amd_ö°_PRED_SETE_64_im∂
() {

1516 
	`NOT_IMPL
();

1517 
	}
}

1520 
	$amd_ö°_PRED_SETGE_64_im∂
() {

1521 
	`NOT_IMPL
();

1522 
	}
}

1525 
	$amd_ö°_MUL_64_VEC_im∂
() {

1526 
	`NOT_IMPL
();

1527 
	}
}

1530 
	$amd_ö°_ADD_64_im∂
() {

1531 
	`NOT_IMPL
();

1532 
	}
}

1535 
	$amd_ö°_MOVA_INT_im∂
() {

1536 
	`NOT_IMPL
();

1537 
	}
}

1540 
	$amd_ö°_FLT64_TO_FLT32_VEC_im∂
() {

1541 
	`NOT_IMPL
();

1542 
	}
}

1545 
	$amd_ö°_FLT32_TO_FLT64_VEC_im∂
() {

1546 
	`NOT_IMPL
();

1547 
	}
}

1550 
	$amd_ö°_SAD_ACCUM_PREV_UINT_im∂
() {

1551 
	`NOT_IMPL
();

1552 
	}
}

1555 
	$amd_ö°_DOT_im∂
() {

1556 
	`NOT_IMPL
();

1557 
	}
}

1560 
	$amd_ö°_MUL_PREV_im∂
() {

1561 
	`NOT_IMPL
();

1562 
	}
}

1565 
	$amd_ö°_MUL_IEEE_PREV_im∂
() {

1566 
	`NOT_IMPL
();

1567 
	}
}

1570 
	$amd_ö°_ADD_PREV_im∂
() {

1571 
	`NOT_IMPL
();

1572 
	}
}

1575 
	$amd_ö°_MULADD_PREV_im∂
()

1577 
	`NOT_IMPL
();

1578 
	}
}

1581 
	$amd_ö°_MULADD_IEEE_PREV_im∂
() {

1582 
	`NOT_IMPL
();

1583 
	}
}

1586 
	$amd_ö°_INTERP_XY_im∂
() {

1587 
	`NOT_IMPL
();

1588 
	}
}

1591 
	$amd_ö°_INTERP_ZW_im∂
() {

1592 
	`NOT_IMPL
();

1593 
	}
}

1596 
	$amd_ö°_INTERP_X_im∂
() {

1597 
	`NOT_IMPL
();

1598 
	}
}

1601 
	$amd_ö°_INTERP_Z_im∂
() {

1602 
	`NOT_IMPL
();

1603 
	}
}

1606 
	$amd_ö°_STORE_FLAGS_im∂
() {

1607 
	`NOT_IMPL
();

1608 
	}
}

1611 
	$amd_ö°_LOAD_STORE_FLAGS_im∂
() {

1612 
	`NOT_IMPL
();

1613 
	}
}

1616 
	$amd_ö°_LDS_1A_im∂
() {

1617 
	`NOT_IMPL
();

1618 
	}
}

1621 
	$amd_ö°_LDS_1A1D_im∂
() {

1622 
	`NOT_IMPL
();

1623 
	}
}

1626 
	$amd_ö°_LDS_2A_im∂
() {

1627 
	`NOT_IMPL
();

1628 
	}
}

1631 
	$amd_ö°_INTERP_LOAD_P0_im∂
() {

1632 
	`NOT_IMPL
();

1633 
	}
}

1636 
	$amd_ö°_INTERP_LOAD_P10_im∂
() {

1637 
	`NOT_IMPL
();

1638 
	}
}

1641 
	$amd_ö°_INTERP_LOAD_P20_im∂
() {

1642 
	`NOT_IMPL
();

1643 
	}
}

1646 
	$amd_ö°_BFE_UINT_im∂
() {

1647 
	`NOT_IMPL
();

1648 
	}
}

1651 
	$amd_ö°_BFE_INT_im∂
() {

1652 
	`NOT_IMPL
();

1653 
	}
}

1656 
	$amd_ö°_BFI_INT_im∂
() {

1657 
	`NOT_IMPL
();

1658 
	}
}

1661 
	$amd_ö°_FMA_im∂
() {

1662 
	`NOT_IMPL
();

1663 
	}
}

1666 
	$amd_ö°_CNDNE_64_im∂
() {

1667 
	`NOT_IMPL
();

1668 
	}
}

1671 
	$amd_ö°_FMA_64_im∂
() {

1672 
	`NOT_IMPL
();

1673 
	}
}

1676 
	$amd_ö°_LERP_UINT_im∂
() {

1677 
	`NOT_IMPL
();

1678 
	}
}

1681 
	$amd_ö°_BIT_ALIGN_INT_im∂
() {

1682 
	`NOT_IMPL
();

1683 
	}
}

1686 
	$amd_ö°_BYTE_ALIGN_INT_im∂
() {

1687 
	`NOT_IMPL
();

1688 
	}
}

1691 
	$amd_ö°_SAD_ACCUM_UINT_im∂
() {

1692 
	`NOT_IMPL
();

1693 
	}
}

1696 
	$amd_ö°_SAD_ACCUM_HI_UINT_im∂
() {

1697 
	`NOT_IMPL
();

1698 
	}
}

1701 
	$amd_ö°_MULADD_UINT24_im∂
() {

1702 
	`NOT_IMPL
();

1703 
	}
}

1706 
	#W0
 
gpu_iß_ö°
->
w‹ds
[0].
Æu_w‹d0_lds_idx_›


	)

1707 
	#W1
 
gpu_iß_ö°
->
w‹ds
[1].
Æu_w‹d1_lds_idx_›


	)

1708 
	$amd_ö°_LDS_IDX_OP_im∂
()

1710 
mem_t
 *
loˇl_mem
;

1711 
idx_off£t
;

1712 
uöt32_t
 
›0
, 
›1
, 
›2
;

1715 
loˇl_mem
 = 
gk
->loˇl_mem[
gpu_iß_thªad
->
group_id
];

1716 
	`as£π
(
loˇl_mem
);

1719 
idx_off£t
 = (
W0
.
idx_off£t_5
 << 5Ë| (W0.
idx_off£t_4
 << 4) |

1720 (
W1
.
idx_off£t_3
 << 3Ë| (W1.
idx_off£t_2
 << 2) |

1721 (
W1
.
idx_off£t_1
 << 1Ë| W1.
idx_off£t_0
;

1724 
›0
 = 
	`gpu_iß_ªad_›_§c
(0);

1725 
›1
 = 
	`gpu_iß_ªad_›_§c
(1);

1726 
›2
 = 
	`gpu_iß_ªad_›_§c
(2);

1729 
W1
.
lds_›
) {

1734 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
¥ed_£l
, 0);

1735 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
›2
, 0);

1736 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
idx_off£t
, 0);

1737 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_ch™
, 0);

1739 
	`gpu_iß_íqueue_wrôe_lds
(
›0
, 
›1
);

1750 
uöt32_t
 
d°
, 
§c0
, 
§c1
, 
tmp
;

1752 
d°
 = 
›0
;

1753 
§c0
 = 
›1
;

1754 
§c1
 = 
›2
;

1755 
tmp
 = 
d°
 + 
idx_off£t
 * 4;

1757 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
¥ed_£l
, 0);

1758 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_ch™
, 0);

1759 
	`gpu_iß_íqueue_wrôe_lds
(
d°
, 
§c0
);

1760 
	`gpu_iß_íqueue_wrôe_lds
(
tmp
, 
§c1
);

1768 
uöt32_t
 *
pvÆue
;

1770 
pvÆue
 = 
	`mÆloc
(4);

1771 
	`mem_ªad
(
loˇl_mem
, 
›0
, 4, 
pvÆue
);

1772 
	`li°_íqueue
(
gpu_iß_thªad
->
lds_oqa
, 
pvÆue
);

1773 
	`gpu_iß_debug
("Å%d:LDS[0x%x]=(%u,%gf)=>OQA", 
GPU_THR
.
globÆ_id
, 
›0
, *
pvÆue
, * (*)Övalue);

1782 
uöt32_t
 *
pvÆue
;

1784 
pvÆue
 = 
	`mÆloc
(4);

1785 
	`mem_ªad
(
loˇl_mem
, 
›0
, 4, 
pvÆue
);

1786 
	`li°_íqueue
(
gpu_iß_thªad
->
lds_oqa
, 
pvÆue
);

1788 
pvÆue
 = 
	`mÆloc
(4);

1789 
	`mem_ªad
(
loˇl_mem
, 
›1
, 4, 
pvÆue
);

1790 
	`li°_íqueue
(
gpu_iß_thªad
->
lds_oqb
, 
pvÆue
);

1796 
	`GPU_PARAM_NOT_SUPPORTED
(
W1
.
lds_›
);

1798 
	}
}

1799 #unde‡
W0


1800 #unde‡
W1


1803 
	$amd_ö°_MULADD_im∂
()

1805 
§c0
, 
§c1
, 
§c2
, 
d°
;

1807 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

1808 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

1809 
§c2
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(2);

1810 
d°
 = 
§c0
 * 
§c1
 + 
§c2
;

1811 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

1812 
	}
}

1815 
	$amd_ö°_MULADD_M2_im∂
() {

1816 
	`NOT_IMPL
();

1817 
	}
}

1820 
	$amd_ö°_MULADD_M4_im∂
() {

1821 
	`NOT_IMPL
();

1822 
	}
}

1825 
	$amd_ö°_MULADD_D2_im∂
() {

1826 
	`NOT_IMPL
();

1827 
	}
}

1830 
	$amd_ö°_MULADD_IEEE_im∂
()

1832 
§c0
, 
§c1
, 
§c2
, 
d°
;

1834 
§c0
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(0);

1835 
§c1
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(1);

1836 
§c2
 = 
	`gpu_iß_ªad_›_§c_Êﬂt
(2);

1837 
d°
 = 
§c0
 * 
§c1
 + 
§c2
;

1838 
	`gpu_iß_íqueue_wrôe_de°_Êﬂt
(
d°
);

1839 
	}
}

1842 
	$amd_ö°_CNDE_im∂
() {

1843 
	`NOT_IMPL
();

1844 
	}
}

1847 
	$amd_ö°_CNDGT_im∂
() {

1848 
	`NOT_IMPL
();

1849 
	}
}

1852 
	$amd_ö°_CNDGE_im∂
() {

1853 
	`NOT_IMPL
();

1854 
	}
}

1857 
	$amd_ö°_CNDE_INT_im∂
()

1859 
uöt32_t
 
§c0
, 
§c1
, 
§c2
, 
d°
;

1861 
§c0
 = 
	`gpu_iß_ªad_›_§c
(0);

1862 
§c1
 = 
	`gpu_iß_ªad_›_§c
(1);

1863 
§c2
 = 
	`gpu_iß_ªad_›_§c
(2);

1864 
d°
 = 
§c0
 =0 ? 
§c1
 : 
§c2
;

1865 
	`gpu_iß_íqueue_wrôe_de°
(
d°
);

1866 
	}
}

1869 
	$amd_ö°_CMNDGT_INT_im∂
() {

1870 
	`NOT_IMPL
();

1871 
	}
}

1874 
	$amd_ö°_CMNDGE_INT_im∂
() {

1875 
	`NOT_IMPL
();

1876 
	}
}

1879 
	$amd_ö°_MUL_LIT_im∂
() {

1880 
	`NOT_IMPL
();

1881 
	}
}

1884 
	#W0
 
VTX_WORD0


	)

1885 
	#W1
 
VTX_WORD1_GPR


	)

1886 
	#W2
 
VTX_WORD2


	)

1887 
	$amd_ö°_FETCH_im∂
()

1889 
uöt32_t
 
addr
;

1890 
d©a_f‹m©
;

1891 
i
;

1895 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
„tch_ty≥
, 2);

1896 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
„tch_whﬁe_quad
, 0);

1897 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
buf„r_id
, 156);

1898 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W2
.
off£t
, 0);

1899 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W2
.
ídün_sw≠
, 0);

1900 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W2
.
c⁄°_buf_no_°ride
, 0);

1901 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W2
.
mega_„tch
, 1);

1925 i‡(!
	`gpu_thªad_gë_¥ed
(
gpu_iß_thªad
))

1929 i‡(
W1
.
u£_c⁄°_fõlds
) {

1932 
d©a_f‹m©
 = 13;

1934 
d©a_f‹m©
 = 
W1
.data_format;

1935 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
num_f‹m©_Æl
, 0);

1936 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
f‹m©_comp_Æl
, 0);

1937 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
§f_mode_Æl
, 0);

1941 
addr
 = 
	`gpu_iß_ªad_g¥
(
W0
.
§c_g¥
, W0.
§c_ªl
, W0.
§c_£l_x
, 0) * 4;

1942 
	`gpu_iß_debug
("Å%d:ªad(0x%x)", 
GPU_THR
.
globÆ_id
, 
addr
);

1945 
d©a_f‹m©
) {

1949 
uöt32_t
 
vÆue
;

1951 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_x
, 0);

1952 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_y
, 7);

1953 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_z
, 7);

1954 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_w
, 7);

1955 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
mega_„tch_cou¡
, 3);

1957 
	`mem_ªad
(
gk
->
globÆ_mem
, 
addr
 + 
W2
.
off£t
, 4, &
vÆue
);

1958 
	`gpu_iß_wrôe_g¥
(
W1
.
d°_g¥
, W1.
d°_ªl
, 0, 
vÆue
);

1959 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
)) {

1960 
	`gpu_iß_debug
("=(%d,%gf)=>", 
vÆue
, * (*) &value);

1961 
	`amd_ö°_dump_g¥
(
W1
.
d°_g¥
, W1.
d°_ªl
, 0, 0, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

1968 
vÆue
[4];

1970 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_x
, 0);

1971 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_y
, 1);

1972 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_z
, 2);

1973 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W1
.
d°_£l_w
, 3);

1974 
	`GPU_PARAM_NOT_SUPPORTED_NEQ
(
W0
.
mega_„tch_cou¡
, 15);

1976 
	`mem_ªad
(
gk
->
globÆ_mem
, 
addr
 + 
W2
.
off£t
, 16, 
vÆue
);

1977 
i
 = 0; i < 4; i++) {

1978 
	`gpu_iß_wrôe_g¥_Êﬂt
(
W1
.
d°_g¥
, W1.
d°_ªl
, 
i
, 
vÆue
[i]);

1979 
	`gpu_iß_debug
(",");

1980 i‡(
	`debug_°©us
(
gpu_iß_debug_ˇãg‹y
))

1981 
	`amd_ö°_dump_g¥
(
W1
.
d°_g¥
, W1.
d°_ªl
, 
i
, 0, 
	`debug_fûe
(
gpu_iß_debug_ˇãg‹y
));

1982 
	`gpu_iß_debug
("=%gf", 
vÆue
[
i
]);

1988 
	`GPU_PARAM_NOT_SUPPORTED
(
W1
.
d©a_f‹m©
);

1991 
	}
}

1992 #unde‡
W0


1993 #unde‡
W1


1994 #unde‡
W2


1997 
	$amd_ö°_GET_BUFFER_RESINFO_im∂
() {

1998 
	`NOT_IMPL
();

1999 
	}
}

2002 
	$amd_ö°_SEMANTIC_im∂
() {

2003 
	`NOT_IMPL
();

2004 
	}
}

2007 
	$amd_ö°_GATHER4_im∂
() {

2008 
	`NOT_IMPL
();

2009 
	}
}

2012 
	$amd_ö°_GATHER4_C_im∂
() {

2013 
	`NOT_IMPL
();

2014 
	}
}

2017 
	$amd_ö°_GATHER4_C_O_im∂
() {

2018 
	`NOT_IMPL
();

2019 
	}
}

2022 
	$amd_ö°_GATHER4_O_im∂
() {

2023 
	`NOT_IMPL
();

2024 
	}
}

2027 
	$amd_ö°_GET_GRADIENTS_H_im∂
() {

2028 
	`NOT_IMPL
();

2029 
	}
}

2032 
	$amd_ö°_GET_GRADIENTS_V_im∂
() {

2033 
	`NOT_IMPL
();

2034 
	}
}

2037 
	$amd_ö°_GET_LOD_im∂
() {

2038 
	`NOT_IMPL
();

2039 
	}
}

2042 
	$amd_ö°_GET_NUMBER_OF_SAMPLES_im∂
() {

2043 
	`NOT_IMPL
();

2044 
	}
}

2047 
	$amd_ö°_GET_TEXTURE_RESINFO_im∂
() {

2048 
	`NOT_IMPL
();

2049 
	}
}

2052 
	$amd_ö°_KEEP_GRADIENTS_im∂
() {

2053 
	`NOT_IMPL
();

2054 
	}
}

2057 
	$amd_ö°_LD_im∂
() {

2058 
	`NOT_IMPL
();

2059 
	}
}

2062 
	$amd_ö°_SAMPLE_im∂
() {

2063 
	`NOT_IMPL
();

2064 
	}
}

2067 
	$amd_ö°_SAMPLE_C_im∂
() {

2068 
	`NOT_IMPL
();

2069 
	}
}

2072 
	$amd_ö°_SAMPLE_C_G_im∂
() {

2073 
	`NOT_IMPL
();

2074 
	}
}

2077 
	$amd_ö°_SAMPLE_C_G_LB_im∂
() {

2078 
	`NOT_IMPL
();

2079 
	}
}

2082 
	$amd_ö°_SAMPLE_C_L_im∂
() {

2083 
	`NOT_IMPL
();

2084 
	}
}

2087 
	$amd_ö°_SAMPLE_C_LB_im∂
() {

2088 
	`NOT_IMPL
();

2089 
	}
}

2092 
	$amd_ö°_SAMPLE_C_LZ_im∂
() {

2093 
	`NOT_IMPL
();

2094 
	}
}

2097 
	$amd_ö°_SAMPLE_G_im∂
() {

2098 
	`NOT_IMPL
();

2099 
	}
}

2102 
	$amd_ö°_SAMPLE_G_LB_im∂
() {

2103 
	`NOT_IMPL
();

2104 
	}
}

2107 
	$amd_ö°_SAMPLE_L_im∂
() {

2108 
	`NOT_IMPL
();

2109 
	}
}

2112 
	$amd_ö°_SAMPLE_LB_im∂
() {

2113 
	`NOT_IMPL
();

2114 
	}
}

2117 
	$amd_ö°_SAMPLE_LZ_im∂
() {

2118 
	`NOT_IMPL
();

2119 
	}
}

2122 
	$amd_ö°_SET_GRADIENTS_H_im∂
() {

2123 
	`NOT_IMPL
();

2124 
	}
}

2127 
	$amd_ö°_SET_GRADIENTS_V_im∂
() {

2128 
	`NOT_IMPL
();

2129 
	}
}

2132 
	$amd_ö°_SET_TEXTURE_OFFSETS_im∂
() {

2133 
	`NOT_IMPL
();

2134 
	}
}

	@libgpukernel/opencl-obj.c

20 
	~<gpukî√l-loˇl.h
>

21 
	~<as£π.h
>

22 
	~<debug.h
>

23 
	~<°dlib.h
>

24 
	~< li°.h
>

29 
 li°_t
 *
	g›í˛_obje˘_li°
;

33 
	$›í˛_obje˘_add
(*
obje˘
)

35 
	` li°_föd
(
›í˛_obje˘_li°
, 
obje˘
);

36 
	`as£π
(
	` li°_îr‹
(
›í˛_obje˘_li°
));

37 
	` li°_add
(
›í˛_obje˘_li°
, 
obje˘
);

38 
	}
}

42 
	$›í˛_obje˘_ªmove
(*
obje˘
)

44 
	` li°_föd
(
›í˛_obje˘_li°
, 
obje˘
);

45 
	`as£π
(!
	` li°_îr‹
(
›í˛_obje˘_li°
));

46 
	` li°_ªmove
(
›í˛_obje˘_li°
);

47 
	}
}

52 *
	$›í˛_obje˘_gë
(
›í˛_obj_íum
 
ty≥
, 
uöt32_t
 
id
)

54 *
obje˘
;

55 
uöt32_t
 
obje˘_id
;

57 i‡(
id
 >> 16 !
ty≥
)

58 
	`Áèl
("opencl_object_get:Ñequested OpenCL object of incorrectÅype");

59 
	` li°_hód
(
›í˛_obje˘_li°
); !
	` li°_eﬁ
(›í˛_obje˘_li°); 
	` li°_√xt
(opencl_object_list)) {

60 i‡(!(
obje˘
 = 
	` li°_gë
(
›í˛_obje˘_li°
)))

61 
	`∑nic
("opencl_object_get:Émpty object");

62 
obje˘_id
 = * (
uöt32_t
 *Ë
obje˘
;

63 i‡(
obje˘_id
 =
id
)

64  
obje˘
;

66 
	`Áèl
("›í˛_obje˘_gë:Ñeque°ed O≥nCL d€†nŸÉxi° (id=0x%x)", 
id
);

67  
NULL
;

68 
	}
}

72 *
	$›í˛_obje˘_gë_ty≥
(
›í˛_obj_íum
 
ty≥
)

74 *
obje˘
;

75 
uöt32_t
 
obje˘_id
;

78 
	` li°_hód
(
›í˛_obje˘_li°
); !
	` li°_eﬁ
(›í˛_obje˘_li°); 
	` li°_√xt
(opencl_object_list)) {

79 i‡(!(
obje˘
 = 
	` li°_gë
(
›í˛_obje˘_li°
)))

80 
	`∑nic
("opencl_object_get_type:Émpty object");

81 
obje˘_id
 = * (
uöt32_t
 *Ë
obje˘
;

82 i‡(
obje˘_id
 >> 16 =
ty≥
)

83  
obje˘
;

88  
NULL
;

89 
	}
}

95 
uöt32_t
 
	$›í˛_obje˘_√w_id
(
›í˛_obj_íum
 
ty≥
)

97 
uöt32_t
 
›í˛_cuºít_obje˘_id
;

98 
uöt32_t
 
id
;

100 
id
 = (
ty≥
 << 16Ë| 
›í˛_cuºít_obje˘_id
;

101 
›í˛_cuºít_obje˘_id
++;

102 i‡(
›í˛_cuºít_obje˘_id
 > 0xffff)

103 
	`Áèl
("opencl_object_new_id:Åoo many OpenCL objects");

104  
id
;

105 
	}
}

110 
	$›í˛_obje˘_‰ì_Æl
()

112 *
obje˘
;

115 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_PLATFORM
)))

116 
	`›í˛_∂©f‹m_‰ì
((
›í˛_∂©f‹m_t
 *Ë
obje˘
);

119 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_DEVICE
)))

120 
	`›í˛_devi˚_‰ì
((
›í˛_devi˚_t
 *Ë
obje˘
);

123 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_CONTEXT
)))

124 
	`›í˛_c⁄ãxt_‰ì
((
›í˛_c⁄ãxt_t
 *Ë
obje˘
);

127 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_COMMAND_QUEUE
)))

128 
	`›í˛_comm™d_queue_‰ì
((
›í˛_comm™d_queue_t
 *Ë
obje˘
);

131 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_PROGRAM
)))

132 
	`›í˛_¥ogøm_‰ì
((
›í˛_¥ogøm_t
 *Ë
obje˘
);

135 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_KERNEL
)))

136 
	`›í˛_kî√l_‰ì
((
›í˛_kî√l_t
 *Ë
obje˘
);

139 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_MEM
)))

140 
	`›í˛_mem_‰ì
((
›í˛_mem_t
 *Ë
obje˘
);

143 (
obje˘
 = 
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_EVENT
)))

144 
	`›í˛_evít_‰ì
((
›í˛_evít_t
 *Ë
obje˘
);

147 i‡(
	` li°_cou¡
(
›í˛_obje˘_li°
))

148 
	`∑nic
("opencl_object_free_all: objectsÑemaining inÅheÜist");

150 
	}
}

157 
›í˛_∂©f‹m_t
 *
	g›í˛_∂©f‹m
;

160 
›í˛_∂©f‹m_t
 *
	$›í˛_∂©f‹m_¸óã
()

162 
›í˛_∂©f‹m_t
 *
∂©f‹m
;

164 
∂©f‹m
 = 
	`ˇŒoc
(1, (
›í˛_∂©f‹m_t
));

165 
∂©f‹m
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_PLATFORM
);

166 
	`›í˛_obje˘_add
(
∂©f‹m
);

167  
∂©f‹m
;

168 
	}
}

171 
	$›í˛_∂©f‹m_‰ì
(
›í˛_∂©f‹m_t
 *
∂©f‹m
)

173 
	`›í˛_obje˘_ªmove
(
∂©f‹m
);

174 
	`‰ì
(
∂©f‹m
);

175 
	}
}

178 
uöt32_t
 
	$›í˛_∂©f‹m_gë_öfo
(
›í˛_∂©f‹m_t
 *
∂©f‹m
, 
uöt32_t
 
«me
, 
mem_t
 *
mem
, uöt32_à
addr
, uöt32_à
size
)

180 *
∂©f‹m_¥ofûe
 = "FULL_PROFILE";

181 *
∂©f‹m_vîsi⁄
 = "O≥nCL 1.1 Mu…i2Sim-v" 
VERSION
;

182 *
∂©f‹m_«me
 = "Multi2Sim";

183 *
∂©f‹m_víd‹
 = "www.multi2sim.org";

184 *
∂©f‹m_exãnsi⁄s
 = "";

186 
uöt32_t
 
size_ªt
 = 0;

187 *
öfo
;

189 
«me
) {

192 
öfo
 = 
∂©f‹m_¥ofûe
;

196 
öfo
 = 
∂©f‹m_vîsi⁄
;

200 
öfo
 = 
∂©f‹m_«me
;

204 
öfo
 = 
∂©f‹m_víd‹
;

208 
öfo
 = 
∂©f‹m_exãnsi⁄s
;

212 
öfo
 = 
NULL
;

213 
	`Áèl
("opencl_platform_get_info: invalid value for 'name' (0x%x)\n%s",

214 
«me
, 
îr_›í˛_∑øm_nŸe
);

218 
	`as£π
(
öfo
);

219 
size_ªt
 = 
	`°æí
(
öfo
) + 1;

220 i‡(
addr
 && 
size
 >
size_ªt
)

221 
	`mem_wrôe
(
mem
, 
addr
, 
size_ªt
, 
öfo
);

222  
size_ªt
;

223 
	}
}

232 
›í˛_devi˚_t
 *
	$›í˛_devi˚_¸óã
()

234 
›í˛_devi˚_t
 *
devi˚
;

236 
devi˚
 = 
	`ˇŒoc
(1, (
›í˛_devi˚_t
));

237 
devi˚
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_DEVICE
);

238 
	`›í˛_obje˘_add
(
devi˚
);

239  
devi˚
;

240 
	}
}

244 
	$›í˛_devi˚_‰ì
(
›í˛_devi˚_t
 *
devi˚
)

246 
	`›í˛_obje˘_ªmove
(
devi˚
);

247 
	`‰ì
(
devi˚
);

248 
	}
}

251 
uöt32_t
 
	$›í˛_devi˚_gë_öfo
(
›í˛_devi˚_t
 *
devi˚
, 
uöt32_t
 
«me
, 
mem_t
 *
mem
, uöt32_à
addr
, uöt32_à
size
)

253 
uöt32_t
 
max_compuã_unôs
 = 1;

254 
uöt32_t
 
max_w‹k_group_size
 = 256 * 256;

255 
uöt32_t
 
max_w‹k_ôem_dimísi⁄s
 = 3;

256 
uöt32_t
 
max_w‹k_ôem_sizes
[3];

257 
uöt32_t
 
loˇl_mem_ty≥
 = 1;

258 
uöt32_t
 
loˇl_mem_size
 = 32 * 1024;

259 
uöt32_t
 
image_suµ‹t
 = 1;

260 *
devi˚_«me
 = "Multi2Sim Virtual GPU Device";

261 *
devi˚_víd‹
 = "www.multi2sim.org";

262 *
devi˚_exãnsi⁄s
 = "cl_amd_fp64 cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics "

266 *
devi˚_vîsi⁄
 = "OpenCL 1.1 ATI-Stream-v2.3 (451)";

267 *
drivî_vîsi⁄
 = 
VERSION
;

269 
uöt32_t
 
size_ªt
 = 0;

270 *
öfo
 = 
NULL
;

272 
«me
) {

275 
size_ªt
 = 4;

276 
öfo
 = &
max_compuã_unôs
;

280 
size_ªt
 = 4;

281 
öfo
 = &
max_w‹k_ôem_dimísi⁄s
;

285 
size_ªt
 = 4;

286 
öfo
 = &
max_w‹k_group_size
;

290 
max_w‹k_ôem_sizes
[0] = 256;

291 
max_w‹k_ôem_sizes
[1] = 256;

292 
max_w‹k_ôem_sizes
[2] = 256;

293 
size_ªt
 = 12;

294 
öfo
 = 
max_w‹k_ôem_sizes
;

298 
size_ªt
 = 4;

299 
öfo
 = &
image_suµ‹t
;

303 
size_ªt
 = 4;

304 
öfo
 = &
loˇl_mem_ty≥
;

308 
size_ªt
 = 4;

309 
öfo
 = &
loˇl_mem_size
;

313 
size_ªt
 = 
	`°æí
(
devi˚_«me
) + 1;

314 
öfo
 = 
devi˚_«me
;

318 
size_ªt
 = 
	`°æí
(
devi˚_víd‹
) + 1;

319 
öfo
 = 
devi˚_víd‹
;

323 
size_ªt
 = 
	`°æí
(
drivî_vîsi⁄
) + 1;

324 
öfo
 = 
drivî_vîsi⁄
;

328 
size_ªt
 = 
	`°æí
(
devi˚_vîsi⁄
) + 1;

329 
öfo
 = 
devi˚_vîsi⁄
;

333 
size_ªt
 = 
	`°æí
(
devi˚_exãnsi⁄s
) + 1;

334 
öfo
 = 
devi˚_exãnsi⁄s
;

338 
	`Áèl
("opencl_device_get_info: invalid orÇot implemented value for 'name' (0x%x)\n%s",

339 
«me
, 
îr_›í˛_nŸe
);

344 
	`as£π
(
öfo
);

345 i‡(
addr
 && 
size
 >
size_ªt
)

346 
	`mem_wrôe
(
mem
, 
addr
, 
size_ªt
, 
öfo
);

347  
size_ªt
;

348 
	}
}

357 
›í˛_c⁄ãxt_t
 *
	$›í˛_c⁄ãxt_¸óã
()

359 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

361 
c⁄ãxt
 = 
	`ˇŒoc
(1, (
›í˛_c⁄ãxt_t
));

362 
c⁄ãxt
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_CONTEXT
);

363 
c⁄ãxt
->
ªf_cou¡
 = 1;

364 
	`›í˛_obje˘_add
(
c⁄ãxt
);

365  
c⁄ãxt
;

366 
	}
}

370 
	$›í˛_c⁄ãxt_‰ì
(
›í˛_c⁄ãxt_t
 *
c⁄ãxt
)

372 
	`›í˛_obje˘_ªmove
(
c⁄ãxt
);

373 
	`‰ì
(
c⁄ãxt
);

374 
	}
}

377 
uöt32_t
 
	$›í˛_c⁄ãxt_gë_öfo
(
›í˛_c⁄ãxt_t
 *
c⁄ãxt
, 
uöt32_t
 
«me
, 
mem_t
 *
mem
, uöt32_à
addr
, uöt32_à
size
)

379 
uöt32_t
 
num_devi˚s
 = 1;

381 
uöt32_t
 
size_ªt
 = 0;

382 *
öfo
 = 
NULL
;

384 
«me
) {

387 
size_ªt
 = 4;

388 
öfo
 = &
c⁄ãxt
->
devi˚_id
;

392 
size_ªt
 = 4;

393 
öfo
 = &
num_devi˚s
;

399 
	`Áèl
("opencl_context_get_info: invalid orÇot implemented value for 'name' (0x%x)\n%s",

400 
«me
, 
îr_›í˛_∑øm_nŸe
);

404 
	`as£π
(
öfo
);

405 i‡(
addr
 && 
size
 >
size_ªt
)

406 
	`mem_wrôe
(
mem
, 
addr
, 
size_ªt
, 
öfo
);

407  
size_ªt
;

408 
	}
}

413 
	$›í˛_c⁄ãxt_£t_¥›îtõs
(
›í˛_c⁄ãxt_t
 *
c⁄ãxt
, 
mem_t
 *
mem
, 
uöt32_t
 
addr
)

415 
uöt32_t
 
¥›îty
;

416 
uöt32_t
 
vÆue
;

418 
addr
) {

421 
	`mem_ªad
(
iß_mem
, 
addr
, 4, &
¥›îty
);

422 i‡(!
¥›îty
)

424 
	`mem_ªad
(
iß_mem
, 
addr
 + 4, 4, &
vÆue
);

425 
addr
 += 8;

428 
¥›îty
) {

431 
c⁄ãxt
->
∂©f‹m_id
 = 
vÆue
;

432 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PLATFORM
, 
vÆue
);

433 
	`›í˛_debug
("Ör›îty CL_CONTEXT_PLATFORMássig√d: 0x%x\n", 
vÆue
);

437 
	`Áèl
("›í˛_c⁄ãxt_ªad_¥›îtõs: invÆidÖr›îty (0x%x)\n", 
¥›îty
);

440 
	}
}

448 
›í˛_comm™d_queue_t
 *
	$›í˛_comm™d_queue_¸óã
()

450 
›í˛_comm™d_queue_t
 *
comm™d_queue
;

452 
comm™d_queue
 = 
	`ˇŒoc
(1, (
›í˛_comm™d_queue_t
));

453 
comm™d_queue
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_COMMAND_QUEUE
);

454 
comm™d_queue
->
ªf_cou¡
 = 1;

455 
	`›í˛_obje˘_add
(
comm™d_queue
);

456  
comm™d_queue
;

457 
	}
}

461 
	$›í˛_comm™d_queue_‰ì
(
›í˛_comm™d_queue_t
 *
comm™d_queue
)

463 
	`›í˛_obje˘_ªmove
(
comm™d_queue
);

464 
	`‰ì
(
comm™d_queue
);

465 
	}
}

472 
›í˛_¥ogøm_t
 *
	$›í˛_¥ogøm_¸óã
()

474 
›í˛_¥ogøm_t
 *
¥ogøm
;

476 
¥ogøm
 = 
	`ˇŒoc
(1, (
›í˛_¥ogøm_t
));

477 
¥ogøm
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_PROGRAM
);

478 
¥ogøm
->
ªf_cou¡
 = 1;

479 
	`›í˛_obje˘_add
(
¥ogøm
);

480  
¥ogøm
;

481 
	}
}

484 
	$›í˛_¥ogøm_‰ì
(
›í˛_¥ogøm_t
 *
¥ogøm
)

486 i‡(
¥ogøm
->
bö¨y_fûe_ñf
)

487 
	`ñf_˛o£
(
¥ogøm
->
bö¨y_fûe_ñf
);

488 i‡(
¥ogøm
->
bö¨y_fûe
) {

489 
	`f˛o£
(
¥ogøm
->
bö¨y_fûe
);

490 
	`u∆ök
(
¥ogøm
->
bö¨y_fûe_«me
);

492 
	`›í˛_obje˘_ªmove
(
¥ogøm
);

493 
	`‰ì
(
¥ogøm
);

494 
	}
}

496 *
	gîr_›í˛_evîgªí_f‹m©
 =

503 
	$›í˛_¥ogøm_buûd
(
›í˛_¥ogøm_t
 *
¥ogøm
)

506 
¥ogøm
->
bö¨y_fûe_ñf
 = 
	`ñf_›í
’rogøm->
bö¨y_fûe_«me
);

507 i‡(
¥ogøm
->
bö¨y_fûe_ñf
->
ehdr
.
e_machöe
 != 0x3f1)

508 
	`Áèl
("%s: invÆid bö¨y fûe.\n%s", 
__FUNCTION__
,

509 
îr_›í˛_evîgªí_f‹m©
);

510 
	}
}

517 *
	gîr_›í˛_ñf_symbﬁ
 =

524 
FILE
 *
	$›í˛_¥ogøm_ªad_symbﬁ
(
›í˛_¥ogøm_t
 *
¥ogøm
, *
symbﬁ_«me
,

525 *
fûe_«me
, 
fûe_«me_size
)

527 
ñf_symbﬁ_t
 *
symbﬁ
;

528 *
buf
;

529 
FILE
 *
f
;

532 
	`as£π
(
¥ogøm
->
bö¨y_fûe_ñf
);

533 
symbﬁ
 = 
	`ñf_gë_symbﬁ_by_«me
(
¥ogøm
->
bö¨y_fûe_ñf
, 
symbﬁ_«me
);

534 i‡(!
symbﬁ
)

535 
	`Áèl
("%s: ELF symbﬁ '%s'ÇŸ found.\n%s", 
__FUNCTION__
,

536 
symbﬁ_«me
, 
îr_›í˛_ñf_symbﬁ
);

539 
f
 = 
	`¸óã_ãmp_fûe
(
fûe_«me
, 
fûe_«me_size
);

540 
buf
 = 
	`ñf_£˘i⁄_ªad_off£t
(
¥ogøm
->
bö¨y_fûe_ñf
, 
symbﬁ
->
£˘i⁄
,

541 
symbﬁ
->
vÆue
, symbﬁ->
size
);

542 
	`wrôe_buf„r
(
fûe_«me
, 
buf
, 
symbﬁ
->
size
);

543 
	`ñf_‰ì_buf„r
(
buf
);

546  
f
;

547 
	}
}

554 
›í˛_kî√l_t
 *
	$›í˛_kî√l_¸óã
()

556 
›í˛_kî√l_t
 *
kî√l
;

558 
kî√l
 = 
	`ˇŒoc
(1, (
›í˛_kî√l_t
));

559 
kî√l
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_KERNEL
);

560 
kî√l
->
ªf_cou¡
 = 1;

561 
kî√l
->
¨g_li°
 = 
	`li°_¸óã
(10);

562 
	`›í˛_obje˘_add
(
kî√l
);

563  
kî√l
;

564 
	}
}

567 
	$›í˛_kî√l_‰ì
(
›í˛_kî√l_t
 *
kî√l
)

569 
i
;

572 
i
 = 0; i < 
	`li°_cou¡
(
kî√l
->
¨g_li°
); i++)

573 
	`›í˛_kî√l_¨g_‰ì
((
›í˛_kî√l_¨g_t
 *Ë
	`li°_gë
(
kî√l
->
¨g_li°
, 
i
));

574 
	`li°_‰ì
(
kî√l
->
¨g_li°
);

577 i‡(
kî√l
->
ˇl_abi
)

578 
	`ˇl_abi_‰ì
(
kî√l
->
ˇl_abi
);

581 i‡(
kî√l
->
mëad©a_fûe
) {

582 
	`f˛o£
(
kî√l
->
mëad©a_fûe
);

583 
	`u∆ök
(
kî√l
->
mëad©a_fûe_«me
);

585 i‡(
kî√l
->
kî√l_fûe
) {

586 
	`f˛o£
(
kî√l
->
kî√l_fûe
);

587 
	`u∆ök
(
kî√l
->
kî√l_fûe_«me
);

589 i‡(
kî√l
->
func_fûe
) {

590 
	`f˛o£
(
kî√l
->
func_fûe
);

591 
	`u∆ök
(
kî√l
->
func_fûe_«me
);

595 
	`›í˛_obje˘_ªmove
(
kî√l
);

596 
	`‰ì
(
kî√l
);

597 
	}
}

600 
›í˛_kî√l_¨g_t
 *
	$›í˛_kî√l_¨g_¸óã
(*
«me
)

602 
›í˛_kî√l_¨g_t
 *
¨g
;

603 
¨g
 = 
	`ˇŒoc
(1, (
›í˛_kî√l_¨g_t
Ë+ 
	`°æí
(
«me
) + 1);

604 
	`°r˝y
(
¨g
->
«me
,Çame);

605  
¨g
;

606 
	}
}

609 
	$›í˛_kî√l_¨g_‰ì
(
›í˛_kî√l_¨g_t
 *
¨g
)

611 
	`‰ì
(
¨g
);

612 
	}
}

617 
	#OPENCL_KERNEL_METADATA_TOKEN_COUNT
(
_tc
) \

618 i‡(
tokí_cou¡
 !(
_tc
)) \

619 
	`Áèl
("%s: meta dataÉntry '%s'Éxpects %dÅokens", \

620 
__FUNCTION__
, 
löe_±rs
[0], (
_tc
));

	)

621 
	#OPENCL_KERNEL_METADATA_NOT_SUPPORTED
(
_idx
) \

622 
	`Áèl
("%s: meta dataÉntry '%s',Åoken %d: value '%s'Çot supported.\n%s", \

623 
__FUNCTION__
, 
löe_±rs
[0], (
_idx
),Üine_ptrs[(_idx)], \

624 
îr_›í˛_kî√l_mëad©a_nŸe
);

	)

625 
	#OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(
_idx
, 
_°r
) \

626 i‡(
	`°rcmp
(
löe_±rs
[(
_idx
)], (
_°r
))) \

627 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED
(
_idx
);

	)

629 *
	gîr_›í˛_kî√l_mëad©a_nŸe
 =

635 
	$›í˛_kî√l_lﬂd_mëad©a
(
›í˛_kî√l_t
 *
kî√l
)

637 
FILE
 *
f
;

638 
löe
[
MAX_STRING_SIZE
];

639 *
löe_±rs
[
MAX_STRING_SIZE
];

640 
tokí_cou¡
;

641 
›í˛_kî√l_¨g_t
 *
¨g
;

644 
f
 = 
	`f›í
(
kî√l
->
mëad©a_fûe_«me
, "rt");

648 
löe_±rs
[0] = 
	`fgës
(
löe
, 
MAX_STRING_SIZE
, 
f
);

649 i‡(!
löe_±rs
[0])

653 
löe_±rs
[0] = 
	`°πok
(line_ptrs[0], ":;\n");

654 
tokí_cou¡
 = 1; (
löe_±rs
[tokí_cou¡] = 
	`°πok
(
NULL
, ":\n"));Åoken_count++);

657 i‡(!
löe_±rs
[0] ||

658 !
	`°rcmp
(
löe_±rs
[0], "ARGSTART") ||

659 !
	`°rcmp
(
löe_±rs
[0], "version") ||

660 !
	`°rcmp
(
löe_±rs
[0], "device") ||

661 !
	`°rcmp
(
löe_±rs
[0], "uniqueid") ||

662 !
	`°rcmp
(
löe_±rs
[0], "uavid") ||

663 !
	`°rcmp
(
löe_±rs
[0], "ARGEND"))

667 i‡(!
	`°rcmp
(
löe_±rs
[0], "memory")) {

668 
	`OPENCL_KERNEL_METADATA_TOKEN_COUNT
(3);

669 i‡(!
	`°rcmp
(
löe_±rs
[1], "hwprivate")) {

670 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(2, "0");

671 } i‡(!
	`°rcmp
(
löe_±rs
[1], "hwlocal")) {

672 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(2, "0");

674 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED
(1);

679 i‡(!
	`°rcmp
(
löe_±rs
[0], "value")) {

680 
	`OPENCL_KERNEL_METADATA_TOKEN_COUNT
(6);

681 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(3, "1");

682 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(4, "1");

683 
¨g
 = 
	`›í˛_kî√l_¨g_¸óã
(
löe_±rs
[1]);

684 
¨g
->
köd
 = 
OPENCL_KERNEL_ARG_KIND_VALUE
;

685 
	`li°_add
(
kî√l
->
¨g_li°
, 
¨g
);

686 
	`›í˛_debug
("árg %d: '%s', value ofÅype %s\n",

687 
	`li°_cou¡
(
kî√l
->
¨g_li°
Ë- 1, 
¨g
->
«me
, 
löe_±rs
[2]);

692 i‡(!
	`°rcmp
(
löe_±rs
[0], "pointer")) {

693 
	`OPENCL_KERNEL_METADATA_TOKEN_COUNT
(9);

694 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(3, "1");

695 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(4, "1");

696 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(7, "1");

697 
¨g
 = 
	`›í˛_kî√l_¨g_¸óã
(
löe_±rs
[1]);

698 
¨g
->
köd
 = 
OPENCL_KERNEL_ARG_KIND_POINTER
;

699 
¨g
->
ñem_size
 = 
	`©oi
(
löe_±rs
[8]);

700 
	`li°_add
(
kî√l
->
¨g_li°
, 
¨g
);

701 
	`›í˛_debug
("árg %d: '%s',ÖointerÅo %s values (%d-byte group) in ",

702 
	`li°_cou¡
(
kî√l
->
¨g_li°
Ë- 1, 
¨g
->
«me
, 
löe_±rs
[2],

703 
¨g
->
ñem_size
);

704 i‡(!
	`°rcmp
(
löe_±rs
[6], "uav")) {

705 
¨g
->
mem_sc›e
 = 
OPENCL_MEM_SCOPE_GLOBAL
;

706 
	`›í˛_debug
("global");

707 } i‡(!
	`°rcmp
(
löe_±rs
[6], "hl")) {

708 
¨g
->
mem_sc›e
 = 
OPENCL_MEM_SCOPE_LOCAL
;

709 
	`›í˛_debug
("local");

711 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED
(6);

712 
	`›í˛_debug
(" memory\n");

717 i‡(!
	`°rcmp
(
löe_±rs
[0], "function")) {

718 
	`OPENCL_KERNEL_METADATA_TOKEN_COUNT
(3);

719 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ
(1, "1");

720 
kî√l
->
func_uniqueid
 = 
	`©oi
(
löe_±rs
[2]);

725 
	`w¨nög
("kernel '%s': unknown meta dataÉntry '%s'",

726 
kî√l
->
«me
, 
löe_±rs
[0]);

730 
	`f˛o£
(
f
);

731 
	}
}

734 
	$›í˛_kî√l_lﬂd_func_mëad©a
(
›í˛_kî√l_t
 *
kî√l
)

736 
FILE
 *
f
;

737 
löe
[
MAX_STRING_SIZE
];

738 *
löe_±rs
[
MAX_STRING_SIZE
];

739 
tokí_cou¡
;

742 
f
 = 
	`f›í
(
kî√l
->
func_fûe_«me
, "rt");

743 i‡(!
f
)

744 
	`Áèl
("%s: u«bÀÅÿ›í mëad©®fûe", 
__FUNCTION__
);

748 
löe_±rs
[0] = 
	`fgës
(
löe
, 
MAX_STRING_SIZE
, 
f
);

749 i‡(!
löe_±rs
[0])

753 
löe_±rs
[0] = 
	`°πok
(line_ptrs[0], ":;\n");

754 
tokí_cou¡
 = 1; (
löe_±rs
[tokí_cou¡] = 
	`°πok
(
NULL
, ":\n"));Åoken_count++);

757 i‡(!
löe_±rs
[0] ||

758 !
	`°rcmp
(
löe_±rs
[0], "ARGSTART") ||

759 !
	`°rcmp
(
löe_±rs
[0], "uniqueid") ||

760 !
	`°rcmp
(
löe_±rs
[0], "ARGEND"))

764 i‡(!
	`°rcmp
(
löe_±rs
[0], "memory")) {

765 
	`OPENCL_KERNEL_METADATA_TOKEN_COUNT
(3);

766 i‡(!
	`°rcmp
(
löe_±rs
[1], "hwlocal")) {

767 
kî√l
->
func_mem_loˇl
 = 
	`©oi
(
löe_±rs
[2]);

768 
kî√l
->
loˇl_mem_t›
 = kî√l->
func_mem_loˇl
;

769 
	`›í˛_debug
("kernel '%s' using %d bytesÜocal memory\n",

770 
kî√l
->
«me
, kî√l->
func_mem_loˇl
);

772 
	`OPENCL_KERNEL_METADATA_NOT_SUPPORTED
(1);

777 
	`w¨nög
("kernel '%s': unknown function meta dataÉntry '%s'",

778 
kî√l
->
«me
, 
löe_±rs
[0]);

782 
	`f˛o£
(
f
);

783 
	}
}

787 
	$›í˛_kî√l_lﬂd
(
›í˛_kî√l_t
 *
kî√l
, *
kî√l_«me
)

789 
›í˛_¥ogøm_t
 *
¥ogøm
;

790 
symbﬁ_«me
[
MAX_STRING_SIZE
];

793 
	`°∫˝y
(
kî√l
->
«me
, 
kî√l_«me
, 
MAX_STRING_SIZE
);

794 
¥ogøm
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PROGRAM
, 
kî√l
->
¥ogøm_id
);

797 
	`¢¥ötf
(
symbﬁ_«me
, 
MAX_STRING_SIZE
, "__O≥nCL_%s_mëad©a", 
kî√l_«me
);

798 
kî√l
->
mëad©a_fûe
 = 
	`›í˛_¥ogøm_ªad_symbﬁ
(
¥ogøm
, 
symbﬁ_«me
,

799 
kî√l
->
mëad©a_fûe_«me
, 
MAX_PATH_SIZE
);

802 
	`¢¥ötf
(
symbﬁ_«me
, 
MAX_STRING_SIZE
, "__O≥nCL_%s_kî√l", 
kî√l_«me
);

803 
kî√l
->
kî√l_fûe
 = 
	`›í˛_¥ogøm_ªad_symbﬁ
(
¥ogøm
, 
symbﬁ_«me
,

804 
kî√l
->
kî√l_fûe_«me
, 
MAX_PATH_SIZE
);

807 i‡(!
kî√l
->
mëad©a_fûe
 || !kî√l->
kî√l_fûe
)

808 
	`Áèl
("%s: kî√»'%s'ÇŸ found i¿bö¨y.\n%s", 
__FUNCTION__
,

809 
kî√l_«me
, 
îr_›í˛_∑øm_nŸe
);

812 
kî√l
->
ˇl_abi
 = 
	`ˇl_abi_¸óã
();

813 
	`ˇl_abi_∑r£_ñf
(
kî√l
->
ˇl_abi
, kî√l->
kî√l_fûe_«me
);

816 
	`›í˛_kî√l_lﬂd_mëad©a
(
kî√l
);

819 
	`¢¥ötf
(
symbﬁ_«me
, 
MAX_STRING_SIZE
, "__O≥nCL_%d_fmëad©a", 
kî√l
->
func_uniqueid
);

820 
kî√l
->
func_fûe
 = 
	`›í˛_¥ogøm_ªad_symbﬁ
(
¥ogøm
, 
symbﬁ_«me
,

821 
kî√l
->
func_fûe_«me
, 
MAX_PATH_SIZE
);

824 
	`›í˛_kî√l_lﬂd_func_mëad©a
(
kî√l
);

825 
	}
}

828 
uöt32_t
 
	$›í˛_kî√l_gë_w‹k_group_öfo
(
›í˛_kî√l_t
 *
kî√l
, 
uöt32_t
 
«me
,

829 
mem_t
 *
mem
, 
uöt32_t
 
addr
, uöt32_à
size
)

831 
uöt32_t
 
size_ªt
 = 0;

832 *
öfo
 = 
NULL
;

834 
uöt64_t
 
loˇl_mem_size
 = 0;

835 
uöt32_t
 
w‹k_group_size
 = 256;

837 
«me
) {

840 
	`w¨nög
("%s: CL_KERNEL_WORK_GROUP_SIZE: %d isÑeturned, butÅhis should be obtained\n"

842 
__FUNCTION__
, 
w‹k_group_size
);

843 
öfo
 = &
w‹k_group_size
;

844 
size_ªt
 = 4;

849 
i
;

850 
›í˛_kî√l_¨g_t
 *
¨g
;

853 
loˇl_mem_size
 = 
kî√l
->
func_mem_loˇl
;

854 
i
 = 0; i < 
	`li°_cou¡
(
kî√l
->
¨g_li°
); i++) {

855 
¨g
 = 
	`li°_gë
(
kî√l
->
¨g_li°
, 
i
);

856 i‡(
¨g
->
mem_sc›e
 =
OPENCL_MEM_SCOPE_LOCAL
)

857 
loˇl_mem_size
 +
¨g
->
size
;

861 
öfo
 = &
loˇl_mem_size
;

862 
size_ªt
 = 8;

870 
	`Áèl
("%s: invalid orÇot implemented value for 'name' (0x%x)\n%s",

871 
__FUNCTION__
, 
«me
, 
îr_›í˛_∑øm_nŸe
);

875 
	`as£π
(
öfo
);

876 i‡(
addr
 && 
size
 >
size_ªt
)

877 
	`mem_wrôe
(
mem
, 
addr
, 
size_ªt
, 
öfo
);

878  
size_ªt
;

879 
	}
}

886 
›í˛_mem_t
 *
	$›í˛_mem_¸óã
()

888 
›í˛_mem_t
 *
mem
;

890 
mem
 = 
	`ˇŒoc
(1, (
›í˛_mem_t
));

891 
mem
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_MEM
);

892 
mem
->
ªf_cou¡
 = 1;

893 
	`›í˛_obje˘_add
(
mem
);

894  
mem
;

895 
	}
}

898 
	$›í˛_mem_‰ì
(
›í˛_mem_t
 *
mem
)

900 
	`›í˛_obje˘_ªmove
(
mem
);

901 
	`‰ì
(
mem
);

902 
	}
}

909 
›í˛_evít_t
 *
	$›í˛_evít_¸óã
(
›í˛_evít_köd_íum
 
köd
)

911 
›í˛_evít_t
 *
evít
;

913 
evít
 = 
	`ˇŒoc
(1, (
›í˛_evít_t
));

914 
evít
->
id
 = 
	`›í˛_obje˘_√w_id
(
OPENCL_OBJ_EVENT
);

915 
evít
->
ªf_cou¡
 = 1;

916 
evít
->
köd
 = kind;

917 
	`›í˛_obje˘_add
(
evít
);

918  
evít
;

919 
	}
}

922 
	$›í˛_evít_‰ì
(
›í˛_evít_t
 *
evít
)

924 
	`›í˛_obje˘_ªmove
(
evít
);

925 
	`‰ì
(
evít
);

926 
	}
}

929 
uöt32_t
 
	$›í˛_evít_gë_¥ofûög_öfo
(
›í˛_evít_t
 *
evít
, 
uöt32_t
 
«me
,

930 
mem_t
 *
mem
, 
uöt32_t
 
addr
, uöt32_à
size
)

932 
uöt32_t
 
size_ªt
 = 0;

933 *
öfo
 = 
NULL
;

935 
«me
) {

938 
size_ªt
 = 8;

939 
öfo
 = &
evít
->
time_queued
;

943 
size_ªt
 = 8;

944 
öfo
 = &
evít
->
time_submô
;

948 
size_ªt
 = 8;

949 
öfo
 = &
evít
->
time_°¨t
;

953 
size_ªt
 = 8;

954 
öfo
 = &
evít
->
time_íd
;

958 
	`Áèl
("%s: invalid orÇot implemented value for 'name' (0x%x)\n%s",

959 
__FUNCTION__
, 
«me
, 
îr_›í˛_∑øm_nŸe
);

963 
	`as£π
(
öfo
);

964 i‡(
addr
 && 
size
 >
size_ªt
)

965 
	`mem_wrôe
(
mem
, 
addr
, 
size_ªt
, 
öfo
);

966  
size_ªt
;

967 
	}
}

970 
uöt64_t
 
	$›í˛_evít_timî
()

972  
	`ke_timî
() * 1000;

973 
	}
}

	@libgpukernel/opencl.c

20 
	~<gpukî√l-loˇl.h
>

21 
	~<m2skî√l.h
>

22 
	~<as£π.h
>

23 
	~<debug.h
>

29 
	#SYS_OPENCL_IMPL_VERSION_MAJOR
 1

	)

30 
	#SYS_OPENCL_IMPL_VERSION_MINOR
 0

	)

31 
	#SYS_OPENCL_IMPL_VERSION_BUILD
 0

	)

32 
	#SYS_OPENCL_IMPL_VERSION
 ((
SYS_OPENCL_IMPL_VERSION_MAJOR
 << 16) | \

33 (
SYS_OPENCL_IMPL_VERSION_MINOR
 << 8) | \

34 
SYS_OPENCL_IMPL_VERSION_BUILD
)

	)

38 
	g›í˛_debug_ˇãg‹y
;

40 
	$›í˛_debug_¨øy
(
√Àm
, *
¨øy
)

42 *
comma
 = "";

43 
i
;

45 
	`›í˛_debug
("{");

46 
i
 = 0; i < 
√Àm
; i++) {

47 
	`›í˛_debug
("%s%d", 
comma
, 
¨øy
[
i
]);

48 
comma
 = ", ";

50 
	`›í˛_debug
("}");

51 
	}
}

55 *
	g›í˛_func_«mes
[] = {

56 
	#DEF_OPENCL_FUNC
(
_«me
, 
_¨gc
Ë#_«me,

	)

57 
	~"›í˛.d©
"

58 #unde‡
DEF_OPENCL_FUNC


64 
	g›í˛_func_¨gc
[] = {

65 
	#DEF_OPENCL_FUNC
(
_«me
, 
_¨gc
Ë_¨gc,

	)

66 
	~"›í˛.d©
"

67 #unde‡
DEF_OPENCL_FUNC


73 *
	gîr_›í˛_nŸe
 =

80 *
	gîr_›í˛_∑øm_nŸe
 =

87 *
	gîr_›í˛_compûî
 =

101 *
	gîr_›í˛_bö¨y_nŸe
 =

107 *
	gîr_›í˛_vîsi⁄_nŸe
 =

116 
	#OPENCL_PARAM_NOT_SUPPORTED
(
p
) \

117 
	`Áèl
("%s:ÇŸ suµ‹ãd f‹ '" #∞"' = 0x%x\n%s", 
îr_¥efix
, 
p
, 
îr_›í˛_nŸe
);

	)

118 
	#OPENCL_PARAM_NOT_SUPPORTED_EQ
(
p
, 
v
) \

119 { i‡((
p
Ë=(
v
)Ë
	`Áèl
("%s:ÇŸ suµ‹ãd f‹ '" #∞"' = 0x%x\n%s", 
îr_¥efix
, (v), 
îr_›í˛_∑øm_nŸe
); }

	)

120 
	#OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
p
, 
v
) \

121 { i‡((
p
Ë!(
v
)Ë
	`Áèl
("%s:ÇŸ suµ‹ãd f‹ '" #∞"' !0x%x\n%s", 
îr_¥efix
, (v), 
îr_›í˛_∑øm_nŸe
); }

	)

122 
	#OPENCL_PARAM_NOT_SUPPORTED_LT
(
p
, 
v
) \

123 { i‡((
p
Ë< (
v
)Ë
	`Áèl
("%s:ÇŸ suµ‹ãd f‹ '" #∞"' < %d\n%s", 
îr_¥efix
, (v), 
îr_›í˛_∑øm_nŸe
); }

	)

124 
	#OPENCL_PARAM_NOT_SUPPORTED_OOR
(
p
, 
mö
, 
max
) \

125 { i‡((
p
Ë< (
mö
Ë|| (pË> (
max
)Ë
	`Áèl
("%s:Çot supported for '" #p "' out ofÑange [%d:%d]\n%s", \

126 
îr_¥efix
, (
mö
), (
max
), 
îr_›í˛_∑øm_nŸe
); }

	)

127 
	#OPENCL_PARAM_NOT_SUPPORTED_FLAG
(
p
, 
Êag
, 
«me
) \

128 { i‡((
p
Ë& (
Êag
)Ë
	`Áèl
("%s: fœg '" 
«me
 "'ÇŸ suµ‹ãd\n%s", 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
); }

	)

136 
	$›í˛_func_run
(
code
, *
¨gs
)

138 
îr_¥efix
[
MAX_STRING_SIZE
];

139 *
func_«me
;

140 
uöt32_t
 
›í˛_suc˚ss
 = 0;

141 
func_code
, 
func_¨gc
;

142 
ªtvÆ
 = 0;

145 
	`as£π
(
code
 >
OPENCL_FUNC_FIRST
 && codê<
OPENCL_FUNC_LAST
);

146 
func_code
 = 
code
 - 
OPENCL_FUNC_FIRST
;

147 
func_«me
 = 
›í˛_func_«mes
[
func_code
];

148 
func_¨gc
 = 
›í˛_func_¨gc
[
func_code
];

149 
	`as£π
(
func_¨gc
 <
OPENCL_MAX_ARGS
);

150 
	`¢¥ötf
(
îr_¥efix
, 
MAX_STRING_SIZE
, "O≥nCL cÆ»'%s'", 
func_«me
);

153 
	`›í˛_debug
("%s\n", 
func_«me
);

154 
func_code
) {

157 
OPENCL_FUNC_˛GëPœtf‹mIDs
:

159 
num_íåõs
 = 
¨gs
[0];

160 
uöt32_t
 
∂©f‹ms
 = 
¨gs
[1];

161 
uöt32_t
 
num_∂©f‹ms
 = 
¨gs
[2];

162 
uöt32_t
 
›í˛_im∂_vîsi⁄
 = 
¨gs
[3];

164 
uöt32_t
 
⁄e
 = 1;

165 
›í˛_im∂_vîsi⁄_maj‹
 = 
›í˛_im∂_vîsi⁄
 >> 16;

166 
›í˛_im∂_vîsi⁄_mö‹
 = (
›í˛_im∂_vîsi⁄
 >> 8) & 0xff;

167 
›í˛_im∂_vîsi⁄_buûd
 = 
›í˛_im∂_vîsi⁄
 & 0xff;

170 i‡(
›í˛_im∂_vîsi⁄
 < 
SYS_OPENCL_IMPL_VERSION
)

171 
	`Áèl
("wrong Multi2Sim OpenCLÜibrary version (provided=%d.%d.%d,Ñequired=%d.%d.%d).\n%s",

172 
›í˛_im∂_vîsi⁄_maj‹
, 
›í˛_im∂_vîsi⁄_mö‹
, 
›í˛_im∂_vîsi⁄_buûd
,

173 
SYS_OPENCL_IMPL_VERSION_MAJOR
, 
SYS_OPENCL_IMPL_VERSION_MINOR
, 
SYS_OPENCL_IMPL_VERSION_BUILD
,

174 
îr_›í˛_vîsi⁄_nŸe
);

175 
	`›í˛_debug
(" 'libm2s-opencl' version: %d.%d.%d\n",

176 
›í˛_im∂_vîsi⁄_maj‹
, 
›í˛_im∂_vîsi⁄_mö‹
, 
›í˛_im∂_vîsi⁄_buûd
);

179 
	`›í˛_debug
("Çum_entries=%d,Ölatforms=0x%x,Çum_platforms=0x%x, version=0x%x\n",

180 
num_íåõs
, 
∂©f‹ms
, 
num_∂©f‹ms
, 
›í˛_im∂_vîsi⁄
);

181 i‡(
num_∂©f‹ms
)

182 
	`mem_wrôe
(
iß_mem
, 
num_∂©f‹ms
, 4, &
⁄e
);

183 i‡(
∂©f‹ms
 && 
num_íåõs
 > 0)

184 
	`mem_wrôe
(
iß_mem
, 
∂©f‹ms
, 4, &
›í˛_∂©f‹m
->
id
);

190 
OPENCL_FUNC_˛GëPœtf‹mInfo
:

192 
uöt32_t
 
∂©f‹m_id
 = 
¨gs
[0];

193 
uöt32_t
 
∑øm_«me
 = 
¨gs
[1];

194 
uöt32_t
 
∑øm_vÆue_size
 = 
¨gs
[2];

195 
uöt32_t
 
∑øm_vÆue
 = 
¨gs
[3];

196 
uöt32_t
 
∑øm_vÆue_size_ªt
 = 
¨gs
[4];

198 
›í˛_∂©f‹m_t
 *
∂©f‹m
;

199 
uöt32_t
 
size_ªt
;

201 
	`›í˛_debug
("Ölatform=0x%x,Öaram_name=0x%x,Öaram_value_size=0x%x,\n"

203 
∂©f‹m_id
, 
∑øm_«me
, 
∑øm_vÆue_size
, 
∑øm_vÆue
, 
∑øm_vÆue_size_ªt
);

205 
∂©f‹m
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PLATFORM
, 
∂©f‹m_id
);

206 
size_ªt
 = 
	`›í˛_∂©f‹m_gë_öfo
(
∂©f‹m
, 
∑øm_«me
, 
iß_mem
, 
∑øm_vÆue
, 
∑øm_vÆue_size
);

207 i‡(
∑øm_vÆue_size_ªt
)

208 
	`mem_wrôe
(
iß_mem
, 
∑øm_vÆue_size_ªt
, 4, &
size_ªt
);

214 
OPENCL_FUNC_˛GëDevi˚IDs
:

216 
uöt32_t
 
∂©f‹m
 = 
¨gs
[0];

217 
devi˚_ty≥
 = 
¨gs
[1];

218 
num_íåõs
 = 
¨gs
[2];

219 
uöt32_t
 
devi˚s
 = 
¨gs
[3];

220 
uöt32_t
 
num_devi˚s
 = 
¨gs
[4];

221 
uöt32_t
 
⁄e
 = 1;

222 
›í˛_devi˚_t
 *
devi˚
;

224 
	`›í˛_debug
("Ölatform=0x%x, device_type=%d,Çum_entries=%d\n",

225 
∂©f‹m
, 
devi˚_ty≥
, 
num_íåõs
);

226 
	`›í˛_debug
(" devices=0x%x,Çum_devices=%x\n",

227 
devi˚s
, 
num_devi˚s
);

228 i‡(
∂©f‹m
 !
›í˛_∂©f‹m
->
id
)

229 
	`Áèl
("%s: invÆidÖœtf‹m\n%s", 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

232 i‡(
num_devi˚s
)

233 
	`mem_wrôe
(
iß_mem
, 
num_devi˚s
, 4, &
⁄e
);

236 i‡(
devi˚s
 && 
num_íåõs
 > 0) {

237 i‡(!(
devi˚
 = (
›í˛_devi˚_t
 *Ë
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_DEVICE
)))

238 
	`∑nic
("%s:Çÿdevi˚", 
îr_¥efix
);

239 
	`mem_wrôe
(
iß_mem
, 
devi˚s
, 4, &
devi˚
->
id
);

246 
OPENCL_FUNC_˛GëDevi˚Info
:

248 
uöt32_t
 
devi˚_id
 = 
¨gs
[0];

249 
uöt32_t
 
∑øm_«me
 = 
¨gs
[1];

250 
uöt32_t
 
∑øm_vÆue_size
 = 
¨gs
[2];

251 
uöt32_t
 
∑øm_vÆue
 = 
¨gs
[3];

252 
uöt32_t
 
∑øm_vÆue_size_ªt
 = 
¨gs
[4];

254 
›í˛_devi˚_t
 *
devi˚
;

255 
uöt32_t
 
size_ªt
;

257 
	`›í˛_debug
(" device=0x%x,Öaram_name=0x%x,Öaram_value_size=%d\n"

259 
devi˚_id
, 
∑øm_«me
, 
∑øm_vÆue_size
, 
∑øm_vÆue
, 
∑øm_vÆue_size_ªt
);

261 
devi˚
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_DEVICE
, 
devi˚_id
);

262 
size_ªt
 = 
	`›í˛_devi˚_gë_öfo
(
devi˚
, 
∑øm_«me
, 
iß_mem
, 
∑øm_vÆue
, 
∑øm_vÆue_size
);

263 i‡(
∑øm_vÆue_size_ªt
)

264 
	`mem_wrôe
(
iß_mem
, 
∑øm_vÆue_size_ªt
, 4, &
size_ªt
);

270 
OPENCL_FUNC_˛Cª©eC⁄ãxt
:

272 
uöt32_t
 
¥›îtõs
 = 
¨gs
[0];

273 
uöt32_t
 
num_devi˚s
 = 
¨gs
[1];

274 
uöt32_t
 
devi˚s
 = 
¨gs
[2];

275 
uöt32_t
 
p‚_nŸify
 = 
¨gs
[3];

277 
uöt32_t
 
u£r_d©a
 = 
¨gs
[4];

278 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[5];

280 
›í˛_devi˚_t
 *
devi˚
;

281 
uöt32_t
 
devi˚_id
;

282 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

284 
	`›í˛_debug
("Öroperties=0x%x,Çum_devices=%d, devices=0x%x\n"

286 
¥›îtõs
, 
num_devi˚s
, 
devi˚s
, 
p‚_nŸify
, 
u£r_d©a
, 
îrcode_ªt
);

287 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
p‚_nŸify
, 0);

288 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
num_devi˚s
, 1);

289 
	`OPENCL_PARAM_NOT_SUPPORTED_EQ
(
devi˚s
, 0);

292 
	`mem_ªad
(
iß_mem
, 
devi˚s
, 4, &
devi˚_id
);

293 
devi˚
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_DEVICE
, 
devi˚_id
);

294 i‡(!
devi˚
)

295 
	`Áèl
("%s: invÆid devi˚\n%s", 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

298 
c⁄ãxt
 = 
	`›í˛_c⁄ãxt_¸óã
();

299 
	`›í˛_c⁄ãxt_£t_¥›îtõs
(
c⁄ãxt
, 
iß_mem
, 
¥›îtõs
);

300 
c⁄ãxt
->
devi˚_id
 = device_id;

301 
ªtvÆ
 = 
c⁄ãxt
->
id
;

304 i‡(
îrcode_ªt
)

305 
	`mem_wrôe
(
iß_mem
, 
îrcode_ªt
, 4, &
›í˛_suc˚ss
);

311 
OPENCL_FUNC_˛Cª©eC⁄ãxtFromTy≥
:

313 
uöt32_t
 
¥›îtõs
 = 
¨gs
[0];

314 
uöt32_t
 
devi˚_ty≥
 = 
¨gs
[1];

315 
uöt32_t
 
p‚_nŸify
 = 
¨gs
[2];

316 
uöt32_t
 
u£r_d©a
 = 
¨gs
[3];

317 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[4];

319 
›í˛_devi˚_t
 *
devi˚
;

320 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

322 
	`›í˛_debug
("Öroperties=0x%x, device_type=0x%x,Öfn_notify=0x%x,\n"

324 
¥›îtõs
, 
devi˚_ty≥
, 
p‚_nŸify
, 
u£r_d©a
, 
îrcode_ªt
);

325 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
p‚_nŸify
, 0);

328 
devi˚
 = (
›í˛_devi˚_t
 *Ë
	`›í˛_obje˘_gë_ty≥
(
OPENCL_OBJ_DEVICE
);

329 
	`as£π
(
devi˚
);

332 
c⁄ãxt
 = 
	`›í˛_c⁄ãxt_¸óã
();

333 
c⁄ãxt
->
devi˚_id
 = 
devi˚
->
id
;

334 
	`›í˛_c⁄ãxt_£t_¥›îtõs
(
c⁄ãxt
, 
iß_mem
, 
¥›îtõs
);

335 
ªtvÆ
 = 
c⁄ãxt
->
id
;

338 i‡(
îrcode_ªt
)

339 
	`mem_wrôe
(
iß_mem
, 
îrcode_ªt
, 4, &
›í˛_suc˚ss
);

346 
OPENCL_FUNC_˛Rñó£C⁄ãxt
:

348 
uöt32_t
 
c⁄ãxt_id
 = 
¨gs
[0];

350 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

352 
	`›í˛_debug
(" c⁄ãxt=0x%x\n", 
c⁄ãxt_id
);

353 
c⁄ãxt
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_CONTEXT
, 
c⁄ãxt_id
);

354 
	`as£π
(
c⁄ãxt
->
ªf_cou¡
 > 0);

355 i‡(!--
c⁄ãxt
->
ªf_cou¡
)

356 
	`›í˛_c⁄ãxt_‰ì
(
c⁄ãxt
);

362 
OPENCL_FUNC_˛GëC⁄ãxtInfo
:

364 
uöt32_t
 
c⁄ãxt_id
 = 
¨gs
[0];

365 
uöt32_t
 
∑øm_«me
 = 
¨gs
[1];

366 
uöt32_t
 
∑øm_vÆue_size
 = 
¨gs
[2];

367 
uöt32_t
 
∑øm_vÆue
 = 
¨gs
[3];

368 
uöt32_t
 
∑øm_vÆue_size_ªt
 = 
¨gs
[4];

370 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

371 
uöt32_t
 
size_ªt
 = 0;

373 
	`›í˛_debug
(" context=0x%x,Öaram_name=0x%x,Öaram_value_size=0x%x,\n"

375 
c⁄ãxt_id
, 
∑øm_«me
, 
∑øm_vÆue_size
, 
∑øm_vÆue
, 
∑øm_vÆue_size_ªt
);

377 
c⁄ãxt
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_CONTEXT
, 
c⁄ãxt_id
);

378 
size_ªt
 = 
	`›í˛_c⁄ãxt_gë_öfo
(
c⁄ãxt
, 
∑øm_«me
, 
iß_mem
, 
∑øm_vÆue
, 
∑øm_vÆue_size
);

379 i‡(
∑øm_vÆue_size_ªt
)

380 
	`mem_wrôe
(
iß_mem
, 
∑øm_vÆue_size_ªt
, 4, &
size_ªt
);

386 
OPENCL_FUNC_˛Cª©eComm™dQueue
:

388 
uöt32_t
 
c⁄ãxt_id
 = 
¨gs
[0];

389 
uöt32_t
 
devi˚_id
 = 
¨gs
[1];

390 
uöt32_t
 
¥›îtõs
 = 
¨gs
[2];

391 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[3];

393 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

394 
›í˛_devi˚_t
 *
devi˚
;

395 
›í˛_comm™d_queue_t
 *
comm™d_queue
;

397 
	`›í˛_debug
(" context=0x%x, device=0x%x,Öroperties=0x%x,Érrcode_ret=0x%x\n",

398 
c⁄ãxt_id
, 
devi˚_id
, 
¥›îtõs
, 
îrcode_ªt
);

401 
c⁄ãxt
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_CONTEXT
, 
c⁄ãxt_id
);

402 
devi˚
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_DEVICE
, 
devi˚_id
);

405 
comm™d_queue
 = 
	`›í˛_comm™d_queue_¸óã
();

406 
comm™d_queue
->
c⁄ãxt_id
 = context_id;

407 
comm™d_queue
->
devi˚_id
 = device_id;

408 
comm™d_queue
->
¥›îtõs
 =Öroperties;

409 
ªtvÆ
 = 
comm™d_queue
->
id
;

412 i‡(
îrcode_ªt
)

413 
	`mem_wrôe
(
iß_mem
, 
îrcode_ªt
, 4, &
›í˛_suc˚ss
);

419 
OPENCL_FUNC_˛Rñó£Comm™dQueue
:

421 
uöt32_t
 
comm™d_queue_id
 = 
¨gs
[0];

423 
›í˛_comm™d_queue_t
 *
comm™d_queue
;

425 
	`›í˛_debug
(" comm™d_queue=0x%x\n", 
comm™d_queue_id
);

426 
comm™d_queue
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_COMMAND_QUEUE
, 
comm™d_queue_id
);

427 
	`as£π
(
comm™d_queue
->
ªf_cou¡
 > 0);

428 i‡(!--
comm™d_queue
->
ªf_cou¡
)

429 
	`›í˛_comm™d_queue_‰ì
(
comm™d_queue
);

435 
OPENCL_FUNC_˛Cª©eBuf„r
:

437 
uöt32_t
 
c⁄ãxt_id
 = 
¨gs
[0];

438 
uöt32_t
 
Êags
 = 
¨gs
[1];

439 
uöt32_t
 
size
 = 
¨gs
[2];

440 
uöt32_t
 
ho°_±r
 = 
¨gs
[3];

441 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[4];

442 *
buf
;

444 
sÊags
[
MAX_STRING_SIZE
];

445 
°rög_m≠_t
 
¸óã_buf„r_Êags_m≠
 = { 4, {

454 
›í˛_mem_t
 *
mem
;

456 
	`m≠_Êags
(&
¸óã_buf„r_Êags_m≠
, 
Êags
, 
sÊags
, (sflags));

457 
	`›í˛_debug
(" context=0x%x, flags=%s, size=%d, host_ptr=0x%x,Érrcode_ret=0x%x\n",

458 
c⁄ãxt_id
, 
sÊags
, 
size
, 
ho°_±r
, 
îrcode_ªt
);

461 
	`OPENCL_PARAM_NOT_SUPPORTED_FLAG
(
Êags
, 0x10, "CL_MEM_ALLOC_HOST_PTR");

462 i‡((
Êags
 & 0x8Ë&& !
ho°_±r
)

463 
	`Áèl
("%s: CL_MEM_USE_HOST_PTR only valid when 'host_ptr' != NULL\n%s",

464 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

465 i‡((
Êags
 & 0x20Ë&& !
ho°_±r
)

466 
	`Áèl
("%s: CL_MEM_COPY_HOST_PTR only valid when 'host_ptr' != NULL\n%s",

467 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

470 
mem
 = 
	`›í˛_mem_¸óã
();

471 
mem
->
size
 = size;

472 
mem
->
Êags
 = flags;

473 
mem
->
ho°_±r
 = host_ptr;

476 
mem
->
devi˚_±r
 = 
gk
->
globÆ_mem_t›
;

477 
gk
->
globÆ_mem_t›
 +
size
;

480 i‡(
ho°_±r
) {

481 
buf
 = 
	`mÆloc
(
size
);

482 i‡(!
buf
)

483 
	`Áèl
("%s: ouào‡mem‹y", 
îr_¥efix
);

484 
	`mem_ªad
(
iß_mem
, 
ho°_±r
, 
size
, 
buf
);

485 
	`mem_wrôe
(
gk
->
globÆ_mem
, 
mem
->
devi˚_±r
, 
size
, 
buf
);

486 
	`‰ì
(
buf
);

490 
ªtvÆ
 = 
mem
->
id
;

491 i‡(
îrcode_ªt
)

492 
	`mem_wrôe
(
iß_mem
, 
îrcode_ªt
, 4, &
›í˛_suc˚ss
);

498 
OPENCL_FUNC_˛Rñó£MemObje˘
:

500 
uöt32_t
 
mem_id
 = 
¨gs
[0];

502 
›í˛_mem_t
 *
mem
;

504 
	`›í˛_debug
(" memobj=0x%x\n", 
mem_id
);

505 
mem
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_MEM
, 
mem_id
);

506 
	`as£π
(
mem
->
ªf_cou¡
 > 0);

507 i‡(!--
mem
->
ªf_cou¡
)

508 
	`›í˛_mem_‰ì
(
mem
);

514 
OPENCL_FUNC_˛Cª©eProgømWôhSour˚
:

516 
uöt32_t
 
c⁄ãxt_id
 = 
¨gs
[0];

517 
uöt32_t
 
cou¡
 = 
¨gs
[1];

518 
uöt32_t
 
°rögs
 = 
¨gs
[2];

519 
uöt32_t
 
Àngths
 = 
¨gs
[3];

520 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[4];

522 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

523 
›í˛_¥ogøm_t
 *
¥ogøm
;

524 *
buf
;

525 
buf_size
;

527 
	`›í˛_debug
(" context=0x%x, count=%d, strings=0x%x,Üengths=0x%x,Érrcode_ret=0x%x\n",

528 
c⁄ãxt_id
, 
cou¡
, 
°rögs
, 
Àngths
, 
îrcode_ªt
);

531 i‡(!*
gk_›í˛_bö¨y_«me
)

532 
	`Áèl
("%s: kernel source compilationÇot supported.\n%s",

533 
îr_¥efix
, 
îr_›í˛_compûî
);

536 
c⁄ãxt
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_CONTEXT
, 
c⁄ãxt_id
);

537 
¥ogøm
 = 
	`›í˛_¥ogøm_¸óã
();

538 
ªtvÆ
 = 
¥ogøm
->
id
;

539 
	`w¨nög
("%s: binary '%s' usedásÖre-compiled kernel.\n%s",

540 
îr_¥efix
, 
gk_›í˛_bö¨y_«me
, 
îr_›í˛_bö¨y_nŸe
);

543 
¥ogøm
->
bö¨y_fûe
 = 
	`¸óã_ãmp_fûe
’rogøm->
bö¨y_fûe_«me
, 
MAX_PATH_SIZE
);

544 
buf
 = 
	`ªad_buf„r
(
gk_›í˛_bö¨y_«me
, &
buf_size
);

545 i‡(!
buf
)

546 
	`Áèl
("%s: c™nŸÑód from fûê'%s'", 
îr_¥efix
, 
gk_›í˛_bö¨y_«me
);

547 
	`wrôe_buf„r
(
¥ogøm
->
bö¨y_fûe_«me
, 
buf
, 
buf_size
);

548 
	`‰ì_buf„r
(
buf
);

554 
OPENCL_FUNC_˛Cª©eProgømWôhBö¨y
:

556 
uöt32_t
 
c⁄ãxt_id
 = 
¨gs
[0];

557 
uöt32_t
 
num_devi˚s
 = 
¨gs
[1];

558 
uöt32_t
 
devi˚_li°
 = 
¨gs
[2];

559 
uöt32_t
 
Àngths
 = 
¨gs
[3];

560 
uöt32_t
 
bö¨õs
 = 
¨gs
[4];

561 
uöt32_t
 
bö¨y_°©us
 = 
¨gs
[5];

562 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[6];

564 
uöt32_t
 
Àngth
, 
bö¨y
;

565 
uöt32_t
 
devi˚_id
;

566 
›í˛_c⁄ãxt_t
 *
c⁄ãxt
;

567 
›í˛_devi˚_t
 *
devi˚
;

568 
›í˛_¥ogøm_t
 *
¥ogøm
;

569 *
buf
;

571 
	`›í˛_debug
(" context=0x%x,Çum_devices=%d, device_list=0x%x,Üengths=0x%x\n"

573 
c⁄ãxt_id
, 
num_devi˚s
, 
devi˚_li°
, 
Àngths
, 
bö¨õs
,

574 
bö¨y_°©us
, 
îrcode_ªt
);

575 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
num_devi˚s
, 1);

578 
	`mem_ªad
(
iß_mem
, 
devi˚_li°
, 4, &
devi˚_id
);

579 
devi˚
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_DEVICE
, 
devi˚_id
);

580 
c⁄ãxt
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_CONTEXT
, 
c⁄ãxt_id
);

583 
¥ogøm
 = 
	`›í˛_¥ogøm_¸óã
();

584 
ªtvÆ
 = 
¥ogøm
->
id
;

587 
	`mem_ªad
(
iß_mem
, 
Àngths
, 4, &
Àngth
);

588 
	`mem_ªad
(
iß_mem
, 
bö¨õs
, 4, &
bö¨y
);

589 
	`›í˛_debug
("Üígths[0] = %d\n", 
Àngth
);

590 
	`›í˛_debug
(" bö¨õs[0] = 0x%x\n", 
bö¨y
);

593 
buf
 = 
	`mÆloc
(
Àngth
);

594 
	`as£π
(
buf
);

595 
	`mem_ªad
(
iß_mem
, 
bö¨y
, 
Àngth
, 
buf
);

598 
¥ogøm
->
bö¨y_fûe
 = 
	`¸óã_ãmp_fûe
’rogøm->
bö¨y_fûe_«me
, 
MAX_PATH_SIZE
);

599 
	`wrôe_buf„r
(
¥ogøm
->
bö¨y_fûe_«me
, 
buf
, 
Àngth
);

600 
	`‰ì
(
buf
);

603 i‡(
bö¨y_°©us
)

604 
	`mem_wrôe
(
iß_mem
, 
bö¨y_°©us
, 4, &
›í˛_suc˚ss
);

605 i‡(
îrcode_ªt
)

606 
	`mem_wrôe
(
iß_mem
, 
îrcode_ªt
, 4, &
›í˛_suc˚ss
);

612 
OPENCL_FUNC_˛Rñó£Progøm
:

614 
uöt32_t
 
¥ogøm_id
 = 
¨gs
[0];

616 
›í˛_¥ogøm_t
 *
¥ogøm
;

618 
	`›í˛_debug
("Örogøm=0x%x\n", 
¥ogøm_id
);

619 
¥ogøm
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PROGRAM
, 
¥ogøm_id
);

620 
	`as£π
(
¥ogøm
->
ªf_cou¡
 > 0);

621 i‡(!--
¥ogøm
->
ªf_cou¡
)

622 
	`›í˛_¥ogøm_‰ì
(
¥ogøm
);

628 
OPENCL_FUNC_˛BuûdProgøm
:

630 
uöt32_t
 
¥ogøm_id
 = 
¨gs
[0];

631 
uöt32_t
 
num_devi˚s
 = 
¨gs
[1];

632 
uöt32_t
 
devi˚_li°
 = 
¨gs
[2];

633 
uöt32_t
 
›ti⁄s
 = 
¨gs
[3];

634 
uöt32_t
 
p‚_nŸify
 = 
¨gs
[4];

636 
uöt32_t
 
u£r_d©a
 = 
¨gs
[5];

638 
›í˛_¥ogøm_t
 *
¥ogøm
;

640 
	`›í˛_debug
("Örogram=0x%x,Çum_devices=%d, device_list=0x%x, options=0x%x\n"

642 
¥ogøm_id
, 
num_devi˚s
, 
devi˚_li°
, 
›ti⁄s
, 
p‚_nŸify
, 
u£r_d©a
);

643 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
num_devi˚s
, 1);

644 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
p‚_nŸify
, 0);

645 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
u£r_d©a
, 0);

646 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
›ti⁄s
, 0);

649 
¥ogøm
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PROGRAM
, 
¥ogøm_id
);

650 i‡(!
¥ogøm
->
bö¨y_fûe
)

651 
	`Áèl
("%s:Örogram binary must beÜoaded first.\n%s",

652 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

655 
	`›í˛_¥ogøm_buûd
(
¥ogøm
);

661 
OPENCL_FUNC_˛Cª©eKî√l
:

663 
uöt32_t
 
¥ogøm_id
 = 
¨gs
[0];

664 
uöt32_t
 
kî√l_«me
 = 
¨gs
[1];

665 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[2];

667 
kî√l_«me_°r
[
MAX_STRING_SIZE
];

668 
›í˛_kî√l_t
 *
kî√l
;

669 
›í˛_¥ogøm_t
 *
¥ogøm
;

671 
	`›í˛_debug
("Örogram=0x%x, kernel_name=0x%x,Érrcode_ret=0x%x\n",

672 
¥ogøm_id
, 
kî√l_«me
, 
îrcode_ªt
);

673 i‡(
	`mem_ªad_°rög
(
iß_mem
, 
kî√l_«me
, 
MAX_STRING_SIZE
, 
kî√l_«me_°r
) == MAX_STRING_SIZE)

674 
	`Áèl
("%s: 'kî√l_«me' såög i†toÿl⁄g", 
îr_¥efix
);

675 
	`›í˛_debug
(" kî√l_«me='%s'\n", 
kî√l_«me_°r
);

678 
¥ogøm
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_PROGRAM
, 
¥ogøm_id
);

681 
kî√l
 = 
	`›í˛_kî√l_¸óã
();

682 
kî√l
->
¥ogøm_id
 =Örogram_id;

685 i‡(!
¥ogøm
->
bö¨y_fûe_ñf
)

686 
	`Áèl
("%s:Örogram should be first built with clBuildProgram.\n%s",

687 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

690 
	`›í˛_kî√l_lﬂd
(
kî√l
, 
kî√l_«me_°r
);

693 
ªtvÆ
 = 
kî√l
->
id
;

699 
OPENCL_FUNC_˛Rñó£Kî√l
:

701 
uöt32_t
 
kî√l_id
 = 
¨gs
[0];

703 
›í˛_kî√l_t
 *
kî√l
;

705 
	`›í˛_debug
(" kî√l=0x%x\n", 
kî√l_id
);

706 
kî√l
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_KERNEL
, 
kî√l_id
);

707 
	`as£π
(
kî√l
->
ªf_cou¡
 > 0);

708 i‡(!--
kî√l
->
ªf_cou¡
)

709 
	`›í˛_kî√l_‰ì
(
kî√l
);

715 
OPENCL_FUNC_˛SëKî√lArg
:

717 
uöt32_t
 
kî√l_id
 = 
¨gs
[0];

718 
uöt32_t
 
¨g_ödex
 = 
¨gs
[1];

719 
uöt32_t
 
¨g_size
 = 
¨gs
[2];

720 
uöt32_t
 
¨g_vÆue
 = 
¨gs
[3];

722 
›í˛_kî√l_t
 *
kî√l
;

723 
›í˛_kî√l_¨g_t
 *
¨g
;

725 
	`›í˛_debug
(" kernel_id=0x%x,árg_index=%d,árg_size=%d,árg_value=0x%x\n",

726 
kî√l_id
, 
¨g_ödex
, 
¨g_size
, 
¨g_vÆue
);

729 
kî√l
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_KERNEL
, 
kî√l_id
);

730 i‡(
¨g_vÆue
)

731 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
¨g_size
, 4);

732 i‡(
¨g_ödex
 >
	`li°_cou¡
(
kî√l
->
¨g_li°
))

733 
	`Áèl
("%s:árgumíàödex ouào‡bounds.\n%s", 
îr_¥efix
,

734 
îr_›í˛_∑øm_nŸe
);

737 
¨g
 = 
	`li°_gë
(
kî√l
->
¨g_li°
, 
¨g_ödex
);

738 
	`as£π
(
¨g
);

739 
¨g
->
£t
 = 1;

740 
¨g
->
size
 = 
¨g_size
;

741 i‡(
¨g_vÆue
)

742 
	`mem_ªad
(
iß_mem
, 
¨g_vÆue
, 4, &
¨g
->
vÆue
);

745 i‡(
¨g
->
mem_sc›e
 =
OPENCL_MEM_SCOPE_LOCAL
 && 
¨g_vÆue
)

746 
	`Áèl
("%s: vÆuêf‹Üoˇ»¨gumít†mu° bêNULL.\n%s", 
îr_¥efix
,

747 
îr_›í˛_∑øm_nŸe
);

755 
OPENCL_FUNC_˛GëKî√lW‹kGroupInfo
:

757 
uöt32_t
 
kî√l_id
 = 
¨gs
[0];

758 
uöt32_t
 
devi˚_id
 = 
¨gs
[1];

759 
uöt32_t
 
∑øm_«me
 = 
¨gs
[2];

760 
uöt32_t
 
∑øm_vÆue_size
 = 
¨gs
[3];

761 
uöt32_t
 
∑øm_vÆue
 = 
¨gs
[4];

762 
uöt32_t
 
∑øm_vÆue_size_ªt
 = 
¨gs
[5];

764 
›í˛_kî√l_t
 *
kî√l
;

765 
›í˛_devi˚_t
 *
devi˚
;

766 
uöt32_t
 
size_ªt
;

768 
	`›í˛_debug
(" kernel=0x%x, device=0x%x,Öaram_name=0x%x,Öaram_value_size=0x%x,\n"

770 
kî√l_id
, 
devi˚_id
, 
∑øm_«me
, 
∑øm_vÆue_size
, 
∑øm_vÆue
,

771 
∑øm_vÆue_size_ªt
);

773 
kî√l
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_KERNEL
, 
kî√l_id
);

774 
devi˚
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_DEVICE
, 
devi˚_id
);

775 
size_ªt
 = 
	`›í˛_kî√l_gë_w‹k_group_öfo
(
kî√l
, 
∑øm_«me
, 
iß_mem
,

776 
∑øm_vÆue
, 
∑øm_vÆue_size
);

777 i‡(
∑øm_vÆue_size_ªt
)

778 
	`mem_wrôe
(
iß_mem
, 
∑øm_vÆue_size_ªt
, 4, &
size_ªt
);

784 
OPENCL_FUNC_˛WaôF‹Evíts
:

786 
uöt32_t
 
num_evíts
 = 
¨gs
[0];

787 
uöt32_t
 
evít_li°
 = 
¨gs
[1];

789 
	`›í˛_debug
("Çum_events=0x%x,Évent_list=0x%x\n",

790 
num_evíts
, 
evít_li°
);

797 
OPENCL_FUNC_˛Rñó£Evít
:

799 
uöt32_t
 
evít_id
 = 
¨gs
[0];

801 
›í˛_evít_t
 *
evít
;

803 
	`›í˛_debug
("Évít=0x%x\n", 
evít_id
);

804 
evít
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_EVENT
, 
evít_id
);

805 
	`as£π
(
evít
->
ªf_cou¡
 > 0);

806 i‡(!--
evít
->
ªf_cou¡
)

807 
	`›í˛_evít_‰ì
(
evít
);

813 
OPENCL_FUNC_˛GëEvítProfûögInfo
:

815 
uöt32_t
 
evít_id
 = 
¨gs
[0];

816 
uöt32_t
 
∑øm_«me
 = 
¨gs
[1];

817 
uöt32_t
 
∑øm_vÆue_size
 = 
¨gs
[2];

818 
uöt32_t
 
∑øm_vÆue
 = 
¨gs
[3];

819 
uöt32_t
 
∑øm_vÆue_size_ªt
 = 
¨gs
[4];

821 
›í˛_evít_t
 *
evít
;

822 
size_ªt
;

824 
	`›í˛_debug
("Évent=0x%x,Öaram_name=0x%x,Öaram_value_size=0x%x,\n"

826 
evít_id
, 
∑øm_«me
, 
∑øm_vÆue_size
, 
∑øm_vÆue
,

827 
∑øm_vÆue_size_ªt
);

828 
evít
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_EVENT
, 
evít_id
);

829 
size_ªt
 = 
	`›í˛_evít_gë_¥ofûög_öfo
(
evít
, 
∑øm_«me
, 
iß_mem
,

830 
∑øm_vÆue
, 
∑øm_vÆue_size
);

831 i‡(
∑øm_vÆue_size_ªt
)

832 
	`mem_wrôe
(
iß_mem
, 
∑øm_vÆue_size_ªt
, 4, &
size_ªt
);

838 
OPENCL_FUNC_˛Föish
:

840 
uöt32_t
 
comm™d_queue
 = 
¨gs
[0];

842 
	`›í˛_debug
(" comm™d_queue=0x%x\n", 
comm™d_queue
);

849 
OPENCL_FUNC_˛EnqueueRódBuf„r
:

851 
uöt32_t
 
comm™d_queue
 = 
¨gs
[0];

852 
uöt32_t
 
buf„r
 = 
¨gs
[1];

853 
uöt32_t
 
blockög_ªad
 = 
¨gs
[2];

854 
uöt32_t
 
off£t
 = 
¨gs
[3];

855 
uöt32_t
 
cb
 = 
¨gs
[4];

856 
uöt32_t
 
±r
 = 
¨gs
[5];

857 
uöt32_t
 
num_evíts_ö_waô_li°
 = 
¨gs
[6];

858 
uöt32_t
 
evít_waô_li°
 = 
¨gs
[7];

859 
uöt32_t
 
evít_±r
 = 
¨gs
[8];

861 
›í˛_mem_t
 *
mem
;

862 
›í˛_evít_t
 *
evít
;

863 *
buf
;

865 
	`›í˛_debug
(" command_queue=0x%x, buffer=0x%x, blocking_read=0x%x,\n"

868 
comm™d_queue
, 
buf„r
, 
blockög_ªad
, 
off£t
, 
cb
, 
±r
,

869 
num_evíts_ö_waô_li°
, 
evít_waô_li°
, 
evít_±r
);

872 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
num_evíts_ö_waô_li°
, 0);

873 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
evít_waô_li°
, 0);

876 
mem
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_MEM
, 
buf„r
);

879 i‡(
off£t
 + 
cb
 > 
mem
->
size
)

880 
	`Áèl
("%s: buf„∏°‹agêex˚eded\n%s", 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

883 
buf
 = 
	`mÆloc
(
cb
);

884 
	`as£π
(
buf
);

885 
	`mem_ªad
(
gk
->
globÆ_mem
, 
mem
->
devi˚_±r
 + 
off£t
, 
cb
, 
buf
);

886 
	`mem_wrôe
(
iß_mem
, 
±r
, 
cb
, 
buf
);

887 
	`‰ì
(
buf
);

890 i‡(
evít_±r
) {

891 
evít
 = 
	`›í˛_evít_¸óã
(
OPENCL_EVENT_NDRANGE_KERNEL
);

892 
evít
->
°©us
 = 
OPENCL_EVENT_STATUS_SUBMITTED
;

893 
evít
->
time_queued
 = 
	`›í˛_evít_timî
();

894 
evít
->
time_submô
 = 
	`›í˛_evít_timî
();

895 
evít
->
time_°¨t
 = 
	`›í˛_evít_timî
();

896 
evít
->
time_íd
 = 
	`›í˛_evít_timî
();

897 
	`mem_wrôe
(
iß_mem
, 
evít_±r
, 4, &
evít
->
id
);

898 
	`›í˛_debug
("Évít: 0x%x\n", 
evít
->
id
);

902 
	`›í˛_debug
(" %d bytes copied from device memory (0x%x)Åo host memory (0x%x)\n",

903 
cb
, 
mem
->
devi˚_±r
 + 
off£t
, 
±r
);

909 
OPENCL_FUNC_˛EnqueueWrôeBuf„r
:

911 
uöt32_t
 
comm™d_queue
 = 
¨gs
[0];

912 
uöt32_t
 
buf„r
 = 
¨gs
[1];

913 
uöt32_t
 
blockög_wrôe
 = 
¨gs
[2];

914 
uöt32_t
 
off£t
 = 
¨gs
[3];

915 
uöt32_t
 
cb
 = 
¨gs
[4];

916 
uöt32_t
 
±r
 = 
¨gs
[5];

917 
uöt32_t
 
num_evíts_ö_waô_li°
 = 
¨gs
[6];

918 
uöt32_t
 
evít_waô_li°
 = 
¨gs
[7];

919 
uöt32_t
 
evít_±r
 = 
¨gs
[8];

921 
›í˛_mem_t
 *
mem
;

922 
›í˛_evít_t
 *
evít
;

923 *
buf
;

925 
	`›í˛_debug
(" command_queue=0x%x, buffer=0x%x, blocking_write=0x%x,\n"

928 
comm™d_queue
, 
buf„r
, 
blockög_wrôe
, 
off£t
, 
cb
,

929 
±r
, 
num_evíts_ö_waô_li°
, 
evít_waô_li°
, 
evít_±r
);

932 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
num_evíts_ö_waô_li°
, 0);

933 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
evít_waô_li°
, 0);

936 
mem
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_MEM
, 
buf„r
);

939 i‡(
off£t
 + 
cb
 > 
mem
->
size
)

940 
	`Áèl
("%s: buf„∏°‹agêex˚eded\n%s", 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

943 
buf
 = 
	`mÆloc
(
cb
);

944 
	`as£π
(
buf
);

945 
	`mem_ªad
(
iß_mem
, 
±r
, 
cb
, 
buf
);

946 
	`mem_wrôe
(
gk
->
globÆ_mem
, 
mem
->
devi˚_±r
 + 
off£t
, 
cb
, 
buf
);

947 
	`‰ì
(
buf
);

950 i‡(
evít_±r
) {

951 
evít
 = 
	`›í˛_evít_¸óã
(
OPENCL_EVENT_MAP_BUFFER
);

952 
evít
->
°©us
 = 
OPENCL_EVENT_STATUS_COMPLETE
;

953 
evít
->
time_queued
 = 
	`›í˛_evít_timî
();

954 
evít
->
time_submô
 = 
	`›í˛_evít_timî
();

955 
evít
->
time_°¨t
 = 
	`›í˛_evít_timî
();

956 
evít
->
time_íd
 = 
	`›í˛_evít_timî
();

957 
	`mem_wrôe
(
iß_mem
, 
evít_±r
, 4, &
evít
->
id
);

958 
	`›í˛_debug
("Évít: 0x%x\n", 
evít
->
id
);

962 
	`›í˛_debug
(" %d bytes copied from host memory (0x%x)Åo device memory (0x%x)\n",

963 
cb
, 
±r
, 
mem
->
devi˚_±r
 + 
off£t
);

969 
OPENCL_FUNC_˛EnqueueM≠Buf„r
:

971 
uöt32_t
 
comm™d_queue
 = 
¨gs
[0];

972 
uöt32_t
 
buf„r
 = 
¨gs
[1];

973 
uöt32_t
 
blockög_m≠
 = 
¨gs
[2];

974 
uöt32_t
 
m≠_Êags
 = 
¨gs
[3];

975 
uöt32_t
 
off£t
 = 
¨gs
[4];

976 
uöt32_t
 
cb
 = 
¨gs
[5];

977 
uöt32_t
 
num_evíts_ö_waô_li°
 = 
¨gs
[6];

978 
uöt32_t
 
evít_waô_li°
 = 
¨gs
[7];

979 
uöt32_t
 
evít_±r
 = 
¨gs
[8];

980 
uöt32_t
 
îrcode_ªt
 = 
¨gs
[9];

982 
›í˛_mem_t
 *
mem
;

983 
›í˛_evít_t
 *
evít
;

985 
	`›í˛_debug
(" command_queue=0x%x, buffer=0x%x, blocking_map=0x%x, map_flags=0x%x,\n"

988 
comm™d_queue
, 
buf„r
, 
blockög_m≠
, 
m≠_Êags
, 
off£t
, 
cb
,

989 
num_evíts_ö_waô_li°
, 
evít_waô_li°
, 
evít_±r
, 
îrcode_ªt
);

990 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
num_evíts_ö_waô_li°
, 0);

991 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
evít_waô_li°
, 0);

992 
	`OPENCL_PARAM_NOT_SUPPORTED_EQ
(
blockög_m≠
, 0);

995 
mem
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_MEM
, 
buf„r
);

998 i‡(
evít_±r
) {

999 
evít
 = 
	`›í˛_evít_¸óã
(
OPENCL_EVENT_MAP_BUFFER
);

1000 
evít
->
°©us
 = 
OPENCL_EVENT_STATUS_COMPLETE
;

1001 
evít
->
time_queued
 = 
	`›í˛_evít_timî
();

1002 
evít
->
time_submô
 = 
	`›í˛_evít_timî
();

1003 
evít
->
time_°¨t
 = 
	`›í˛_evít_timî
();

1004 
evít
->
time_íd
 = 
	`›í˛_evít_timî
();

1005 
	`mem_wrôe
(
iß_mem
, 
evít_±r
, 4, &
evít
->
id
);

1006 
	`›í˛_debug
("Évít: 0x%x\n", 
evít
->
id
);

1010 i‡(
îrcode_ªt
)

1011 
	`mem_wrôe
(
iß_mem
, 
îrcode_ªt
, 4, &
›í˛_suc˚ss
);

1012 
	`Áèl
("clEnqueueMapBuffer:Çot implemented");

1018 
OPENCL_FUNC_˛EnqueueNDR™geKî√l
:

1020 
uöt32_t
 
comm™d_queue
 = 
¨gs
[0];

1021 
uöt32_t
 
kî√l_id
 = 
¨gs
[1];

1022 
uöt32_t
 
w‹k_dim
 = 
¨gs
[2];

1023 
uöt32_t
 
globÆ_w‹k_off£t_±r
 = 
¨gs
[3];

1024 
uöt32_t
 
globÆ_w‹k_size_±r
 = 
¨gs
[4];

1025 
uöt32_t
 
loˇl_w‹k_size_±r
 = 
¨gs
[5];

1026 
uöt32_t
 
num_evíts_ö_waô_li°
 = 
¨gs
[6];

1027 
uöt32_t
 
evít_waô_li°
 = 
¨gs
[7];

1028 
uöt32_t
 
evít_±r
 = 
¨gs
[8];

1030 
›í˛_kî√l_t
 *
kî√l
;

1031 
›í˛_evít_t
 *
evít
;

1032 
i
;

1034 
	`›í˛_debug
(" command_queue=0x%x, kernel=0x%x, work_dim=%d,\n"

1037 
comm™d_queue
, 
kî√l_id
, 
w‹k_dim
, 
globÆ_w‹k_off£t_±r
, 
globÆ_w‹k_size_±r
,

1038 
loˇl_w‹k_size_±r
, 
num_evíts_ö_waô_li°
, 
evít_waô_li°
, 
evít_±r
);

1039 
	`OPENCL_PARAM_NOT_SUPPORTED_NEQ
(
globÆ_w‹k_off£t_±r
, 0);

1040 
	`OPENCL_PARAM_NOT_SUPPORTED_OOR
(
w‹k_dim
, 1, 3);

1041 i‡(
num_evíts_ö_waô_li°
 || 
evít_waô_li°
)

1042 
	`w¨nög
("%s:Évíàli°árgumít†ign‹ed", 
îr_¥efix
);

1045 
kî√l
 = 
	`›í˛_obje˘_gë
(
OPENCL_OBJ_KERNEL
, 
kî√l_id
);

1046 
kî√l
->
w‹k_dim
 = work_dim;

1049 
kî√l
->
globÆ_size3
[1] = 1;

1050 
kî√l
->
globÆ_size3
[2] = 1;

1051 
i
 = 0; i < 
w‹k_dim
; i++)

1052 
	`mem_ªad
(
iß_mem
, 
globÆ_w‹k_size_±r
 + 
i
 * 4, 4, &
kî√l
->
globÆ_size3
[i]);

1053 
kî√l
->
globÆ_size
 = kî√l->
globÆ_size3
[0] * kernel->global_size3[1] * kernel->global_size3[2];

1054 
	`›í˛_debug
(" global_work_size=");

1055 
	`›í˛_debug_¨øy
(
w‹k_dim
, 
kî√l
->
globÆ_size3
);

1056 
	`›í˛_debug
("\n");

1060 
	`mem˝y
(
kî√l
->
loˇl_size3
, kî√l->
globÆ_size3
, 12);

1061 i‡(
loˇl_w‹k_size_±r
)

1062 
i
 = 0; i < 
w‹k_dim
; i++)

1063 
	`mem_ªad
(
iß_mem
, 
loˇl_w‹k_size_±r
 + 
i
 * 4, 4, &
kî√l
->
loˇl_size3
[i]);

1064 
kî√l
->
loˇl_size
 = kî√l->
loˇl_size3
[0] * kernel->local_size3[1] * kernel->local_size3[2];

1065 
	`›í˛_debug
("Üocal_work_size=");

1066 
	`›í˛_debug_¨øy
(
w‹k_dim
, 
kî√l
->
loˇl_size3
);

1067 
	`›í˛_debug
("\n");

1070 i‡((
kî√l
->
globÆ_size3
[0] % kî√l->
loˇl_size3
[0])

1071 || (
kî√l
->
globÆ_size3
[1] % kî√l->
loˇl_size3
[1])

1072 || (
kî√l
->
globÆ_size3
[2] % kî√l->
loˇl_size3
[2]))

1073 
	`Áèl
("%s: global work sizes must be multiples ofÜocal sizes.\n%s",

1074 
îr_¥efix
, 
îr_›í˛_∑øm_nŸe
);

1077 
i
 = 0; i < 3; i++)

1078 
kî√l
->
group_cou¡3
[
i
] = kî√l->
globÆ_size3
[i] / kî√l->
loˇl_size3
[i];

1079 
kî√l
->
group_cou¡
 = kî√l->
group_cou¡3
[0] * kernel->group_count3[1] * kernel->group_count3[2];

1080 
	`›í˛_debug
(" group_count=");

1081 
	`›í˛_debug_¨øy
(
w‹k_dim
, 
kî√l
->
group_cou¡3
);

1082 
	`›í˛_debug
("\n");

1085 i‡(
evít_±r
) {

1086 
evít
 = 
	`›í˛_evít_¸óã
(
OPENCL_EVENT_NDRANGE_KERNEL
);

1087 
evít
->
°©us
 = 
OPENCL_EVENT_STATUS_SUBMITTED
;

1088 
evít
->
time_queued
 = 
	`›í˛_evít_timî
();

1089 
evít
->
time_submô
 = 
	`›í˛_evít_timî
();

1090 
evít
->
time_°¨t
 = 
	`›í˛_evít_timî
();

1091 
	`mem_wrôe
(
iß_mem
, 
evít_±r
, 4, &
evít
->
id
);

1092 
	`›í˛_debug
("Évít: 0x%x\n", 
evít
->
id
);

1096 
	`gpu_iß_run
(
kî√l
);

1099 i‡(
evít_±r
) {

1100 
evít
->
°©us
 = 
OPENCL_EVENT_STATUS_COMPLETE
;

1101 
evít
->
time_íd
 = 
	`›í˛_evít_timî
();

1110 
	`Áèl
("opencl_func_run: function '%s' (code=%d)Çot implemented.\n%s",

1111 
func_«me
, 
code
, 
îr_›í˛_nŸe
);

1114  
ªtvÆ
;

1115 
	}
}

	@libm2skernel/context.c

20 
	~<m2skî√l.h
>

23 
	g˘x_debug_ˇãg‹y
;

24 
ö°r_¶i˚
;

27 
°rög_m≠_t
 
	g˘x_°©us_m≠
 = {

29 { "ru¬ög", 
˘x_ru¬ög
 },

30 { "•ecmode", 
˘x_•ecmode
 },

31 { "su•íded", 
˘x_su•íded
 },

32 { "föished", 
˘x_föished
 },

33 { "ex˛usive", 
˘x_ex˛usive
 },

34 { "locked", 
˘x_locked
 },

35 { "h™dÀr", 
˘x_h™dÀr
 },

36 { "sigsu•íd", 
˘x_sigsu•íd
 },

37 { "«no¶ìp", 
˘x_«no¶ìp
 },

38 { "pﬁl", 
˘x_pﬁl
 },

39 { "ªad", 
˘x_ªad
 },

40 { "wrôe", 
˘x_wrôe
 },

41 { "waôpid", 
˘x_waôpid
 },

42 { "zombõ", 
˘x_zombõ
 },

43 { "fuãx", 
˘x_fuãx
 },

44 { "Æloc", 
˘x_Æloc
 }

49 
˘x_t
 *
	$˘x_do_¸óã
()

51 
˘x_t
 *
˘x
;

54 
˘x
 = 
	`ˇŒoc
(1, (
˘x_t
));

55 
˘x
->
pid
 = 
ke
->
cuºít_pid
++;

56 
˘x
->
ö°r_¶i˚
 = instr_slice;

61 
	`˘x_£t_°©us
(
˘x
, 
˘x_ru¬ög
);

62 
	`ke_li°_ö£π_hód
(
ke_li°_c⁄ãxt
, 
˘x
);

65 
˘x
->
ªgs
 = 
	`ªgs_¸óã
();

66 
˘x
->
sig«l_masks
 = 
	`sig«l_masks_¸óã
();

69  
˘x
;

70 
	}
}

73 
˘x_t
 *
	$˘x_¸óã
()

75 
˘x_t
 *
˘x
;

77 
˘x
 = 
	`˘x_do_¸óã
();

81 
	`ld_öô
(
˘x
);

82 
˘x
->
mid
 = 
ke
->
cuºít_mid
++;

83 
˘x
->
mem
 = 
	`mem_¸óã
();

84 
˘x
->
sig«l_h™dÀrs
 = 
	`ö°Æl_sig«l_h™dÀrs
();

85 
˘x
->
fdt
 = 
	`fdt_¸óã
();

87  
˘x
;

88 
	}
}

91 
˘x_t
 *
	$˘x_˛⁄e
(
˘x_t
 *
˘x
)

93 
˘x_t
 *
√w
;

95 
√w
 = 
	`˘x_do_¸óã
();

98 
	`ªgs_c›y
(
√w
->
ªgs
, 
˘x
->regs);

104 
√w
->
mem
 = 
˘x
->mem;

105 
√w
->
mem
->
sh¨ög
++;

106 
√w
->
mid
 = 
˘x
->mid;

107 
√w
->
lﬂdî
 = 
˘x
->loader;

108 
√w
->
sig«l_h™dÀrs
 = 
˘x
->signal_handlers;

109 
√w
->
fdt
 = 
˘x
->fdt;

110 
√w
->
glibc_£gmít_ba£
 = 
˘x
->glibc_segment_base;

111 
√w
->
glibc_£gmít_limô
 = 
˘x
->glibc_segment_limit;

114 
√w
->
∑ª¡
 = 
˘x
;

117  
√w
;

119 
	}
}

123 
	$˘x_‰ì
(
˘x_t
 *
˘x
)

127 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_föished
 | 
˘x_zombõ
))

128 
	`˘x_föish
(
˘x
, 0);

132 
	`as£π
(!
	`ke_li°_membî
(
ke_li°_ru¬ög
, 
˘x
));

133 
	`as£π
(!
	`ke_li°_membî
(
ke_li°_su•íded
, 
˘x
));

134 
	`as£π
(!
	`ke_li°_membî
(
ke_li°_zombõ
, 
˘x
));

135 
	`as£π
(
	`ke_li°_membî
(
ke_li°_föished
, 
˘x
));

136 
	`ke_li°_ªmove
(
ke_li°_föished
, 
˘x
);

139 
	`ªgs_‰ì
(
˘x
->
ªgs
);

140 
	`sig«l_masks_‰ì
(
˘x
->
sig«l_masks
);

144 
˘x
->
mem
->
sh¨ög
--;

145 i‡(!
˘x
->
mem
->
sh¨ög
) {

146 
	`ld_d⁄e
(
˘x
);

147 
	`mem_‰ì
(
˘x
->
mem
);

148 
	`fdt_‰ì
(
˘x
->
fdt
);

149 
	`sig«l_h™dÀrs_‰ì
(
˘x
->
sig«l_h™dÀrs
);

153 i‡(
˘x
->
lib›í˛_›í_©ãm±
)

154 
	`gk_lib›í˛_Áûed
(
˘x
->
pid
);

157 
	`ke_li°_ªmove
(
ke_li°_c⁄ãxt
, 
˘x
);

158 i‡(
iß_˘x
 =
˘x
)

159 
iß_˘x
 = 
NULL
;

160 
	`˘x_debug
("c⁄ãxà%d fªed\n", 
˘x
->
pid
);

161 
	`‰ì
(
˘x
);

162 
	}
}

165 
	$˘x_dump
(
˘x_t
 *
˘x
, 
FILE
 *
f
)

167 
s°©us
[200];

168 
	`Ârötf
(
f
, "Öid=%d\n", 
˘x
->
pid
);

169 
	`m≠_Êags
(&
˘x_°©us_m≠
, 
˘x
->
°©us
, 
s°©us
, 200);

170 
	`Ârötf
(
f
, " sètus=%s\n", 
s°©us
);

171 i‡(!
˘x
->
∑ª¡
)

172 
	`Ârötf
(
f
, "Öarent=(null)\n");

174 
	`Ârötf
(
f
, "Ö¨ít=%d\n", 
˘x
->
∑ª¡
->
pid
);

175 
	`Ârötf
(
f
, " hó∞bªak: 0x%x\n", 
˘x
->
lﬂdî
->
brk
);

178 
	`Ârötf
(
f
, " blocked signal mask: 0x%llx ",

179 (Ë
˘x
->
sig«l_masks
->
blocked
);

180 
	`sim_sig£t_dump
(
˘x
->
sig«l_masks
->
blocked
, 
f
);

181 
	`Ârötf
(
f
, "\nÖending signals: 0x%llx ",

182 (Ë
˘x
->
sig«l_masks
->
≥ndög
);

183 
	`sim_sig£t_dump
(
˘x
->
sig«l_masks
->
≥ndög
, 
f
);

184 
	`Ârötf
(
f
, "\n");

185 
	}
}

188 
	$˘x_execuã_ö°
(
˘x_t
 *
˘x
)

190 
fixed
[20];

191 *
buf
;

195 
iß_˘x
 = 
˘x
;

196 
iß_ªgs
 = 
˘x
->
ªgs
;

197 
iß_mem
 = 
˘x
->
mem
;

198 
iß_eù
 = 
iß_ªgs
->
eù
;

199 
iß_ö°_cou¡
++;

202 
˘x
->
mem
->
ß„
 = 
mem_ß„_mode
;

203 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
))

204 
˘x
->
mem
->
ß„
 = 0;

205 
buf
 = 
	`mem_gë_buf„r
(
˘x
->
mem
, ctx->
ªgs
->
eù
, 20, 
mem_ac˚ss_exec
);

206 i‡(!
buf
) {

207 
buf
 = &
fixed
;

208 
	`mem_ac˚ss
(
˘x
->
mem
, ctx->
ªgs
->
eù
, 20, 
buf
, 
mem_ac˚ss_exec
);

210 
˘x
->
mem
->
ß„
 = 
mem_ß„_mode
;

213 
	`x86_dißsm
(
buf
, 
iß_eù
, &
iß_ö°
);

217 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
))

218 
	`iß_execuã_ö°
(
buf
);

219 
	}
}

222 
	$˘x_£t_eù
(
˘x_t
 *
˘x
, 
uöt32_t
 
eù
)

225 i‡(
˘x
->
ªgs
->
eù
 !eù && !
	`˘x_gë_°©us
(˘x, 
˘x_•ecmode
)) {

226 
	`˘x_£t_°©us
(
˘x
, 
˘x_•ecmode
);

227 
˘x
->
backup_eù
 = ctx->
ªgs
->
eù
;

231 
˘x
->
ªgs
->
eù
 =Éip;

232 
	}
}

235 
	$˘x_ªcovî
(
˘x_t
 *
˘x
)

237 
	`as£π
(
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
));

238 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_•ecmode
);

239 
˘x
->
ªgs
->
eù
 = ctx->
backup_eù
;

240 
	}
}

243 
	$˘x_gë_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
)

245  (
˘x
->
°©us
 & status) > 0;

246 
	}
}

249 
	$˘x_upd©e_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
)

251 
˘x_°©us_íum
 
°©us_diff
;

255 i‡(
	`ke_li°_membî
(
ke_li°_ru¬ög
, 
˘x
))

256 
	`ke_li°_ªmove
(
ke_li°_ru¬ög
, 
˘x
);

257 i‡(
	`ke_li°_membî
(
ke_li°_su•íded
, 
˘x
))

258 
	`ke_li°_ªmove
(
ke_li°_su•íded
, 
˘x
);

259 i‡(
	`ke_li°_membî
(
ke_li°_zombõ
, 
˘x
))

260 
	`ke_li°_ªmove
(
ke_li°_zombõ
, 
˘x
);

261 i‡(
	`ke_li°_membî
(
ke_li°_föished
, 
˘x
))

262 
	`ke_li°_ªmove
(
ke_li°_föished
, 
˘x
);

263 i‡(
	`ke_li°_membî
(
ke_li°_Æloc
, 
˘x
))

264 
	`ke_li°_ªmove
(
ke_li°_Æloc
, 
˘x
);

268 
°©us_diff
 = 
˘x
->
°©us
 ^ status;

269 i‡(
°©us_diff
 & ~
˘x_•ecmode
)

270 
ke
->
c⁄ãxt_ªscheduÀ
 = 1;

273 
˘x
->
°©us
 = status;

274 i‡(
˘x
->
°©us
 & 
˘x_föished
)

275 
˘x
->
°©us
 = 
˘x_föished
 | (°©u†& 
˘x_Æloc
);

276 i‡(
˘x
->
°©us
 & 
˘x_zombõ
)

277 
˘x
->
°©us
 = 
˘x_zombõ
 | (°©u†& 
˘x_Æloc
);

278 i‡(!(
˘x
->
°©us
 & 
˘x_su•íded
) &&

279 !(
˘x
->
°©us
 & 
˘x_föished
) &&

280 !(
˘x
->
°©us
 & 
˘x_zombõ
) &&

281 !(
˘x
->
°©us
 & 
˘x_locked
))

282 
˘x
->
°©us
 |
˘x_ru¬ög
;

284 
˘x
->
°©us
 &~
˘x_ru¬ög
;

287 i‡(
˘x
->
°©us
 & 
˘x_ru¬ög
)

288 
	`ke_li°_ö£π_hód
(
ke_li°_ru¬ög
, 
˘x
);

289 i‡(
˘x
->
°©us
 & 
˘x_zombõ
)

290 
	`ke_li°_ö£π_hód
(
ke_li°_zombõ
, 
˘x
);

291 i‡(
˘x
->
°©us
 & 
˘x_föished
)

292 
	`ke_li°_ö£π_hód
(
ke_li°_föished
, 
˘x
);

293 i‡(
˘x
->
°©us
 & 
˘x_su•íded
)

294 
	`ke_li°_ö£π_hód
(
ke_li°_su•íded
, 
˘x
);

295 i‡(
˘x
->
°©us
 & 
˘x_Æloc
)

296 
	`ke_li°_ö£π_hód
(
ke_li°_Æloc
, 
˘x
);

299 i‡(
	`debug_°©us
(
˘x_debug_ˇãg‹y
Ë&& (
°©us_diff
 & ~
˘x_•ecmode
)) {

300 
s°©us
[200];

301 
	`m≠_Êags
(&
˘x_°©us_m≠
, 
˘x
->
°©us
, 
s°©us
, 200);

302 
	`˘x_debug
("ctx %d changed statusÅo %s\n",

303 
˘x
->
pid
, 
s°©us
);

305 
	}
}

308 
	$˘x_£t_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
)

310 
	`˘x_upd©e_°©us
(
˘x
, ctx->
°©us
 | status);

311 
	}
}

314 
	$˘x_˛ór_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
)

316 
	`˘x_upd©e_°©us
(
˘x
, ctx->
°©us
 & ~status);

317 
	}
}

322 
˘x_t
 *
	$˘x_gë
(
pid
)

324 
˘x_t
 *
˘x
;

326 
˘x
 = 
ke
->
c⁄ãxt_li°_hód
;

327 
˘x
 && ctx->
pid
 !=Öid)

328 
˘x
 = ctx->
c⁄ãxt_√xt
;

329  
˘x
;

330 
	}
}

336 
˘x_t
 *
	$˘x_gë_zombõ
(
˘x_t
 *
∑ª¡
, 
pid
)

338 
˘x_t
 *
˘x
;

340 
˘x
 = 
ke
->
zombõ_li°_hód
; ctx; ctx = ctx->
zombõ_√xt
) {

341 i‡(
˘x
->
∑ª¡
 !=Öarent)

343 i‡(
˘x
->
pid
 ==Öid ||Öid == -1)

344  
˘x
;

346  
NULL
;

347 
	}
}

353 
	$__˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x_t
 *
˘x
)

355 i‡(
˘x
->
ho°_thªad_su•íd_a˘ive
) {

356 i‡(
	`±hªad_ˇn˚l
(
˘x
->
ho°_thªad_su•íd
))

357 
	`Áèl
("%s: context %d:Érror canceling hostÅhread",

358 
__FUNCTION__
, 
˘x
->
pid
);

359 
˘x
->
ho°_thªad_su•íd_a˘ive
 = 0;

360 
ke
->
¥o˚ss_evíts_f‹˚
 = 1;

362 
	}
}

364 
	$˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x_t
 *
˘x
)

366 
	`±hªad_muãx_lock
(&
ke
->
¥o˚ss_evíts_muãx
);

367 
	`__˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x
);

368 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

369 
	}
}

375 
	$__˘x_ho°_thªad_timî_ˇn˚l
(
˘x_t
 *
˘x
)

377 i‡(
˘x
->
ho°_thªad_timî_a˘ive
) {

378 i‡(
	`±hªad_ˇn˚l
(
˘x
->
ho°_thªad_timî
))

379 
	`Áèl
("%s: context %d:Érror canceling hostÅhread",

380 
__FUNCTION__
, 
˘x
->
pid
);

381 
˘x
->
ho°_thªad_timî_a˘ive
 = 0;

382 
ke
->
¥o˚ss_evíts_f‹˚
 = 1;

384 
	}
}

386 
	$˘x_ho°_thªad_timî_ˇn˚l
(
˘x_t
 *
˘x
)

388 
	`±hªad_muãx_lock
(&
ke
->
¥o˚ss_evíts_muãx
);

389 
	`__˘x_ho°_thªad_timî_ˇn˚l
(
˘x
);

390 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

391 
	}
}

396 
	$˘x_föish_group
(
˘x_t
 *
˘x
, 
°©us
)

398 
˘x_t
 *
aux
;

401 
˘x
->
∑ª¡
)

402 
˘x
 = ctx->
∑ª¡
;

405 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_föished
 | 
˘x_zombõ
))

411 
aux
 = 
ke
->
c⁄ãxt_li°_hód
;áux;áux =áux->
c⁄ãxt_√xt
) {

412 i‡(
aux
->
mem
 !
˘x
->mem)

415 i‡(
	`˘x_gë_°©us
(
aux
, 
˘x_zombõ
))

416 
	`˘x_£t_°©us
(
aux
, 
˘x_föished
);

417 i‡(
	`˘x_gë_°©us
(
aux
, 
˘x_h™dÀr
))

418 
	`sig«l_h™dÀr_ªtu∫
(
aux
);

419 
	`˘x_ho°_thªad_su•íd_ˇn˚l
(
aux
);

420 
	`˘x_ho°_thªad_timî_ˇn˚l
(
aux
);

421 
	`˘x_£t_°©us
(
aux
, 
˘x_föished
);

422 
aux
->
exô_code
 = 
°©us
;

424 
	}
}

432 
	$˘x_föish
(
˘x_t
 *
˘x
, 
°©us
)

434 
˘x_t
 *
aux
;

437 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_föished
 | 
˘x_zombõ
))

441 
	`˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x
);

442 
	`˘x_ho°_thªad_timî_ˇn˚l
(
˘x
);

447 
aux
 = 
ke
->
c⁄ãxt_li°_hód
;áux;áux =áux->
c⁄ãxt_√xt
) {

448 i‡(
aux
->
∑ª¡
 =
˘x
) {

449 
aux
->
∑ª¡
 = 
NULL
;

450 i‡(
	`˘x_gë_°©us
(
aux
, 
˘x_zombõ
))

451 
	`˘x_£t_°©us
(
aux
, 
˘x_föished
);

456 i‡(
˘x
->
exô_sig«l
 && ctx->
∑ª¡
) {

457 
	`sysˇŒ_debug
(" sending signal %dÅoÖid %d\n",

458 
˘x
->
exô_sig«l
, ctx->
∑ª¡
->
pid
);

459 
	`sim_sig£t_add
(&
˘x
->
∑ª¡
->
sig«l_masks
->
≥ndög
,

460 
˘x
->
exô_sig«l
);

461 
	`ke_¥o˚ss_evíts_scheduÀ
();

466 i‡(
˘x
->
˛ór_chûd_tid
) {

467 
uöt32_t
 
zîo
 = 0;

468 
	`mem_wrôe
(
˘x
->
mem
, ctx->
˛ór_chûd_tid
, 4, &
zîo
);

469 
	`˘x_fuãx_wake
(
˘x
, ctx->
˛ór_chûd_tid
, 1, 0xffffffff);

471 
	`˘x_exô_robu°_li°
(
˘x
);

474 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_h™dÀr
))

475 
	`sig«l_h™dÀr_ªtu∫
(
˘x
);

478 
	`˘x_£t_°©us
(
˘x
, ctx->
∑ª¡
 ? 
˘x_zombõ
 : 
˘x_föished
);

479 
˘x
->
exô_code
 = 
°©us
;

480 
	`ke_¥o˚ss_evíts_scheduÀ
();

481 
	}
}

484 
	$˘x_fuãx_wake
(
˘x_t
 *
˘x
, 
uöt32_t
 
fuãx
, uöt32_à
cou¡
, uöt32_à
bô£t
)

486 
wakeup_cou¡
 = 0;

487 
˘x_t
 *
wakeup_˘x
;

490 
cou¡
) {

491 
wakeup_˘x
 = 
NULL
;

492 
˘x
 = 
ke
->
su•íded_li°_hód
; ctx; ctx = ctx->
su•íded_√xt
) {

493 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_fuãx
Ë|| ctx->
wakeup_fuãx
 !
fuãx
)

495 i‡(!(
˘x
->
wakeup_fuãx_bô£t
 & 
bô£t
))

497 i‡(!
wakeup_˘x
 || 
˘x
->
wakeup_fuãx_¶ìp
 < wakeup_ctx->wakeup_futex_sleep)

498 
wakeup_˘x
 = 
˘x
;

500 i‡(
wakeup_˘x
) {

501 
	`˘x_˛ór_°©us
(
wakeup_˘x
, 
˘x_su•íded
 | 
˘x_fuãx
);

502 
	`sysˇŒ_debug
(" fuãx 0x%x:Åhªad %d wokí up\n", 
fuãx
, 
wakeup_˘x
->
pid
);

503 
wakeup_cou¡
++;

504 
cou¡
--;

509  
wakeup_cou¡
;

510 
	}
}

513 
	$˘x_exô_robu°_li°
(
˘x_t
 *
˘x
)

515 
uöt32_t
 
√xt
, 
lock_íåy
, 
off£t
, 
lock_w‹d
;

531 
lock_íåy
 = 
˘x
->
robu°_li°_hód
;

532 i‡(!
lock_íåy
)

535 
	`sysˇŒ_debug
("ctx %d:ÖrocessingÑobust futexÜist\n",

536 
˘x
->
pid
);

538 
	`mem_ªad
(
˘x
->
mem
, 
lock_íåy
, 4, &
√xt
);

539 
	`mem_ªad
(
˘x
->
mem
, 
lock_íåy
 + 4, 4, &
off£t
);

540 
	`mem_ªad
(
˘x
->
mem
, 
lock_íåy
 + 
off£t
, 4, &
lock_w‹d
);

542 
	`sysˇŒ_debug
("Üock_entry=0x%x: offset=%d,Üock_word=0x%x\n",

543 
lock_íåy
, 
off£t
, 
lock_w‹d
);

546 i‡(!
√xt
 ||Çexà=
˘x
->
robu°_li°_hód
)

548 
lock_íåy
 = 
√xt
;

550 
	}
}

554 
	$˘x_gí_¥oc_£lf_m≠s
(
˘x_t
 *
˘x
, *
∑th
)

556 
uöt32_t
 
°¨t
, 
íd
, 
°ack_°¨t
, 
°ack_íd
;

557 
mem_ac˚ss_íum
 
≥rm
, 
∑ge_≥rm
;

558 
mem_∑ge_t
 *
∑ge
;

559 
mem_t
 *
mem
 = 
˘x
->mem;

560 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

561 
fd
;

562 
FILE
 *
f
 = 
NULL
;

565 
	`°r˝y
(
∑th
, "/tmp/m2s.XXXXXX");

566 i‡((
fd
 = 
	`mk°emp
(
∑th
)Ë=-1 || (
f
 = 
	`fd›í
(fd, "wt")Ë=
NULL
)

567 
	`Áèl
("ctx_gen_proc_self_maps: cannot createÅemporary file");

570 
°ack_°¨t
 = 
ld
->
°ack_t›
 & ~(
MEM_PAGESIZE
 - 1);

571 
°ack_íd
 = 
ld
->
°ack_ba£
 & ~(
MEM_PAGESIZE
 - 1);

574 
íd
 = 0;

578 
∑ge
 = 
	`mem_∑ge_gë_√xt
(
mem
, 
íd
);

579 i‡(!
∑ge
)

581 
°¨t
 = 
∑ge
->
èg
;

582 
íd
 = 
∑ge
->
èg
;

583 
≥rm
 = 
∑ge
->≥rm & (
mem_ac˚ss_ªad
 | 
mem_ac˚ss_wrôe
 | 
mem_ac˚ss_exec
);

587 
∑ge
 = 
	`mem_∑ge_gë
(
mem
, 
íd
 + 
MEM_PAGESIZE
);

588 i‡(!
∑ge
)

590 
∑ge_≥rm
 = 
∑ge
->
≥rm
 & (
mem_ac˚ss_ªad
 | 
mem_ac˚ss_wrôe
 | 
mem_ac˚ss_exec
);

591 i‡(
∑ge_≥rm
 !
≥rm
)

593 
íd
 +
MEM_PAGESIZE
;

594 
≥rm
 = 
∑ge_≥rm
;

598 
	`Ârötf
(
f
, "%08x-%08x %c%c%c%¯00000000 00:00", 
°¨t
, 
íd
 + 
MEM_PAGESIZE
,

599 
≥rm
 & 
mem_ac˚ss_ªad
 ? 'r' : '-',

600 
≥rm
 & 
mem_ac˚ss_wrôe
 ? 'w' : '-',

601 
≥rm
 & 
mem_ac˚ss_exec
 ? 'x' : '-',

603 
	`Ârötf
(
f
, "\n");

607 
	`f˛o£
(
f
);

608 
	}
}

	@libm2skernel/elf.c

20 
	~"m2skî√l.h
"

21 
	~<î∫o.h
>

23 
	gñf_debug_ˇãg‹y
;

25 
	$ñf_ªad_ehdr
(
ñf_fûe_t
 *
f
)

27 
cou¡
;

28 
cou¡
 = 
	`‰ód
(&
f
->
ehdr
, 1, (f->ehdr), f->f);

31 i‡(
f
->
ehdr
.
e_idít
[0] != 0x7f || f->ehdr.e_ident[1] != 'E' ||

32 
f
->
ehdr
.
e_idít
[2] != 'L' || f->ehdr.e_ident[3] != 'F')

33 
	`Áèl
("%s:ÇŸá vÆid ELF fûe\n", 
f
->
∑th
);

36 i‡(
f
->
ehdr
.
e_idít
[4] == 2)

37 
	`Áèl
("%s:Åhis isá 64-bitÉxecutable, which isÇot supported in Multi2Sim. "

42 
f
->
∑th
);

45 i‡(
cou¡
 !(
f
->
ehdr
Ë|| f->ehdr.
e_ehsize
 != (f->ehdr))

46 
	`Áèl
("%s: hódî sizêi†nŸ %d byã†l⁄g", 
f
->
∑th
, (Ë(f->
ehdr
));

49 i‡(
f
->
ehdr
.
e_idít
[5] != 1)

50 
	`Áèl
("%s: ELF fûêídü¬es†mism©ch", 
f
->
∑th
);

53 
	`ñf_debug
("ELF header:\n");

54 
	`ñf_debug
("Éhdr.e_ident: EI_CLASS=%d, EI_DATA=%d, EI_VERSION=%d\n",

55 
f
->
ehdr
.
e_idít
[4], f->ehdr.e_ident[5], f->ehdr.e_ident[6]);

56 
	`ñf_debug
("Éhdr.e_ty≥: %d\n", 
f
->
ehdr
.
e_ty≥
);

57 
	`ñf_debug
("Éhdr.e_machöe: %u\n", 
f
->
ehdr
.
e_machöe
);

58 
	`ñf_debug
("Éhdr.e_íåy: 0x%x (¥ogømÉ¡ryÖoöt)\n", 
f
->
ehdr
.
e_íåy
);

59 
	`ñf_debug
("Éhdr.e_phoff: %u (¥ogøm hódîÅabÀ off£t)\n", 
f
->
ehdr
.
e_phoff
);

60 
	`ñf_debug
("Éhdr.e_shoff: %u (£˘i⁄ hódîÅabÀ off£t)\n", 
f
->
ehdr
.
e_shoff
);

61 
	`ñf_debug
("Éhdr.e_phítsize: %u\n", 
f
->
ehdr
.
e_phítsize
);

62 
	`ñf_debug
("Éhdr.e_phnum: %u\n", 
f
->
ehdr
.
e_phnum
);

63 
	`ñf_debug
("Éhdr.e_shítsize: %u\n", 
f
->
ehdr
.
e_shítsize
);

64 
	`ñf_debug
("Éhdr.e_shnum: %u\n", 
f
->
ehdr
.
e_shnum
);

65 
	`ñf_debug
("Éhdr.e_sh°∫dx: %u\n", (
uöt32_t
Ë
f
->
ehdr
.
e_sh°∫dx
);

66 
	`ñf_debug
("\n");

67 
	}
}

70 
	$ñf_symbﬁ_com∑ª
(c⁄° *
a
, c⁄° *
b
)

72 
ñf_symbﬁ_t
 *
symbﬁ_a
 = (ñf_symbﬁ_à*Ë
a
;

73 
ñf_symbﬁ_t
 *
symbﬁ_b
 = (ñf_symbﬁ_à*Ë
b
;

74 i‡(
symbﬁ_a
->
vÆue
 < 
symbﬁ_b
->value)

76 i‡(
symbﬁ_a
->
vÆue
 > 
symbﬁ_b
->value)

80 
	}
}

83 
	$ñf_ªad_symèb
(
ñf_fûe_t
 *
f
, 
£˘i⁄
)

85 *
buf
, *
bu‚ames
;

86 
i
, 
cou¡
;

87 
Elf32_Sym
 *
sym
;

88 
ñf_symbﬁ_t
 *
symbﬁ
;

91 
	`ñf_debug
(" section %d is symbolÅable withÇames in section %d\n",

92 
£˘i⁄
, 
f
->
shdr
[£˘i⁄].
sh_lök
);

93 
buf
 = 
	`ñf_£˘i⁄_ªad
(
f
, 
£˘i⁄
);

94 
bu‚ames
 = 
	`ñf_£˘i⁄_ªad
(
f
, f->
shdr
[
£˘i⁄
].
sh_lök
);

95 i‡(!
buf
 || !
bu‚ames
)

96 
	`Áèl
("%s: bogu†symbﬁÅabÀ", 
f
->
∑th
);

99 
cou¡
 = 
f
->
shdr
[
£˘i⁄
].
sh_size
 / (
Elf32_Sym
);

100 
	`ñf_debug
(" %d symbﬁs\n", 
cou¡
);

101 i‡(
f
->
symèb_cou¡
 + 
cou¡
 > f->
symèb_size
) {

102 
f
->
symèb_size
 = f->
symèb_cou¡
 + 
cou¡
;

103 
f
->
symèb
 = 
	`ªÆloc
(f->symèb, f->
symèb_size
 * (
ñf_symbﬁ_t
));

104 i‡(!
f
->
symèb
)

105 
	`Áèl
("%s: ouào‡mem‹yÑesizög symbﬁÅabÀ", 
f
->
∑th
);

109 
i
 = 0; i < 
cou¡
; i++) {

110 
sym
 = (
Elf32_Sym
 *Ë
buf
 + 
i
;

111 i‡(* (*Ë(
bu‚ames
 + 
sym
->
°_«me
) == '\0')

113 
symbﬁ
 = &
f
->
symèb
[f->
symèb_cou¡
++];

114 
symbﬁ
->
vÆue
 = 
sym
->
°_vÆue
;

115 
symbﬁ
->
size
 = 
sym
->
°_size
;

116 
symbﬁ
->
£˘i⁄
 = 
sym
->
°_shndx
;

117 
symbﬁ
->
«me
 = 
	`°rdup
(
bu‚ames
 + 
sym
->
°_«me
);

118 i‡(!
symbﬁ
->
«me
)

119 
	`Áèl
("%s: ouào‡mem‹y du∂iˇtög symbﬁÇame", 
f
->
∑th
);

123 
	`ñf_‰ì_buf„r
(
buf
);

124 
	`ñf_‰ì_buf„r
(
bu‚ames
);

125 
	}
}

128 
	$ñf_ªad_shdr
(
ñf_fûe_t
 *
f
)

130 
i
, 
cou¡
;

131 
Elf32_Shdr
 *
shdr
;

134 
f
->
shdr
 = 
	`ˇŒoc
(f->
ehdr
.
e_shnum
, (
Elf32_Shdr
));

135 i‡(!
f
->
shdr
)

136 
	`Áèl
("%s: ouào‡mem‹yáŒoˇtög hódîs", 
f
->
∑th
);

139 i‡(!
f
->
ehdr
.
e_shnum
 || f->ehdr.
e_shítsize
 !(
Elf32_Shdr
))

140 
	`Áèl
("%s:Çumber of sections is 0 or section size isÇot %d",

141 
f
->
∑th
, (Ë(
Elf32_Shdr
));

144 
	`f£ek
(
f
->f, f->
ehdr
.
e_shoff
, 
SEEK_SET
);

145 
i
 = 0; i < 
f
->
ehdr
.
e_shnum
; i++) {

146 
shdr
 = &
f
->shdr[
i
];

147 
cou¡
 = 
	`‰ód
(
shdr
, 1, (
Elf32_Shdr
), 
f
->f);

148 i‡(
cou¡
 !(
Elf32_Shdr
))

149 
	`Áèl
("%s: u√x≥˘edÉnd o‡fûêªadög shdr", 
f
->
∑th
);

153 i‡(
f
->
ehdr
.
e_sh°∫dx
 >f->ehdr.
e_shnum
 ||

154 
f
->
shdr
[f->
ehdr
.
e_sh°∫dx
].
sh_ty≥
 != 3)

155 
	`Áèl
("%s: section %d isÇotá valid stringÅable",

156 
f
->
∑th
, f->
ehdr
.
e_sh°∫dx
);

157 
f
->
sh°r
 = 
	`ñf_£˘i⁄_ªad
(f, f->
ehdr
.
e_sh°∫dx
);

158 i‡(!
f
->
sh°r
)

159 
	`Áèl
("%s: couldÇŸÑód se˘i⁄ hódî såögÅabÀ", 
f
->
∑th
);

162 
	`ñf_debug
("Section headers:\n");

163 
	`ñf_debug
("idxÅype flagsáddr offset sizeÜinkÇame\n");

164 
i
 = 0; i < 80; i++)

165 
	`ñf_debug
("-");

166 
	`ñf_debug
("\n");

167 
i
 = 0; i < 
f
->
ehdr
.
e_shnum
; i++) {

168 
shdr
 = &
f
->shdr[
i
];

169 
	`ñf_debug
("%-3d %-4u %-5u 0x%-8x 0x%-8x %-9u %-8u %s\n", 
i
,

170 
shdr
->
sh_ty≥
,

171 
shdr
->
sh_Êags
,

172 
shdr
->
sh_addr
,

173 
shdr
->
sh_off£t
,

174 
shdr
->
sh_size
,

175 
shdr
->
sh_lök
,

176 (*Ë(
f
->
sh°r
 + 
shdr
->
sh_«me
));

178 
	`ñf_debug
("\n");

181 
	`ñf_debug
("SymbolÅable:\n");

182 
i
 = 0; i < 
f
->
ehdr
.
e_shnum
; i++)

183 i‡(
f
->
shdr
[
i
].
sh_ty≥
 == 2 || f->shdr[i].sh_type == 11)

184 
	`ñf_ªad_symèb
(
f
, 
i
);

185 i‡(
f
->
symèb
)

186 
	`qs‹t
(
f
->
symèb
, f->
symèb_cou¡
, (
ñf_symbﬁ_t
), 
ñf_symbﬁ_com∑ª
);

187 
	`ñf_debug
("\n");

188 
	}
}

191 
	$ñf_ªad_phdr
(
ñf_fûe_t
 *
f
)

193 
i
, 
cou¡
;

194 
Elf32_Phdr
 *
phdr
;

197 i‡(!
f
->
ehdr
.
e_phnum
)

201 
f
->
phdr
 = 
	`ˇŒoc
(f->
ehdr
.
e_phnum
, (
Elf32_Phdr
));

202 i‡(!
f
->
phdr
)

203 
	`Áèl
("%s: ouào‡mem‹yáŒoˇtögÖrogøm hódîs", 
f
->
∑th
);

206 i‡(
f
->
ehdr
.
e_phítsize
 !(
Elf32_Phdr
))

207 
	`Áèl
("%s:Örogøm hódî sizêi†nŸ %d", 
f
->
∑th
, (Ë(
Elf32_Phdr
));

210 
	`f£ek
(
f
->f, f->
ehdr
.
e_phoff
, 
SEEK_SET
);

211 
i
 = 0; i < 
f
->
ehdr
.
e_phnum
; i++) {

212 
phdr
 = &
f
->phdr[
i
];

213 
cou¡
 = 
	`‰ód
(
phdr
, 1, (
Elf32_Phdr
), 
f
->f);

214 i‡(
cou¡
 !(
Elf32_Phdr
))

215 
	`Áèl
("%s: u√x≥˘edÉnd o‡fûêªadögÖhdr", 
f
->
∑th
);

219 i‡(
phdr
->
p_ty≥
 =
PT_PHDR
)

220 
f
->
phdt_ba£
 = 
phdr
->
p_vaddr
;

224 
	`ñf_debug
("Program headers:\n");

225 
	`ñf_debug
("idxÅype offset vaddrÖaddr filesz memsz flagsálign\n");

226 
i
 = 0; i < 80; i++)

227 
	`ñf_debug
("-");

228 
	`ñf_debug
("\n");

229 
i
 = 0; i < 
f
->
ehdr
.
e_phnum
; i++) {

230 
phdr
 = &
f
->phdr[
i
];

231 
	`ñf_debug
("%-3d 0x%-8x 0x%-8x 0x%-8x 0x%-8x %-9u %-9u %-6u %u\n", 
i
,

232 
phdr
->
p_ty≥
,

233 
phdr
->
p_off£t
,

234 
phdr
->
p_vaddr
,

235 
phdr
->
p_∑ddr
,

236 
phdr
->
p_fûesz
,

237 
phdr
->
p_memsz
,

238 
phdr
->
p_Êags
,

239 
phdr
->
p_Æign
);

241 
	`ñf_debug
("\n");

242 
	}
}

245 
ñf_fûe_t
 *
	$ñf_›í
(*
∑th
)

247 
ñf_fûe_t
 *
ñf
;

250 
ñf
 = 
	`ˇŒoc
(1, (
ñf_fûe_t
));

251 i‡(!
ñf
)

252 
	`Áèl
("elf_open: out of memory\n");

257 
ñf
->
f
 = 
	`f›í
(
∑th
, "rb");

259 i‡(!
ñf
->
f
)

260 
	`Áèl
("%s: c™nŸ o≥¿execuèbÀ fûe", 
∑th
);

261 i‡(
	`°æí
(
∑th
Ë>(
ñf
->path))

262 
	`Áèl
("%s:ÉxecuèbÀ fûê∑thÅoÿl⁄g", 
∑th
);

263 
	`°r˝y
(
ñf
->
∑th
,Öath);

266 
	`f£ek
(
ñf
->
f
, 0, 
SEEK_END
);

267 
ñf
->
size
 = 
	`·ñl
”lf->
f
);

268 
	`f£ek
(
ñf
->
f
, 0, 
SEEK_SET
);

271 
	`ñf_debug
("\n%s:Ñódög ELF fûe\n", 
∑th
);

272 
	`ñf_ªad_ehdr
(
ñf
);

273 
	`ñf_ªad_shdr
(
ñf
);

274 
	`ñf_ªad_phdr
(
ñf
);

277  
ñf
;

278 
	}
}

281 
	$ñf_˛o£
(
ñf_fûe_t
 *
f
)

283 
i
;

285 
	`f˛o£
(
f
->f);

286 i‡(
f
->
shdr
)

287 
	`‰ì
(
f
->
shdr
);

288 i‡(
f
->
sh°r
)

289 
	`‰ì
(
f
->
sh°r
);

290 i‡(
f
->
phdr
)

291 
	`‰ì
(
f
->
phdr
);

294 i‡(
f
->
symèb
) {

295 
i
 = 0; i < 
f
->
symèb_cou¡
; i++)

296 
	`‰ì
(
f
->
symèb
[
i
].
«me
);

297 
	`‰ì
(
f
->
symèb
);

301 
	`‰ì
(
f
);

302 
	}
}

313 *
	$ñf_ªad_buf„r
(
ñf_fûe_t
 *
ñf
, 
uöt32_t
 
off£t
, uöt32_à
size
)

315 *
buf
;

316 
cou¡
;

319 i‡(
off£t
 + 
size
 > 
ñf
->size) {

320 
	`ñf_debug
("%s: invÆid off£t/size\n", 
__FUNCTION__
);

321  
NULL
;

325 
buf
 = 
	`ˇŒoc
(1, 
size
);

326 i‡(!
buf
) {

327 
	`ñf_debug
("%s: ouào‡mem‹y\n", 
__FUNCTION__
);

328  
NULL
;

332 
	`f£ek
(
ñf
->
f
, 
off£t
, 
SEEK_SET
);

333 
cou¡
 = 
	`‰ód
(
buf
, 1, 
size
, 
ñf
->
f
);

334 i‡(
cou¡
 !
size
) {

335 
	`ñf_debug
("%s: couldÇŸÑód i¿fûe\n", 
__FUNCTION__
);

336 
	`‰ì
(
buf
);

337  
NULL
;

341  
buf
;

342 
	}
}

345 
	$ñf_‰ì_buf„r
(*
buf
)

347 
	`‰ì
(
buf
);

348 
	}
}

357 *
	$ñf_£˘i⁄_ªad_off£t
(
ñf_fûe_t
 *
ñf
, 
£˘i⁄
, 
uöt32_t
 
off£t
, uöt32_à
size
)

359 
Elf32_Shdr
 *
shdr
;

362 i‡(
£˘i⁄
 < 0 || se˘i⁄ >
ñf
->
ehdr
.
e_shnum
) {

363 
	`ñf_debug
("%s: se˘i⁄ ouào‡ønge\n", 
__FUNCTION__
);

364  
NULL
;

368 
shdr
 = &
ñf
->shdr[
£˘i⁄
];

369 i‡(
off£t
 + 
size
 > 
shdr
->
sh_size
 || !size) {

370 
	`ñf_debug
("%s: invÆid off£t/size\n", 
__FUNCTION__
);

371  
NULL
;

375 i‡(
ñf
->
shdr
[
£˘i⁄
].
sh_ty≥
 == 8)

376  
	`ˇŒoc
(1, 
size
);

379  
	`ñf_ªad_buf„r
(
ñf
, 
shdr
->
sh_off£t
 + 
off£t
, 
size
);

380 
	}
}

383 *
	$ñf_£˘i⁄_ªad
(
ñf_fûe_t
 *
ñf
, 
£˘i⁄
)

385 
Elf32_Shdr
 *
shdr
;

388 i‡(
£˘i⁄
 < 0 || se˘i⁄ >
ñf
->
ehdr
.
e_shnum
) {

389 
	`ñf_debug
("%s: se˘i⁄ ouào‡ønge\n", 
__FUNCTION__
);

390  
NULL
;

394 
shdr
 = &
ñf
->shdr[
£˘i⁄
];

395  
	`ñf_£˘i⁄_ªad_off£t
(
ñf
, 
£˘i⁄
, 0, 
shdr
->
sh_size
);

396 
	}
}

399 
	$ñf_£˘i⁄_cou¡
(
ñf_fûe_t
 *
f
)

401  
f
->
ehdr
.
e_shnum
;

402 
	}
}

405 
	$ñf_£˘i⁄_öfo
(
ñf_fûe_t
 *
f
, 
£˘i⁄
,

406 **
≤ame
, 
uöt32_t
 *
∑ddr
, uöt32_à*
psize
, uöt32_à*
pÊags
)

408 i‡(
£˘i⁄
 < 0 || se˘i⁄ >
f
->
ehdr
.
e_shnum
) {

409 
	`ñf_debug
("elf_section_size: section out ofÑange\n");

412 i‡(
≤ame
)

413 *
≤ame
 = 
f
->
sh°r
 + f->
shdr
[
£˘i⁄
].
sh_«me
;

414 i‡(
∑ddr
)

415 *
∑ddr
 = 
f
->
shdr
[
£˘i⁄
].
sh_addr
;

416 i‡(
psize
)

417 *
psize
 = 
f
->
shdr
[
£˘i⁄
].
sh_size
;

418 i‡(
pÊags
)

419 *
pÊags
 = 
f
->
shdr
[
£˘i⁄
].
sh_Êags
;

421 
	}
}

424 
uöt32_t
 
	$ñf_£˘i⁄_addr
(
ñf_fûe_t
 *
f
, 
£˘i⁄
)

426 i‡(
£˘i⁄
 < 0 || se˘i⁄ >
f
->
ehdr
.
e_shnum
) {

427 
	`ñf_debug
("elf_section_size: section out ofÑange\n");

430  
f
->
shdr
[
£˘i⁄
].
sh_addr
;

431 
	}
}

440 
ñf_symbﬁ_t
 *
	$ñf_gë_symbﬁ_by_addªss
(
ñf_fûe_t
 *
f
, 
uöt32_t
 
addr
, uöt32_à*
poffs
)

442 
mö
, 
max
, 
mid
;

445 i‡(!
f
->
symèb_cou¡
)

446  
NULL
;

447 i‡(
addr
 < 
f
->
symèb
[0].
vÆue
)

448  
NULL
;

449 
mö
 = 0;

450 
max
 = 
f
->
symèb_cou¡
;

451 
mö
 + 1 < 
max
) {

452 
mid
 = (
max
 + 
mö
) / 2;

453 i‡(
f
->
symèb
[
mid
].
vÆue
 > 
addr
)

454 
max
 = 
mid
;

455 i‡(
f
->
symèb
[
mid
].
vÆue
 < 
addr
)

456 
mö
 = 
mid
;

458 
mö
 = 
mid
;

464 
mö
 > 0 && 
f
->
symèb
[mö].
vÆue
 == f->symtab[min - 1].value)

465 
mö
--;

466 i‡(!
f
->
symèb
[
mö
].
vÆue
)

467  
NULL
;

468 i‡(
poffs
)

469 *
poffs
 = 
addr
 - 
f
->
symèb
[
mö
].
vÆue
;

470  &
f
->
symèb
[
mö
];

471 
	}
}

474 
ñf_symbﬁ_t
 *
	$ñf_gë_symbﬁ_by_«me
(
ñf_fûe_t
 *
f
, *
«me
)

476 
i
;

477 
i
 = 0; i < 
f
->
symèb_cou¡
; i++)

478 i‡(!
	`°rcmp
(
f
->
symèb
[
i
].
«me
,Çame))

479  &
f
->
symèb
[
i
];

480  
NULL
;

481 
	}
}

486 
	$ñf_mîge_symèb
(
ñf_fûe_t
 *
f
, ñf_fûe_à*
§c
)

488 
i
;

489 
ñf_symbﬁ_t
 *
§csym
, *
d°sym
;

492 i‡(
f
->
symèb_cou¡
 + 
§c
->symèb_cou¡ > f->
symèb_size
) {

493 
f
->
symèb_size
 = f->
symèb_cou¡
 + 
§c
->symtab_count;

494 
f
->
symèb
 = 
	`ªÆloc
(f->symèb, f->
symèb_size
 * (
ñf_symbﬁ_t
));

495 i‡(!
f
->
symèb
)

500 
i
 = 0; i < 
§c
->
symèb_cou¡
; i++) {

501 
§csym
 = &
§c
->
symèb
[
i
];

502 
d°sym
 = &
f
->
symèb
[f->
symèb_cou¡
++];

503 
d°sym
->
vÆue
 = 
§csym
->value;

504 
d°sym
->
«me
 = 
	`°rdup
(
§csym
->name);

505 i‡(!
d°sym
->
«me
)

510 
	`qs‹t
(
f
->
symèb
, f->
symèb_cou¡
, (
ñf_symbﬁ_t
), 
ñf_symbﬁ_com∑ª
);

512 
	}
}

515 
uöt32_t
 
	$ñf_gë_íåy
(
ñf_fûe_t
 *
f
)

517  
f
->
ehdr
.
e_íåy
;

518 
	}
}

521 *
	$ñf_phdt
(
ñf_fûe_t
 *
f
)

523  
f
->
phdr
;

524 
	}
}

526 
uöt32_t
 
	$ñf_phdt_ba£
(
ñf_fûe_t
 *
f
)

528  
f
->
phdt_ba£
;

529 
	}
}

532 
uöt32_t
 
	$ñf_phdr_cou¡
(
ñf_fûe_t
 *
f
)

534  
f
->
ehdr
.
e_phnum
;

535 
	}
}

538 
uöt32_t
 
	$ñf_phdr_size
(
ñf_fûe_t
 *
f
)

540  
f
->
ehdr
.
e_phítsize
;

541 
	}
}

	@libm2skernel/fs.c

20 
	~<m2skî√l.h
>

22 
fdt_t
 *
	$fdt_¸óã
()

24 
fdt_t
 *
fdt
;

25 
fd_t
 *
fd0
, *
fd1
, *
fd2
;

28 
fdt
 = 
	`ˇŒoc
(1, (
fdt_t
));

29 
fdt
->
fd_li°
 = 
	`li°_¸óã
(3);

32 
fd0
 = 
	`ˇŒoc
(1, (
fd_t
));

33 
fd0
->
köd
 = 
fd_köd_°d
;

34 
fd0
->
gue°_fd
 = 0;

35 
fd0
->
ho°_fd
 = 0;

36 
	`li°_add
(
fdt
->
fd_li°
, 
fd0
);

39 
fd1
 = 
	`ˇŒoc
(1, (
fd_t
));

40 
fd1
->
köd
 = 
fd_köd_°d
;

41 
fd1
->
gue°_fd
 = 1;

42 
fd1
->
ho°_fd
 = 1;

43 
	`li°_add
(
fdt
->
fd_li°
, 
fd1
);

46 
fd2
 = 
	`ˇŒoc
(1, (
fd_t
));

47 
fd2
->
köd
 = 
fd_köd_°d
;

48 
fd2
->
gue°_fd
 = 2;

49 
fd2
->
ho°_fd
 = 2;

50 
	`li°_add
(
fdt
->
fd_li°
, 
fd2
);

52  
fdt
;

53 
	}
}

56 
	$fdt_‰ì
(
fdt_t
 *
fdt
)

58 
i
;

59 
fd_t
 *
fd
;

62 
i
 = 0; i < 
	`li°_cou¡
(
fdt
->
fd_li°
); i++) {

63 
fd
 = 
	`li°_gë
(
fdt
->
fd_li°
, 
i
);

64 i‡(
fd
)

65 
	`‰ì
(
fd
);

69 
	`li°_‰ì
(
fdt
->
fd_li°
);

70 
	`‰ì
(
fdt
);

71 
	}
}

74 
	$fdt_dump
(
fdt_t
 *
fdt
, 
FILE
 *
f
)

76 
i
, 
busy
 = 0;

77 
fd_t
 *
fd
;

79 
i
 = 0; i < 
	`li°_cou¡
(
fdt
->
fd_li°
); i++) {

80 
	`fdt_íåy_dump
(
fdt
, 
i
, 
f
);

81 
fd
 = 
	`li°_gë
(
fdt
->
fd_li°
, 
i
);

82 i‡(
fd
)

83 
busy
++;

85 
	`Ârötf
(
f
, " %dÅabÀÉ¡rõs, %d busy\n", 
	`li°_cou¡
(
fdt
->
fd_li°
), 
busy
);

86 
	}
}

89 
	$fdt_gë_ho°_fd
(
fdt_t
 *
fdt
, 
gue°_fd
)

91 
fd_t
 *
fd
;

93 
fd
 = 
	`li°_gë
(
fdt
->
fd_li°
, 
gue°_fd
);

94  
fd
 ? fd->
ho°_fd
 : -1;

95 
	}
}

98 
	$fdt_gë_gue°_fd
(
fdt_t
 *
fdt
, 
ho°_fd
)

100 
fd_t
 *
fd
;

101 
i
;

103 
i
 = 0; i < 
	`li°_cou¡
(
fdt
->
fd_li°
); i++) {

104 
fd
 = 
	`li°_gë
(
fdt
->
fd_li°
, 
i
);

105 i‡(
fd
->
ho°_fd
 == host_fd)

106  
i
;

109 
	}
}

112 
	$fdt_íåy_dump
(
fdt_t
 *
fdt
, 
ödex
, 
FILE
 *
f
)

114 
fd_t
 *
fd
;

115 i‡(
ödex
 < 0 || index >
	`li°_cou¡
(
fdt
->
fd_li°
))

117 
fd
 = 
	`li°_gë
(
fdt
->
fd_li°
, 
ödex
);

118 i‡(!
fd
)

119 
	`Ârötf
(
f
, " %2dÉm±y\n", 
ödex
);

121 
	`as£π
(
fd
->
gue°_fd
 =
ödex
);

122 
	`Ârötf
(
f
, " %2d host_fd=%-2d kind=%-2dÖath='%s'\n",

123 
fd
->
gue°_fd
, fd->
ho°_fd
, fd->
köd
, fd->
∑th
);

125 
	}
}

128 
fd_t
 *
	$fdt_íåy_gë
(
fdt_t
 *
fdt
, 
ödex
)

130  
	`li°_gë
(
fdt
->
fd_li°
, 
ödex
);

131 
	}
}

134 
fd_t
 *
	$fdt_íåy_√w
(
fdt_t
 *
fdt
, 
fd_köd_íum
 
köd
,

135 
ho°_fd
, *
∑th
, 
Êags
)

137 
i
, 
gue°_fd
;

138 
fd_t
 *
fd
;

141 
gue°_fd
 = -1;

142 
i
 = 0; i < 
	`li°_cou¡
(
fdt
->
fd_li°
Ë&& 
gue°_fd
 < 0; i++)

143 i‡(!
	`li°_gë
(
fdt
->
fd_li°
, 
i
))

144 
gue°_fd
 = 
i
;

147 i‡(
gue°_fd
 < 0) {

148 
gue°_fd
 = 
	`li°_cou¡
(
fdt
->
fd_li°
);

149 
	`li°_add
(
fdt
->
fd_li°
, 
NULL
);

153 
fd
 = 
	`ˇŒoc
(1, (
fd_t
));

154 
fd
->
gue°_fd
 = guest_fd;

155 
fd
->
ho°_fd
 = host_fd;

156 
fd
->
köd
 = kind;

157 
fd
->
Êags
 = flags;

158 
	`°∫˝y
(
fd
->
∑th
,Ö©h, 
MAX_PATH_SIZE
);

159 
	`li°_£t
(
fdt
->
fd_li°
, 
gue°_fd
, 
fd
);

162  
fd
;

163 
	}
}

166 
	$fdt_íåy_‰ì
(
fdt_t
 *
fdt
, 
ödex
)

168 
fd_t
 *
fd
;

171 
fd
 = 
	`li°_gë
(
fdt
->
fd_li°
, 
ödex
);

172 i‡(!
fd
)

176 i‡(
fd
->
köd
 =
fd_köd_vútuÆ
) {

177 i‡(
	`u∆ök
(
fd
->
∑th
))

178 
	`w¨nög
("%s:Åemporary host virtual file couldÇot be deleted",

179 
fd
->
∑th
);

183 
	`‰ì
(
fd
);

184 
	`li°_£t
(
fdt
->
fd_li°
, 
ödex
, 
NULL
);

185 
	}
}

	@libm2skernel/isa.c

20 
	~"m2skî√l.h
"

24 
˘x_t
 *
	giß_˘x
;

25 
ªgs_t
 *
	giß_ªgs
;

26 
mem_t
 *
	giß_mem
;

27 
uöt32_t
 
	giß_eù
;

28 
uöt32_t
 
	giß_addr
;

29 
uöt32_t
 
	giß_èrgë
;

30 
x86_ö°_t
 
	giß_ö°
;

31 
uöt64_t
 
	giß_ö°_cou¡
;

32 
	giß_fun˘i⁄_Àvñ
;

34 
	giß_ˇŒ_debug_ˇãg‹y
;

35 
	giß_ö°_debug_ˇãg‹y
;

40 (*
	tö°_im∂_‚_t
)();

41 
ö°_im∂_‚_t
 
ö°_im∂_èbÀ
[
x86_›code_cou¡
] = {

42 
NULL


43 
	#DEFINST
(
«me
,
›1
,
›2
,
›3
,
imm
,
pfx
Ë,
›_
##«me##
_im∂


	)

44 
	~<machöe.d©
>

45 #unde‡
DEFINST


46 
	}
};

53 
uöt64_t
 
	gö°_‰eq
[
x86_›code_cou¡
];

55 
	$iß_ö°_°©_dump
(
FILE
 *
f
)

57 
i
;

58 
i
 = 1; i < 
x86_›code_cou¡
; i++) {

59 i‡(!
ö°_‰eq
[
i
])

61 
	`Ârötf
(
f
, "%† %Œd\n", 
	`x86_ö°_«me
(
i
),

62 (Ë
ö°_‰eq
[
i
]);

64 
	}
}

66 
	$iß_ö°_°©_ª£t
()

68 
i
;

69 
i
 = 1; i < 
x86_›code_cou¡
; i++)

70 
ö°_‰eq
[
i
] = 0;

71 
	}
}

76 
	$iß_îr‹
(*
fmt
, ...) {

77 
va_li°
 
va
;

78 
	`va_°¨t
(
va
, 
fmt
);

79 
	`Ârötf
(
°dîr
, "fatal: context %dát 0x%08x inst %lld: ",

80 
iß_˘x
->
pid
, 
iß_eù
, (Ë
iß_ö°_cou¡
);

81 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

82 
	`Ârötf
(
°dîr
, "\n");

83 
	`ab‹t
();

84 
	}
}

87 #ifde‡
ISA_CHECK_NAN


88 
	#BIT
(
x
Ë((
vÆue
[9-(x)/8]&(1<<(7-(x%8))))>0)

	)

89 
	$iß_is_«n
(
uöt8_t
 *
vÆue
)

91 
exp_0s
 = 0, 
sig_0s
 = 0, 
i
;

92 
i
 = 1; i <= 15; i++)

93 i‡(!
	`BIT
(
i
))

94 
exp_0s
++;

95 
i
 = 16; i <= 79; i++)

96 i‡(!
	`BIT
(
i
))

97 
sig_0s
++;

98  !
exp_0s
 && 
sig_0s
 < 64;

99 
	}
}

100 #unde‡
BIT


108 
	mshi·
;

109 
	msize
;

110 } 
	giß_ªg_öfo
[] = {

145 
	$iß_£t_Êag
(
x86_Êag_t
 
Êag
)

147 
iß_ªgs
->
eÊags
 = 
	`SETBIT32
(iß_ªgs->eÊags, 
Êag
);

148 
	}
}

151 
	$iß_˛ór_Êag
(
x86_Êag_t
 
Êag
)

153 
iß_ªgs
->
eÊags
 = 
	`CLEARBIT32
(iß_ªgs->eÊags, 
Êag
);

154 
	}
}

157 
	$iß_gë_Êag
(
x86_Êag_t
 
Êag
)

159 
ªt
;

160 
ªt
 = 
	`GETBIT32
(
iß_ªgs
->
eÊags
, 
Êag
) > 0;

161 
	`as£π
(
ªt
 == 0 ||Ñet == 1);

162  
ªt
;

163 
	}
}

170 
uöt32_t
 
	giß_bô_mask
[5] = { 0, 0xff, 0xffff, 0, 0xffffffff};

171 
uöt32_t
 
	$iß_lﬂd_ªg
(
x86_ªgi°î_t
 
ªg
)

173 
uöt32_t
 
mask
, *
¥eg
;

174 
mask
 = 
iß_bô_mask
[
iß_ªg_öfo
[
ªg
].
size
];

175 
¥eg
 = (*Ë
iß_ªgs
 + 
iß_ªg_öfo
[
ªg
].
shi·
;

176  *
¥eg
 & 
mask
;

177 
	}
}

180 
	$iß_°‹e_ªg
(
x86_ªgi°î_t
 
ªg
, 
uöt32_t
 
vÆue
)

182 
uöt32_t
 
mask
, *
¥eg
;

183 
mask
 = 
iß_bô_mask
[
iß_ªg_öfo
[
ªg
].
size
];

184 
¥eg
 = (*Ë
iß_ªgs
 + 
iß_ªg_öfo
[
ªg
].
shi·
;

185 *
¥eg
 = (*¥eg & ~
mask
Ë| (
vÆue
 & mask);

186 
	`iß_ö°_debug
(" %†<- 0x%x", 
x86_ªgi°î_«me
[
ªg
], 
vÆue
);

187 
	}
}

192 
uöt32_t
 
	$iß_löór_addªss
(
uöt32_t
 
off£t
)

195 i‡(!
iß_ö°
.
£gmít
) {

196 
iß_addr
 = 
off£t
;

197  
iß_addr
;

201 i‡(
iß_ö°
.
£gmít
 !
ªg_gs
)

202 
	`Áèl
("segment overrideÇot supported for otherÑegisterÅhan gs");

203 i‡(
	`iß_lﬂd_ªg
(
ªg_gs
) != 0x33)

204 
	`Áèl
("iß_löór_addªss: g†0x%x", 
	`iß_lﬂd_ªg
(
ªg_gs
));

205 i‡(!
iß_˘x
->
glibc_£gmít_ba£
)

206 
	`Áèl
("isa_linear_address: glibc segmentÇot set");

209 
iß_addr
 = 
iß_˘x
->
glibc_£gmít_ba£
 + 
off£t
;

210  
iß_addr
;

211 
	}
}

215 
uöt32_t
 
	$iß_ef„˘ive_addªss
()

217 
uöt32_t
 
addr
;

218 
	`as£π
(
iß_ö°
.
modrm_mod
 != 0x03);

221 
addr
 = 
	`iß_lﬂd_ªg
(
iß_ö°
.
ó_ba£
) +

222 
	`iß_lﬂd_ªg
(
iß_ö°
.
ó_ödex
Ë* iß_ö°.
ó_sˇÀ
 +

223 
iß_ö°
.
di•
;

226 
addr
 = 
	`iß_löór_addªss
(addr);

228  
addr
;

229 
	}
}

234 
uöt32_t
 
	$iß_moffs_addªss
()

236 
uöt32_t
 
addr
;

239 
addr
 = 
iß_ö°
.
imm
.
d
;

242 
addr
 = 
	`iß_löór_addªss
(addr);

244  
addr
;

245 
	}
}

248 
uöt8_t
 
	$iß_lﬂd_rm8
()

250 
uöt8_t
 
vÆue
;

251 i‡(
iß_ö°
.
modrm_mod
 == 0x03)

252  
	`iß_lﬂd_ªg
(
iß_ö°
.
modrm_rm
 + 
ªg_Æ
);

253 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 1, &
vÆue
);

254 
	`iß_ö°_debug
(" [0x%x]=0x%x", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

255  
vÆue
;

256 
	}
}

259 
uöt16_t
 
	$iß_lﬂd_rm16
()

261 
uöt16_t
 
vÆue
;

262 i‡(
iß_ö°
.
modrm_mod
 == 0x03)

263  
	`iß_lﬂd_ªg
(
iß_ö°
.
modrm_rm
 + 
ªg_ax
);

264 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 2, &
vÆue
);

265 
	`iß_ö°_debug
(" [0x%x]=0x%x", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

266  
vÆue
;

267 
	}
}

270 
uöt32_t
 
	$iß_lﬂd_rm32
()

272 
uöt32_t
 
vÆue
;

273 i‡(
iß_ö°
.
modrm_mod
 == 0x03)

274  
	`iß_lﬂd_ªg
(
iß_ö°
.
modrm_rm
 + 
ªg_óx
);

275 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 4, &
vÆue
);

276 
	`iß_ö°_debug
(" [0x%x]=0x%x", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

277  
vÆue
;

278 
	}
}

281 
	$iß_°‹e_rm8
(
uöt8_t
 
vÆue
)

283 i‡(
iß_ö°
.
modrm_mod
 == 0x03) {

284 
	`iß_°‹e_ªg
(
iß_ö°
.
modrm_rm
 + 
ªg_Æ
, 
vÆue
);

287 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 1, &
vÆue
);

288 
	`iß_ö°_debug
(" [0x%x] <- 0x%x", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

289 
	}
}

292 
	$iß_°‹e_rm16
(
uöt16_t
 
vÆue
)

294 i‡(
iß_ö°
.
modrm_mod
 == 0x03) {

295 
	`iß_°‹e_ªg
(
iß_ö°
.
modrm_rm
 + 
ªg_ax
, 
vÆue
);

298 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 2, &
vÆue
);

299 
	`iß_ö°_debug
(" [0x%x] <- 0x%x", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

300 
	}
}

303 
	$iß_°‹e_rm32
(
uöt32_t
 
vÆue
)

305 i‡(
iß_ö°
.
modrm_mod
 == 0x03) {

306 
	`iß_°‹e_ªg
(
iß_ö°
.
modrm_rm
 + 
ªg_óx
, 
vÆue
);

309 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 4, &
vÆue
);

310 
	`iß_ö°_debug
(" [0x%x] <- 0x%x", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

311 
	}
}

314 
	$iß_lﬂd_Âu
(
ödex
, 
uöt8_t
 *
vÆue
)

316 
eff_ödex
 = (
iß_ªgs
->
Âu_t›
 + 
ödex
) % 8;

317 
	`as£π
(
ödex
 >= 0 && index < 8);

318 
	`as£π
(
iß_ªgs
->
Âu_°ack
[
eff_ödex
].
vÆid
);

319 
	`mem˝y
(
vÆue
, 
iß_ªgs
->
Âu_°ack
[
eff_ödex
].value, 10);

320 i‡(
	`debug_°©us
(
iß_ö°_debug_ˇãg‹y
))

321 
	`iß_ö°_debug
(" st(%d)=%g", 
ödex
, 
	`iß_exãnded_to_doubÀ
(
vÆue
));

322 
	}
}

325 
	$iß_°‹e_Âu
(
ödex
, 
uöt8_t
 *
vÆue
)

327 
	`as£π
(
ödex
 >= 0 && index < 8);

328 i‡(
	`debug_°©us
(
iß_ö°_debug_ˇãg‹y
))

329 
	`iß_ö°_debug
(" st(%dË<- %g", 
ödex
, 
	`iß_exãnded_to_doubÀ
(
vÆue
));

330 #ifde‡
ISA_CHECK_NAN


331 i‡(
	`iß_is_«n
(
vÆue
))

332 
	`Áèl
("NaN floatingÖointÑesult");

334 
ödex
 = (
iß_ªgs
->
Âu_t›
 + index) % 8;

335 
	`as£π
(
iß_ªgs
->
Âu_°ack
[
ödex
].
vÆid
);

336 
	`mem˝y
(
iß_ªgs
->
Âu_°ack
[
ödex
].
vÆue
, value, 10);

337 
	}
}

340 
	$iß_push_Âu
(
uöt8_t
 *
vÆue
)

342 i‡(
	`debug_°©us
(
iß_ö°_debug_ˇãg‹y
))

343 
	`iß_ö°_debug
(" st(0Ë<- %g (pushed)", 
	`iß_exãnded_to_doubÀ
(
vÆue
));

344 #ifde‡
ISA_CHECK_NAN


345 i‡(
	`iß_is_«n
(
vÆue
))

346 
	`Áèl
("NaN floatingÖointÑesult");

348 
iß_ªgs
->
Âu_t›
 = (isa_regs->fpu_top + 7) % 8;

349 
	`as£π
(!
iß_ªgs
->
Âu_°ack
[iß_ªgs->
Âu_t›
].
vÆid
);

350 
iß_ªgs
->
Âu_°ack
[iß_ªgs->
Âu_t›
].
vÆid
 = 1;

351 
	`mem˝y
(
iß_ªgs
->
Âu_°ack
[iß_ªgs->
Âu_t›
].
vÆue
, value, 10);

352 
	}
}

355 
	$iß_p›_Âu
(
uöt8_t
 *
vÆue
)

357 
	`as£π
(
iß_ªgs
->
Âu_°ack
[iß_ªgs->
Âu_t›
].
vÆid
);

358 i‡(
vÆue
) {

359 
	`mem˝y
(
vÆue
, 
iß_ªgs
->
Âu_°ack
[iß_ªgs->
Âu_t›
].value, 10);

360 i‡(
	`debug_°©us
(
iß_ö°_debug_ˇãg‹y
))

361 
	`iß_ö°_debug
(" st(0Ë-> %g (p›≥d)", 
	`iß_exãnded_to_doubÀ
(
vÆue
));

363 
iß_ªgs
->
Âu_°ack
[iß_ªgs->
Âu_t›
].
vÆid
 = 0;

364 
iß_ªgs
->
Âu_t›
 = (isa_regs->fpu_top + 1) % 8;

365 
	}
}

368 
	$iß_lﬂd_doubÀ
()

370 
vÆue
;

371 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 8, &
vÆue
);

372 
	`iß_ö°_debug
(" [0x%x]=%g", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

373  
vÆue
;

374 
	}
}

377 
	$iß_doubÀ_to_exãnded
(
f
, 
uöt8_t
 *
e
)

379 
asm
 volatile ("fldl %1; fstpt %0\n\t"

380 : "=m" (*
e
Ë: "m" (
f
));

381 
	}
}

384 
	$iß_exãnded_to_doubÀ
(
uöt8_t
 *
e
)

386 
f
;

387 
asm
 volatile ("fldt %1; fstpl %0\n\t"

388 : "=m" (
f
Ë: "m" (*
e
));

389  
f
;

390 
	}
}

393 
	$iß_Êﬂt_to_exãnded
(
f
, 
uöt8_t
 *
e
)

395 
asm
 volatile ("fld %1; fstpt %0\n\t"

396 : "=m" (*
e
Ë: "m" (
f
));

397 
	}
}

400 
	$iß_exãnded_to_Êﬂt
(
uöt8_t
 *
e
)

402 
f
;

403 
asm
 volatile ("fldt %1; fstp %0\n\t"

404 : "=m" (
f
Ë: "m" (*
e
));

405  
f
;

406 
	}
}

409 
	$iß_lﬂd_exãnded
(
uöt8_t
 *
vÆue
)

411 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 10, 
vÆue
);

412 
	}
}

415 
	$iß_°‹e_exãnded
(
uöt8_t
 *
vÆue
)

417 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 10, 
vÆue
);

418 
	}
}

421 
	$iß_°‹e_doubÀ
(
vÆue
)

423 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 8, &
vÆue
);

424 
	`iß_ö°_debug
(" [0x%x] <- %g", 
	`iß_ef„˘ive_addªss
(), 
vÆue
);

425 
	}
}

428 
	$iß_lﬂd_Êﬂt
()

430 
vÆue
;

431 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 4, &
vÆue
);

432 
	`iß_ö°_debug
(" [0x%x]=%g", 
	`iß_ef„˘ive_addªss
(), (Ë
vÆue
);

433  
vÆue
;

434 
	}
}

437 
	$iß_°‹e_Êﬂt
(
vÆue
)

439 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 4, &
vÆue
);

440 
	`iß_ö°_debug
(" [0x%x] <- %g", 
	`iß_ef„˘ive_addªss
(), (Ë
vÆue
);

441 
	}
}

446 
	$iß_°‹e_Âu_code
(
uöt16_t
 
°©us
)

448 
iß_ªgs
->
Âu_code
 = 0;

449 i‡(
	`GETBIT32
(
°©us
, 14))

450 
iß_ªgs
->
Âu_code
 |= 0x8;

451 
iß_ªgs
->
Âu_code
 |(
°©us
 >> 8) & 0x7;

452 
	}
}

457 
uöt16_t
 
	$iß_lﬂd_Âu_°©us
()

459 
uöt16_t
 
°©us
 = 0;

460 
	`as£π
(
iß_ªgs
->
Âu_t›
 < 8);

461 
°©us
 |
iß_ªgs
->
Âu_t›
 << 11;

462 i‡(
	`GETBIT32
(
iß_ªgs
->
Âu_code
, 3))

463 
°©us
 |= 0x4000;

464 
°©us
 |(
iß_ªgs
->
Âu_code
 & 0x7) << 8;

465  
°©us
;

466 
	}
}

472 
	$iß_debug_ˇŒ
()

474 
i
;

475 
ñf_symbﬁ_t
 *
‰om
, *
to
;

476 *
a˘i⁄
;

479 i‡(!
	`°∫cmp
(
iß_ö°
.
f‹m©
, "call", 4))

480 
a˘i⁄
 = "call";

481 i‡(!
	`°∫cmp
(
iß_ö°
.
f‹m©
, "ret", 3))

482 
a˘i⁄
 = "ret";

487 
i
 = 0; i < 
iß_fun˘i⁄_Àvñ
; i++)

488 
	`iß_ˇŒ_debug
("| ");

489 
‰om
 = 
	`ñf_gë_symbﬁ_by_addªss
(
iß_˘x
->
lﬂdî
->
ñf
, 
iß_eù
, 
NULL
);

490 
to
 = 
	`ñf_gë_symbﬁ_by_addªss
(
iß_˘x
->
lﬂdî
->
ñf
, 
iß_ªgs
->
eù
, 
NULL
);

491 i‡(
‰om
)

492 
	`iß_ˇŒ_debug
("%s", 
‰om
->
«me
);

494 
	`iß_ˇŒ_debug
("0x%x", 
iß_eù
);

495 
	`iß_ˇŒ_debug
(" - %†tÿ", 
a˘i⁄
);

496 i‡(
to
)

497 
	`iß_ˇŒ_debug
("%s", 
to
->
«me
);

499 
	`iß_ˇŒ_debug
("0x%x", 
iß_ªgs
->
eù
);

500 
	`iß_ˇŒ_debug
("\n");

503 
	`°∫cmp
(
iß_ö°
.
f‹m©
, "ˇŒ", 4Ë? 
iß_fun˘i⁄_Àvñ
-- : isa_function_level++;

504 
	}
}

512 
	$iß_öô
()

514 
	`dißsm_öô
();

515 
	}
}

518 
	$iß_d⁄e
()

520 
	`dißsm_d⁄e
();

521 
	}
}

524 
	$iß_dump
(
FILE
 *
f
)

526 i‡(!
iß_˘x
)

528 
	`Ârötf
(
f
, "iß_˘x:Öid=%d\n", 
iß_˘x
->
pid
);

529 
	`Ârötf
(
f
, "iß_ö°_cou¡: %Œd\n", (Ë
iß_ö°_cou¡
);

530 
	`Ârötf
(
f
, "isa_inst:\n");

531 
	`Ârötf
(
f
, "Éù=0x%x\n", 
iß_ö°
.
eù
);

532 
	`Ârötf
(
f
, " ");

533 
	`x86_ö°_dump
(&
iß_ö°
, 
f
);

534 
	`Ârötf
(
f
, " (%d byãs)\n", 
iß_ö°
.
size
);

535 
	`Ârötf
(
f
, "Ñï=%d\n", 
iß_ö°
.
ªp
);

536 
	`Ârötf
(
f
, "isa_regs:\n");

537 
	`ªgs_dump
(
iß_ªgs
, 
f
);

538 
	}
}

541 
	$iß_execuã_ö°
(*
buf
)

543 i‡(
iß_ö°
.
›code
 =
›_n⁄e
) {

544 
b1
, 
b2
, 
b3
, 
b4
;

545 
	`mem_ªad
(
iß_mem
, 
iß_eù
, 1, &
b1
);

546 
	`mem_ªad
(
iß_mem
, 
iß_eù
 + 1, 1, &
b2
);

547 
	`mem_ªad
(
iß_mem
, 
iß_eù
 + 2, 1, &
b3
);

548 
	`mem_ªad
(
iß_mem
, 
iß_eù
 + 3, 1, &
b4
);

549 
	`iß_îr‹
("not implemented (%02x %02x %02x %02x...)",

550 
b1
, 
b2
, 
b3
, 
b4
);

554 i‡(
	`debug_°©us
(
iß_ö°_debug_ˇãg‹y
)) {

555 
	`iß_ö°_debug
("%d %8Œd %x: ", 
iß_˘x
->
pid
,

556 (Ë
iß_ö°_cou¡
, 
iß_eù
);

557 
	`x86_ö°_dump
(&
iß_ö°
, 
	`debug_fûe
(
iß_ö°_debug_ˇãg‹y
));

558 
	`iß_ö°_debug
(" (%d byãs)", 
iß_ö°
.
size
);

562 
iß_èrgë
 = 0;

563 
iß_ªgs
->
eù
 = iß_ªgs->eù + 
iß_ö°
.
size
;

564 
ö°_im∂_èbÀ
[
iß_ö°
.
›code
]();

565 
ö°_‰eq
[
iß_ö°
.
›code
]++;

568 
	`iß_ö°_debug
("\n");

569 i‡(
	`debug_°©us
(
iß_ˇŒ_debug_ˇãg‹y
))

570 
	`iß_debug_ˇŒ
();

571 
	}
}

	@libm2skernel/loader.c

20 
	~"m2skî√l.h
"

22 
	gld_debug_ˇãg‹y
;

25 
°rög_m≠_t
 
	g£˘i⁄Êags_m≠
 = {

34 
	$ld_öô
(
˘x_t
 *
˘x
)

36 
˘x
->
lﬂdî
 = 
	`ˇŒoc
(1, (
lﬂdî_t
));

37 
˘x
->
lﬂdî
->
¨gs
 = 
	` li°_¸óã
();

38 
˘x
->
lﬂdî
->
ív
 = 
	` li°_¸óã
();

39 
	}
}

42 
	$ld_d⁄e
(
˘x_t
 *
˘x
)

44 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

47 
	`ñf_˛o£
(
ld
->
ñf
);

50 
	` li°_hód
(
ld
->
¨gs
); !
	` li°_eﬁ
÷d->¨gs); 
	` li°_√xt
(ld->args))

51 
	`‰ì
(
	` li°_gë
(
ld
->
¨gs
));

52 
	` li°_hód
(
ld
->
ív
); !
	` li°_eﬁ
÷d->ív); 
	` li°_√xt
(ld->env))

53 
	`‰ì
(
	` li°_gë
(
ld
->
ív
));

54 
	` li°_‰ì
(
ld
->
¨gs
);

55 
	` li°_‰ì
(
ld
->
ív
);

58 i‡(
ld
->
öãΩ
)

59 
	`‰ì
(
ld
->
öãΩ
);

60 
	`‰ì
(
ld
->
exe
);

61 
	`‰ì
(
ld
->
cwd
);

62 
	`‰ì
(
ld
->
°dö_fûe
);

63 
	`‰ì
(
ld
->
°dout_fûe
);

64 
	`‰ì
(
ld
);

65 
	}
}

68 
	$ld_gë_fuŒ_∑th
(
˘x_t
 *
˘x
, *
fûíame
, *
fuŒ∑th
, 
size
)

70 i‡(*
fûíame
 == '/' || !*filename) {

71 
	`°r˝y
(
fuŒ∑th
, 
fûíame
);

74 i‡(
	`°æí
(
˘x
->
lﬂdî
->
cwd
Ë+ såÀn(
fûíame
Ë+ 2 > 
size
)

75 
	`Áèl
("ld_get_full_path: bufferÅoo small");

76 
	`°r˝y
(
fuŒ∑th
, 
˘x
->
lﬂdî
->
cwd
);

77 
	`°rˇt
(
fuŒ∑th
, "/");

78 
	`°rˇt
(
fuŒ∑th
, 
fûíame
);

79 
	}
}

82 
	$ld_add_¨gs_ve˘‹
(
˘x_t
 *
˘x
, 
¨gc
, **
¨gv
)

84 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

85 
i
;

86 
i
 = 0; i < 
¨gc
; i++)

87 
	` li°_add
(
ld
->
¨gs
, 
	`°rdup
(
¨gv
[
i
]));

88 
	}
}

91 
	$ld_add_¨gs_°rög
(
˘x_t
 *
˘x
, *
¨gs
)

93 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

94 *
¨g
;

95 
w‹dÀn
 = 0;

97 *
¨gs
) {

98 i‡(
¨gs
[
w‹dÀn
] != 32 &&árgs[wordlen]) {

99 
w‹dÀn
++;

102 i‡(!
w‹dÀn
) {

103 
¨gs
++;

108 
¨g
 = 
	`ˇŒoc
(1, 
w‹dÀn
 + 1);

109 
	`mem˝y
(
¨g
, 
¨gs
, 
w‹dÀn
);

110 
	` li°_add
(
ld
->
¨gs
, 
¨g
);

111 
¨gs
 +
w‹dÀn
;

112 
w‹dÀn
 = 0;

114 
	}
}

119 
	$ld_add_ívú⁄
(
˘x_t
 *
˘x
, *
ív
)

121 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

122 **
ívú⁄
;

123 *
√xt
;

124 
i
;

127 
i
 = 0; 
ívú⁄
[i]; i++)

128 
	` li°_add
(
ld
->
ív
, 
	`°rdup
(
ívú⁄
[
i
]));

131 
ív
) {

134 *
ív
 == ' ')Énv++;

135 i‡(!*
ív
) ;

138 *
ív
) {

140 i‡(!(
√xt
 = 
	`°rchr
(
ív
 + 1, *env)))

141 
	`Áèl
("ld_add_environ: wrong format");

142 *
√xt
 = 0;

143 
	` li°_add
(
ld
->
ív
, 
	`°rdup
(env + 1));

144 
ív
 = 
√xt
 + 1;

147 
	` li°_add
(
ld
->
ív
, 
	`°rdup
(env));

148 
ív
 = 
NULL
;

151 
	}
}

154 
	#LD_STACK_BASE
 0xffff0000

	)

155 
	#LD_MAX_ENVIRON
 0x10000

	)

156 
	#LD_STACK_SIZE
 0x800000

	)

160 
	$ld_lﬂd_£˘i⁄s
(
˘x_t
 *
˘x
, 
ñf_fûe_t
 *
ñf
)

162 
mem_t
 *
mem
 = 
˘x
->mem;

163 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

164 
i
, 
cou¡
;

165 
uöt32_t
 
addr
, 
size
, 
Êags
;

166 
mem_ac˚ss_íum
 
≥rm
;

167 
sÊags
[200], *
«me
;

168 *
buf
;

170 
	`ld_debug
("\nLoading ELF sections\n");

171 
ld
->
bŸtom
 = 0xffffffff;

172 
cou¡
 = 
	`ñf_£˘i⁄_cou¡
(
ñf
);

173 
i
 = 0; i < 
cou¡
; i++) {

174 
	`ñf_£˘i⁄_öfo
(
ñf
, 
i
, &
«me
, &
addr
, &
size
, &
Êags
);

175 
≥rm
 = 
mem_ac˚ss_öô
 | 
mem_ac˚ss_ªad
;

176 
	`m≠_Êags
(&
£˘i⁄Êags_m≠
, 
Êags
, 
sÊags
, 200);

177 
	`ld_debug
(" section '%s'; offs=0x%x; size=%u; flags=%s\n",

178 
«me
, 
addr
, 
size
, 
sÊags
);

181 i‡(
Êags
 & 
SHF_ALLOC
) {

184 i‡(
Êags
 & 
SHF_WRITE
)

185 
≥rm
 |
mem_ac˚ss_wrôe
;

186 i‡(
Êags
 & 
SHF_EXECINSTR
)

187 
≥rm
 |
mem_ac˚ss_exec
;

190 
	`mem_m≠
(
mem
, 
addr
, 
size
, 
≥rm
);

191 
ld
->
brk
 = 
	`MAX
÷d->brk, 
addr
 + 
size
);

192 
ld
->
bŸtom
 = 
	`MIN
÷d->bŸtom, 
addr
);

193 
buf
 = 
	`ñf_£˘i⁄_ªad
(
ñf
, 
i
);

194 
	`mem_ac˚ss
(
mem
, 
addr
, 
size
, 
buf
, 
mem_ac˚ss_öô
);

195 
	`ñf_‰ì_buf„r
(
buf
);

198 
	}
}

201 
	$ld_lﬂd_öãΩ
(
˘x_t
 *
˘x
)

203 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

204 
ñf_fûe_t
 *
ñf
;

207 
	`ld_debug
("\nLﬂdögÖrogøm i¡î¥ëî '%s'\n", 
ld
->
öãΩ
);

208 
ñf
 = 
	`ñf_›í
(
ld
->
öãΩ
);

209 i‡(!
ld
->
ñf
)

210 
	`Áèl
("%s: invÆidÖrogøm i¡î¥ëî", 
ld
->
öãΩ
);

213 
	`ld_lﬂd_£˘i⁄s
(
˘x
, 
ñf
);

214 
	`ñf_mîge_symèb
(
ld
->
ñf
,Élf);

217 
ld
->
öãΩ_¥og_íåy
 = 
	`ñf_gë_íåy
(
ñf
);

218 
	`ld_debug
("Örogøm i¡î¥ëîÉ¡ry: 0x%x\n\n", 
ld
->
öãΩ_¥og_íåy
);

219 
	`ñf_˛o£
(
ñf
);

220 
	}
}

223 
°rög_m≠_t
 
	gphdr_ty≥_m≠
 = {

238 
	$ld_lﬂd_phdt
(
˘x_t
 *
˘x
)

240 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

241 
mem_t
 *
mem
 = 
˘x
->mem;

242 
uöt32_t
 
phdt_ba£
, 
phdt_size
, 
phdr_cou¡
, 
phdr_size
;

243 *
phdt
;

244 
Elf32_Phdr
 *
phdr
;

245 
buf
[200];

246 
i
;

249 
	`ld_debug
("\nLoadingÖrogram headers\n");

250 
phdt
 = 
	`ñf_phdt
(
ld
->
ñf
);

251 
phdr_cou¡
 = 
	`ñf_phdr_cou¡
(
ld
->
ñf
);

252 
phdr_size
 = 
	`ñf_phdr_size
(
ld
->
ñf
);

253 
phdt_size
 = 
phdr_cou¡
 * 
phdr_size
;

257 
phdt_ba£
 = 
	`ñf_phdt_ba£
(
ld
->
ñf
);

258 i‡(!
phdt_ba£
)

259 
phdt_ba£
 = 
ld
->
bŸtom
 - 
phdt_size
;

260 
	`ld_debug
(" ba£ f‹Örogøm hódîÅabÀ: 0x%x\n", 
phdt_ba£
);

263 
	`mem_m≠
(
mem
, 
phdt_ba£
, 
phdt_size
, 
mem_ac˚ss_öô
 | 
mem_ac˚ss_ªad
);

264 
i
 = 0; i < 
phdr_cou¡
; i++) {

267 
phdr
 = 
phdt
 + 
i
 * 
phdr_size
;

268 
	`mem_ac˚ss
(
mem
, 
phdt_ba£
 + 
i
 * 
phdr_size
,Öhdr_size, 
phdr
, 
mem_ac˚ss_öô
);

271 
	`m≠_vÆue_°rög
(&
phdr_ty≥_m≠
, 
phdr
->
p_ty≥
, 
buf
, (buf));

272 
	`ld_debug
(" hódîÜﬂdedáà0x%x\n", 
phdt_ba£
 + 
i
 * 
phdr_size
);

273 
	`ld_debug
("Åype=%s, offset=0x%x, vaddr=0x%x,Öaddr=0x%x\n",

274 
buf
, 
phdr
->
p_off£t
,Öhdr->
p_vaddr
,Öhdr->
p_∑ddr
);

275 
	`ld_debug
(" filesz=%d, memsz=%d, flags=%d,álign=%d\n",

276 
phdr
->
p_fûesz
,Öhdr->
p_memsz
,Öhdr->
p_Êags
,Öhdr->
p_Æign
);

279 i‡(
phdr
->
p_ty≥
 == 3) {

280 
	`mem_ªad_°rög
(
mem
, 
phdr
->
p_vaddr
, (
buf
), buf);

281 
ld
->
öãΩ
 = 
	`°rdup
(
buf
);

286 
ld
->
phdt_ba£
 =Öhdt_base;

287 
ld
->
phdr_cou¡
 =Öhdr_count;

288 
	}
}

292 
	#LD_AV_ENTRY
(
t
, 
v
Ë{ 
uöt32_t
 
a_ty≥
 =Å, 
a_vÆue
 = v; \

293 
	`mem_wrôe
(
mem
, 
•
, 4, &
a_ty≥
); mem_wrôe(mem, s∞+ 4, 4, &
a_vÆue
); s∞+8; }

	)

294 
uöt32_t
 
	$ld_lﬂd_av
(
˘x_t
 *
˘x
, 
uöt32_t
 
whîe
)

296 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

297 
mem_t
 *
mem
 = 
˘x
->mem;

298 
uöt32_t
 
•
 = 
whîe
;

300 
	`ld_debug
("Lﬂdögáuxûüry ve˘‹áà0x%x\n", 
whîe
);

303 
	`LD_AV_ENTRY
(3, 
ld
->
phdt_ba£
);

304 
	`LD_AV_ENTRY
(4, 32);

305 
	`LD_AV_ENTRY
(5, 
ld
->
phdr_cou¡
);

308 
	`LD_AV_ENTRY
(6, 
MEM_PAGESIZE
);

309 
	`LD_AV_ENTRY
(7, 0);

310 
	`LD_AV_ENTRY
(8, 0);

311 
	`LD_AV_ENTRY
(9, 
ld
->
¥og_íåy
);

312 
	`LD_AV_ENTRY
(11, 
	`gëuid
());

313 
	`LD_AV_ENTRY
(12, 
	`gëeuid
());

314 
	`LD_AV_ENTRY
(13, 
	`gëgid
());

315 
	`LD_AV_ENTRY
(14, 
	`gëegid
());

316 
	`LD_AV_ENTRY
(17, 0x64);

317 
	`LD_AV_ENTRY
(23, 0);

326 
	`LD_AV_ENTRY
(0, 0);

327  
•
 - 
whîe
;

328 
	}
}

329 #unde‡
LD_AV_ENTRY


332 
	$ld_lﬂd_°ack
(
˘x_t
 *
˘x
)

334 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

335 
mem_t
 *
mem
 = 
˘x
->mem;

336 
uöt32_t
 
•
, 
¨gc
, 
¨gvp
, 
ívp
;

337 
uöt32_t
 
zîo
 = 0;

338 *
°r
;

339 
i
;

342 
ld
->
°ack_ba£
 = 
LD_STACK_BASE
;

343 
ld
->
°ack_size
 = 
LD_STACK_SIZE
;

344 
ld
->
°ack_t›
 = 
LD_STACK_BASE
 - 
LD_STACK_SIZE
;

345 
	`mem_m≠
(
mem
, 
ld
->
°ack_t›
,Üd->
°ack_size
, 
mem_ac˚ss_ªad
 | 
mem_ac˚ss_wrôe
);

346 
	`ld_debug
("mappingÑegion for stack from 0x%xÅo 0x%x\n",

347 
ld
->
°ack_t›
,Üd->
°ack_ba£
 - 1);

350 
ld
->
ívú⁄_ba£
 = 
LD_STACK_BASE
 - 
LD_MAX_ENVIRON
;

351 
•
 = 
ld
->
ívú⁄_ba£
;

352 
¨gc
 = 
	` li°_cou¡
(
ld
->
¨gs
);

353 
	`ld_debug
(" saved '¨gc=%d'áà0x%x\n", 
¨gc
, 
•
);

354 
	`mem_wrôe
(
mem
, 
•
, 4, &
¨gc
);

355 
•
 += 4;

356 
¨gvp
 = 
•
;

357 
•
 = s∞+ (
¨gc
 + 1) * 4;

360 
ívp
 = 
•
;

361 
•
 +
	` li°_cou¡
(
ld
->
ív
) * 4 + 4;

364 
•
 +
	`ld_lﬂd_av
(
˘x
, sp);

367 
	`ld_debug
("\nArguments:\n");

368 
i
 = 0; i < 
¨gc
; i++) {

369 
	` li°_gŸo
(
ld
->
¨gs
, 
i
);

370 
°r
 = 
	` li°_gë
(
ld
->
¨gs
);

371 
	`mem_wrôe
(
mem
, 
¨gvp
 + 
i
 * 4, 4, &
•
);

372 
	`mem_wrôe_°rög
(
mem
, 
•
, 
°r
);

373 
	`ld_debug
("árgumíà%dáà0x%x: '%s'\n", 
i
, 
•
, 
°r
);

374 
•
 +
	`°æí
(
°r
) + 1;

376 
	`mem_wrôe
(
mem
, 
¨gvp
 + 
i
 * 4, 4, &
zîo
);

379 
	`ld_debug
("\nEnvironment variables:\n");

380 
i
 = 0; i < 
	` li°_cou¡
(
ld
->
ív
); i++) {

381 
	` li°_gŸo
(
ld
->
ív
, 
i
);

382 
°r
 = 
	` li°_gë
(
ld
->
ív
);

383 
	`mem_wrôe
(
mem
, 
ívp
 + 
i
 * 4, 4, &
•
);

384 
	`mem_wrôe_°rög
(
mem
, 
•
, 
°r
);

385 
	`ld_debug
("Énv v¨ %dáà0x%x: '%s'\n", 
i
, 
•
, 
°r
);

386 
•
 +
	`°æí
(
°r
) + 1;

388 
	`mem_wrôe
(
mem
, 
ívp
 + 
i
 * 4, 4, &
zîo
);

391 i‡(
•
 > 
LD_STACK_BASE
)

392 
	`Áèl
("'environ' overflow, increment LD_MAX_ENVIRON");

393 
	}
}

396 
	$ld_lﬂd_exe
(
˘x_t
 *
˘x
, *
exe
)

398 
lﬂdî_t
 *
ld
 = 
˘x
->
lﬂdî
;

399 
fdt_t
 *
fdt
 = 
˘x
->fdt;

400 
°dö_fûe_fuŒ∑th
[
MAX_STRING_SIZE
];

401 
°dout_fûe_fuŒ∑th
[
MAX_STRING_SIZE
];

402 
exe_fuŒ∑th
[
MAX_STRING_SIZE
];

405 
	`ld_gë_fuŒ_∑th
(
˘x
, 
ld
->
°dö_fûe
, 
°dö_fûe_fuŒ∑th
, 
MAX_STRING_SIZE
);

406 i‡(*
°dö_fûe_fuŒ∑th
) {

407 
fd_t
 *
fd
;

408 
fd
 = 
	`fdt_íåy_gë
(
fdt
, 0);

409 
	`as£π
(
fd
);

410 
fd
->
ho°_fd
 = 
	`›í
(
°dö_fûe_fuŒ∑th
, 
O_RDONLY
);

411 i‡(
fd
->
ho°_fd
 < 0)

412 
	`Áèl
("%s: c™nŸ o≥¿°dö", 
ld
->
°dö_fûe
);

413 
	`ld_debug
("%s: stdöÑedúe˘ed\n", 
°dö_fûe_fuŒ∑th
);

417 
	`ld_gë_fuŒ_∑th
(
˘x
, 
ld
->
°dout_fûe
, 
°dout_fûe_fuŒ∑th
, 
MAX_STRING_SIZE
);

418 i‡(*
°dout_fûe_fuŒ∑th
) {

419 
fd_t
 *
fd1
, *
fd2
;

420 
fd1
 = 
	`fdt_íåy_gë
(
fdt
, 1);

421 
fd2
 = 
	`fdt_íåy_gë
(
fdt
, 2);

422 
	`as£π
(
fd1
 && 
fd2
);

423 
fd1
->
ho°_fd
 = 
fd2
->ho°_fd = 
	`›í
(
°dout_fûe_fuŒ∑th
,

424 
O_CREAT
 | 
O_APPEND
 | 
O_TRUNC
 | 
O_WRONLY
, 0660);

425 i‡(
fd1
->
ho°_fd
 < 0)

426 
	`Áèl
("%s: c™nŸ o≥¿°dout/°dîr", 
ld
->
°dout_fûe
);

427 
	`ld_debug
("%s: stdouàªdúe˘ed\n", 
°dout_fûe_fuŒ∑th
);

432 
	`ld_gë_fuŒ_∑th
(
˘x
, 
exe
, 
exe_fuŒ∑th
, 
MAX_STRING_SIZE
);

433 
ld
->
exe
 = 
	`°rdup
(
exe_fuŒ∑th
);

434 
ld
->
ñf
 = 
	`ñf_›í
(
exe_fuŒ∑th
);

437 
	`ld_lﬂd_£˘i⁄s
(
˘x
, 
ld
->
ñf
);

438 
ld
->
¥og_íåy
 = 
	`ñf_gë_íåy
÷d->
ñf
);

439 
ld
->
brk
 = 
	`ROUND_UP
÷d->brk, 
MEM_PAGESIZE
);

444 
	`ld_lﬂd_phdt
(
˘x
);

445 i‡(
ld
->
öãΩ
)

446 
	`ld_lﬂd_öãΩ
(
˘x
);

449 
	`ld_lﬂd_°ack
(
˘x
);

452 
˘x
->
ªgs
->
eù
 = 
ld
->
öãΩ
 ?Üd->
öãΩ_¥og_íåy
 :Üd->
¥og_íåy
;

453 
˘x
->
ªgs
->
e•
 = 
ld
->
ívú⁄_ba£
;

455 
	`ld_debug
("ProgømÉ¡ry i†0x%x\n", 
˘x
->
ªgs
->
eù
);

456 
	`ld_debug
("Inôü»°ackÖoöã∏i†0x%x\n", 
˘x
->
ªgs
->
e•
);

457 
	`ld_debug
("Hó∞°¨à£àtÿ0x%x\n", 
ld
->
brk
);

458 
	}
}

461 
	$ld_lﬂd_¥og_‰om_˘xc⁄fig
(*
˘xc⁄fig
)

463 
c⁄fig_t
 *
c⁄fig
;

464 
˘x_t
 *
˘x
;

465 
lﬂdî_t
 *
ld
;

466 
˘xnum
;

467 *
exe
, *
cwd
;

468 *
ö
, *
out
;

469 
£˘i⁄
[
MAX_STRING_SIZE
];

475 
c⁄fig
 = 
	`c⁄fig_¸óã
("configfile");

476 i‡(!
	`c⁄fig_lﬂd
(
c⁄fig
))

477 
	`Áèl
("%s: cannot open context configuration file",

478 
˘xc⁄fig
);

481 
˘xnum
 = 0; ; ctxnum++) {

484 
	`•rötf
(
£˘i⁄
, "C⁄ãxà%d", 
˘xnum
);

485 i‡(!
	`c⁄fig_£˘i⁄_exi°s
(
c⁄fig
, 
£˘i⁄
))

487 
˘x
 = 
	`˘x_¸óã
();

488 
ld
 = 
˘x
->
lﬂdî
;

491 
exe
 = 
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "exe", "");

492 
	` li°_add
(
ld
->
¨gs
, 
	`°rdup
(
exe
));

494 
˘x
->
uid

	`©oi
(
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "uid", ""));

496 
	`ld_add_¨gs_°rög
(
˘x
,

497 
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "args", ""));

498 
	`ld_add_ívú⁄
(
˘x
,

499 
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "env", ""));

502 
cwd
 = 
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "cwd", 
NULL
);

503 i‡(
cwd
)

504 
ld
->
cwd
 = 
	`°rdup
(cwd);

506 
ld
->
cwd
 = 
	`ˇŒoc
(1, 
MAX_STRING_SIZE
);

507 
ld
->
cwd
 = 
	`gëcwd
÷d->cwd, 
MAX_STRING_SIZE
);

508 i‡(!
ld
->
cwd
)

509 
	`Áèl
("loader: cannotÑetrieve current directory; increase MAX_STRING_SIZE");

513 
ö
 = 
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "stdin", "");

514 
out
 = 
	`c⁄fig_ªad_°rög
(
c⁄fig
, 
£˘i⁄
, "stdout", "");

515 
ld
->
°dö_fûe
 = 
	`°rdup
(
ö
);

516 
ld
->
°dout_fûe
 = 
	`°rdup
(
out
);

519 
	`ld_lﬂd_exe
(
˘x
, 
exe
);

521 
	`c⁄fig_‰ì
(
c⁄fig
);

523 
	}
}

526 
	$ld_lﬂd_¥og_‰om_cmdlöe
(
¨gc
, **
¨gv
)

528 
˘x_t
 *
˘x
;

529 
lﬂdî_t
 *
ld
;

532 
˘x
 = 
	`˘x_¸óã
();

533 
ld
 = 
˘x
->
lﬂdî
;

534 
my∑th
[1][200];

538 
	`ld_add_¨gs_ve˘‹
(
˘x
, 
¨gc
,
¨gv
);

540 
	`ld_add_ívú⁄
(
˘x
, "");

543 
ld
->
cwd
 = 
	`ˇŒoc
(1, 
MAX_STRING_SIZE
);

544 
ld
->
cwd
 = 
	`gëcwd
÷d->cwd, 
MAX_STRING_SIZE
);

545 i‡(!
ld
->
cwd
)

546 
	`Áèl
("loader: cannotÑetrieve current directory; increase MAX_STRING_SIZE");

549 
ld
->
°dö_fûe
 = 
	`°rdup
("");

550 
ld
->
°dout_fûe
 = 
	`°rdup
("");

552 
	`¥ötf
("\¿öÜﬂdî.¯∑th camêa†%†\n*** ",
¨gv
[0]);

556 
	`ld_lﬂd_exe
(
˘x
, 
¨gv
[0]);

558 
	}
}

	@libm2skernel/m2skernel.c

20 
	~<m2skî√l.h
>

25 
kî√l_t
 *
	gke
;

30 
uöt64_t
 
	gke_öô_time
 = 0;

32 
	$ke_öô
()

34 
uöt32_t
 
ídün
 = 0x44332211;

35 *
≥ndün
 = (*Ë&
ídün
;

38 i‡(
≥ndün
[0] != 0x11 ||Öendian[3] != 0x44)

39 
	`Áèl
("cannotÑun kernel oná bigÉndian machine");

41 
	`iß_öô
();

42 
ke
 = 
	`ˇŒoc
(1, (
kî√l_t
));

43 
ke
->
cuºít_pid
 = 1000;

46 
	`±hªad_muãx_öô
(&
ke
->
¥o˚ss_evíts_muãx
, 
NULL
);

49 
iß_ö°_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

50 
iß_ˇŒ_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

51 
ñf_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

52 
ld_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

53 
sysˇŒ_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

54 
˘x_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

57 
	`gk_öô
();

60 
ke_öô_time
 = 
	`ke_timî
();

61 
	}
}

65 
	$ke_d⁄e
()

67 
˘x_t
 *
˘x
;

70 
˘x
 = 
ke
->
c⁄ãxt_li°_hód
; ctx; ctx = ctx->
c⁄ãxt_√xt
)

71 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_föished
))

72 
	`˘x_föish
(
˘x
, 0);

75 
ke
->
c⁄ãxt_li°_hód
)

76 
	`˘x_‰ì
(
ke
->
c⁄ãxt_li°_hód
);

79 
	`gk_d⁄e
();

82 
	`‰ì
(
ke
);

83 
	`iß_d⁄e
();

84 
	`sysˇŒ_summ¨y
();

85 
	}
}

88 
	$ke_run
()

90 
˘x_t
 *
˘x
, *
˘x_åav
;

91 
Êag
 = 0;

94 
˘x
 = 
ke
->
ru¬ög_li°_hód
; ctx; ctx = ctx->
ru¬ög_√xt
) {

95 
i
;

98  
i
 = 0 ; i < 
˘x
->
ö°r_¶i˚
 ; ++i) {

99 
	`˘x_execuã_ö°
(
˘x
);

101 i‡(
˘x
!=
ke
->
ru¬ög_li°_hód
)

107 
ke
->
föished_li°_hód
)

108 
	`˘x_‰ì
(
ke
->
föished_li°_hód
);

111 
	`ke_¥o˚ss_evíts
();

113 
	}
}

116 
	$ke_dump
(
FILE
 *
f
)

118 
˘x_t
 *
˘x
;

119 
n
 = 0;

120 
˘x
 = 
ke
->
c⁄ãxt_li°_hód
;

121 
	`Ârötf
(
f
, "List of kernel contexts (arbitrary order):\n");

122 
˘x
) {

123 
	`Ârötf
(
f
, "kî√»c⁄ãxà#%d:\n", 
n
);

124 
	`˘x_dump
(
˘x
, 
f
);

125 
˘x
 = ctx->
c⁄ãxt_√xt
;

126 
n
++;

128 
	}
}

131 
	#LIST_INSERT_HEAD
(
«me
, 
˘x
) { \

132 
	`as£π
(!
˘x
->
«me
##
_√xt
 && !˘x->«me##
_¥ev
); \

133 
˘x
->
«me
##
_√xt
 = 
ke
->«me##
_li°_hód
; \

134 i‡(
˘x
->
«me
##
_√xt
Ë˘x->«me##_√xt->«me##
_¥ev
 = ctx; \

135 
ke
->
«me
##
_li°_hód
 = 
˘x
; \

136 i‡(!
ke
->
«me
##
_li°_èû
Ëke->«me##_li°_èû = 
˘x
; \

137 
ke
->
«me
##
_cou¡
++; \

138 
ke
->
«me
##
_max
 = 
	`MAX
(ke->«me##_max, ke->«me##
_cou¡
); }

	)

140 
	#LIST_INSERT_TAIL
(
«me
, 
˘x
) { \

141 
	`as£π
(!
˘x
->
«me
##
_√xt
 && !˘x->«me##
_¥ev
); \

142 
˘x
->
«me
##
_¥ev
 = 
ke
->«me##
_li°_èû
; \

143 i‡(
˘x
->
«me
##
_¥ev
Ë˘x->«me##_¥ev->«me##
_√xt
 = ctx; \

144 
ke
->
«me
##
_li°_èû
 = 
˘x
; \

145 i‡(!
ke
->
«me
##
_li°_hód
Ëke->«me##_li°_hód = 
˘x
; \

146 
ke
->
«me
##
_cou¡
++; }

	)

148 
	#LIST_REMOVE
(
«me
, 
˘x
) { \

149 i‡(
˘x
 =
ke
->
«me
##
_li°_hód
Ëke->«me##_li°_hód = ke->«me##_li°_hód->«me##
_√xt
; \

150 i‡(
˘x
 =
ke
->
«me
##
_li°_èû
Ëke->«me##_li°_èû = ke->«me##_li°_èû->«me##
_¥ev
; \

151 i‡(
˘x
->
«me
##
_¥ev
Ë˘x->«me##_¥ev->«me##
_√xt
 = ctx->name##_next; \

152 i‡(
˘x
->
«me
##
_√xt
Ë˘x->«me##_√xt->«me##
_¥ev
 = ctx->name##_prev; \

153 
˘x
->
«me
##
_¥ev
 = ctx->«me##
_√xt
 = 
NULL
; \

154 
ke
->
«me
##
_cou¡
--; }

	)

156 
	#LIST_MEMBER
(
«me
, 
˘x
) \

157 (
ke
->
«me
##
_li°_hód
 =
˘x
 || ctx->«me##
_¥ev
 || ctx->«me##
_√xt
)

	)

160 
	$ke_li°_ö£π_hód
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
)

162 
	`as£π
(!
	`ke_li°_membî
(
li°
, 
˘x
));

163 
li°
) {

164 
ke_li°_c⁄ãxt
: 
	`LIST_INSERT_HEAD
(
c⁄ãxt
, 
˘x
); ;

165 
ke_li°_ru¬ög
: 
	`LIST_INSERT_HEAD
(
ru¬ög
, 
˘x
); ;

166 
ke_li°_föished
: 
	`LIST_INSERT_HEAD
(
föished
, 
˘x
); ;

167 
ke_li°_zombõ
: 
	`LIST_INSERT_HEAD
(
zombõ
, 
˘x
); ;

168 
ke_li°_su•íded
: 
	`LIST_INSERT_HEAD
(
su•íded
, 
˘x
); ;

169 
ke_li°_Æloc
: 
	`LIST_INSERT_HEAD
(
Æloc
, 
˘x
); ;

171 
	}
}

174 
	$ke_li°_ö£π_èû
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
)

176 
	`as£π
(!
	`ke_li°_membî
(
li°
, 
˘x
));

177 
li°
) {

178 
ke_li°_c⁄ãxt
: 
	`LIST_INSERT_TAIL
(
c⁄ãxt
, 
˘x
); ;

179 
ke_li°_ru¬ög
: 
	`LIST_INSERT_TAIL
(
ru¬ög
, 
˘x
); ;

180 
ke_li°_föished
: 
	`LIST_INSERT_TAIL
(
föished
, 
˘x
); ;

181 
ke_li°_zombõ
: 
	`LIST_INSERT_TAIL
(
zombõ
, 
˘x
); ;

182 
ke_li°_su•íded
: 
	`LIST_INSERT_TAIL
(
su•íded
, 
˘x
); ;

183 
ke_li°_Æloc
: 
	`LIST_INSERT_TAIL
(
Æloc
, 
˘x
); ;

185 
	}
}

188 
	$ke_li°_ªmove
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
)

190 
	`as£π
(
	`ke_li°_membî
(
li°
, 
˘x
));

191 
li°
) {

192 
ke_li°_c⁄ãxt
: 
	`LIST_REMOVE
(
c⁄ãxt
, 
˘x
); ;

193 
ke_li°_ru¬ög
: 
	`LIST_REMOVE
(
ru¬ög
, 
˘x
); ;

194 
ke_li°_föished
: 
	`LIST_REMOVE
(
föished
, 
˘x
); ;

195 
ke_li°_zombõ
: 
	`LIST_REMOVE
(
zombõ
, 
˘x
); ;

196 
ke_li°_su•íded
: 
	`LIST_REMOVE
(
su•íded
, 
˘x
); ;

197 
ke_li°_Æloc
: 
	`LIST_REMOVE
(
Æloc
, 
˘x
); ;

199 
	}
}

202 
	$ke_li°_membî
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
)

204 
li°
) {

205 
ke_li°_c⁄ãxt
:  
	`LIST_MEMBER
(
c⁄ãxt
, 
˘x
);

206 
ke_li°_ru¬ög
:  
	`LIST_MEMBER
(
ru¬ög
, 
˘x
);

207 
ke_li°_föished
:  
	`LIST_MEMBER
(
föished
, 
˘x
);

208 
ke_li°_zombõ
:  
	`LIST_MEMBER
(
zombõ
, 
˘x
);

209 
ke_li°_su•íded
:  
	`LIST_MEMBER
(
su•íded
, 
˘x
);

210 
ke_li°_Æloc
:  
	`LIST_MEMBER
(
Æloc
, 
˘x
);

213 
	}
}

216 #unde‡
LIST_INSERT


217 #unde‡
LIST_REMOVE


218 #unde‡
LIST_MEMBER


222 
uöt64_t
 
	$ke_timî
()

224 
timevÆ
 
tv
;

225 
	`gëtimeofday
(&
tv
, 
NULL
);

226  (
uöt64_t
Ë
tv
.
tv_£c
 * 1000000 +Åv.
tv_u£c
 - 
ke_öô_time
;

227 
	}
}

231 
	$ke_¥o˚ss_evíts_scheduÀ
()

233 
	`±hªad_muãx_lock
(&
ke
->
¥o˚ss_evíts_muãx
);

234 
ke
->
¥o˚ss_evíts_f‹˚
 = 1;

235 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

236 
	}
}

243 *
	$ke_ho°_thªad_su•íd
(*
¨g
)

245 
˘x_t
 *
˘x
 = (˘x_à*Ë
¨g
;

246 
uöt64_t
 
now
 = 
	`ke_timî
();

251 
	`±hªad_dëach
(
	`±hªad_£lf
());

254 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_«no¶ìp
)) {

256 
uöt64_t
 
timeout
;

259 
timeout
 = 
˘x
->
wakeup_time
 > 
now
 ? ctx->wakeup_time -Çow : 0;

260 
	`u¶ìp
(
timeout
);

262 } i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_pﬁl
)) {

264 
fd_t
 *
fd
;

265 
pﬁlfd
 
ho°_fds
;

266 
îr
, 
timeout
;

269 
fd
 = 
	`fdt_íåy_gë
(
˘x
->
fdt
, ctx->
wakeup_fd
);

270 i‡(!
fd
)

271 
	`Áèl
("syscall 'poll': invalid 'wakeup_fd'");

274 i‡(!
˘x
->
wakeup_time
)

275 
timeout
 = -1;

276 i‡(
˘x
->
wakeup_time
 < 
now
)

277 
timeout
 = 0;

279 
timeout
 = (
˘x
->
wakeup_time
 - 
now
) / 1000;

282 
ho°_fds
.
fd
 = fd->
ho°_fd
;

283 
ho°_fds
.
evíts
 = ((
˘x
->
wakeup_evíts
 & 4Ë? 
POLLOUT
 : 0Ë| ((˘x->wakeup_evít†& 1Ë? 
POLLIN
 : 0);

284 
îr
 = 
	`pﬁl
(&
ho°_fds
, 1, 
timeout
);

285 i‡(
îr
 < 0)

286 
	`Áèl
("syscall 'poll': unexpectedÉrror in host 'poll'");

288 } i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_ªad
)) {

290 
fd_t
 *
fd
;

291 
pﬁlfd
 
ho°_fds
;

292 
îr
;

295 
fd
 = 
	`fdt_íåy_gë
(
˘x
->
fdt
, ctx->
wakeup_fd
);

296 i‡(!
fd
)

297 
	`Áèl
("syscall 'read': invalid 'wakeup_fd'");

300 
ho°_fds
.
fd
 = fd->
ho°_fd
;

301 
ho°_fds
.
evíts
 = 
POLLIN
;

302 
îr
 = 
	`pﬁl
(&
ho°_fds
, 1, -1);

303 i‡(
îr
 < 0)

304 
	`Áèl
("syscall 'read': unexpectedÉrror in host 'poll'");

306 } i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_wrôe
)) {

308 
fd_t
 *
fd
;

309 
pﬁlfd
 
ho°_fds
;

310 
îr
;

313 
fd
 = 
	`fdt_íåy_gë
(
˘x
->
fdt
, ctx->
wakeup_fd
);

314 i‡(!
fd
)

315 
	`Áèl
("syscall 'write': invalid 'wakeup_fd'");

318 
ho°_fds
.
fd
 = fd->
ho°_fd
;

319 
ho°_fds
.
evíts
 = 
POLLOUT
;

320 
îr
 = 
	`pﬁl
(&
ho°_fds
, 1, -1);

321 i‡(
îr
 < 0)

322 
	`Áèl
("syscall 'write': unexpectedÉrror in host 'write'");

327 
	`±hªad_muãx_lock
(&
ke
->
¥o˚ss_evíts_muãx
);

328 
ke
->
¥o˚ss_evíts_f‹˚
 = 1;

329 
˘x
->
ho°_thªad_su•íd_a˘ive
 = 0;

330 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

331  
NULL
;

332 
	}
}

337 *
	$ke_ho°_thªad_timî
(*
¨g
)

339 
˘x_t
 *
˘x
 = (˘x_à*Ë
¨g
;

340 
uöt64_t
 
now
 = 
	`ke_timî
();

341 
time•ec
 
ts
;

342 
uöt64_t
 
¶ìp_time
;

347 
	`±hªad_dëach
(
	`±hªad_£lf
());

350 i‡(
˘x
->
ho°_thªad_timî_wakeup
 > 
now
) {

351 
¶ìp_time
 = 
˘x
->
ho°_thªad_timî_wakeup
 - 
now
;

352 
ts
.
tv_£c
 = 
¶ìp_time
 / 1000000;

353 
ts
.
tv_n£c
 = (
¶ìp_time
 % 1000000) * 1000;

354 
	`«no¶ìp
(&
ts
, 
NULL
);

358 
	`±hªad_muãx_lock
(&
ke
->
¥o˚ss_evíts_muãx
);

359 
ke
->
¥o˚ss_evíts_f‹˚
 = 1;

360 
˘x
->
ho°_thªad_timî_a˘ive
 = 0;

361 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

362  
NULL
;

363 
	}
}

369 
	$ke_¥o˚ss_evíts
()

371 
˘x_t
 *
˘x
, *
√xt
;

372 
uöt64_t
 
now
 = 
	`ke_timî
();

375 
	`±hªad_muãx_lock
(&
ke
->
¥o˚ss_evíts_muãx
);

376 i‡(!
ke
->
¥o˚ss_evíts_f‹˚
) {

377 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

382 
ke
->
¥o˚ss_evíts_f‹˚
 = 0;

389 
˘x
 = 
ke
->
su•íded_li°_hód
; ctx; ctx = 
√xt
) {

392 
√xt
 = 
˘x
->
su•íded_√xt
;

395 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_«no¶ìp
))

397 
uöt32_t
 
rmç
 = 
˘x
->
ªgs
->
ecx
;

398 
uöt64_t
 
zîo
 = 0;

399 
uöt32_t
 
£c
, 
u£c
;

400 
uöt64_t
 
diff
;

403 i‡(
˘x
->
ho°_thªad_su•íd_a˘ive
)

407 i‡(
˘x
->
wakeup_time
 <
now
) {

408 i‡(
rmç
)

409 
	`mem_wrôe
(
˘x
->
mem
, 
rmç
, 8, &
zîo
);

410 
	`sysˇŒ_debug
("sysˇŒ '«no¶ìp' - c⁄töuê’id %d)\n", 
˘x
->
pid
);

411 
	`sysˇŒ_debug
("Ñëu∫=0x%x\n", 
˘x
->
ªgs
->
óx
);

412 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_«no¶ìp
);

417 i‡(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
) {

418 i‡(
rmç
) {

419 
diff
 = 
˘x
->
wakeup_time
 - 
now
;

420 
£c
 = 
diff
 / 1000000;

421 
u£c
 = 
diff
 % 1000000;

422 
	`mem_wrôe
(
˘x
->
mem
, 
rmç
, 4, &
£c
);

423 
	`mem_wrôe
(
˘x
->
mem
, 
rmç
 + 4, 4, &
u£c
);

425 
˘x
->
ªgs
->
óx
 = -
EINTR
;

426 
	`sysˇŒ_debug
("sysˇŒ '«no¶ìp' - i¡îru±ed by sig«»’id %d)\n", 
˘x
->
pid
);

427 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_«no¶ìp
);

432 
˘x
->
ho°_thªad_su•íd_a˘ive
 = 1;

433 i‡(
	`±hªad_¸óã
(&
˘x
->
ho°_thªad_su•íd
, 
NULL
, 
ke_ho°_thªad_su•íd
, ctx))

434 
	`Áèl
("syscall 'poll': couldÇot create childÅhread");

439 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_sigsu•íd
))

442 i‡(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
) {

443 
	`sig«l_h™dÀr_check_öå
(
˘x
);

444 
˘x
->
sig«l_masks
->
blocked
 = ctx->sig«l_masks->
backup
;

445 
	`sysˇŒ_debug
("sysˇŒ 'π_sigsu•íd' - i¡îru±ed by sig«»’id %d)\n", 
˘x
->
pid
);

446 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_sigsu•íd
);

456 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_pﬁl
))

458 
uöt32_t
 
¥evíts
 = 
˘x
->
ªgs
->
ebx
 + 6;

459 
uöt16_t
 
ªvíts
 = 0;

460 
fd_t
 *
fd
;

461 
pﬁlfd
 
ho°_fds
;

462 
îr
;

465 i‡(
˘x
->
ho°_thªad_su•íd_a˘ive
)

469 
fd
 = 
	`fdt_íåy_gë
(
˘x
->
fdt
, ctx->
wakeup_fd
);

470 i‡(!
fd
)

471 
	`Áèl
("syscall 'poll': invalid 'wakeup_fd'");

474 i‡(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
) {

475 
	`sig«l_h™dÀr_check_öå
(
˘x
);

476 
	`sysˇŒ_debug
("sysˇŒ 'pﬁl' - i¡îru±ed by sig«»’id %d)\n", 
˘x
->
pid
);

477 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_pﬁl
);

482 
ho°_fds
.
fd
 = fd->
ho°_fd
;

483 
ho°_fds
.
evíts
 = ((
˘x
->
wakeup_evíts
 & 4Ë? 
POLLOUT
 : 0Ë| ((˘x->wakeup_evít†& 1Ë? 
POLLIN
 : 0);

484 
îr
 = 
	`pﬁl
(&
ho°_fds
, 1, 0);

485 i‡(
îr
 < 0)

486 
	`Áèl
("syscall 'poll': unexpectedÉrror in host 'poll'");

489 i‡(
˘x
->
wakeup_evíts
 & 
ho°_fds
.
ªvíts
 & 
POLLOUT
) {

490 
ªvíts
 = 
POLLOUT
;

491 
	`mem_wrôe
(
˘x
->
mem
, 
¥evíts
, 2, &
ªvíts
);

492 
˘x
->
ªgs
->
óx
 = 1;

493 
	`sysˇŒ_debug
("sysˇŒÖﬁ»- c⁄töuê’id %dË- POLLOUT occuºed i¿fûe\n", 
˘x
->
pid
);

494 
	`sysˇŒ_debug
("ÑëvÆ=%d\n", 
˘x
->
ªgs
->
óx
);

495 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_pﬁl
);

500 i‡(
˘x
->
wakeup_evíts
 & 
ho°_fds
.
ªvíts
 & 
POLLIN
) {

501 
ªvíts
 = 
POLLIN
;

502 
	`mem_wrôe
(
˘x
->
mem
, 
¥evíts
, 2, &
ªvíts
);

503 
˘x
->
ªgs
->
óx
 = 1;

504 
	`sysˇŒ_debug
("sysˇŒÖﬁ»- c⁄töuê’id %dË- POLLIN occuºed i¿fûe\n", 
˘x
->
pid
);

505 
	`sysˇŒ_debug
("ÑëvÆ=%d\n", 
˘x
->
ªgs
->
óx
);

506 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_pﬁl
);

511 i‡(
˘x
->
wakeup_time
 && ctx->wakeup_timê< 
now
) {

512 
ªvíts
 = 0;

513 
	`mem_wrôe
(
˘x
->
mem
, 
¥evíts
, 2, &
ªvíts
);

514 
	`sysˇŒ_debug
("sysˇŒÖﬁ»- c⁄töuê’id %dË-Åimêout\n", 
˘x
->
pid
);

515 
	`sysˇŒ_debug
("Ñëu∫=0x%x\n", 
˘x
->
ªgs
->
óx
);

516 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_pﬁl
);

521 
˘x
->
ho°_thªad_su•íd_a˘ive
 = 1;

522 i‡(
	`±hªad_¸óã
(&
˘x
->
ho°_thªad_su•íd
, 
NULL
, 
ke_ho°_thªad_su•íd
, ctx))

523 
	`Áèl
("syscall 'poll': couldÇot create childÅhread");

529 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_wrôe
))

531 
fd_t
 *
fd
;

532 
cou¡
, 
îr
;

533 
uöt32_t
 
pbuf
;

534 *
buf
;

535 
pﬁlfd
 
ho°_fds
;

538 i‡(
˘x
->
ho°_thªad_su•íd_a˘ive
)

542 i‡(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
) {

543 
	`sig«l_h™dÀr_check_öå
(
˘x
);

544 
	`sysˇŒ_debug
("sysˇŒ 'wrôe' - i¡îru±ed by sig«»’id %d)\n", 
˘x
->
pid
);

545 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_wrôe
);

550 
fd
 = 
	`fdt_íåy_gë
(
˘x
->
fdt
, ctx->
wakeup_fd
);

551 i‡(!
fd
)

552 
	`Áèl
("syscall 'write': invalid 'wakeup_fd'");

555 
ho°_fds
.
fd
 = fd->
ho°_fd
;

556 
ho°_fds
.
evíts
 = 
POLLOUT
;

557 
îr
 = 
	`pﬁl
(&
ho°_fds
, 1, 0);

558 i‡(
îr
 < 0)

559 
	`Áèl
("syscall 'write': unexpectedÉrror in host 'poll'");

562 i‡(
ho°_fds
.
ªvíts
) {

563 
pbuf
 = 
˘x
->
ªgs
->
ecx
;

564 
cou¡
 = 
˘x
->
ªgs
->
edx
;

565 
buf
 = 
	`mÆloc
(
cou¡
);

566 
	`mem_ªad
(
˘x
->
mem
, 
pbuf
, 
cou¡
, 
buf
);

568 
cou¡
 = 
	`wrôe
(
fd
->
ho°_fd
, 
buf
, count);

569 i‡(
cou¡
 < 0)

570 
	`Áèl
("syscall 'write': unexpectedÉrror in host 'write'");

572 
˘x
->
ªgs
->
óx
 = 
cou¡
;

573 
	`‰ì
(
buf
);

575 
	`sysˇŒ_debug
("sysˇŒ wrôê- c⁄töuê’id %d)\n", 
˘x
->
pid
);

576 
	`sysˇŒ_debug
("Ñëu∫=0x%x\n", 
˘x
->
ªgs
->
óx
);

577 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_wrôe
);

582 
˘x
->
ho°_thªad_su•íd_a˘ive
 = 1;

583 i‡(
	`±hªad_¸óã
(&
˘x
->
ho°_thªad_su•íd
, 
NULL
, 
ke_ho°_thªad_su•íd
, ctx))

584 
	`Áèl
("syscall 'write': couldÇot create childÅhread");

589 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_ªad
))

591 
fd_t
 *
fd
;

592 
uöt32_t
 
pbuf
;

593 
cou¡
, 
îr
;

594 *
buf
;

595 
pﬁlfd
 
ho°_fds
;

598 i‡(
˘x
->
ho°_thªad_su•íd_a˘ive
)

602 i‡(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
) {

603 
	`sig«l_h™dÀr_check_öå
(
˘x
);

604 
	`sysˇŒ_debug
("sysˇŒ 'ªad' - i¡îru±ed by sig«»’id %d)\n", 
˘x
->
pid
);

605 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_ªad
);

610 
fd
 = 
	`fdt_íåy_gë
(
˘x
->
fdt
, ctx->
wakeup_fd
);

611 i‡(!
fd
)

612 
	`Áèl
("syscall 'read': invalid 'wakeup_fd'");

615 
ho°_fds
.
fd
 = fd->
ho°_fd
;

616 
ho°_fds
.
evíts
 = 
POLLIN
;

617 
îr
 = 
	`pﬁl
(&
ho°_fds
, 1, 0);

618 i‡(
îr
 < 0)

619 
	`Áèl
("syscall 'read': unexpectedÉrror in host 'poll'");

622 i‡(
ho°_fds
.
ªvíts
) {

623 
pbuf
 = 
˘x
->
ªgs
->
ecx
;

624 
cou¡
 = 
˘x
->
ªgs
->
edx
;

625 
buf
 = 
	`mÆloc
(
cou¡
);

627 
cou¡
 = 
	`ªad
(
fd
->
ho°_fd
, 
buf
, count);

628 i‡(
cou¡
 < 0)

629 
	`Áèl
("syscall 'read': unexpectedÉrror in host 'read'");

631 
˘x
->
ªgs
->
óx
 = 
cou¡
;

632 
	`mem_wrôe
(
˘x
->
mem
, 
pbuf
, 
cou¡
, 
buf
);

633 
	`‰ì
(
buf
);

635 
	`sysˇŒ_debug
("sysˇŒ 'ªad' - c⁄töuê’id %d)\n", 
˘x
->
pid
);

636 
	`sysˇŒ_debug
("Ñëu∫=0x%x\n", 
˘x
->
ªgs
->
óx
);

637 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_ªad
);

642 
˘x
->
ho°_thªad_su•íd_a˘ive
 = 1;

643 i‡(
	`±hªad_¸óã
(&
˘x
->
ho°_thªad_su•íd
, 
NULL
, 
ke_ho°_thªad_su•íd
, ctx))

644 
	`Áèl
("syscall 'read': couldÇot create childÅhread");

649 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_waôpid
))

651 
˘x_t
 *
chûd
;

652 
uöt32_t
 
p°©us
;

655 
chûd
 = 
	`˘x_gë_zombõ
(
˘x
, ctx->
wakeup_pid
);

656 i‡(
chûd
) {

659 
p°©us
 = 
˘x
->
ªgs
->
ecx
;

660 
˘x
->
ªgs
->
óx
 = 
chûd
->
pid
;

661 i‡(
p°©us
)

662 
	`mem_wrôe
(
˘x
->
mem
, 
p°©us
, 4, &
chûd
->
exô_code
);

663 
	`˘x_£t_°©us
(
chûd
, 
˘x_föished
);

665 
	`sysˇŒ_debug
("sysˇŒ waôpid - c⁄töuê’id %d)\n", 
˘x
->
pid
);

666 
	`sysˇŒ_debug
("Ñëu∫=0x%x\n", 
˘x
->
ªgs
->
óx
);

667 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_su•íded
 | 
˘x_waôpid
);

682 
˘x
 = 
ke
->
c⁄ãxt_li°_hód
; ctx; ctx = ctx->
c⁄ãxt_√xt
)

684 
sig
[3] = { 14, 26, 27 };

685 
i
;

688 i‡(
˘x
->
ho°_thªad_timî_a˘ive
)

694 
i
 = 0; i < 3; i++ ) {

697 i‡(!
˘x
->
ôimî_vÆue
[
i
] || ctx->ôimî_vÆue[i] > 
now
)

704 
	`__˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x
);

705 
ke
->
¥o˚ss_evíts_f‹˚
 = 1;

706 
	`sim_sig£t_add
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
[
i
]);

709 
˘x
->
ôimî_vÆue
[
i
] = 0;

710 i‡(
˘x
->
ôimî_öãrvÆ
[
i
])

711 
˘x
->
ôimî_vÆue
[
i
] = 
now
 + ctx->
ôimî_öãrvÆ
[i];

715 
˘x
->
ho°_thªad_timî_wakeup
 = 0;

716 
i
 = 0; i < 3; i++) {

717 i‡(!
˘x
->
ôimî_vÆue
[
i
])

719 
	`as£π
(
˘x
->
ôimî_vÆue
[
i
] >
now
);

720 i‡(!
˘x
->
ho°_thªad_timî_wakeup
 || ctx->
ôimî_vÆue
[
i
] < ctx->host_thread_timer_wakeup)

721 
˘x
->
ho°_thªad_timî_wakeup
 = ctx->
ôimî_vÆue
[
i
];

725 i‡(
˘x
->
ho°_thªad_timî_wakeup
) {

726 
˘x
->
ho°_thªad_timî_a˘ive
 = 1;

727 i‡(
	`±hªad_¸óã
(&
˘x
->
ho°_thªad_timî
, 
NULL
, 
ke_ho°_thªad_timî
, ctx))

728 
	`Áèl
("%s: couldÇŸ cª©êchûdÅhªad", 
__FUNCTION__
);

737 
˘x
 = 
ke
->
ru¬ög_li°_hód
; ctx; ctx = ctx->
ru¬ög_√xt
)

739 
	`sig«l_h™dÀr_check
(
˘x
);

744 
	`±hªad_muãx_u∆ock
(&
ke
->
¥o˚ss_evíts_muãx
);

745 
	}
}

	@libm2skernel/m2skernel.h

20 #i‚de‡
M2SKERNEL_H


21 
	#M2SKERNEL_H


	)

23 
	~<mh™dÀ.h
>

24 
	~<debug.h
>

25 
	~<c⁄fig.h
>

26 
	~<buf„r.h
>

27 
	~<li°.h
>

28 
	~< li°.h
>

29 
	~<misc.h
>

30 
	~<ñf.h
>

31 
	~<°dio.h
>

32 
	~<uni°d.h
>

33 
	~<f˙é.h
>

34 
	~<as£π.h
>

35 
	~<sig«l.h
>

36 
	~<dißsm.h
>

37 
	~<time.h
>

38 
	~<±hªad.h
>

39 
	~<pﬁl.h
>

40 
	~<î∫o.h
>

41 
	~<gpukî√l.h
>

42 
	~<sys/time.h
>

46 
	g˘x_t
;

47 
	gfd_t
;

49 
	gö°r_¶i˚
;

52 
	#MAX_PATH_SIZE
 200

	)

59 
	#MEM_LOGPAGESIZE
 12

	)

60 
	#MEM_PAGESHIFT
 
MEM_LOGPAGESIZE


	)

61 
	#MEM_PAGESIZE
 (1<<
MEM_LOGPAGESIZE
)

	)

62 
	#MEM_PAGEMASK
 (~(
MEM_PAGESIZE
-1))

	)

63 
	#MEM_PAGE_COUNT
 1024

	)

65 
	emem_ac˚ss_íum
 {

66 
	mmem_ac˚ss_ªad
 = 0x01,

67 
	mmem_ac˚ss_wrôe
 = 0x02,

68 
	mmem_ac˚ss_exec
 = 0x04,

69 
	mmem_ac˚ss_öô
 = 0x08,

70 
	mmem_ac˚ss_modif
 = 0x10

74 
mem_ß„_mode
;

77 
	smem_ho°_m≠pög_t
 {

78 *
	mho°_±r
;

79 
uöt32_t
 
	maddr
;

80 
uöt32_t
 
	msize
;

81 
	m∑ges
;

82 
	m∑th
[
MAX_PATH_SIZE
];

83 
mem_ho°_m≠pög_t
 *
	m√xt
;

87 
	smem_∑ge_t
 {

88 
uöt32_t
 
	mèg
;

89 
mem_ac˚ss_íum
 
	m≥rm
;

90 
mem_∑ge_t
 *
	m√xt
;

91 *
	md©a
;

92 
mem_ho°_m≠pög_t
 *
	mho°_m≠pög
;

95 
	smem_t
 {

96 
mem_∑ge_t
 *
	m∑ges
[
MEM_PAGE_COUNT
];

97 
	msh¨ög
;

98 
uöt32_t
 
	mœ°_addªss
;

99 
	mß„
;

100 
mem_ho°_m≠pög_t
 *
	mho°_m≠pög_li°
;

103 
mem_m≠≥d_•a˚
;

104 
mem_max_m≠≥d_•a˚
;

106 
mem_t
 *
mem_¸óã
();

107 
mem_‰ì
(
mem_t
 *
mem
);

109 
mem_∑ge_t
 *
mem_∑ge_gë
(
mem_t
 *
mem
, 
uöt32_t
 
addr
);

110 
mem_∑ge_t
 *
mem_∑ge_gë_√xt
(
mem_t
 *
mem
, 
uöt32_t
 
addr
);

112 
uöt32_t
 
mem_m≠_•a˚
(
mem_t
 *
mem
, uöt32_à
addr
, 
size
);

113 
uöt32_t
 
mem_m≠_•a˚_down
(
mem_t
 *
mem
, uöt32_à
addr
, 
size
);

115 
mem_m≠
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, 
mem_ac˚ss_íum
 
≥rm
);

116 
mem_unm≠
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
);

118 
mem_m≠_ho°
(
mem_t
 *
mem
, 
fd_t
 *
fd
, 
uöt32_t
 
addr
,

119 
size
, 
mem_ac˚ss_íum
 
≥rm
, *
d©a
);

120 
mem_unm≠_ho°
(
mem_t
 *
mem
, 
uöt32_t
 
addr
);

122 
mem_¥Ÿe˘
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, 
mem_ac˚ss_íum
 
≥rm
);

123 
mem_c›y
(
mem_t
 *
mem
, 
uöt32_t
 
de°
, uöt32_à
§c
, 
size
);

125 
	#mem_ªad
(
mem
, 
addr
, 
size
, 
buf
Ë
	`mem_ac˚ss
(mem,áddr, size, buf, 
mem_ac˚ss_ªad
)

	)

126 
	#mem_wrôe
(
mem
, 
addr
, 
size
, 
buf
Ë
	`mem_ac˚ss
(mem,áddr, size, buf, 
mem_ac˚ss_wrôe
)

	)

127 
mem_ac˚ss
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, *
buf
, 
mem_ac˚ss_íum
 
ac˚ss
);

128 
mem_zîo
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
);

129 
mem_ªad_°rög
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, *
°r
);

130 
mem_wrôe_°rög
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, *
°r
);

131 *
mem_gë_buf„r
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, 
mem_ac˚ss_íum
 
ac˚ss
);

133 
mem_dump
(
mem_t
 *
mem
, *
fûíame
, 
uöt32_t
 
°¨t
, uöt32_à
íd
);

134 
mem_lﬂd
(
mem_t
 *
mem
, *
fûíame
, 
uöt32_t
 
°¨t
);

141 
	sªgs_t
 {

144 
uöt32_t
 
	móx
, 
	mecx
, 
	medx
, 
	mebx
;

145 
uöt32_t
 
	me•
, 
	mebp
, 
	mesi
, 
	medi
;

146 
uöt16_t
 
	mes
, 
	mcs
, 
	mss
, 
	mds
, 
	mfs
, 
	mgs
;

147 
uöt32_t
 
	meù
;

148 
uöt32_t
 
	meÊags
;

152 
	mvÆue
[10];

153 
	mvÆid
;

154 } 
	mÂu_°ack
[8];

155 
	mÂu_t›
;

156 
	mÂu_code
;

157 
uöt16_t
 
	mÂu_˘æ
;

158 } 
__©åibuã__
((
∑cked
));

160 
ªgs_t
 *
ªgs_¸óã
();

161 
ªgs_‰ì
(
ªgs_t
 *
ªgs
);

163 
ªgs_c›y
(
ªgs_t
 *
d°
, ªgs_à*
§c
);

164 
ªgs_dump
(
ªgs_t
 *
ªgs
, 
FILE
 *
f
);

165 
ªgs_Âu_°ack_dump
(
ªgs_t
 *
ªgs
, 
FILE
 *
f
);

172 
	#ñf_debug
(...Ë
	`debug
(
ñf_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

173 
ñf_debug_ˇãg‹y
;

176 
	sñf_symbﬁ_t
 {

177 *
	m«me
;

178 
uöt32_t
 
	mvÆue
;

179 
uöt32_t
 
	msize
;

180 
	m£˘i⁄
;

184 
	sñf_fûe_t
 {

187 
FILE
 *
	mf
;

188 
	m∑th
[
MAX_PATH_SIZE
];

190 
uöt32_t
 
	msize
;

191 *
	msh°r
;

192 
Elf32_Ehdr
 
	mehdr
;

193 
Elf32_Shdr
 *
	mshdr
;

194 
Elf32_Phdr
 *
	mphdr
;

195 
uöt32_t
 
	mphdt_ba£
;

198 
	msymèb_size
;

199 
	msymèb_cou¡
;

200 
ñf_symbﬁ_t
 *
	msymèb
;

204 
ñf_fûe_t
 *
ñf_›í
(*
∑th
);

205 
ñf_˛o£
(
ñf_fûe_t
 *
f
);

207 *
ñf_ªad_buf„r
(
ñf_fûe_t
 *
ñf
, 
uöt32_t
 
off£t
, uöt32_à
size
);

208 
ñf_‰ì_buf„r
(*
buf
);

210 
ñf_£˘i⁄_cou¡
(
ñf_fûe_t
 *
f
);

211 
ñf_£˘i⁄_öfo
(
ñf_fûe_t
 *
f
, 
£˘i⁄
,

212 **
≤ame
, 
uöt32_t
 *
∑ddr
, uöt32_à*
psize
, uöt32_à*
pÊags
);

213 *
ñf_£˘i⁄_ªad
(
ñf_fûe_t
 *
f
, 
£˘i⁄
);

214 *
ñf_£˘i⁄_ªad_off£t
(
ñf_fûe_t
 *
f
, 
£˘i⁄
, 
uöt32_t
 
off£t
, uöt32_à
size
);

216 *
ñf_phdt
(
ñf_fûe_t
 *
f
);

217 
uöt32_t
 
ñf_phdt_ba£
(
ñf_fûe_t
 *
f
);

218 
uöt32_t
 
ñf_phdr_cou¡
(
ñf_fûe_t
 *
f
);

219 
uöt32_t
 
ñf_phdr_size
(
ñf_fûe_t
 *
f
);

220 
uöt32_t
 
ñf_gë_íåy
(
ñf_fûe_t
 *
f
);

222 
ñf_symbﬁ_t
 *
ñf_gë_symbﬁ_by_addªss
(
ñf_fûe_t
 *
f
, 
uöt32_t
 
addr
, uöt32_à*
poffs
);

223 
ñf_symbﬁ_t
 *
ñf_gë_symbﬁ_by_«me
(
ñf_fûe_t
 *
f
, *
«me
);

224 
ñf_mîge_symèb
(
ñf_fûe_t
 *
f
, ñf_fûe_à*
§c
);

231 
	slﬂdî_t
 {

234 
ñf_fûe_t
 *
	mñf
;

235 
 li°_t
 *
	m¨gs
;

236 
 li°_t
 *
	mív
;

237 *
	möãΩ
;

238 *
	mexe
;

239 *
	mcwd
;

240 *
	m°dö_fûe
, *
	m°dout_fûe
;

243 
uöt32_t
 
	m°ack_ba£
, 
	m°ack_t›
, 
	m°ack_size
;

244 
uöt32_t
 
	mãxt_size
;

245 
uöt32_t
 
	mívú⁄_ba£
, 
	mbrk
, 
	mbŸtom
;

246 
uöt32_t
 
	m¥og_íåy
, 
	möãΩ_¥og_íåy
;

247 
uöt32_t
 
	mphdt_ba£
, 
	mphdr_cou¡
;

251 
	#ld_debug
(...Ë
	`debug
(
ld_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

252 
ld_debug_ˇãg‹y
;

254 
ld_öô
(
˘x_t
 *
˘x
);

255 
ld_d⁄e
(
˘x_t
 *
˘x
);

257 
ld_add_¨gs
(
˘x_t
 *
˘x
, 
¨gc
, **
¨gv
);

258 
ld_add_cmdlöe
(
˘x_t
 *
˘x
, *
cmdlöe
);

259 
ld_£t_cwd
(
˘x_t
 *
˘x
, *
cwd
);

260 
ld_£t_ªdú
(
˘x_t
 *
˘x
, *
°dö
, *
°dout
);

261 
ld_lﬂd_exe
(
˘x_t
 *
˘x
, *
exe
);

263 
ld_lﬂd_¥og_‰om_˘xc⁄fig
(*
˘xc⁄fig
);

264 
ld_lﬂd_¥og_‰om_cmdlöe
(
¨gc
, **
¨gv
);

266 
ld_c⁄vît_fûíame
(
˘x_t
 *
˘x
, *
fûíame
);

267 
ld_gë_fuŒ_∑th
(
˘x_t
 *
˘x
, *
fûíame
, *
fuŒ∑th
, 
size
);

274 
˘x_t
 *
iß_˘x
;

275 
ªgs_t
 *
iß_ªgs
;

276 
mem_t
 *
iß_mem
;

277 
uöt32_t
 
iß_eù
;

278 
uöt32_t
 
iß_èrgë
;

279 
x86_ö°_t
 
iß_ö°
;

280 
uöt64_t
 
iß_ö°_cou¡
;

281 
iß_fun˘i⁄_Àvñ
;

283 
	#iß_ˇŒ_debug
(...Ë
	`debug
(
iß_ˇŒ_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

284 
	#iß_ö°_debug
(...Ë
	`debug
(
iß_ö°_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

285 
iß_ˇŒ_debug_ˇãg‹y
;

286 
iß_ö°_debug_ˇãg‹y
;

289 
	#DEFINST
(
«me
,
›1
,
›2
,
›3
,
imm
,
pfx
Ë
›_
##«me##
	`_im∂
();

	)

290 
	~<machöe.d©
>

291 #unde‡
DEFINST


293 
iß_dump_Êags
(
FILE
 *
f
);

294 
iß_£t_Êag
(
x86_Êag_t
 
Êag
);

295 
iß_˛ór_Êag
(
x86_Êag_t
 
Êag
);

296 
iß_gë_Êag
(
x86_Êag_t
 
Êag
);

298 
uöt32_t
 
iß_lﬂd_ªg
(
x86_ªgi°î_t
 
ªg
);

299 
iß_°‹e_ªg
(
x86_ªgi°î_t
 
ªg
, 
uöt32_t
 
vÆue
);

301 
uöt8_t
 
iß_lﬂd_rm8
();

302 
uöt16_t
 
iß_lﬂd_rm16
();

303 
uöt32_t
 
iß_lﬂd_rm32
();

304 
iß_°‹e_rm8
(
uöt8_t
 
vÆue
);

305 
iß_°‹e_rm16
(
uöt16_t
 
vÆue
);

306 
iß_°‹e_rm32
(
uöt32_t
 
vÆue
);

308 
	#iß_lﬂd_r8
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
ªg
 + 
ªg_Æ
)

	)

309 
	#iß_lﬂd_r16
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
ªg
 + 
ªg_ax
)

	)

310 
	#iß_lﬂd_r32
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
ªg
 + 
ªg_óx
)

	)

311 
	#iß_lﬂd_§eg
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
ªg
 + 
ªg_es
)

	)

312 
	#iß_°‹e_r8
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
ªg
 + 
ªg_Æ
, vÆue)

	)

313 
	#iß_°‹e_r16
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
ªg
 + 
ªg_ax
, vÆue)

	)

314 
	#iß_°‹e_r32
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
ªg
 + 
ªg_óx
, vÆue)

	)

315 
	#iß_°‹e_§eg
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
ªg
 + 
ªg_es
, vÆue)

	)

317 
	#iß_lﬂd_ú8
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
›ödex
 + 
ªg_Æ
)

	)

318 
	#iß_lﬂd_ú16
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
›ödex
 + 
ªg_ax
)

	)

319 
	#iß_lﬂd_ú32
(Ë
	`iß_lﬂd_ªg
(
iß_ö°
.
›ödex
 + 
ªg_óx
)

	)

320 
	#iß_°‹e_ú8
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
›ödex
 + 
ªg_Æ
, vÆue)

	)

321 
	#iß_°‹e_ú16
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
›ödex
 + 
ªg_ax
, vÆue)

	)

322 
	#iß_°‹e_ú32
(
vÆue
Ë
	`iß_°‹e_ªg
(
iß_ö°
.
›ödex
 + 
ªg_óx
, vÆue)

	)

324 
iß_lﬂd_Âu
(
ödex
, 
uöt8_t
 *
vÆue
);

325 
iß_°‹e_Âu
(
ödex
, 
uöt8_t
 *
vÆue
);

326 
iß_p›_Âu
(
uöt8_t
 *
vÆue
);

327 
iß_push_Âu
(
uöt8_t
 *
vÆue
);

329 
iß_lﬂd_Êﬂt
();

330 
iß_lﬂd_doubÀ
();

331 
iß_lﬂd_exãnded
(
uöt8_t
 *
vÆue
);

332 
iß_°‹e_Êﬂt
(
vÆue
);

333 
iß_°‹e_doubÀ
(
vÆue
);

334 
iß_°‹e_exãnded
(
uöt8_t
 *
vÆue
);

336 
iß_doubÀ_to_exãnded
(
f
, 
uöt8_t
 *
e
);

337 
iß_exãnded_to_doubÀ
(
uöt8_t
 *
e
);

338 
iß_Êﬂt_to_exãnded
(
f
, 
uöt8_t
 *
e
);

339 
iß_exãnded_to_Êﬂt
(
uöt8_t
 *
e
);

341 
iß_°‹e_Âu_code
(
uöt16_t
 
°©us
);

342 
uöt16_t
 
iß_lﬂd_Âu_°©us
();

344 
uöt32_t
 
iß_ef„˘ive_addªss
();

345 
uöt32_t
 
iß_moffs_addªss
();

347 
iß_öô
();

348 
iß_d⁄e
();

349 
iß_dump
(
FILE
 *
f
);

350 
iß_execuã_ö°
(*
buf
);

352 
iß_åa˚_ˇŒ_öô
(*
fûíame
);

353 
iß_åa˚_ˇŒ_d⁄e
();

355 
iß_ö°_°©_dump
(
FILE
 *
f
);

356 
iß_ö°_°©_ª£t
();

363 
	#sysˇŒ_debug
(...Ë
	`debug
(
sysˇŒ_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

364 
sysˇŒ_debug_ˇãg‹y
;

366 
sysˇŒ_do
();

367 
sysˇŒ_summ¨y
();

368 
ö°Æl_sy°emˇŒ
();

375 
	ssig«l_masks_t
 {

376 
uöt64_t
 
	m≥ndög
;

377 
uöt64_t
 
	mblocked
;

378 
uöt64_t
 
	mbackup
;

379 
ªgs_t
 *
	mªgs
;

380 
uöt32_t
 
	m¥ëcode
;

383 
sig«l_masks_t
 *
sig«l_masks_¸óã
();

384 
sig«l_masks_‰ì
(
sig«l_masks_t
 *
sig«l_masks
);

388 
	ssig«l_h™dÀrs_t
 {

389 
	ssim_siga˘i⁄
 {

390 
uöt32_t
 
	mh™dÀr
;

391 
uöt32_t
 
	mÊags
;

392 
uöt32_t
 
	mª°‹î
;

393 
uöt64_t
 
	mmask
;

395 (*
	msig_h™dÀr_poöãr
)();

397 } 
	msiga˘i⁄
[64];

400 
sig«l_h™dÀrs_t
 *
ö°Æl_sig«l_h™dÀrs
();

401 
sig«l_h™dÀrs_‰ì
(
sig«l_h™dÀrs_t
 *
sig«l_h™dÀrs
);

403 
sig«l_h™dÀr_run
(
˘x_t
 *
˘x
, 
sig
);

404 
sig«l_h™dÀr_ªtu∫
(
˘x_t
 *
˘x
);

405 
sig«l_h™dÀr_check
(
˘x_t
 *
˘x
);

406 
sig«l_h™dÀr_check_öå
(
˘x_t
 *
˘x
);

408 *
sim_sig«l_«me
(
signum
);

409 
sim_siga˘i⁄_dump
(
sim_siga˘i⁄
 *sim_siga˘i⁄, 
FILE
 *
f
);

410 
sim_siga˘i⁄_Êags_dump
(
uöt32_t
 
Êags
, 
FILE
 *
f
);

411 
sim_sig£t_dump
(
uöt64_t
 
sim_sig£t
, 
FILE
 *
f
);

412 
sim_sig£t_add
(
uöt64_t
 *
sim_sig£t
, 
sig«l
);

413 
sim_sig£t_dñ
(
uöt64_t
 *
sim_sig£t
, 
sig«l
);

414 
sim_sig£t_membî
(
uöt64_t
 *
sim_sig£t
, 
sig«l
);

421 
	efd_köd_íum
 {

422 
	mfd_köd_ªguœr
 = 0,

423 
	mfd_köd_°d
,

424 
	mfd_köd_pùe
,

425 
	mfd_köd_vútuÆ
,

426 
	mfd_köd_gpu
,

427 
	mfd_köd_sockë


431 
	sfd_t
 {

432 
fd_köd_íum
 
	mköd
;

433 
	mgue°_fd
;

434 
	mho°_fd
;

435 
	m∑th
[
MAX_PATH_SIZE
];

436 
	mÊags
;

440 
	sfdt_t
 {

441 
li°_t
 *
	mfd_li°
;

444 
fdt_t
 *
fdt_¸óã
();

445 
fdt_‰ì
(
fdt_t
 *
fdt
);

446 
fdt_dump
(
fdt_t
 *
fdt
, 
FILE
 *
f
);

448 
fd_t
 *
fdt_íåy_gë
(
fdt_t
 *
fdt
, 
ödex
);

449 
fd_t
 *
fdt_íåy_√w
(
fdt_t
 *
fdt
, 
fd_köd_íum
 
köd
, 
ho°_fd
, *
∑th
, 
Êags
);

450 
fdt_íåy_‰ì
(
fdt_t
 *
fdt
, 
ödex
);

451 
fdt_íåy_dump
(
fdt_t
 *
fdt
, 
ödex
, 
FILE
 *
f
);

453 
fdt_gë_ho°_fd
(
fdt_t
 *
fdt
, 
gue°_fd
);

454 
fdt_gë_gue°_fd
(
fdt_t
 *
fdt
, 
ho°_fd
);

461 
	#˘x_debug
(...Ë
	`debug
(
˘x_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

462 
˘x_debug_ˇãg‹y
;

464 
	s˘x_t
 {

467 
	m°©us
;

468 
	mpid
;

469 
	mmid
;

470 
˘x_t
 *
	m∑ª¡
;

471 
	mexô_sig«l
;

472 
	mexô_code
;

473 
uöt32_t
 
	mbackup_eù
;

474 
uöt32_t
 
	m£t_chûd_tid
, 
	m˛ór_chûd_tid
;

475 
uöt32_t
 
	mrobu°_li°_hód
;

476 
uöt32_t
 
	möôül_°ack
;

479 
uöt64_t
 
	mÆloc_whí
;

480 
uöt64_t
 
	mdóŒoc_whí
;

481 
	mÆloc_c‹e
, 
	mÆloc_thªad
;

482 
	mdóŒoc_sig«l
;

485 
uöt32_t
 
	mglibc_£gmít_ba£
;

486 
uöt32_t
 
	mglibc_£gmít_limô
;

489 
	mlib›í˛_›í_©ãm±
;

496 
±hªad_t
 
	mho°_thªad_su•íd
;

497 
	mho°_thªad_su•íd_a˘ive
;

500 
±hªad_t
 
	mho°_thªad_timî
;

501 
	mho°_thªad_timî_a˘ive
;

502 
uöt64_t
 
	mho°_thªad_timî_wakeup
;

505 
uöt64_t
 
	môimî_vÆue
[3];

506 
uöt64_t
 
	môimî_öãrvÆ
[3];

509 
uöt64_t
 
	mwakeup_time
;

510 
	mwakeup_fd
;

511 
	mwakeup_evíts
;

512 
	mwakeup_pid
;

513 
uöt32_t
 
	mwakeup_fuãx
;

514 
uöt32_t
 
	mwakeup_fuãx_bô£t
;

515 
uöt64_t
 
	mwakeup_fuãx_¶ìp
;

518 
˘x_t
 *
	mc⁄ãxt_√xt
, *
	mc⁄ãxt_¥ev
;

519 
˘x_t
 *
	mru¬ög_√xt
, *
	mru¬ög_¥ev
;

520 
˘x_t
 *
	msu•íded_√xt
, *
	msu•íded_¥ev
;

521 
˘x_t
 *
	mföished_√xt
, *
	mföished_¥ev
;

522 
˘x_t
 *
	mzombõ_√xt
, *
	mzombõ_¥ev
;

523 
˘x_t
 *
	mÆloc_√xt
, *
	mÆloc_¥ev
;

526 
lﬂdî_t
 *
	mlﬂdî
;

527 
mem_t
 *
	mmem
;

528 
fdt_t
 *
	mfdt
;

529 
ªgs_t
 *
	mªgs
;

530 
sig«l_masks_t
 *
	msig«l_masks
;

531 
sig«l_h™dÀrs_t
 *
	msig«l_h™dÀrs
;

533 
	mö°r_¶i˚
;

534 
	muid
;

537 
	e˘x_°©us_íum
 {

538 
	m˘x_ru¬ög
 = 0x0001,

539 
	m˘x_•ecmode
 = 0x0002,

540 
	m˘x_su•íded
 = 0x0004,

541 
	m˘x_föished
 = 0x0008,

542 
	m˘x_ex˛usive
 = 0x0010,

543 
	m˘x_locked
 = 0x0020,

544 
	m˘x_h™dÀr
 = 0x0040,

545 
	m˘x_sigsu•íd
 = 0x0080,

546 
	m˘x_«no¶ìp
 = 0x0100,

547 
	m˘x_pﬁl
 = 0x0200,

548 
	m˘x_ªad
 = 0x0400,

549 
	m˘x_wrôe
 = 0x0800,

550 
	m˘x_waôpid
 = 0x1000,

551 
	m˘x_zombõ
 = 0x2000,

552 
	m˘x_fuãx
 = 0x4000,

553 
	m˘x_Æloc
 = 0x8000,

554 
	m˘x_n⁄e
 = 0x0000

557 
˘x_t
 *
˘x_¸óã
();

558 
˘x_t
 *
˘x_˛⁄e
(˘x_à*
˘x
);

559 
˘x_‰ì
(
˘x_t
 *
˘x
);

560 
˘x_dump
(
˘x_t
 *
˘x
, 
FILE
 *
f
);

563 
__˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x_t
 *
˘x
);

564 
˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x_t
 *
˘x
);

565 
__˘x_ho°_thªad_timî_ˇn˚l
(
˘x_t
 *
˘x
);

566 
˘x_ho°_thªad_timî_ˇn˚l
(
˘x_t
 *
˘x
);

568 
˘x_föish
(
˘x_t
 *
˘x
, 
°©us
);

569 
˘x_föish_group
(
˘x_t
 *
˘x
, 
°©us
);

570 
˘x_execuã_ö°
(
˘x_t
 *
˘x
);

572 
˘x_£t_eù
(
˘x_t
 *
˘x
, 
uöt32_t
 
eù
);

573 
˘x_ªcovî
(
˘x_t
 *
˘x
);

575 
˘x_t
 *
˘x_gë
(
pid
);

576 
˘x_t
 *
˘x_gë_zombõ
(˘x_à*
∑ª¡
, 
pid
);

578 
˘x_gë_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
);

579 
˘x_£t_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
);

580 
˘x_˛ór_°©us
(
˘x_t
 *
˘x
, 
˘x_°©us_íum
 
°©us
);

582 
˘x_fuãx_wake
(
˘x_t
 *
˘x
, 
uöt32_t
 
fuãx
, uöt32_à
cou¡
, uöt32_à
bô£t
);

583 
˘x_exô_robu°_li°
(
˘x_t
 *
˘x
);

585 
˘x_gí_¥oc_£lf_m≠s
(
˘x_t
 *
˘x
, *
∑th
);

591 
	skî√l_t
 {

594 
	mcuºít_pid
;

595 
	mcuºít_mid
;

600 
±hªad_muãx_t
 
	m¥o˚ss_evíts_muãx
;

601 
	m¥o˚ss_evíts_f‹˚
;

605 
uöt64_t
 
	mfuãx_¶ìp_cou¡
;

608 
	mc⁄ãxt_ªscheduÀ
;

611 
	mc⁄ãxt_cou¡
, 
	mc⁄ãxt_max
;

612 
	mru¬ög_cou¡
, 
	mru¬ög_max
;

613 
	msu•íded_cou¡
, 
	msu•íded_max
;

614 
	mzombõ_cou¡
, 
	mzombõ_max
;

615 
	mföished_cou¡
, 
	mföished_max
;

616 
	mÆloc_cou¡
, 
	mÆloc_max
;

617 
˘x_t
 *
	mc⁄ãxt_li°_hód
, *
	mc⁄ãxt_li°_èû
;

618 
˘x_t
 *
	mru¬ög_li°_hód
, *
	mru¬ög_li°_èû
;

619 
˘x_t
 *
	msu•íded_li°_hód
, *
	msu•íded_li°_èû
;

620 
˘x_t
 *
	mzombõ_li°_hód
, *
	mzombõ_li°_èû
;

621 
˘x_t
 *
	mföished_li°_hód
, *
	mföished_li°_èû
;

622 
˘x_t
 *
	mÆloc_li°_hód
, *
	mÆloc_li°_èû
;

625 
	eke_li°_íum
 {

626 
	mke_li°_c⁄ãxt
 = 0,

627 
	mke_li°_ru¬ög
,

628 
	mke_li°_su•íded
,

629 
	mke_li°_zombõ
,

630 
	mke_li°_föished
,

631 
	mke_li°_Æloc


634 
ke_li°_ö£π_hód
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
);

635 
ke_li°_ö£π_èû
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
);

636 
ke_li°_ªmove
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
);

637 
ke_li°_membî
(
ke_li°_íum
 
li°
, 
˘x_t
 *
˘x
);

642 
kî√l_t
 *
ke
;

644 
ke_öô
();

645 
ke_d⁄e
();

646 
ke_run
();

647 
ke_dump
(
FILE
 *
f
);

649 
uöt64_t
 
ke_timî
();

650 
ke_¥o˚ss_evíts
();

651 
ke_¥o˚ss_evíts_scheduÀ
();

	@libm2skernel/machine-ctrl.c

20 
	~"m2skî√l.h
"

23 
	#CF
 
	`iß_gë_Êag
(
Êag_cf
)

	)

24 
	#ZF
 
	`iß_gë_Êag
(
Êag_zf
)

	)

25 
	#SF
 
	`iß_gë_Êag
(
Êag_sf
)

	)

26 
	#OF
 
	`iß_gë_Êag
(
Êag_of
)

	)

27 
	#PF
 
	`iß_gë_Êag
(
Êag_pf
)

	)

30 
	#cc_a
 (!
CF
 && !
ZF
)

	)

31 
	#cc_´
 (!
CF
)

	)

32 
	#cc_b
 (
CF
)

	)

33 
	#cc_be
 (
CF
 || 
ZF
)

	)

34 
	#cc_e
 (
ZF
)

	)

35 
	#cc_g
 (!
ZF
 && 
SF
 =
OF
)

	)

36 
	#cc_ge
 (
SF
 =
OF
)

	)

37 
	#cc_l
 (
SF
 !
OF
)

	)

38 
	#cc_À
 (
ZF
 || 
SF
 !
OF
)

	)

39 
	#cc_√
 (!
ZF
)

	)

40 
	#cc_no
 (!
OF
)

	)

41 
	#cc_≈
 (!
PF
)

	)

42 
	#cc_ns
 (!
SF
)

	)

43 
	#cc_o
 (
OF
)

	)

44 
	#cc_p
 (
PF
)

	)

45 
	#cc_s
 (
SF
)

	)

48 
	#›_£tcc
(
cc
Ë
›_£t
##cc##
	`_rm8_im∂
() { \

49 i‡(
cc_
##
cc
Ë
	`iß_°‹e_rm8
(1); \

50 
	`iß_°‹e_rm8
(0); }

	)

52 
	#›_jcc_ªl8
(
cc
Ë
›_j
##cc##
	`_ªl8_im∂
() { \

53 
iß_èrgë
 = 
iß_ªgs
->
eù
 + (
öt8_t
Ë
iß_ö°
.
imm
.
b
; \

54 i‡(
cc_
##
cc
Ë
iß_ªgs
->
eù
 = 
iß_èrgë
; }

	)

56 
	#›_jcc_ªl32
(
cc
Ë
›_j
##cc##
	`_ªl32_im∂
() { \

57 
iß_èrgë
 = 
iß_ªgs
->
eù
 + 
iß_ö°
.
imm
.
d
; \

58 i‡(
cc_
##
cc
Ë
iß_ªgs
->
eù
 = 
iß_èrgë
; }

	)

60 
	#›_cmov_r16_rm16
(
cc
Ë
›_cmov
##cc##
	`_r16_rm16_im∂
() { \

61 i‡(
cc_
##
cc
Ë
	`iß_°‹e_r16
(
	`iß_lﬂd_rm16
()); }

	)

63 
	#›_cmov_r32_rm32
(
cc
Ë
›_cmov
##cc##
	`_r32_rm32_im∂
() { \

64 i‡(
cc_
##
cc
Ë
	`iß_°‹e_r32
(
	`iß_lﬂd_rm32
()); }

	)

66 
	#›_cc_Æl
(
cc›
) \

67 
›_
##
	`cc›
(
a
) \

68 
›_
##
	`cc›
(
´
) \

69 
›_
##
	`cc›
(
b
) \

70 
›_
##
	`cc›
(
be
) \

71 
›_
##
	`cc›
(
e
) \

72 
›_
##
	`cc›
(
g
) \

73 
›_
##
	`cc›
(
ge
) \

74 
›_
##
	`cc›
(
l
) \

75 
›_
##
	`cc›
(
À
) \

76 
›_
##
	`cc›
(
√
) \

77 
›_
##
	`cc›
(
no
) \

78 
›_
##
	`cc›
(
≈
) \

79 
›_
##
	`cc›
(
ns
) \

80 
›_
##
	`cc›
(
o
) \

81 
›_
##
	`cc›
(
p
) \

82 
›_
##
	`cc›
(
s
)

	)

84 
	$›_cc_Æl
(
£tcc
)

85 
	$›_cc_Æl
(
jcc_ªl8
)

86 
	$›_cc_Æl
(
jcc_ªl32
)

87 
	$›_cc_Æl
(
cmov_r16_rm16
)

88 
	$›_cc_Æl
(
cmov_r32_rm32
)

91 
	$›_jecxz_ªl8_im∂
() {

92 
iß_èrgë
 = 
iß_ªgs
->
eù
 + 
iß_ö°
.
imm
.
b
;

93 i‡(!
	`iß_lﬂd_ªg
(
ªg_ecx
))

94 
iß_ªgs
->
eù
 = 
iß_èrgë
;

95 
	}
}

97 
	$›_jcxz_ªl8_im∂
() {

98 
iß_èrgë
 = 
iß_ªgs
->
eù
 + 
iß_ö°
.
imm
.
b
;

99 i‡(!
	`iß_lﬂd_ªg
(
ªg_cx
))

100 
iß_ªgs
->
eù
 = 
iß_èrgë
;

101 
	}
}

	@libm2skernel/machine-fp.c

20 
	~"m2skî√l.h
"

22 
	#DUMP_ABORT
 
	`¥ötf
("\n%Œd\n", (Ë
iß_ö°_cou¡
), 
	`ab‹t
()

	)

25 
	$›_f2xm1_im∂
() {

26 
uöt8_t
 
°0
[10];

27 
	`iß_lﬂd_Âu
(0, 
°0
);

28 
asm
 volatile (

32 : "=m" (*
°0
)

33 : "m" (*
°0
)

35 
	`iß_°‹e_Âu
(0, 
°0
);

36 
	}
}

39 
	$›_Ábs_im∂
() {

40 
uöt8_t
 
°0
[10];

41 
	`iß_lﬂd_Âu
(0, 
°0
);

42 
asm
 volatile (

46 : "=m" (*
°0
)

47 : "m" (*
°0
)

49 
	`iß_°‹e_Âu
(0, 
°0
);

50 
	}
}

53 
	$›_Ádd_m32_im∂
() {

54 
uöt8_t
 
°0
[10];

55 
m32
;

57 
m32
 = 
	`iß_lﬂd_Êﬂt
();

58 
	`iß_lﬂd_Âu
(0, 
°0
);

59 
asm
 volatile (

64 : "=m" (*
°0
)

65 : "m" (*
°0
), "m" (
m32
)

67 
	`iß_°‹e_Âu
(0, 
°0
);

68 
	}
}

71 
	$›_Ádd_m64_im∂
() {

72 
uöt8_t
 
°0
[10];

73 
m64
;

75 
m64
 = 
	`iß_lﬂd_doubÀ
();

76 
	`iß_lﬂd_Âu
(0, 
°0
);

77 
asm
 volatile (

82 : "=m" (*
°0
)

83 : "m" (*
°0
), "m" (
m64
)

85 
	`iß_°‹e_Âu
(0, 
°0
);

86 
	}
}

89 
	$›_Ádd_°0_°i_im∂
() {

90 
uöt8_t
 
°0
[10], 
°i
[10];

92 
	`iß_lﬂd_Âu
(0, 
°0
);

93 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

94 
asm
 volatile (

99 : "=m" (*
°0
)

100 : "m" (*
°0
), "m" (*
°i
)

102 
	`iß_°‹e_Âu
(0, 
°0
);

103 
	}
}

106 
	$›_Ádd_°i_°0_im∂
() {

107 
uöt8_t
 
°0
[10], 
°i
[10];

109 
	`iß_lﬂd_Âu
(0, 
°0
);

110 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

111 
asm
 volatile (

116 : "=m" (*
°i
)

117 : "m" (*
°i
), "m" (*
°0
)

119 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°i
);

120 
	}
}

123 
	$›_Áddp_°i_°0_im∂
() {

124 
	`›_Ádd_°i_°0_im∂
();

125 
	`iß_p›_Âu
(
NULL
);

126 
	}
}

129 
	$›_fchs_im∂
() {

130 
uöt8_t
 
°0
[10];

131 
	`iß_lﬂd_Âu
(0, 
°0
);

132 
asm
 volatile (

136 : "=m" (*
°0
)

137 : "m" (*
°0
)

139 
	`iß_°‹e_Âu
(0, 
°0
);

140 
	}
}

143 
	$›_fcmovb_°0_°i_im∂
() {

144 
uöt8_t
 
°i
[10];

145 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

146 i‡(
	`iß_gë_Êag
(
Êag_cf
))

147 
	`iß_°‹e_Âu
(0, 
°i
);

148 
	}
}

151 
	$›_fcmove_°0_°i_im∂
() {

152 
uöt8_t
 
°i
[10];

153 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

154 i‡(
	`iß_gë_Êag
(
Êag_zf
))

155 
	`iß_°‹e_Âu
(0, 
°i
);

156 
	}
}

159 
	$›_fcmovbe_°0_°i_im∂
() {

160 
uöt8_t
 
°i
[10];

161 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

162 i‡(
	`iß_gë_Êag
(
Êag_cf
Ë|| iß_gë_Êag(
Êag_zf
))

163 
	`iß_°‹e_Âu
(0, 
°i
);

164 
	}
}

167 
	$›_fcmovu_°0_°i_im∂
() {

168 
uöt8_t
 
°i
[10];

169 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

170 i‡(
	`iß_gë_Êag
(
Êag_pf
))

171 
	`iß_°‹e_Âu
(0, 
°i
);

172 
	}
}

175 
	$›_fcmovnb_°0_°i_im∂
() {

176 
uöt8_t
 
°i
[10];

177 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

178 i‡(!
	`iß_gë_Êag
(
Êag_cf
))

179 
	`iß_°‹e_Âu
(0, 
°i
);

180 
	}
}

183 
	$›_fcmov√_°0_°i_im∂
() {

184 
uöt8_t
 
°i
[10];

185 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

186 i‡(!
	`iß_gë_Êag
(
Êag_zf
))

187 
	`iß_°‹e_Âu
(0, 
°i
);

188 
	}
}

191 
	$›_fcmovnbe_°0_°i_im∂
() {

192 
uöt8_t
 
°i
[10];

193 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

194 i‡(!
	`iß_gë_Êag
(
Êag_cf
Ë&& !iß_gë_Êag(
Êag_zf
))

195 
	`iß_°‹e_Âu
(0, 
°i
);

196 
	}
}

199 
	$›_fcmovnu_°0_°i_im∂
() {

200 
uöt8_t
 
°i
[10];

201 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

202 i‡(!
	`iß_gë_Êag
(
Êag_pf
))

203 
	`iß_°‹e_Âu
(0, 
°i
);

204 
	}
}

207 
	$›_fcom_m32_im∂
() {

208 
uöt8_t
 
°0
[10];

209 
m32
;

210 
uöt16_t
 
°©us
;

212 
	`iß_lﬂd_Âu
(0, 
°0
);

213 
m32
 = 
	`iß_lﬂd_Êﬂt
();

214 
asm
 volatile (

219 : "=g" (
°©us
)

220 : "m" (*
°0
), "m" (
m32
)

223 
	`iß_°‹e_Âu_code
(
°©us
);

224 
	}
}

227 
	$›_fcom_m64_im∂
() {

228 
uöt8_t
 
°0
[10];

229 
m64
;

230 
uöt16_t
 
°©us
;

232 
	`iß_lﬂd_Âu
(0, 
°0
);

233 
m64
 = 
	`iß_lﬂd_doubÀ
();

234 
asm
 volatile (

239 : "=g" (
°©us
)

240 : "m" (*
°0
), "m" (
m64
)

243 
	`iß_°‹e_Âu_code
(
°©us
);

244 
	}
}

247 
	$›_fcom_°i_im∂
() {

248 
uöt8_t
 
°0
[10], 
°i
[10];

249 
uöt16_t
 
°©us
;

251 
	`iß_lﬂd_Âu
(0, 
°0
);

252 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

253 
asm
 volatile (

259 : "=g" (
°©us
)

260 : "m" (*
°0
), "m" (*
°i
)

263 
	`iß_°‹e_Âu_code
(
°©us
);

264 
	}
}

267 
	$›_fcomp_m32_im∂
() {

268 
	`›_fcom_m32_im∂
();

269 
	`iß_p›_Âu
(
NULL
);

270 
	}
}

273 
	$›_fcomp_m64_im∂
() {

274 
	`›_fcom_m64_im∂
();

275 
	`iß_p›_Âu
(
NULL
);

276 
	}
}

279 
	$›_fcomp_°i_im∂
() {

280 
	`›_fcom_°i_im∂
();

281 
	`iß_p›_Âu
(
NULL
);

282 
	}
}

285 
	$›_fcomµ_im∂
() {

286 
uöt8_t
 
°0
[10], 
°1
[10];

287 
uöt16_t
 
°©us
;

289 
	`iß_lﬂd_Âu
(0, 
°0
);

290 
	`iß_lﬂd_Âu
(1, 
°1
);

291 
asm
 volatile (

297 : "=g" (
°©us
)

298 : "m" (*
°0
), "m" (*
°1
)

301 
	`iß_°‹e_Âu_code
(
°©us
);

302 
	`iß_p›_Âu
(
NULL
);

303 
	`iß_p›_Âu
(
NULL
);

304 
	}
}

307 
	$›_fcomi_°0_°i_im∂
() {

308 
uöt8_t
 
°0
[10], 
°i
[10];

309 
Êags
 = 
iß_ªgs
->
eÊags
;

311 
	`iß_lﬂd_Âu
(0, 
°0
);

312 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

313 
asm
 volatile (

320 : "=g" (
Êags
)

321 : "m" (*
°0
), "m" (*
°i
), "g" (
Êags
)

323 
iß_ªgs
->
eÊags
 = 
Êags
;

324 
	}
}

327 
	$›_fcomù_°0_°i_im∂
() {

328 
	`›_fcomi_°0_°i_im∂
();

329 
	`iß_p›_Âu
(
NULL
);

330 
	}
}

333 
	$›_fucomi_°0_°i_im∂
() {

334 
uöt8_t
 
°0
[10], 
°i
[10];

335 
Êags
 = 
iß_ªgs
->
eÊags
;

337 
	`iß_lﬂd_Âu
(0, 
°0
);

338 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

339 
asm
 volatile (

346 : "=g" (
Êags
)

347 : "m" (*
°0
), "m" (*
°i
), "g" (
Êags
)

349 
iß_ªgs
->
eÊags
 = 
Êags
;

350 
	}
}

353 
	$›_fucomù_°0_°i_im∂
() {

354 
	`›_fucomi_°0_°i_im∂
();

355 
	`iß_p›_Âu
(
NULL
);

356 
	}
}

359 
	$›_fcos_im∂
() {

360 
uöt8_t
 
°0
[10];

361 
	`iß_lﬂd_Âu
(0, 
°0
);

362 
asm
 volatile (

366 : "=m" (*
°0
)

367 : "m" (*
°0
)

369 
	`iß_°‹e_Âu
(0, 
°0
);

370 
	}
}

373 
	$›_fdiv_m32_im∂
() {

374 
uöt8_t
 
°0
[10];

375 
m32
;

377 
m32
 = 
	`iß_lﬂd_Êﬂt
();

378 
	`iß_lﬂd_Âu
(0, 
°0
);

379 
asm
 volatile (

384 : "=m" (*
°0
)

385 : "m" (*
°0
), "m" (
m32
)

387 
	`iß_°‹e_Âu
(0, 
°0
);

388 
	}
}

391 
	$›_fdiv_m64_im∂
() {

392 
uöt8_t
 
°0
[10];

393 
m64
;

395 
m64
 = 
	`iß_lﬂd_doubÀ
();

396 
	`iß_lﬂd_Âu
(0, 
°0
);

397 
asm
 volatile (

402 : "=m" (*
°0
)

403 : "m" (*
°0
), "m" (
m64
)

405 
	`iß_°‹e_Âu
(0, 
°0
);

406 
	}
}

409 
	$›_fdiv_°0_°i_im∂
() {

410 
uöt8_t
 
°0
[10], 
°i
[10];

412 
	`iß_lﬂd_Âu
(0, 
°0
);

413 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

414 
asm
 volatile (

419 : "=m" (*
°0
)

420 : "m" (*
°0
), "m" (*
°i
)

422 
	`iß_°‹e_Âu
(0, 
°0
);

423 
	}
}

426 
	$›_fdiv_°i_°0_im∂
() {

427 
uöt8_t
 
°0
[10], 
°i
[10];

429 
	`iß_lﬂd_Âu
(0, 
°0
);

430 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

431 
asm
 volatile (

436 : "=m" (*
°i
)

437 : "m" (*
°i
), "m" (*
°0
)

439 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°i
);

440 
	}
}

443 
	$›_fdivp_°i_°0_im∂
() {

444 
	`›_fdiv_°i_°0_im∂
();

445 
	`iß_p›_Âu
(
NULL
);

446 
	}
}

449 
	$›_fdivr_m32_im∂
() {

450 
uöt8_t
 
°0
[10];

451 
m32
;

453 
m32
 = 
	`iß_lﬂd_Êﬂt
();

454 
	`iß_lﬂd_Âu
(0, 
°0
);

455 
asm
 volatile (

460 : "=m" (*
°0
)

461 : "m" (
m32
), "m" (*
°0
)

463 
	`iß_°‹e_Âu
(0, 
°0
);

464 
	}
}

467 
	$›_fdivr_m64_im∂
() {

468 
uöt8_t
 
°0
[10];

469 
m64
;

471 
m64
 = 
	`iß_lﬂd_doubÀ
();

472 
	`iß_lﬂd_Âu
(0, 
°0
);

473 
asm
 volatile (

478 : "=m" (*
°0
)

479 : "m" (
m64
), "m" (*
°0
)

481 
	`iß_°‹e_Âu
(0, 
°0
);

482 
	}
}

485 
	$›_fdivr_°0_°i_im∂
() {

486 
uöt8_t
 
°0
[10], 
°i
[10];

488 
	`iß_lﬂd_Âu
(0, 
°0
);

489 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

490 
asm
 volatile (

495 : "=m" (*
°0
)

496 : "m" (*
°i
), "m" (*
°0
)

498 
	`iß_°‹e_Âu
(0, 
°0
);

499 
	}
}

502 
	$›_fdivr_°i_°0_im∂
() {

503 
uöt8_t
 
°0
[10], 
°i
[10];

505 
	`iß_lﬂd_Âu
(0, 
°0
);

506 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

507 
asm
 volatile (

512 : "=m" (*
°i
)

513 : "m" (*
°0
), "m" (*
°i
)

515 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°i
);

516 
	}
}

519 
	$›_fdivΩ_°i_°0_im∂
() {

520 
	`›_fdivr_°i_°0_im∂
();

521 
	`iß_p›_Âu
(
NULL
);

522 
	}
}

525 
	$›_fûd_m16_im∂
() {

526 
öt16_t
 
m16
;

527 
uöt8_t
 
e
[10];

528 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 2, &
m16
);

529 
asm
 volatile ("filds %1; fstpt %0\n\t"

530 : "=m" (*
e
Ë: "m" (
m16
));

531 
	`iß_push_Âu
(
e
);

532 
	}
}

535 
	$›_fûd_m32_im∂
() {

536 
öt32_t
 
m32
;

537 
uöt8_t
 
e
[10];

538 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 4, &
m32
);

539 
asm
 volatile ("fildl %1; fstpt %0\n\t"

540 : "=m" (*
e
Ë: "m" (
m32
));

541 
	`iß_push_Âu
(
e
);

542 
	}
}

545 
	$›_fûd_m64_im∂
() {

546 
öt64_t
 
m64
;

547 
uöt8_t
 
e
[10];

548 
	`mem_ªad
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 8, &
m64
);

549 
asm
 volatile ("fildq %1; fstpt %0\n\t"

550 : "=m" (*
e
Ë: "m" (
m64
));

551 
	`iß_push_Âu
(
e
);

552 
	}
}

555 
	$›_fi°_m16_im∂
() {

556 
öt16_t
 
m16
;

557 
uöt8_t
 
e
[10];

558 
	`iß_lﬂd_Âu
(0, 
e
);

559 
asm
 volatile ("fldt %1; fistps %0\n\t"

560 : "=m" (
m16
Ë: "m" (*
e
));

561 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 2, &
m16
);

562 
	}
}

565 
	$›_fi°_m32_im∂
() {

566 
öt32_t
 
m32
;

567 
uöt8_t
 
e
[10];

568 
	`iß_lﬂd_Âu
(0, 
e
);

569 
asm
 volatile ("fldt %1; fistpl %0\n\t"

570 : "=m" (
m32
Ë: "m" (*
e
));

571 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 4, &
m32
);

572 
	}
}

575 
	$›_fi°_m64_im∂
() {

576 
öt64_t
 
m64
;

577 
uöt8_t
 
e
[10];

578 
	`iß_lﬂd_Âu
(0, 
e
);

579 
asm
 volatile ("fldt %1; fistpq %0\n\t"

580 : "=m" (
m64
Ë: "m" (*
e
));

581 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 8, &
m64
);

582 
	}
}

585 
	$›_fi°p_m16_im∂
() {

586 
	`›_fi°_m16_im∂
();

587 
	`iß_p›_Âu
(
NULL
);

588 
	}
}

591 
	$›_fi°p_m32_im∂
() {

592 
	`›_fi°_m32_im∂
();

593 
	`iß_p›_Âu
(
NULL
);

594 
	}
}

597 
	$›_fi°p_m64_im∂
() {

598 
	`›_fi°_m64_im∂
();

599 
	`iß_p›_Âu
(
NULL
);

600 
	}
}

603 
	$›_Êd1_im∂
() {

604 
uöt8_t
 
v
[10];

605 
asm
 vﬁ©ûê("Êd1; f°± %0\n\t" : "=m" (*
v
));

606 
	`iß_push_Âu
(
v
);

607 
	}
}

610 
	$›_Êdl2e_im∂
() {

611 
uöt8_t
 
v
[10];

612 
asm
 vﬁ©ûê("Êdl2e; f°± %0\n\t" : "=m" (*
v
));

613 
	`iß_push_Âu
(
v
);

614 
	}
}

617 
	$›_Êdl2t_im∂
() {

618 
uöt8_t
 
v
[10];

619 
asm
 vﬁ©ûê("Êdl2t; f°± %0\n\t" : "=m" (*
v
));

620 
	`iß_push_Âu
(
v
);

621 
	}
}

624 
	$›_Êdpi_im∂
() {

625 
uöt8_t
 
v
[10];

626 
asm
 vﬁ©ûê("Êdpi; f°± %0\n\t" : "=m" (*
v
));

627 
	`iß_push_Âu
(
v
);

628 
	}
}

631 
	$›_Êdlg2_im∂
() {

632 
uöt8_t
 
v
[10];

633 
asm
 vﬁ©ûê("Êdlg2; f°± %0\n\t" : "=m" (*
v
));

634 
	`iß_push_Âu
(
v
);

635 
	}
}

638 
	$›_Êd 2_im∂
() {

639 
uöt8_t
 
v
[10];

640 
asm
 vﬁ©ûê("Êd 2; f°± %0\n\t" : "=m" (*
v
));

641 
	`iß_push_Âu
(
v
);

642 
	}
}

645 
	$›_Êdz_im∂
() {

646 
uöt8_t
 
v
[10];

647 
asm
 vﬁ©ûê("Êdz; f°± %0\n\t" : "=m" (*
v
));

648 
	`iß_push_Âu
(
v
);

649 
	}
}

652 
	$›_Êdcw_m16_im∂
() {

653 
uöt32_t
 
addr
 = 
	`iß_ef„˘ive_addªss
();

654 
uöt16_t
 
vÆue
;

655 
	`mem_ªad
(
iß_mem
, 
addr
, 2, &
vÆue
);

656 
iß_ªgs
->
Âu_˘æ
 = 
vÆue
;

657 
asm
 volatile (

660 : "m" (
vÆue
)

662 
	}
}

665 
	$›_Êd_m32_im∂
() {

666 
uöt8_t
 
e
[10];

667 
m32
;

668 
m32
 = 
	`iß_lﬂd_Êﬂt
();

669 
	`iß_Êﬂt_to_exãnded
(
m32
, 
e
);

670 
	`iß_push_Âu
(
e
);

671 
	}
}

674 
	$›_Êd_m64_im∂
() {

675 
uöt8_t
 
e
[10];

676 
m64
;

677 
m64
 = 
	`iß_lﬂd_doubÀ
();

678 
	`iß_doubÀ_to_exãnded
(
m64
, 
e
);

679 
	`iß_push_Âu
(
e
);

680 
	}
}

683 
	$›_Êd_m80_im∂
() {

684 
uöt8_t
 
e
[10];

685 
	`iß_lﬂd_exãnded
(
e
);

686 
	`iß_push_Âu
(
e
);

687 
	}
}

690 
	$›_Êd_°i_im∂
() {

691 
uöt8_t
 
°i
[10];

692 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

693 
	`iß_push_Âu
(
°i
);

694 
	}
}

697 
	$›_fmul_m32_im∂
() {

698 
uöt8_t
 
°0
[10];

699 
m32
;

701 
m32
 = 
	`iß_lﬂd_Êﬂt
();

702 
	`iß_lﬂd_Âu
(0, 
°0
);

703 
asm
 volatile (

708 : "=m" (*
°0
)

709 : "m" (*
°0
), "m" (
m32
)

711 
	`iß_°‹e_Âu
(0, 
°0
);

712 
	}
}

715 
	$›_fmul_m64_im∂
() {

716 
uöt8_t
 
°0
[10];

717 
m64
;

719 
m64
 = 
	`iß_lﬂd_doubÀ
();

720 
	`iß_lﬂd_Âu
(0, 
°0
);

721 
asm
 volatile (

726 : "=m" (*
°0
)

727 : "m" (*
°0
), "m" (
m64
)

729 
	`iß_°‹e_Âu
(0, 
°0
);

730 
	}
}

733 
	$›_fmul_°0_°i_im∂
() {

734 
uöt8_t
 
°0
[10], 
°i
[10];

736 
	`iß_lﬂd_Âu
(0, 
°0
);

737 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

738 
asm
 volatile (

743 : "=m" (*
°0
)

744 : "m" (*
°0
), "m" (*
°i
)

746 
	`iß_°‹e_Âu
(0, 
°0
);

747 
	}
}

750 
	$›_fmul_°i_°0_im∂
() {

751 
uöt8_t
 
°0
[10], 
°i
[10];

753 
	`iß_lﬂd_Âu
(0, 
°0
);

754 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

755 
asm
 volatile (

760 : "=m" (*
°i
)

761 : "m" (*
°i
), "m" (*
°0
)

763 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°i
);

764 
	}
}

767 
	$›_fmuÕ_°i_°0_im∂
() {

768 
	`›_fmul_°i_°0_im∂
();

769 
	`iß_p›_Âu
(
NULL
);

770 
	}
}

773 
	$›_f°cw_m16_im∂
() {

774 
uöt16_t
 
vÆue
 = 
iß_ªgs
->
Âu_˘æ
;

775 
asm
 volatile (

778 : "m" (
vÆue
)

780 
	`mem_wrôe
(
iß_mem
, 
	`iß_ef„˘ive_addªss
(), 2, &
vÆue
);

781 
	}
}

784 
	$›_‚°cw_m16_im∂
() {

785 
	`›_f°cw_m16_im∂
();

786 
	}
}

789 
	$›_‚°sw_ax_im∂
() {

790 
uöt16_t
 
°©us
 = 
	`iß_lﬂd_Âu_°©us
();

791 
	`iß_°‹e_ªg
(
ªg_ax
, 
°©us
);

792 
	}
}

795 
	$›_Âªm_im∂
() {

796 
uöt8_t
 
°0
[10], 
°1
[10];

797 
	`iß_lﬂd_Âu
(0, 
°0
);

798 
	`iß_lﬂd_Âu
(1, 
°1
);

799 
asm
 volatile (

805 : "=m" (*
°0
)

806 : "m" (*
°0
), "m" (*
°1
)

808 
	`iß_°‹e_Âu
(0, 
°0
);

809 
	}
}

812 
	$›_Âªm1_im∂
() {

813 
uöt8_t
 
°0
[10], 
°1
[10];

814 
	`iß_lﬂd_Âu
(0, 
°0
);

815 
	`iß_lﬂd_Âu
(1, 
°1
);

816 
asm
 volatile (

822 : "=m" (*
°0
)

823 : "m" (*
°0
), "m" (*
°1
)

825 
	`iß_°‹e_Âu
(0, 
°0
);

826 
	}
}

829 
	$›_Âèn_im∂
() {

830 
uöt8_t
 
°0
[10];

831 
	`iß_lﬂd_Âu
(0, 
°0
);

832 
asm
 volatile (

837 : "=m" (*
°0
)

838 : "m" (*
°0
)

840 
	`iß_°‹e_Âu
(0, 
°0
);

841 
	`›_Êd1_im∂
();

842 
	}
}

845 
	$›_Â©™_im∂
() {

846 
uöt8_t
 
°0
[10], 
°1
[10];

847 
	`iß_lﬂd_Âu
(0, 
°0
);

848 
	`iß_lﬂd_Âu
(1, 
°1
);

849 
asm
 volatile (

854 : "=m" (*
°1
)

855 : "m" (*
°0
), "m" (*
°1
)

857 
	`iß_°‹e_Âu
(1, 
°1
);

858 
	`iß_p›_Âu
(
NULL
);

859 
	}
}

862 
	$›_‰ndöt_im∂
() {

863 
uöt8_t
 
°0
[10];

864 
	`iß_lﬂd_Âu
(0, 
°0
);

865 
asm
 volatile (

869 : "=m" (*
°0
)

870 : "m" (*
°0
)

872 
	`iß_°‹e_Âu
(0, 
°0
);

873 
	}
}

876 
	$›_fsˇÀ_im∂
() {

877 
uöt8_t
 
°0
[10], 
°1
[10];

878 
	`iß_lﬂd_Âu
(0, 
°0
);

879 
	`iß_lﬂd_Âu
(1, 
°1
);

880 
asm
 volatile (

886 : "=m" (*
°0
)

887 : "m" (*
°0
), "m" (*
°1
)

889 
	`iß_°‹e_Âu
(0, 
°0
);

890 
	}
}

893 
	$›_fsö_im∂
() {

894 
uöt8_t
 
°0
[10];

895 
	`iß_lﬂd_Âu
(0, 
°0
);

896 
asm
 volatile (

900 : "=m" (*
°0
)

901 : "m" (*
°0
)

903 
	`iß_°‹e_Âu
(0, 
°0
);

904 
	}
}

907 
	$›_fsöcos_im∂
() {

908 
uöt8_t
 
°0
[10], 
vsö
[10], 
vcos
[10];

909 
	`iß_lﬂd_Âu
(0, 
°0
);

910 
asm
 volatile (

917 : "=m" (*
vsö
), "=m" (*
vcos
)

918 : "m" (*
°0
)

920 
	`iß_°‹e_Âu
(0, 
vsö
);

921 
	`iß_push_Âu
(
vcos
);

922 
	}
}

925 
	$›_fsqπ_im∂
() {

926 
uöt8_t
 
°0
[10];

927 
	`iß_lﬂd_Âu
(0, 
°0
);

928 
asm
 volatile (

932 : "=m" (*
°0
)

933 : "m" (*
°0
)

935 
	`iß_°‹e_Âu
(0, 
°0
);

936 
	}
}

939 
	$›_f°_m32_im∂
() {

940 
uöt8_t
 
°0
[10];

941 
m32
;

942 
	`iß_lﬂd_Âu
(0, 
°0
);

943 
m32
 = 
	`iß_exãnded_to_Êﬂt
(
°0
);

944 
	`iß_°‹e_Êﬂt
(
m32
);

945 
	}
}

948 
	$›_f°_m64_im∂
() {

949 
uöt8_t
 
°0
[10];

950 
m64
;

951 
	`iß_lﬂd_Âu
(0, 
°0
);

952 
m64
 = 
	`iß_exãnded_to_doubÀ
(
°0
);

953 
	`iß_°‹e_doubÀ
(
m64
);

954 
	}
}

957 
	$›_f°_°i_im∂
() {

958 
uöt8_t
 
°0
[10];

959 
	`iß_lﬂd_Âu
(0, 
°0
);

960 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°0
);

961 
	}
}

964 
	$›_f°p_m32_im∂
() {

965 
	`›_f°_m32_im∂
();

966 
	`iß_p›_Âu
(
NULL
);

967 
	}
}

970 
	$›_f°p_m64_im∂
() {

971 
	`›_f°_m64_im∂
();

972 
	`iß_p›_Âu
(
NULL
);

973 
	}
}

976 
	$›_f°p_m80_im∂
() {

977 
uöt8_t
 
m80
[10];

978 
	`iß_p›_Âu
(
m80
);

979 
	`iß_°‹e_exãnded
(
m80
);

980 
	}
}

983 
	$›_f°p_°i_im∂
() {

984 
	`›_f°_°i_im∂
();

985 
	`iß_p›_Âu
(
NULL
);

986 
	}
}

989 
	$›_f°sw_ax_im∂
() {

990 
uöt16_t
 
°©us
 = 
	`iß_lﬂd_Âu_°©us
();

991 
	`iß_°‹e_ªg
(
ªg_ax
, 
°©us
);

992 
	}
}

995 
	$›_fsub_m32_im∂
() {

996 
uöt8_t
 
°0
[10];

997 
m32
;

999 
m32
 = 
	`iß_lﬂd_Êﬂt
();

1000 
	`iß_lﬂd_Âu
(0, 
°0
);

1001 
asm
 volatile (

1006 : "=m" (*
°0
)

1007 : "m" (*
°0
), "m" (
m32
)

1009 
	`iß_°‹e_Âu
(0, 
°0
);

1010 
	}
}

1013 
	$›_fsub_m64_im∂
() {

1014 
uöt8_t
 
°0
[10];

1015 
m64
;

1017 
m64
 = 
	`iß_lﬂd_doubÀ
();

1018 
	`iß_lﬂd_Âu
(0, 
°0
);

1019 
asm
 volatile (

1024 : "=m" (*
°0
)

1025 : "m" (*
°0
), "m" (
m64
)

1027 
	`iß_°‹e_Âu
(0, 
°0
);

1028 
	}
}

1031 
	$›_fsub_°0_°i_im∂
() {

1032 
uöt8_t
 
°0
[10], 
°i
[10];

1034 
	`iß_lﬂd_Âu
(0, 
°0
);

1035 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1036 
asm
 volatile (

1041 : "=m" (*
°0
)

1042 : "m" (*
°0
), "m" (*
°i
)

1044 
	`iß_°‹e_Âu
(0, 
°0
);

1045 
	}
}

1048 
	$›_fsub_°i_°0_im∂
() {

1049 
uöt8_t
 
°0
[10], 
°i
[10];

1051 
	`iß_lﬂd_Âu
(0, 
°0
);

1052 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1053 
asm
 volatile (

1058 : "=m" (*
°i
)

1059 : "m" (*
°i
), "m" (*
°0
)

1061 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1062 
	}
}

1065 
	$›_fsubp_°i_°0_im∂
() {

1066 
	`›_fsub_°i_°0_im∂
();

1067 
	`iß_p›_Âu
(
NULL
);

1068 
	}
}

1071 
	$›_fsubr_m32_im∂
() {

1072 
uöt8_t
 
°0
[10];

1073 
m32
;

1075 
m32
 = 
	`iß_lﬂd_Êﬂt
();

1076 
	`iß_lﬂd_Âu
(0, 
°0
);

1077 
asm
 volatile (

1082 : "=m" (*
°0
)

1083 : "m" (
m32
), "m" (*
°0
)

1085 
	`iß_°‹e_Âu
(0, 
°0
);

1086 
	}
}

1089 
	$›_fsubr_m64_im∂
() {

1090 
uöt8_t
 
°0
[10];

1091 
m64
;

1093 
m64
 = 
	`iß_lﬂd_doubÀ
();

1094 
	`iß_lﬂd_Âu
(0, 
°0
);

1095 
asm
 volatile (

1100 : "=m" (*
°0
)

1101 : "m" (
m64
), "m" (*
°0
)

1103 
	`iß_°‹e_Âu
(0, 
°0
);

1104 
	}
}

1107 
	$›_fsubr_°0_°i_im∂
() {

1108 
uöt8_t
 
°0
[10], 
°i
[10];

1110 
	`iß_lﬂd_Âu
(0, 
°0
);

1111 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1112 
asm
 volatile (

1117 : "=m" (*
°0
)

1118 : "m" (*
°i
), "m" (*
°0
)

1120 
	`iß_°‹e_Âu
(0, 
°0
);

1121 
	}
}

1124 
	$›_fsubr_°i_°0_im∂
() {

1125 
uöt8_t
 
°0
[10], 
°i
[10];

1127 
	`iß_lﬂd_Âu
(0, 
°0
);

1128 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1129 
asm
 volatile (

1134 : "=m" (*
°i
)

1135 : "m" (*
°0
), "m" (*
°i
)

1137 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1138 
	}
}

1141 
	$›_fsubΩ_°i_°0_im∂
() {

1142 
	`›_fsubr_°i_°0_im∂
();

1143 
	`iß_p›_Âu
(
NULL
);

1144 
	}
}

1147 
	$›_·°_im∂
()

1149 
uöt8_t
 
°0
[10];

1150 
uöt16_t
 
°©us
;

1152 
	`iß_lﬂd_Âu
(0, 
°0
);

1153 
asm
 volatile (

1159 : "=g" (
°©us
)

1160 : "m" (*
°0
)

1163 
	`iß_°‹e_Âu_code
(
°©us
);

1164 
	}
}

1167 
	$›_fucom_°i_im∂
() {

1168 
uöt8_t
 
°0
[10], 
°i
[10];

1169 
uöt16_t
 
°©us
;

1171 
	`iß_lﬂd_Âu
(0, 
°0
);

1172 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1173 
asm
 volatile (

1179 : "=g" (
°©us
)

1180 : "m" (*
°0
), "m" (*
°i
)

1183 
	`iß_°‹e_Âu_code
(
°©us
);

1184 
	}
}

1187 
	$›_fucomp_°i_im∂
() {

1188 
	`›_fucom_°i_im∂
();

1189 
	`iß_p›_Âu
(
NULL
);

1190 
	}
}

1193 
	$›_fucomµ_im∂
() {

1194 
uöt8_t
 
°0
[10], 
°1
[10];

1195 
uöt16_t
 
°©us
;

1197 
	`iß_lﬂd_Âu
(0, 
°0
);

1198 
	`iß_lﬂd_Âu
(1, 
°1
);

1199 
asm
 volatile (

1205 : "=g" (
°©us
)

1206 : "m" (*
°0
), "m" (*
°1
)

1209 
	`iß_°‹e_Âu_code
(
°©us
);

1210 
	`iß_p›_Âu
(
NULL
);

1211 
	`iß_p›_Âu
(
NULL
);

1212 
	}
}

1215 
	$›_fxam_im∂
() {

1216 
uöt8_t
 
°0
[10];

1217 
uöt16_t
 
°©us
;

1219 
	`iß_lﬂd_Âu
(0, 
°0
);

1220 
asm
 volatile (

1226 : "=g" (
°©us
)

1227 : "m" (*
°0
)

1230 
	`iß_°‹e_Âu_code
(
°©us
);

1231 
	}
}

1234 
	$›_fxch_°i_im∂
() {

1235 
uöt8_t
 
°0
[10], 
°i
[10];

1236 
	`iß_lﬂd_Âu
(0, 
°0
);

1237 
	`iß_lﬂd_Âu
(
iß_ö°
.
›ödex
, 
°i
);

1238 
	`iß_°‹e_Âu
(0, 
°i
);

1239 
	`iß_°‹e_Âu
(
iß_ö°
.
›ödex
, 
°0
);

1240 
	}
}

1243 
	$›_fyl2x_im∂
() {

1244 
uöt8_t
 
°0
[10], 
°1
[10];

1245 
	`iß_lﬂd_Âu
(0, 
°0
);

1246 
	`iß_lﬂd_Âu
(1, 
°1
);

1247 
asm
 volatile (

1252 : "=m" (*
°1
)

1253 : "m" (*
°0
), "m" (*
°1
)

1255 
	`iß_°‹e_Âu
(1, 
°1
);

1256 
	`iß_p›_Âu
(
NULL
);

1257 
	}
}

1260 
	$›_fyl2xp1_im∂
() {

1261 
uöt8_t
 
°0
[10], 
°1
[10];

1262 
	`iß_lﬂd_Âu
(0, 
°0
);

1263 
	`iß_lﬂd_Âu
(1, 
°1
);

1264 
asm
 volatile (

1269 : "=m" (*
°1
)

1270 : "m" (*
°0
), "m" (*
°1
)

1272 
	`iß_°‹e_Âu
(1, 
°1
);

1273 
	`iß_p›_Âu
(
NULL
);

1274 
	}
}

	@libm2skernel/machine-rot.c

20 
	~"m2skî√l.h
"

23 
	#›_xxx_rm8_1_im∂
(
xxx
Ë
›_
##xxx##
	`_rm8_1_im∂
() { \

24 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
(); \

25 
uöt8_t
 
cou¡
 = 1; \

26 
Êags
 = 
iß_ªgs
->
eÊags
; \

27 
asm
 volatile ( \

34 : "=g" (
Êags
), "=m" (
rm8
) \

35 : "m" (
rm8
), "m" (
cou¡
), "g" (
Êags
) \

38 
	`iß_°‹e_rm8
(
rm8
); \

39 
iß_ªgs
->
eÊags
 = 
Êags
; \

40 }

	)

43 
	#›_xxx_rm8_˛_im∂
(
xxx
Ë
›_
##xxx##
	`_rm8_˛_im∂
() { \

44 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
(); \

45 
uöt8_t
 
cou¡
 = 
	`iß_lﬂd_ªg
(
ªg_˛
); \

46 
Êags
 = 
iß_ªgs
->
eÊags
; \

47 
asm
 volatile ( \

54 : "=g" (
Êags
), "=m" (
rm8
) \

55 : "m" (
rm8
), "m" (
cou¡
), "g" (
Êags
) \

58 
	`iß_°‹e_rm8
(
rm8
); \

59 
iß_ªgs
->
eÊags
 = 
Êags
; \

60 }

	)

63 
	#›_xxx_rm8_imm8_im∂
(
xxx
Ë
›_
##xxx##
	`_rm8_imm8_im∂
() { \

64 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
(); \

65 
uöt8_t
 
cou¡
 = 
iß_ö°
.
imm
.
b
; \

66 
Êags
 = 
iß_ªgs
->
eÊags
; \

67 
asm
 volatile ( \

74 : "=g" (
Êags
), "=m" (
rm8
) \

75 : "m" (
rm8
), "m" (
cou¡
), "g" (
Êags
) \

78 
	`iß_°‹e_rm8
(
rm8
); \

79 
iß_ªgs
->
eÊags
 = 
Êags
; \

80 }

	)

83 
	#›_xxx_rm16_1_im∂
(
xxx
Ë
›_
##xxx##
	`_rm16_1_im∂
() { \

84 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

85 
uöt8_t
 
cou¡
 = 1; \

86 
Êags
 = 
iß_ªgs
->
eÊags
; \

87 
asm
 volatile ( \

94 : "=g" (
Êags
), "=m" (
rm16
) \

95 : "m" (
rm16
), "m" (
cou¡
), "g" (
Êags
) \

98 
	`iß_°‹e_rm16
(
rm16
); \

99 
iß_ªgs
->
eÊags
 = 
Êags
; \

100 }

	)

103 
	#›_xxx_rm16_˛_im∂
(
xxx
Ë
›_
##xxx##
	`_rm16_˛_im∂
() { \

104 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

105 
uöt8_t
 
cou¡
 = 
	`iß_lﬂd_ªg
(
ªg_˛
); \

106 
Êags
 = 
iß_ªgs
->
eÊags
; \

107 
asm
 volatile ( \

114 : "=g" (
Êags
), "=m" (
rm16
) \

115 : "m" (
rm16
), "m" (
cou¡
), "g" (
Êags
) \

118 
	`iß_°‹e_rm16
(
rm16
); \

119 
iß_ªgs
->
eÊags
 = 
Êags
; \

120 }

	)

123 
	#›_xxx_rm16_imm8_im∂
(
xxx
Ë
›_
##xxx##
	`_rm16_imm8_im∂
() { \

124 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

125 
uöt8_t
 
cou¡
 = 
iß_ö°
.
imm
.
b
; \

126 
Êags
 = 
iß_ªgs
->
eÊags
; \

127 
asm
 volatile ( \

134 : "=g" (
Êags
), "=m" (
rm16
) \

135 : "m" (
rm16
), "m" (
cou¡
), "g" (
Êags
) \

138 
	`iß_°‹e_rm16
(
rm16
); \

139 
iß_ªgs
->
eÊags
 = 
Êags
; \

140 }

	)

143 
	#›_xxx_rm32_1_im∂
(
xxx
Ë
›_
##xxx##
	`_rm32_1_im∂
() { \

144 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

145 
uöt8_t
 
cou¡
 = 1; \

146 
Êags
 = 
iß_ªgs
->
eÊags
; \

147 
asm
 volatile ( \

154 : "=g" (
Êags
), "=m" (
rm32
) \

155 : "m" (
rm32
), "m" (
cou¡
), "g" (
Êags
) \

158 
	`iß_°‹e_rm32
(
rm32
); \

159 
iß_ªgs
->
eÊags
 = 
Êags
; \

160 }

	)

163 
	#›_xxx_rm32_˛_im∂
(
xxx
Ë
›_
##xxx##
	`_rm32_˛_im∂
() { \

164 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

165 
uöt8_t
 
cou¡
 = 
	`iß_lﬂd_ªg
(
ªg_˛
); \

166 
Êags
 = 
iß_ªgs
->
eÊags
; \

167 
asm
 volatile ( \

174 : "=g" (
Êags
), "=m" (
rm32
) \

175 : "m" (
rm32
), "m" (
cou¡
), "g" (
Êags
) \

178 
	`iß_°‹e_rm32
(
rm32
); \

179 
iß_ªgs
->
eÊags
 = 
Êags
; \

180 }

	)

183 
	#›_xxx_rm32_imm8_im∂
(
xxx
Ë
›_
##xxx##
	`_rm32_imm8_im∂
() { \

184 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

185 
uöt8_t
 
cou¡
 = 
iß_ö°
.
imm
.
b
; \

186 
Êags
 = 
iß_ªgs
->
eÊags
; \

187 
asm
 volatile ( \

194 : "=g" (
Êags
), "=m" (
rm32
) \

195 : "m" (
rm32
), "m" (
cou¡
), "g" (
Êags
) \

198 
	`iß_°‹e_rm32
(
rm32
); \

199 
iß_ªgs
->
eÊags
 = 
Êags
; \

200 }

	)

205 
	#›_xxx_Æl
(
xxx
) \

206 
	`›_xxx_rm8_1_im∂
(
xxx
) \

207 
	`›_xxx_rm8_˛_im∂
(
xxx
) \

208 
	`›_xxx_rm8_imm8_im∂
(
xxx
) \

209 
	`›_xxx_rm16_1_im∂
(
xxx
) \

210 
	`›_xxx_rm16_˛_im∂
(
xxx
) \

211 
	`›_xxx_rm16_imm8_im∂
(
xxx
) \

212 
	`›_xxx_rm32_1_im∂
(
xxx
) \

213 
	`›_xxx_rm32_˛_im∂
(
xxx
) \

214 
	`›_xxx_rm32_imm8_im∂
(
xxx
)

	)

218 
	$›_xxx_Æl
(
r˛
)

219 
	$›_xxx_Æl
(
r¸
)

220 
	$›_xxx_Æl
(
rﬁ
)

221 
	$›_xxx_Æl
(
r‹
)

223 
	$›_xxx_Æl
(
ßr
)

224 
	$›_xxx_Æl
(
shl
)

225 
	`›_xxx_Æl
(
shr
)

	@libm2skernel/machine-std.c

21 
	~"m2skî√l.h
"

24 
	#›_°d›_Æ_imm8
(
°d›
, 
wb
Ë
›_
##°d›##
	`_Æ_imm8_im∂
() { \

25 
uöt8_t
 
Æ
 = 
	`iß_lﬂd_ªg
(
ªg_Æ
); \

26 
uöt8_t
 
imm8
 = 
iß_ö°
.
imm
.
b
; \

27 
Êags
 = 
iß_ªgs
->
eÊags
; \

28 
asm
 volatile ( \

34 : "=g" (
Êags
), "=m" (
Æ
) \

35 : "m" (
Æ
), "m" (
imm8
), "g" (
Êags
) \

38 i‡(
wb
) \

39 
	`iß_°‹e_ªg
(
ªg_Æ
, 
Æ
); \

40 
iß_ªgs
->
eÊags
 = 
Êags
; \

41 }

	)

44 
	#›_°d›_ax_imm16
(
°d›
, 
wb
Ë
›_
##°d›##
	`_ax_imm16_im∂
() { \

45 
uöt16_t
 
ax
 = 
	`iß_lﬂd_ªg
(
ªg_ax
); \

46 
uöt16_t
 
imm16
 = 
iß_ö°
.
imm
.
w
; \

47 
Êags
 = 
iß_ªgs
->
eÊags
; \

48 
asm
 volatile ( \

54 : "=g" (
Êags
), "=m" (
ax
) \

55 : "m" (
ax
), "m" (
imm16
), "g" (
Êags
) \

58 i‡(
wb
) \

59 
	`iß_°‹e_ªg
(
ªg_ax
, 
ax
); \

60 
iß_ªgs
->
eÊags
 = 
Êags
; \

61 }

	)

64 
	#›_°d›_óx_imm32
(
°d›
, 
wb
Ë
›_
##°d›##
	`_óx_imm32_im∂
() { \

65 
uöt32_t
 
óx
 = 
	`iß_lﬂd_ªg
(
ªg_óx
); \

66 
uöt32_t
 
imm32
 = 
iß_ö°
.
imm
.
d
; \

67 
Êags
 = 
iß_ªgs
->
eÊags
; \

68 
asm
 volatile ( \

74 : "=g" (
Êags
), "=m" (
óx
) \

75 : "m" (
óx
), "m" (
imm32
), "g" (
Êags
) \

78 i‡(
wb
) \

79 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
); \

80 
iß_ªgs
->
eÊags
 = 
Êags
; \

81 }

	)

84 
	#›_°d›_rm8_imm8
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm8_imm8_im∂
() { \

85 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
(); \

86 
uöt8_t
 
imm8
 = 
iß_ö°
.
imm
.
b
; \

87 
Êags
 = 
iß_ªgs
->
eÊags
; \

88 
asm
 volatile ( \

94 : "=g" (
Êags
), "=m" (
rm8
) \

95 : "m" (
rm8
), "m" (
imm8
), "g" (
Êags
) \

98 i‡(
wb
) \

99 
	`iß_°‹e_rm8
(
rm8
); \

100 
iß_ªgs
->
eÊags
 = 
Êags
; \

101 }

	)

104 
	#›_°d›_rm16_imm16
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm16_imm16_im∂
() { \

105 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

106 
uöt16_t
 
imm16
 = 
iß_ö°
.
imm
.
w
; \

107 
Êags
 = 
iß_ªgs
->
eÊags
; \

108 
asm
 volatile ( \

114 : "=g" (
Êags
), "=m" (
rm16
) \

115 : "m" (
rm16
), "m" (
imm16
), "g" (
Êags
) \

118 i‡(
wb
) \

119 
	`iß_°‹e_rm16
(
rm16
); \

120 
iß_ªgs
->
eÊags
 = 
Êags
; \

121 }

	)

124 
	#›_°d›_rm32_imm32
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm32_imm32_im∂
() { \

125 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

126 
uöt32_t
 
imm32
 = 
iß_ö°
.
imm
.
d
; \

127 
Êags
 = 
iß_ªgs
->
eÊags
; \

128 
asm
 volatile ( \

134 : "=g" (
Êags
), "=m" (
rm32
) \

135 : "m" (
rm32
), "m" (
imm32
), "g" (
Êags
) \

138 i‡(
wb
) \

139 
	`iß_°‹e_rm32
(
rm32
); \

140 
iß_ªgs
->
eÊags
 = 
Êags
; \

141 }

	)

144 
	#›_°d›_rm16_imm8
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm16_imm8_im∂
() { \

145 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

146 
uöt16_t
 
imm8
 = (
öt8_t
Ë
iß_ö°
.
imm
.
b
; \

147 
Êags
 = 
iß_ªgs
->
eÊags
; \

148 
asm
 volatile ( \

154 : "=g" (
Êags
), "=m" (
rm16
) \

155 : "m" (
rm16
), "m" (
imm8
), "g" (
Êags
) \

158 i‡(
wb
) \

159 
	`iß_°‹e_rm16
(
rm16
); \

160 
iß_ªgs
->
eÊags
 = 
Êags
; \

161 }

	)

164 
	#›_°d›_rm32_imm8
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm32_imm8_im∂
() { \

165 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

166 
uöt32_t
 
imm8
 = (
öt8_t
Ë
iß_ö°
.
imm
.
b
; \

167 
Êags
 = 
iß_ªgs
->
eÊags
; \

168 
asm
 volatile ( \

174 : "=g" (
Êags
), "=m" (
rm32
) \

175 : "m" (
rm32
), "m" (
imm8
), "g" (
Êags
) \

178 i‡(
wb
) \

179 
	`iß_°‹e_rm32
(
rm32
); \

180 
iß_ªgs
->
eÊags
 = 
Êags
; \

181 }

	)

184 
	#›_°d›_rm8_r8
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm8_r8_im∂
() { \

185 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
(); \

186 
uöt8_t
 
r8
 = 
	`iß_lﬂd_r8
(); \

187 
Êags
 = 
iß_ªgs
->
eÊags
; \

188 
asm
 volatile ( \

194 : "=g" (
Êags
), "=m" (
rm8
) \

195 : "m" (
rm8
), "m" (
r8
), "g" (
Êags
) \

198 i‡(
wb
) \

199 
	`iß_°‹e_rm8
(
rm8
); \

200 
iß_ªgs
->
eÊags
 = 
Êags
; \

201 }

	)

204 
	#›_°d›_rm16_r16
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm16_r16_im∂
() { \

205 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

206 
uöt16_t
 
r16
 = 
	`iß_lﬂd_r16
(); \

207 
Êags
 = 
iß_ªgs
->
eÊags
; \

208 
asm
 volatile ( \

214 : "=g" (
Êags
), "=m" (
rm16
) \

215 : "m" (
rm16
), "m" (
r16
), "g" (
Êags
) \

218 i‡(
wb
) \

219 
	`iß_°‹e_rm16
(
rm16
); \

220 
iß_ªgs
->
eÊags
 = 
Êags
; \

221 }

	)

224 
	#›_°d›_rm32_r32
(
°d›
, 
wb
Ë
›_
##°d›##
	`_rm32_r32_im∂
() { \

225 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

226 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
(); \

227 
Êags
 = 
iß_ªgs
->
eÊags
; \

228 
asm
 volatile ( \

234 : "=g" (
Êags
), "=m" (
rm32
) \

235 : "m" (
rm32
), "m" (
r32
), "g" (
Êags
) \

238 i‡(
wb
) \

239 
	`iß_°‹e_rm32
(
rm32
); \

240 
iß_ªgs
->
eÊags
 = 
Êags
; \

241 }

	)

244 
	#›_°d›_r8_rm8
(
°d›
, 
wb
Ë
›_
##°d›##
	`_r8_rm8_im∂
() { \

245 
uöt8_t
 
r8
 = 
	`iß_lﬂd_r8
(); \

246 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
(); \

247 
Êags
 = 
iß_ªgs
->
eÊags
; \

248 
asm
 volatile ( \

254 : "=g" (
Êags
), "=m" (
r8
) \

255 : "m" (
r8
), "m" (
rm8
), "g" (
Êags
) \

258 i‡(
wb
) \

259 
	`iß_°‹e_r8
(
r8
); \

260 
iß_ªgs
->
eÊags
 = 
Êags
; \

261 }

	)

264 
	#›_°d›_r16_rm16
(
°d›
, 
wb
Ë
›_
##°d›##
	`_r16_rm16_im∂
() { \

265 
uöt16_t
 
r16
 = 
	`iß_lﬂd_r16
(); \

266 
uöt16_t
 
rm16
 = 
	`iß_lﬂd_rm16
(); \

267 
Êags
 = 
iß_ªgs
->
eÊags
; \

268 
asm
 volatile ( \

274 : "=g" (
Êags
), "=m" (
r16
) \

275 : "m" (
r16
), "m" (
rm16
), "g" (
Êags
) \

278 i‡(
wb
) \

279 
	`iß_°‹e_r16
(
r16
); \

280 
iß_ªgs
->
eÊags
 = 
Êags
; \

281 }

	)

284 
	#›_°d›_r32_rm32
(
°d›
, 
wb
Ë
›_
##°d›##
	`_r32_rm32_im∂
() { \

285 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
(); \

286 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
(); \

287 
Êags
 = 
iß_ªgs
->
eÊags
; \

288 
asm
 volatile ( \

294 : "=g" (
Êags
), "=m" (
r32
) \

295 : "m" (
r32
), "m" (
rm32
), "g" (
Êags
) \

298 i‡(
wb
) \

299 
	`iß_°‹e_r32
(
r32
); \

300 
iß_ªgs
->
eÊags
 = 
Êags
; \

301 }

	)

304 
	#›_°d›_Æl
(
°d›
, 
wb
) \

305 
	`›_°d›_Æ_imm8
(
°d›
, 
wb
) \

306 
	`›_°d›_ax_imm16
(
°d›
, 
wb
) \

307 
	`›_°d›_óx_imm32
(
°d›
, 
wb
) \

308 
	`›_°d›_rm8_imm8
(
°d›
, 
wb
) \

309 
	`›_°d›_rm16_imm16
(
°d›
, 
wb
) \

310 
	`›_°d›_rm32_imm32
(
°d›
, 
wb
) \

311 
	`›_°d›_rm16_imm8
(
°d›
, 
wb
) \

312 
	`›_°d›_rm32_imm8
(
°d›
, 
wb
) \

313 
	`›_°d›_rm8_r8
(
°d›
, 
wb
) \

314 
	`›_°d›_rm16_r16
(
°d›
, 
wb
) \

315 
	`›_°d›_rm32_r32
(
°d›
, 
wb
) \

316 
	`›_°d›_r8_rm8
(
°d›
, 
wb
) \

317 
	`›_°d›_r16_rm16
(
°d›
, 
wb
) \

318 
	`›_°d›_r32_rm32
(
°d›
, 
wb
)

	)

321 
	$›_°d›_Æl
(
adc
, 1)

322 
	$›_°d›_Æl
(
add
, 1)

323 
	$›_°d›_Æl
(
™d
, 1)

324 
	$›_°d›_Æl
(
cmp
, 0)

325 
	$›_°d›_Æl
(
‹
, 1)

326 
	$›_°d›_Æl
(
sbb
, 1)

327 
	$›_°d›_Æl
(
sub
, 1)

328 
	$›_°d›_Æl
(
ã°
, 0)

329 
	`›_°d›_Æl
(
x‹
, 1)

	@libm2skernel/machine-str.c

20 
	~"m2skî√l.h
"

22 
	#DUMP_ABORT
 
	`¥ötf
("\n%Œd\n", (Ë
iß_ö°_cou¡
), 
	`ab‹t
()

	)

23 
	#DUMP
 
	`¥ötf
("\n"), 
	`x86_ö°_dump
(&
iß_ö°
, 
°dout
),Örötf("\n")

	)

26 
	#OP_REP_IMPL
(
X
) \

27 
›_ªp_
##
X
##
	`_im∂
() { \

28 
iß_ö°
.
ªp
 = 0; \

29 
iß_ªgs
->
ecx
) { \

30 
›_
##
X
##
	`_im∂
(); \

31 
iß_ªgs
->
ecx
--; \

32 
iß_ö°
.
ªp
++; \

34 }

	)

37 
	#OP_REPZ_IMPL
(
X
) \

38 
›_ªpz_
##
X
##
	`_im∂
() { \

39 
iß_ö°
.
ªp
 = 0; \

40 
iß_ªgs
->
ecx
) { \

41 
›_
##
X
##
	`_im∂
(); \

42 
iß_ªgs
->
ecx
--; \

43 
iß_ö°
.
ªp
++; \

44 i‡(!
	`iß_gë_Êag
(
Êag_zf
)) \

47 }

	)

50 
	#OP_REPNZ_IMPL
(
X
) \

51 
›_ª≤z_
##
X
##
	`_im∂
() { \

52 
iß_ö°
.
ªp
 = 0; \

53 
iß_ªgs
->
ecx
) { \

54 
›_
##
X
##
	`_im∂
(); \

55 
iß_ªgs
->
ecx
--; \

56 
iß_ö°
.
ªp
++; \

57 i‡(
	`iß_gë_Êag
(
Êag_zf
)) \

60 }

	)

68 
	$›_ösb_im∂
(Ë{ 
	`∑nic
("ösbÇŸ im∂emíãd"); 
	}
}

69 
	$›_ösd_im∂
(Ë{ 
	`∑nic
("ösdÇŸ im∂emíãd"); 
	}
}

70 
	$›_lodsb_im∂
(Ë{ 
	`∑nic
("lodsbÇŸ im∂emíãd"); 
	}
}

71 
	$›_lodsd_im∂
(Ë{ 
	`∑nic
("lodsdÇŸ im∂emíãd"); 
	}
}

72 
	$›_outsb_im∂
(Ë{ 
	`∑nic
("outsbÇŸ im∂emíãd"); 
	}
}

73 
	$›_outsd_im∂
(Ë{ 
	`∑nic
("outsdÇŸ im∂emíãd"); 
	}
}

75 
	$OP_REP_IMPL
(
ösb
)

76 
	$OP_REP_IMPL
(
ösd
)

78 
	$OP_REP_IMPL
(
movsb
)

79 
	$OP_REP_IMPL
(
movsw
)

80 
	$OP_REP_IMPL
(
movsd
)

82 
	$OP_REP_IMPL
(
outsb
)

83 
	$OP_REP_IMPL
(
outsd
)

85 
	$OP_REP_IMPL
(
lodsb
)

86 
	$OP_REP_IMPL
(
lodsd
)

88 
	$OP_REP_IMPL
(
°osb
)

89 
	$OP_REP_IMPL
(
°osd
)

91 
	$OP_REPZ_IMPL
(
cmpsb
)

92 
	$OP_REPZ_IMPL
(
cmpsd
)

94 
	$OP_REPZ_IMPL
(
sˇsb
)

95 
	$OP_REPZ_IMPL
(
sˇsd
)

97 
	$OP_REPNZ_IMPL
(
cmpsb
)

98 
	$OP_REPNZ_IMPL
(
cmpsd
)

100 
	$OP_REPNZ_IMPL
(
sˇsb
)

101 
	$OP_REPNZ_IMPL
(
sˇsd
)

109 
	$›_cmpsb_im∂
() {

110 
uöt8_t
 
›1
, 
›2
;

111 
Êags
;

113 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
esi
, 1, &
›1
);

114 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
edi
, 1, &
›2
);

115 
Êags
 = 
iß_ªgs
->
eÊags
;

116 
asm
 volatile (

121 : "=g" (
Êags
)

122 : "g" (
Êags
), "m" (
›1
), "m" (
›2
)

125 
iß_ªgs
->
eÊags
 = 
Êags
;

126 
iß_ªgs
->
esi
 +
	`iß_gë_Êag
(
Êag_df
) ? -1 : 1;

127 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -1 : 1;

128 
	}
}

131 
	$›_cmpsd_im∂
() {

132 
uöt32_t
 
›1
, 
›2
;

133 
Êags
;

135 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
edi
, 4, &
›1
);

136 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
esi
, 4, &
›2
);

137 
Êags
 = 
iß_ªgs
->
eÊags
;

138 
asm
 volatile (

143 : "=g" (
Êags
)

144 : "g" (
Êags
), "m" (
›1
), "m" (
›2
)

147 
iß_ªgs
->
eÊags
 = 
Êags
;

148 
iß_ªgs
->
esi
 +
	`iß_gë_Êag
(
Êag_df
) ? -4 : 4;

149 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -4 : 4;

150 
	}
}

153 
	$›_movsb_im∂
() {

154 
uöt8_t
 
m8
;

155 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
esi
, 1, &
m8
);

156 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
edi
, 1, &
m8
);

157 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -1 : 1;

158 
iß_ªgs
->
esi
 +
	`iß_gë_Êag
(
Êag_df
) ? -1 : 1;

159 
	}
}

162 
	$›_movsw_im∂
() {

163 
uöt16_t
 
m16
;

164 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
esi
, 2, &
m16
);

165 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
edi
, 2, &
m16
);

166 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -2 : 2;

167 
iß_ªgs
->
esi
 +
	`iß_gë_Êag
(
Êag_df
) ? -2 : 2;

168 
	}
}

171 
	$›_movsd_im∂
() {

172 
uöt32_t
 
m32
;

173 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
esi
, 4, &
m32
);

174 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
edi
, 4, &
m32
);

175 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -4 : 4;

176 
iß_ªgs
->
esi
 +
	`iß_gë_Êag
(
Êag_df
) ? -4 : 4;

177 
	}
}

180 
	$›_sˇsb_im∂
() {

181 
uöt8_t
 
Æ
 = 
	`iß_lﬂd_ªg
(
ªg_Æ
);

182 
uöt8_t
 
m8
;

183 
Êags
 = 
iß_ªgs
->
eÊags
;

184 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
edi
, 1, &
m8
);

185 
asm
 volatile (

190 : "=g" (
Êags
)

191 : "m" (
Æ
), "m" (
m8
), "g" (
Êags
)

194 
iß_ªgs
->
eÊags
 = 
Êags
;

195 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -1 : 1;

196 
	}
}

199 
	$›_sˇsd_im∂
() {

200 
uöt32_t
 
óx
 = 
	`iß_lﬂd_ªg
(
ªg_óx
);

201 
uöt32_t
 
m32
;

202 
Êags
 = 
iß_ªgs
->
eÊags
;

203 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
edi
, 4, &
m32
);

204 
asm
 volatile (

209 : "=g" (
Êags
)

210 : "m" (
óx
), "m" (
m32
), "g" (
Êags
)

213 
iß_ªgs
->
eÊags
 = 
Êags
;

214 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -4 : 4;

215 
	}
}

218 
	$›_°osb_im∂
() {

219 
uöt8_t
 
m8
 = 
	`iß_lﬂd_ªg
(
ªg_Æ
);

220 
uöt32_t
 
addr
 = 
	`iß_lﬂd_ªg
(
ªg_edi
);

221 
	`mem_wrôe
(
iß_mem
, 
addr
, 1, &
m8
);

222 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -1 : 1;

223 
	}
}

226 
	$›_°osd_im∂
() {

227 
uöt32_t
 
m32
 = 
	`iß_lﬂd_ªg
(
ªg_óx
);

228 
uöt32_t
 
addr
 = 
	`iß_lﬂd_ªg
(
ªg_edi
);

229 
	`mem_wrôe
(
iß_mem
, 
addr
, 4, &
m32
);

230 
iß_ªgs
->
edi
 +
	`iß_gë_Êag
(
Êag_df
) ? -4 : 4;

231 
	}
}

	@libm2skernel/machine.c

20 
	~"m2skî√l.h
"

22 
	#DUMP_ABORT
 
	`¥ötf
("\n%Œd\n", (Ë
iß_ö°_cou¡
), 
	`ab‹t
()

	)

23 
	#DUMP
 
	`¥ötf
("\n"), 
	`x86_ö°_dump
(&
iß_ö°
, 
°dout
),Örötf("\n")

	)

26 
	$›_bsf_r32_rm32_im∂
() {

27 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

28 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

29 
Êags
 = 
iß_ªgs
->
eÊags
;

30 
asm
 volatile (

36 : "=g" (
Êags
), "=g" (
r32
)

37 : "g" (
r32
), "g" (
rm32
), "g" (
Êags
)

40 
	`iß_°‹e_r32
(
r32
);

41 
iß_ªgs
->
eÊags
 = 
Êags
;

42 
	}
}

45 
	$›_b§_r32_rm32_im∂
() {

46 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

47 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

48 
Êags
 = 
iß_ªgs
->
eÊags
;

49 
asm
 volatile (

55 : "=g" (
Êags
), "=m" (
r32
)

56 : "m" (
r32
), "m" (
rm32
), "g" (
Êags
)

59 
	`iß_°‹e_r32
(
r32
);

60 
iß_ªgs
->
eÊags
 = 
Êags
;

61 
	}
}

64 
	$›_bsw≠_ú32_im∂
() {

65 
uöt32_t
 
ú32
 = 
	`iß_lﬂd_ú32
();

66 
asm
 volatile (

70 : "=g" (
ú32
)

71 : "g" (
ú32
)

74 
	`iß_°‹e_ú32
(
ú32
);

75 
	}
}

78 
	$›_bt_rm32_r32_im∂
() {

79 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

80 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

81 
Êags
 = 
iß_ªgs
->
eÊags
;

82 
asm
 volatile (

88 : "=g" (
Êags
)

89 : "m" (
rm32
), "m" (
r32
), "g" (
Êags
)

92 
iß_ªgs
->
eÊags
 = 
Êags
;

93 
	}
}

96 
	$›_bt_rm32_imm8_im∂
() {

97 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

98 
uöt32_t
 
imm8
 = 
iß_ö°
.
imm
.
b
;

99 
Êags
 = 
iß_ªgs
->
eÊags
;

100 
asm
 volatile (

106 : "=g" (
Êags
)

107 : "m" (
rm32
), "m" (
imm8
), "g" (
Êags
)

110 
iß_ªgs
->
eÊags
 = 
Êags
;

111 
	}
}

114 
	$›_bts_rm32_imm8_im∂
() {

115 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

116 
uöt32_t
 
imm8
 = 
iß_ö°
.
imm
.
b
;

117 
Êags
 = 
iß_ªgs
->
eÊags
;

118 
asm
 volatile (

125 : "=g" (
Êags
), "=m" (
rm32
)

126 : "m" (
rm32
), "m" (
imm8
), "g" (
Êags
)

129 
	`iß_°‹e_rm32
(
rm32
);

130 
iß_ªgs
->
eÊags
 = 
Êags
;

131 
	}
}

134 
	$›_ˇŒ_ªl32_im∂
() {

135 
iß_ªgs
->
e•
 -= 4;

136 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &iß_ªgs->
eù
);

137 
iß_èrgë
 = 
iß_ªgs
->
eù
 + 
iß_ö°
.
imm
.
d
;

138 
iß_ªgs
->
eù
 = 
iß_èrgë
;

139 
	}
}

142 
	$›_ˇŒ_rm32_im∂
() {

143 
iß_èrgë
 = 
	`iß_lﬂd_rm32
();

144 
iß_ªgs
->
e•
 -= 4;

145 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &iß_ªgs->
eù
);

146 
iß_ªgs
->
eù
 = 
iß_èrgë
;

147 
	}
}

150 
	$›_cbw_im∂
() {

151 
uöt16_t
 
ax
 = (
öt8_t
Ë
	`iß_lﬂd_ªg
(
ªg_Æ
);

152 
	`iß_°‹e_ªg
(
ªg_ax
, 
ax
);

153 
	}
}

156 
	$›_cdq_im∂
() {

157 
öt32_t
 
sig√d_óx
 = 
iß_ªgs
->
óx
;

158 
iß_ªgs
->
edx
 = 
sig√d_óx
 < 0 ? (
öt32_t
) -1 : 0;

159 
	}
}

162 
	$›_˛d_im∂
() {

163 
	`iß_˛ór_Êag
(
Êag_df
);

164 
	}
}

167 
	$›_cmpxchg_rm32_r32_im∂
() {

168 
uöt32_t
 
óx
 = 
iß_ªgs
->eax;

169 
Êags
 = 
iß_ªgs
->
eÊags
;

170 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

171 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

172 
asm
 volatile (

181 : "=g" (
Êags
), "=m" (
óx
), "=m" (
rm32
)

182 : "g" (
Êags
), "m" (
óx
), "m" (
rm32
), "m" (
r32
)

185 
iß_ªgs
->
eÊags
 = 
Êags
;

186 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

187 
	`iß_°‹e_rm32
(
rm32
);

188 
	}
}

191 
	#PUTINFO
(
EAX
, 
EBX
, 
ECX
, 
EDX
) \

192 
	`iß_°‹e_ªg
(
ªg_óx
, (
EAX
)); iß_°‹e_ªg(
ªg_ebx
, (
EBX
)); \

193 
	`iß_°‹e_ªg
(
ªg_ecx
, (
ECX
)); iß_°‹e_ªg(
ªg_edx
, (
EDX
)); 

	)

194 
	$›_˝uid_im∂
()

196 
uöt32_t
 
öfo
 = 0;

198 
iß_ªgs
->
óx
) {

199 0x0: 
	`PUTINFO
(0x2, 0x756e6547, 0x6c65746e, 0x49656e69);

201 
	`iß_°‹e_ªg
(
ªg_óx
, 0x00000f29);

202 
	`iß_°‹e_ªg
(
ªg_ebx
, 0x0102080b);

203 
	`iß_°‹e_ªg
(
ªg_ecx
, 0x00004400);

204 
	`iß_°‹e_ªg
(
ªg_edx
, 0xbfebfbff);

207 
öfo
 = 
	`SETBITVALUE32
(info, 31, 1);

208 
öfo
 = 
	`SETBITVALUE32
(info, 29, 1);

209 
öfo
 = 
	`SETBITVALUE32
(info, 28, 1);

210 
öfo
 = 
	`SETBITVALUE32
(info, 27, 1);

211 
öfo
 = 
	`SETBITVALUE32
(info, 26, 0);

212 
öfo
 = 
	`SETBITVALUE32
(info, 25, 0);

213 
öfo
 = 
	`SETBITVALUE32
(info, 24, 1);

214 
öfo
 = 
	`SETBITVALUE32
(info, 23, 0);

215 
öfo
 = 
	`SETBITVALUE32
(info, 22, 1);

216 
öfo
 = 
	`SETBITVALUE32
(info, 21, 1);

217 
öfo
 = 
	`SETBITVALUE32
(info, 19, 1);

218 
öfo
 = 
	`SETBITVALUE32
(info, 18, 0);

219 
öfo
 = 
	`SETBITVALUE32
(info, 17, 1);

220 
öfo
 = 
	`SETBITVALUE32
(info, 16, 1);

221 
öfo
 = 
	`SETBITVALUE32
(info, 15, 1);

222 
öfo
 = 
	`SETBITVALUE32
(info, 14, 1);

223 
öfo
 = 
	`SETBITVALUE32
(info, 13, 1);

224 
öfo
 = 
	`SETBITVALUE32
(info, 12, 1);

225 
öfo
 = 
	`SETBITVALUE32
(info, 11, 1);

226 
öfo
 = 
	`SETBITVALUE32
(info, 9, 1);

227 
öfo
 = 
	`SETBITVALUE32
(info, 8, 1);

228 
öfo
 = 
	`SETBITVALUE32
(info, 7, 1);

229 
öfo
 = 
	`SETBITVALUE32
(info, 6, 1);

230 
öfo
 = 
	`SETBITVALUE32
(info, 5, 1);

231 
öfo
 = 
	`SETBITVALUE32
(info, 4, 1);

232 
öfo
 = 
	`SETBITVALUE32
(info, 3, 1);

233 
öfo
 = 
	`SETBITVALUE32
(info, 2, 1);

234 
öfo
 = 
	`SETBITVALUE32
(info, 1, 1);

235 
öfo
 = 
	`SETBITVALUE32
(info, 0, 1);

237 
	`iß_°‹e_ªg
(
ªg_edx
, 
öfo
);

240 0x2: 
	`PUTINFO
(0x0, 0x0, 0x0, 0x0);

241 0x80000000: 
	`PUTINFO
(0x80000004, 0, 0, 0);

242 0x80000001: 
	`PUTINFO
(0, 0, 0, 0);

243 0x80000002: 
	`PUTINFO
(0x20202020, 0x20202020, 0x20202020, 0x20202020);

244 0x80000003: 
	`PUTINFO
(0x6e492020, 0x286c6574, 0x58202952, 0x286e6f65);

245 0x80000004: 
	`PUTINFO
(0x20294d54, 0x20555043, 0x30382e32, 0x7a4847);

247 
	`Áèl
("ö° '˝uid'ÇŸ im∂emíãd f‹Éax=0x%x", 
iß_ªgs
->
óx
);

249 
	}
}

250 #unde‡
PUTINFO


253 
	$›_cwde_im∂
() {

254 
uöt32_t
 
óx
 = (
öt16_t
Ë
	`iß_lﬂd_ªg
(
ªg_ax
);

255 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

256 
	}
}

259 
	$›_dec_rm8_im∂
() {

260 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
();

261 
Êags
 = 
iß_ªgs
->
eÊags
;

262 
asm
 volatile (

268 : "=g" (
Êags
), "=g" (
rm8
)

269 : "g" (
rm8
), "g" (
Êags
)

272 
	`iß_°‹e_rm8
(
rm8
);

273 
iß_ªgs
->
eÊags
 = 
Êags
;

274 
	}
}

277 
	$›_dec_rm32_im∂
() {

278 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

279 
Êags
 = 
iß_ªgs
->
eÊags
;

280 
asm
 volatile (

286 : "=g" (
Êags
), "=g" (
rm32
)

287 : "g" (
rm32
), "g" (
Êags
)

290 
	`iß_°‹e_rm32
(
rm32
);

291 
iß_ªgs
->
eÊags
 = 
Êags
;

292 
	}
}

295 
	$›_dec_ú16_im∂
() {

296 
uöt16_t
 
ú16
 = 
	`iß_lﬂd_ú16
();

297 
Êags
 = 
iß_ªgs
->
eÊags
;

298 
asm
 volatile (

304 : "=g" (
Êags
), "=g" (
ú16
)

305 : "g" (
ú16
), "g" (
Êags
)

308 
	`iß_°‹e_ú16
(
ú16
);

309 
iß_ªgs
->
eÊags
 = 
Êags
;

310 
	}
}

313 
	$›_dec_ú32_im∂
() {

314 
uöt32_t
 
ú32
 = 
	`iß_lﬂd_ú32
();

315 
Êags
 = 
iß_ªgs
->
eÊags
;

316 
asm
 volatile (

322 : "=g" (
Êags
), "=g" (
ú32
)

323 : "g" (
ú32
), "g" (
Êags
)

326 
	`iß_°‹e_ú32
(
ú32
);

327 
iß_ªgs
->
eÊags
 = 
Êags
;

328 
	}
}

331 
	$›_div_rm8_im∂
() {

332 
uöt16_t
 
ax
 = 
	`iß_lﬂd_ªg
(
ªg_ax
);

333 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
();

334 i‡(!
rm8
)

335 
	`Áèl
("div_rm8: division by 0");

336 
asm
 volatile(

341 : "=m" (
ax
)

342 : "m" (
ax
), "m" (
rm8
)

345 
	`iß_°‹e_ªg
(
ªg_ax
, 
ax
);

346 
	}
}

349 
	$›_div_rm32_im∂
() {

350 
uöt32_t
 
óx
 = 
iß_ªgs
->eax;

351 
uöt32_t
 
edx
 = 
iß_ªgs
->edx;

352 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

353 i‡(!
rm32
)

354 
	`Áèl
("div_rm32: division by 0");

355 
asm
 volatile (

362 : "=m" (
óx
), "=m" (
edx
)

363 : "m" (
óx
), "m" (
edx
), "m" (
rm32
)

366 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

367 
	`iß_°‹e_ªg
(
ªg_edx
, 
edx
);

368 
	}
}

371 
	$›_h…_im∂
() {

372 
	`ab‹t
();

373 
	}
}

376 
	$›_idiv_rm32_im∂
() {

377 
uöt32_t
 
óx
 = 
iß_ªgs
->eax;

378 
uöt32_t
 
edx
 = 
iß_ªgs
->edx;

379 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

380 i‡(!
rm32
)

381 
	`Áèl
("idiv_rm32: division by 0");

382 
asm
 volatile (

389 : "=m" (
óx
), "=m" (
edx
)

390 : "m" (
óx
), "m" (
edx
), "m" (
rm32
)

393 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

394 
	`iß_°‹e_ªg
(
ªg_edx
, 
edx
);

395 
	}
}

398 
	$›_imul_rm32_im∂
() {

399 
uöt32_t
 
óx
 = 
	`iß_lﬂd_ªg
(
ªg_óx
);

400 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

401 
Êags
 = 
iß_ªgs
->
eÊags
;

402 
uöt32_t
 
edx
;

403 
asm
 volatile (

411 : "=g" (
Êags
), "=m" (
edx
), "=m" (
óx
)

412 : "m" (
óx
), "m" (
rm32
), "g" (
Êags
)

415 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

416 
	`iß_°‹e_ªg
(
ªg_edx
, 
edx
);

417 
iß_ªgs
->
eÊags
 = 
Êags
;

418 
	}
}

421 
	$›_imul_r32_rm32_im∂
() {

422 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

423 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

424 
Êags
 = 
iß_ªgs
->
eÊags
;

425 
asm
 volatile (

432 : "=g" (
Êags
), "=m" (
r32
)

433 : "m" (
r32
), "m" (
rm32
), "g" (
Êags
)

436 
	`iß_°‹e_r32
(
r32
);

437 
iß_ªgs
->
eÊags
 = 
Êags
;

438 
	}
}

441 
	$›_imul_r32_rm32_imm8_im∂
() {

442 
uöt32_t
 
r32
;

443 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

444 
uöt32_t
 
imm8
 = (
öt8_t
Ë
iß_ö°
.
imm
.
b
;

445 
Êags
 = 
iß_ªgs
->
eÊags
;

446 
asm
 volatile (

453 : "=g" (
Êags
), "=m" (
r32
)

454 : "m" (
rm32
), "m" (
imm8
), "g" (
Êags
)

457 
	`iß_°‹e_r32
(
r32
);

458 
iß_ªgs
->
eÊags
 = 
Êags
;

459 
	}
}

462 
	$›_imul_r32_rm32_imm32_im∂
() {

463 
uöt32_t
 
r32
;

464 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

465 
uöt32_t
 
imm32
 = 
iß_ö°
.
imm
.
d
;

466 
Êags
 = 
iß_ªgs
->
eÊags
;

467 
asm
 volatile (

474 : "=g" (
Êags
), "=m" (
r32
)

475 : "m" (
rm32
), "m" (
imm32
), "g" (
Êags
)

478 
	`iß_°‹e_r32
(
r32
);

479 
iß_ªgs
->
eÊags
 = 
Êags
;

480 
	}
}

483 
	$›_öc_rm8_im∂
() {

484 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
();

485 
Êags
 = 
iß_ªgs
->
eÊags
;

486 
asm
 volatile (

492 : "=g" (
Êags
), "=g" (
rm8
)

493 : "g" (
rm8
), "g" (
Êags
)

496 
	`iß_°‹e_rm8
(
rm8
);

497 
iß_ªgs
->
eÊags
 = 
Êags
;

498 
	}
}

501 
	$›_öc_rm32_im∂
() {

502 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

503 
Êags
 = 
iß_ªgs
->
eÊags
;

504 
asm
 volatile (

510 : "=g" (
Êags
), "=g" (
rm32
)

511 : "g" (
rm32
), "g" (
Êags
)

514 
	`iß_°‹e_rm32
(
rm32
);

515 
iß_ªgs
->
eÊags
 = 
Êags
;

516 
	}
}

519 
	$›_öc_ú16_im∂
() {

520 
uöt16_t
 
ú16
 = 
	`iß_lﬂd_ú16
();

521 
Êags
 = 
iß_ªgs
->
eÊags
;

522 
asm
 volatile (

528 : "=g" (
Êags
), "=g" (
ú16
)

529 : "g" (
ú16
), "g" (
Êags
)

532 
	`iß_°‹e_ú16
(
ú16
);

533 
iß_ªgs
->
eÊags
 = 
Êags
;

534 
	}
}

537 
	$›_öc_ú32_im∂
() {

538 
uöt32_t
 
ú32
 = 
	`iß_lﬂd_ú32
();

539 
Êags
 = 
iß_ªgs
->
eÊags
;

540 
asm
 volatile (

546 : "=g" (
Êags
), "=g" (
ú32
)

547 : "g" (
ú32
), "g" (
Êags
)

550 
	`iß_°‹e_ú32
(
ú32
);

551 
iß_ªgs
->
eÊags
 = 
Êags
;

552 
	}
}

555 
	$›_öt_imm8_im∂
() {

556 
uöt32_t
 
öum
 = (
uöt8_t
Ë
iß_ö°
.
imm
.
b
;

557 
	`as£π
(
öum
 == 0x80);

558 if(
öum
==0x80)

559 
	`sysˇŒ_do
();

568 
	}
}

585 
	$›_jmp_ªl8_im∂
() {

586 
iß_èrgë
 = 
iß_ªgs
->
eù
 + (
öt8_t
Ë
iß_ö°
.
imm
.
b
;

587 
iß_ªgs
->
eù
 = 
iß_èrgë
;

588 
	}
}

591 
	$›_jmp_ªl32_im∂
() {

592 
iß_èrgë
 = 
iß_ªgs
->
eù
 + 
iß_ö°
.
imm
.
d
;

593 
iß_ªgs
->
eù
 = 
iß_èrgë
;

594 
	}
}

597 
	$›_jmp_rm32_im∂
() {

598 
iß_èrgë
 = 
	`iß_lﬂd_rm32
();

599 
iß_ªgs
->
eù
 = 
iß_èrgë
;

600 
	}
}

603 
	$›_Àa_r32_m_im∂
() {

604 
uöt32_t
 
vÆue
 = 
	`iß_ef„˘ive_addªss
();

605 
	`as£π
(!
iß_ö°
.
£gmít
);

606 
	`iß_°‹e_r32
(
vÆue
);

607 
	}
}

610 
	$›_Àave_im∂
() {

611 
uöt32_t
 
vÆue
;

612 
iß_ªgs
->
e•
 = iß_ªgs->
ebp
;

613 
	`as£π
(!
iß_ö°
.
£gmít
);

614 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

615 
iß_ªgs
->
e•
 += 4;

616 
	`iß_°‹e_ªg
(
ªg_ebp
, 
vÆue
);

617 
	}
}

620 
	$›_lock_xadd_rm8_r8_im∂
() {

621 
	`›_xadd_rm8_r8_im∂
();

622 
	}
}

625 
	$›_lock_xadd_rm32_r32_im∂
() {

626 
	`›_xadd_rm32_r32_im∂
();

627 
	}
}

630 
	$›_mov_rm8_imm8_im∂
() {

631 
uöt8_t
 
vÆue
 = 
iß_ö°
.
imm
.
b
;

632 
	`iß_°‹e_rm8
(
vÆue
);

633 
	}
}

636 
	$›_mov_r8_rm8_im∂
() {

637 
uöt8_t
 
vÆue
 = 
	`iß_lﬂd_rm8
();

638 
	`iß_°‹e_r8
(
vÆue
);

639 
	}
}

642 
	$›_mov_rm8_r8_im∂
() {

643 
uöt8_t
 
vÆue
 = 
	`iß_lﬂd_r8
();

644 
	`iß_°‹e_rm8
(
vÆue
);

645 
	}
}

648 
	$›_mov_rm16_r16_im∂
() {

649 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_r16
();

650 
	`iß_°‹e_rm16
(
vÆue
);

651 
	}
}

654 
	$›_mov_rm32_r32_im∂
() {

655 
uöt32_t
 
vÆue
 = 
	`iß_lﬂd_r32
();

656 
	`iß_°‹e_rm32
(
vÆue
);

657 
	}
}

660 
	$›_mov_r16_rm16_im∂
() {

661 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_rm16
();

662 
	`iß_°‹e_r16
(
vÆue
);

663 
	}
}

666 
	$›_mov_r32_rm32_im∂
() {

667 
uöt32_t
 
vÆue
 = 
	`iß_lﬂd_rm32
();

668 
	`iß_°‹e_r32
(
vÆue
);

669 
	}
}

672 
	$›_mov_Æ_moffs8_im∂
() {

673 
uöt8_t
 
vÆue
;

674 
	`mem_ªad
(
iß_mem
, 
	`iß_moffs_addªss
(), 1, &
vÆue
);

675 
	`iß_°‹e_ªg
(
ªg_Æ
, 
vÆue
);

676 
	}
}

679 
	$›_mov_ax_moffs16_im∂
() {

680 
uöt16_t
 
vÆue
;

681 
	`mem_ªad
(
iß_mem
, 
	`iß_moffs_addªss
(), 2, &
vÆue
);

682 
	`iß_°‹e_ªg
(
ªg_ax
, 
vÆue
);

683 
	}
}

686 
	$›_mov_óx_moffs32_im∂
() {

687 
uöt32_t
 
vÆue
;

688 
	`mem_ªad
(
iß_mem
, 
	`iß_moffs_addªss
(), 4, &
vÆue
);

689 
	`iß_°‹e_ªg
(
ªg_óx
, 
vÆue
);

690 
	}
}

693 
	$›_mov_moffs8_Æ_im∂
() {

694 
uöt8_t
 
vÆue
 = 
	`iß_lﬂd_ªg
(
ªg_Æ
);

695 
	`mem_wrôe
(
iß_mem
, 
	`iß_moffs_addªss
(), 1, &
vÆue
);

696 
	}
}

699 
	$›_mov_moffs16_ax_im∂
() {

700 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_ªg
(
ªg_ax
);

701 
	`mem_wrôe
(
iß_mem
, 
	`iß_moffs_addªss
(), 2, &
vÆue
);

702 
	}
}

705 
	$›_mov_moffs32_óx_im∂
() {

706 
uöt32_t
 
vÆue
 = 
	`iß_lﬂd_ªg
(
ªg_óx
);

707 
	`mem_wrôe
(
iß_mem
, 
	`iß_moffs_addªss
(), 4, &
vÆue
);

708 
	}
}

711 
	$›_mov_ú8_imm8_im∂
() {

712 
uöt8_t
 
vÆue
 = 
iß_ö°
.
imm
.
b
;

713 
	`iß_°‹e_ú8
(
vÆue
);

714 
	}
}

717 
	$›_mov_ú16_imm16_im∂
() {

718 
uöt16_t
 
vÆue
 = 
iß_ö°
.
imm
.
w
;

719 
	`iß_°‹e_ú16
(
vÆue
);

720 
	}
}

723 
	$›_mov_ú32_imm32_im∂
() {

724 
uöt32_t
 
vÆue
 = 
iß_ö°
.
imm
.
d
;

725 
	`iß_°‹e_ú32
(
vÆue
);

726 
	}
}

729 
	$›_mov_rm16_imm16_im∂
() {

730 
uöt16_t
 
vÆue
 = 
iß_ö°
.
imm
.
w
;

731 
	`iß_°‹e_rm16
(
vÆue
);

732 
	}
}

735 
	$›_mov_rm32_imm32_im∂
() {

736 
uöt32_t
 
vÆue
 = 
iß_ö°
.
imm
.
d
;

737 
	`iß_°‹e_rm32
(
vÆue
);

738 
	}
}

741 
	$›_mov_rm16_§eg_im∂
()

743 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_§eg
();

744 i‡(
iß_ö°
.
ªg
 != 5)

745 
	`Áèl
("mov_sreg_rm16:Çot supported for sreg != gs");

746 
	`iß_°‹e_rm16
(
vÆue
);

747 
	}
}

750 
	$›_mov_rm32_§eg_im∂
()

752 
	`›_mov_rm16_§eg_im∂
();

753 
	}
}

756 
	$›_mov_§eg_rm16_im∂
()

758 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_rm16
();

759 i‡(
iß_ö°
.
ªg
 != 5)

760 
	`Áèl
("mov_sreg_rm16:Çot supported for sreg != gs");

761 
	`iß_°‹e_§eg
(
vÆue
);

762 
	}
}

765 
	$›_mov_§eg_rm32_im∂
()

767 
	`›_mov_§eg_rm16_im∂
();

768 
	}
}

771 
	$›_movsx_r16_rm8_im∂
() {

772 
uöt16_t
 
vÆue
 = (
öt8_t
Ë
	`iß_lﬂd_rm8
();

773 
	`iß_°‹e_r16
(
vÆue
);

774 
	}
}

777 
	$›_movsx_r32_rm8_im∂
() {

778 
uöt32_t
 
vÆue
 = (
öt8_t
Ë
	`iß_lﬂd_rm8
();

779 
	`iß_°‹e_r32
(
vÆue
);

780 
	}
}

783 
	$›_movsx_r32_rm16_im∂
() {

784 
uöt32_t
 
vÆue
 = (
öt16_t
Ë
	`iß_lﬂd_rm16
();

785 
	`iß_°‹e_r32
(
vÆue
);

786 
	}
}

789 
	$›_movzx_r16_rm8_im∂
() {

790 
uöt8_t
 
vÆue
 = 
	`iß_lﬂd_rm8
();

791 
	`iß_°‹e_r16
(
vÆue
);

792 
	}
}

795 
	$›_movzx_r32_rm8_im∂
() {

796 
uöt8_t
 
vÆue
 = 
	`iß_lﬂd_rm8
();

797 
	`iß_°‹e_r32
(
vÆue
);

798 
	}
}

801 
	$›_movzx_r32_rm16_im∂
() {

802 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_rm16
();

803 
	`iß_°‹e_r32
(
vÆue
);

804 
	}
}

807 
	$›_mul_rm32_im∂
() {

808 
uöt32_t
 
óx
 = 
	`iß_lﬂd_ªg
(
ªg_óx
);

809 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

810 
Êags
 = 
iß_ªgs
->
eÊags
;

811 
uöt32_t
 
edx
;

812 
asm
 volatile (

820 : "=g" (
Êags
), "=m" (
edx
), "=m" (
óx
)

821 : "m" (
óx
), "m" (
rm32
), "g" (
Êags
)

824 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

825 
	`iß_°‹e_ªg
(
ªg_edx
, 
edx
);

826 
iß_ªgs
->
eÊags
 = 
Êags
;

827 
	}
}

830 
	$›_√g_rm8_im∂
() {

831 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
();

832 
Êags
 = 
iß_ªgs
->
eÊags
;

833 
asm
 volatile (

839 : "=g" (
Êags
), "=g" (
rm8
)

840 : "g" (
rm8
), "g" (
Êags
)

843 
	`iß_°‹e_rm8
(
rm8
);

844 
iß_ªgs
->
eÊags
 = 
Êags
;

845 
	}
}

848 
	$›_√g_rm32_im∂
() {

849 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

850 
Êags
 = 
iß_ªgs
->
eÊags
;

851 
asm
 volatile (

857 : "=g" (
Êags
), "=g" (
rm32
)

858 : "g" (
rm32
), "g" (
Êags
)

861 
	`iß_°‹e_rm32
(
rm32
);

862 
iß_ªgs
->
eÊags
 = 
Êags
;

863 
	}
}

866 
	$›_n›_im∂
() {

867 
	}
}

870 
	$›_n›_rm16_im∂
() {

871 
	}
}

874 
	$›_n›_rm32_im∂
() {

875 
	}
}

878 
	$›_nŸ_rm8_im∂
() {

879 
uöt8_t
 
vÆue
 = 
	`iß_lﬂd_rm8
();

880 
vÆue
 = ~value;

881 
	`iß_°‹e_rm8
(
vÆue
);

882 
	}
}

885 
	$›_nŸ_rm16_im∂
() {

886 
uöt16_t
 
vÆue
 = 
	`iß_lﬂd_rm16
();

887 
vÆue
 = ~value;

888 
	`iß_°‹e_rm16
(
vÆue
);

889 
	}
}

892 
	$›_nŸ_rm32_im∂
() {

893 
uöt32_t
 
vÆue
 = 
	`iß_lﬂd_rm32
();

894 
vÆue
 = ~value;

895 
	`iß_°‹e_rm32
(
vÆue
);

896 
	}
}

899 
	$›_∑u£_im∂
() {

900 
	}
}

903 
	$›_p›_rm32_im∂
() {

904 
uöt32_t
 
vÆue
;

905 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

906 
iß_ªgs
->
e•
 += 4;

907 
	`iß_°‹e_rm32
(
vÆue
);

908 
	}
}

911 
	$›_p›_ú32_im∂
() {

912 
uöt32_t
 
vÆue
;

913 
	`as£π
(
iß_ö°
.
›ödex
 !
ªg_e•
 - 
ªg_óx
);

914 
	`as£π
(!
iß_ö°
.
£gmít
);

915 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

916 
iß_ªgs
->
e•
 += 4;

917 
	`iß_°‹e_ú32
(
vÆue
);

918 
	}
}

921 
	$›_p›f_im∂
() {

922 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &iß_ªgs->
eÊags
);

923 
iß_ªgs
->
e•
 += 4;

924 
	}
}

927 
	$›_¥e„tcht0_im∂
() {

928 
	}
}

931 
	$›_¥e„tcht1_im∂
() {

932 
	}
}

935 
	$›_¥e„tcht2_im∂
() {

936 
	}
}

939 
	$›_¥e„tch¡a_im∂
() {

940 
	}
}

943 
	$›_°d_im∂
() {

944 
	`iß_£t_Êag
(
Êag_df
);

945 
	}
}

948 
	$›_push_imm8_im∂
() {

949 
uöt32_t
 
vÆue
 = (
öt8_t
Ë
iß_ö°
.
imm
.
b
;

950 
	`iß_°‹e_ªg
(
ªg_e•
, 
iß_ªgs
->
e•
 - 4);

951 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

952 
	}
}

955 
	$›_push_imm32_im∂
() {

956 
uöt32_t
 
vÆue
 = 
iß_ö°
.
imm
.
d
;

957 
	`iß_°‹e_ªg
(
ªg_e•
, 
iß_ªgs
->
e•
 - 4);

958 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

959 
	}
}

962 
	$›_push_rm32_im∂
() {

963 
uöt32_t
 
vÆue
 = 
	`iß_lﬂd_rm32
();

964 
	`iß_°‹e_ªg
(
ªg_e•
, 
iß_ªgs
->
e•
 - 4);

965 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

966 
	}
}

969 
	$›_push_ú32_im∂
() {

970 
uöt32_t
 
vÆue
 = 
	`iß_lﬂd_ú32
();

971 
	`iß_°‹e_ªg
(
ªg_e•
, 
iß_ªgs
->
e•
 - 4);

972 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
vÆue
);

973 
	}
}

976 
	$›_pushf_im∂
() {

977 
	`iß_°‹e_ªg
(
ªg_e•
, 
iß_ªgs
->
e•
 - 4);

978 
	`mem_wrôe
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &iß_ªgs->
eÊags
);

979 
	}
}

982 
	$›_rdtsc_im∂
() {

983 
uöt32_t
 
óx
, 
edx
;

984 
asm
 volatile (

988 : "=g" (
óx
), "=g" (
edx
)

992 
	`iß_°‹e_ªg
(
ªg_edx
, 
edx
);

993 
	`iß_°‹e_ªg
(
ªg_óx
, 
óx
);

994 
	}
}

997 
	$›_ªt_im∂
() {

998 
	`as£π
(!
iß_ö°
.
£gmít
);

999 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
iß_èrgë
);

1000 
iß_ªgs
->
e•
 += 4;

1001 
iß_ªgs
->
eù
 = 
iß_èrgë
;

1002 
	}
}

1005 
	$›_ªpz_ªt_im∂
() {

1006 
	`›_ªt_im∂
();

1007 
	}
}

1010 
	$›_ªt_imm16_im∂
() {

1011 
uöt16_t
 
p›
;

1012 
	`as£π
(!
iß_ö°
.
£gmít
);

1013 
	`mem_ªad
(
iß_mem
, 
iß_ªgs
->
e•
, 4, &
iß_èrgë
);

1014 
p›
 = 
iß_ö°
.
imm
.
w
;

1015 
iß_ªgs
->
e•
 +4 + 
p›
;

1016 
iß_ªgs
->
eù
 = 
iß_èrgë
;

1017 
	}
}

1020 
	$›_ßhf_im∂
() {

1021 
iß_ªgs
->
eÊags
 &= ~0xff;

1022 
iß_ªgs
->
eÊags
 |
	`iß_lﬂd_ªg
(
ªg_ah
);

1023 
iß_ªgs
->
eÊags
 &= ~0x28;

1024 
iß_ªgs
->
eÊags
 |= 0x2;

1025 
	}
}

1028 
	$›_shld_rm32_r32_imm8_im∂
() {

1029 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

1030 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

1031 
uöt8_t
 
imm8
 = 
iß_ö°
.
imm
.
b
;

1032 
Êags
 = 
iß_ªgs
->
eÊags
;

1033 
asm
 volatile (

1041 : "=g" (
Êags
), "=m" (
rm32
)

1042 : "m" (
rm32
), "m" (
r32
), "m" (
imm8
), "g" (
Êags
)

1045 
	`iß_°‹e_rm32
(
rm32
);

1046 
iß_ªgs
->
eÊags
 = 
Êags
;

1047 
	}
}

1050 
	$›_shld_rm32_r32_˛_im∂
() {

1051 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

1052 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

1053 
uöt8_t
 
˛
 = 
	`iß_lﬂd_ªg
(
ªg_˛
);

1054 
Êags
 = 
iß_ªgs
->
eÊags
;

1055 
asm
 volatile (

1063 : "=g" (
Êags
), "=m" (
rm32
)

1064 : "m" (
rm32
), "m" (
r32
), "m" (
˛
), "g" (
Êags
)

1067 
	`iß_°‹e_rm32
(
rm32
);

1068 
iß_ªgs
->
eÊags
 = 
Êags
;

1069 
	}
}

1072 
	$›_shrd_rm32_r32_imm8_im∂
() {

1073 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

1074 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

1075 
uöt8_t
 
imm8
 = 
iß_ö°
.
imm
.
b
;

1076 
Êags
 = 
iß_ªgs
->
eÊags
;

1077 
asm
 volatile (

1085 : "=g" (
Êags
), "=m" (
rm32
)

1086 : "m" (
rm32
), "m" (
r32
), "m" (
imm8
), "g" (
Êags
)

1089 
	`iß_°‹e_rm32
(
rm32
);

1090 
iß_ªgs
->
eÊags
 = 
Êags
;

1091 
	}
}

1094 
	$›_shrd_rm32_r32_˛_im∂
() {

1095 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

1096 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

1097 
uöt8_t
 
˛
 = 
	`iß_lﬂd_ªg
(
ªg_˛
);

1098 
Êags
 = 
iß_ªgs
->
eÊags
;

1099 
asm
 volatile (

1107 : "=g" (
Êags
), "=m" (
rm32
)

1108 : "m" (
rm32
), "m" (
r32
), "m" (
˛
), "g" (
Êags
)

1111 
	`iß_°‹e_rm32
(
rm32
);

1112 
iß_ªgs
->
eÊags
 = 
Êags
;

1113 
	}
}

1116 
	$›_xadd_rm8_r8_im∂
() {

1117 
uöt8_t
 
rm8
 = 
	`iß_lﬂd_rm8
();

1118 
uöt8_t
 
r8
 = 
	`iß_lﬂd_r8
();

1119 
uöt8_t
 
sum
;

1120 
Êags
 = 
iß_ªgs
->
eÊags
;

1121 
asm
 volatile (

1127 : "=g" (
Êags
), "=m" (
sum
)

1128 : "m" (
rm8
), "m" (
r8
), "g" (
Êags
)

1131 
	`iß_°‹e_r8
(
rm8
);

1132 
	`iß_°‹e_rm8
(
sum
);

1133 
iß_ªgs
->
eÊags
 = 
Êags
;

1134 
	}
}

1136 
	$›_xadd_rm32_r32_im∂
() {

1137 
uöt32_t
 
rm32
 = 
	`iß_lﬂd_rm32
();

1138 
uöt32_t
 
r32
 = 
	`iß_lﬂd_r32
();

1139 
uöt32_t
 
sum
;

1140 
Êags
 = 
iß_ªgs
->
eÊags
;

1141 
asm
 volatile (

1147 : "=g" (
Êags
), "=m" (
sum
)

1148 : "m" (
rm32
), "m" (
r32
), "g" (
Êags
)

1151 
	`iß_°‹e_r32
(
rm32
);

1152 
	`iß_°‹e_rm32
(
sum
);

1153 
iß_ªgs
->
eÊags
 = 
Êags
;

1154 
	}
}

1156 
	$›_xchg_ú16_ax_im∂
()

1158 
uöt16_t
 
ax
, 
ú16
;

1159 
ax
 = 
	`iß_lﬂd_ªg
(
ªg_ax
);

1160 
ú16
 = 
	`iß_lﬂd_ú16
();

1161 
	`iß_°‹e_ªg
(
ªg_ax
, 
ú16
);

1162 
	`iß_°‹e_ú16
(
ax
);

1163 
	}
}

1165 
	$›_xchg_ú32_óx_im∂
()

1167 
uöt32_t
 
óx
, 
ú32
;

1168 
óx
 = 
	`iß_lﬂd_ªg
(
ªg_óx
);

1169 
ú32
 = 
	`iß_lﬂd_ú32
();

1170 
	`iß_°‹e_ªg
(
ªg_óx
, 
ú32
);

1171 
	`iß_°‹e_ú32
(
óx
);

1172 
	}
}

1174 
	$›_xchg_rm8_r8_im∂
()

1176 
uöt8_t
 
rm8
, 
r8
;

1177 
rm8
 = 
	`iß_lﬂd_rm8
();

1178 
r8
 = 
	`iß_lﬂd_r8
();

1179 
	`iß_°‹e_rm8
(
r8
);

1180 
	`iß_°‹e_r8
(
rm8
);

1181 
	}
}

1183 
	$›_xchg_rm16_r16_im∂
()

1185 
uöt16_t
 
rm16
, 
r16
;

1186 
rm16
 = 
	`iß_lﬂd_rm16
();

1187 
r16
 = 
	`iß_lﬂd_r16
();

1188 
	`iß_°‹e_rm16
(
r16
);

1189 
	`iß_°‹e_r16
(
rm16
);

1190 
	}
}

1192 
	$›_xchg_rm32_r32_im∂
()

1194 
uöt32_t
 
rm32
, 
r32
;

1195 
rm32
 = 
	`iß_lﬂd_rm32
();

1196 
r32
 = 
	`iß_lﬂd_r32
();

1197 
	`iß_°‹e_rm32
(
r32
);

1198 
	`iß_°‹e_r32
(
rm32
);

1199 
	}
}

	@libm2skernel/memory.c

20 
	~<m2skî√l.h
>

21 
	~<sys/mm™.h
>

24 
	gmem_m≠≥d_•a˚
 = 0;

25 
	gmem_max_m≠≥d_•a˚
 = 0;

28 
	gmem_ß„_mode
 = 1;

32 
mem_∑ge_t
 *
	$mem_∑ge_gë
(
mem_t
 *
mem
, 
uöt32_t
 
addr
)

34 
uöt32_t
 
ödex
, 
èg
;

35 
mem_∑ge_t
 *
¥ev
, *
∑ge
;

37 
èg
 = 
addr
 & ~(
MEM_PAGESIZE
 - 1);

38 
ödex
 = (
addr
 >> 
MEM_LOGPAGESIZE
Ë% 
MEM_PAGE_COUNT
;

39 
∑ge
 = 
mem
->
∑ges
[
ödex
];

40 
¥ev
 = 
NULL
;

43 
∑ge
 &&Öage->
èg
 !=Åag) {

44 
¥ev
 = 
∑ge
;

45 
∑ge
 =Öage->
√xt
;

49 i‡(
¥ev
 && 
∑ge
) {

50 
¥ev
->
√xt
 = 
∑ge
->next;

51 
∑ge
->
√xt
 = 
mem
->
∑ges
[
ödex
];

52 
mem
->
∑ges
[
ödex
] = 
∑ge
;

56  
∑ge
;

57 
	}
}

62 
mem_∑ge_t
 *
	$mem_∑ge_gë_√xt
(
mem_t
 *
mem
, 
uöt32_t
 
addr
)

64 
uöt32_t
 
èg
, 
ödex
, 
möèg
;

65 
mem_∑ge_t
 *
¥ev
, *
∑ge
, *
mö∑ge
;

68 
èg
 = (
addr
 + 
MEM_PAGESIZE
) & ~(MEM_PAGESIZE - 1);

69 i‡(!
èg
)

70  
NULL
;

71 
ödex
 = (
èg
 >> 
MEM_LOGPAGESIZE
Ë% 
MEM_PAGE_COUNT
;

72 
∑ge
 = 
mem
->
∑ges
[
ödex
];

73 
¥ev
 = 
NULL
;

76 
∑ge
 &&Öage->
èg
 !=Åag) {

77 
¥ev
 = 
∑ge
;

78 
∑ge
 =Öage->
√xt
;

80 i‡(
∑ge
)

81  
∑ge
;

85 
möèg
 = 0xffffffff;

86 
mö∑ge
 = 
NULL
;

87 
ödex
 = 0; index < 
MEM_PAGE_COUNT
; index++) {

88 
∑ge
 = 
mem
->
∑ges
[
ödex
];Öage;Öagê∑ge->
√xt
) {

89 i‡(
∑ge
->
èg
 >Åag &&Öage->èg < 
möèg
) {

90 
möèg
 = 
∑ge
->
èg
;

91 
mö∑ge
 = 
∑ge
;

97  
mö∑ge
;

98 
	}
}

102 
mem_∑ge_t
 *
	$mem_∑ge_¸óã
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
≥rm
)

104 
uöt32_t
 
ödex
, 
èg
;

105 
mem_∑ge_t
 *
∑ge
;

107 
èg
 = 
addr
 & ~(
MEM_PAGESIZE
 - 1);

108 
ödex
 = (
addr
 >> 
MEM_LOGPAGESIZE
Ë% 
MEM_PAGE_COUNT
;

111 
∑ge
 = 
	`ˇŒoc
(1, (
mem_∑ge_t
));

112 
∑ge
->
èg
 =Åag;

113 
∑ge
->
≥rm
 =Öerm;

116 
∑ge
->
√xt
 = 
mem
->
∑ges
[
ödex
];

117 
mem
->
∑ges
[
ödex
] = 
∑ge
;

118 
mem_m≠≥d_•a˚
 +
MEM_PAGESIZE
;

119 
mem_max_m≠≥d_•a˚
 = 
	`MAX
(mem_max_m≠≥d_•a˚, 
mem_m≠≥d_•a˚
);

120  
∑ge
;

121 
	}
}

125 
	$mem_∑ge_‰ì
(
mem_t
 *
mem
, 
uöt32_t
 
addr
)

127 
uöt32_t
 
ödex
, 
èg
;

128 
mem_∑ge_t
 *
¥ev
, *
∑ge
;

129 
mem_ho°_m≠pög_t
 *
hm
;

131 
èg
 = 
addr
 & ~(
MEM_PAGESIZE
 - 1);

132 
ödex
 = (
addr
 >> 
MEM_LOGPAGESIZE
Ë% 
MEM_PAGE_COUNT
;

133 
¥ev
 = 
NULL
;

136 
∑ge
 = 
mem
->
∑ges
[
ödex
];

137 
∑ge
 &&Öage->
èg
 !=Åag) {

138 
¥ev
 = 
∑ge
;

139 
∑ge
 =Öage->
√xt
;

141 i‡(!
∑ge
)

146 
hm
 = 
∑ge
->
ho°_m≠pög
;

147 i‡(
hm
) {

148 
	`as£π
(
hm
->
∑ges
 > 0);

149 
	`as£π
(
èg
 >
hm
->
addr
 &&Åag + 
MEM_PAGESIZE
 <hm->add∏+ hm->
size
);

150 
hm
->
∑ges
--;

151 
∑ge
->
d©a
 = 
NULL
;

152 
∑ge
->
ho°_m≠pög
 = 
NULL
;

153 i‡(!
hm
->
∑ges
)

154 
	`mem_unm≠_ho°
(
mem
, 
hm
->
addr
);

158 i‡(
¥ev
)

159 
¥ev
->
√xt
 = 
∑ge
->next;

161 
mem
->
∑ges
[
ödex
] = 
∑ge
->
√xt
;

162 
mem_m≠≥d_•a˚
 -
MEM_PAGESIZE
;

163 i‡(
∑ge
->
d©a
)

164 
	`‰ì
(
∑ge
->
d©a
);

165 
	`‰ì
(
∑ge
);

166 
	}
}

171 
	$mem_c›y
(
mem_t
 *
mem
, 
uöt32_t
 
de°
, uöt32_à
§c
, 
size
)

173 
mem_∑ge_t
 *
∑ge_de°
, *
∑ge_§c
;

176 
	`as£π
(!(
de°
 & (
MEM_PAGESIZE
-1)));

177 
	`as£π
(!(
§c
 & (
MEM_PAGESIZE
-1)));

178 
	`as£π
(!(
size
 & (
MEM_PAGESIZE
-1)));

179 i‡((
§c
 < 
de°
 && sr¯+ 
size
 > dest) ||

180 (
de°
 < 
§c
 && de° + 
size
 > src))

181 
	`Áèl
("mem_copy: cannot copy overlappingÑegions");

184 
size
 > 0) {

187 
∑ge_de°
 = 
	`mem_∑ge_gë
(
mem
, 
de°
);

188 
∑ge_§c
 = 
	`mem_∑ge_gë
(
mem
, 
§c
);

189 
	`as£π
(
∑ge_§c
 && 
∑ge_de°
);

193 i‡(
∑ge_§c
->
d©a
) {

194 i‡(!
∑ge_de°
->
d©a
)

195 
∑ge_de°
->
d©a
 = 
	`mÆloc
(
MEM_PAGESIZE
);

196 
	`mem˝y
(
∑ge_de°
->
d©a
, 
∑ge_§c
->d©a, 
MEM_PAGESIZE
);

198 i‡(
∑ge_de°
->
d©a
)

199 
	`mem£t
(
∑ge_de°
->
d©a
, 0, 
MEM_PAGESIZE
);

203 
§c
 +
MEM_PAGESIZE
;

204 
de°
 +
MEM_PAGESIZE
;

205 
size
 -
MEM_PAGESIZE
;

207 
	}
}

213 *
	$mem_gë_buf„r
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
,

214 
mem_ac˚ss_íum
 
ac˚ss
)

216 
mem_∑ge_t
 *
∑ge
;

217 
uöt32_t
 
off£t
;

220 
off£t
 = 
addr
 & (
MEM_PAGESIZE
 - 1);

221 i‡(
off£t
 + 
size
 > 
MEM_PAGESIZE
)

222  
NULL
;

225 
∑ge
 = 
	`mem_∑ge_gë
(
mem
, 
addr
);

226 i‡(!
∑ge
)

227  
NULL
;

230 i‡((
∑ge
->
≥rm
 & 
ac˚ss
Ë!ac˚s†&& 
mem
->
ß„
)

231 
	`Áèl
("mem_gë_buf„r:Öîmissi⁄ díõdáà0x%x", 
addr
);

234 i‡(!
∑ge
->
d©a
)

235 
∑ge
->
d©a
 = 
	`ˇŒoc
(1, 
MEM_PAGESIZE
);

238  
∑ge
->
d©a
 + 
off£t
;

239 
	}
}

243 
	$mem_ac˚ss_∑ge_bound¨y
(
mem_t
 *
mem
, 
uöt32_t
 
addr
,

244 
size
, *
buf
, 
mem_ac˚ss_íum
 
ac˚ss
)

246 
mem_∑ge_t
 *
∑ge
;

247 
uöt32_t
 
off£t
;

250 
∑ge
 = 
	`mem_∑ge_gë
(
mem
, 
addr
);

251 
off£t
 = 
addr
 & (
MEM_PAGESIZE
 - 1);

252 
	`as£π
(
off£t
 + 
size
 <
MEM_PAGESIZE
);

256 i‡(!
∑ge
) {

257 i‡(
mem
->
ß„
)

258 
	`Áèl
("ûÀgÆác˚s†© 0x%x:ÖagênŸáŒoˇãd", 
addr
);

259 i‡(
ac˚ss
 =
mem_ac˚ss_ªad
 ||ác˚s†=
mem_ac˚ss_exec
) {

260 
	`mem£t
(
buf
, 0, 
size
);

263 i‡(
ac˚ss
 =
mem_ac˚ss_wrôe
 ||ác˚s†=
mem_ac˚ss_öô
)

264 
∑ge
 = 
	`mem_∑ge_¸óã
(
mem
, 
addr
, 
mem_ac˚ss_ªad
 |

265 
mem_ac˚ss_wrôe
 | 
mem_ac˚ss_exec
 |

266 
mem_ac˚ss_öô
);

268 
	`as£π
(
∑ge
);

272 i‡(
ac˚ss
 =
mem_ac˚ss_wrôe
)

273 
∑ge
->
≥rm
 |
mem_ac˚ss_modif
;

276 i‡(
mem
->
ß„
 && (
∑ge
->
≥rm
 & 
ac˚ss
) !=áccess){

278 
	`øi£
(
SIGSEGV
);

282 i‡(
ac˚ss
 =
mem_ac˚ss_ªad
 ||ác˚s†=
mem_ac˚ss_exec
) {

283 i‡(
∑ge
->
d©a
)

284 
	`mem˝y
(
buf
, 
∑ge
->
d©a
 + 
off£t
, 
size
);

286 
	`mem£t
(
buf
, 0, 
size
);

291 i‡(
ac˚ss
 =
mem_ac˚ss_wrôe
 ||ác˚s†=
mem_ac˚ss_öô
) {

292 i‡(!
∑ge
->
d©a
)

293 
∑ge
->
d©a
 = 
	`ˇŒoc
(1, 
MEM_PAGESIZE
);

294 
	`mem˝y
(
∑ge
->
d©a
 + 
off£t
, 
buf
, 
size
);

299 
	`ab‹t
();

300 
	}
}

305 
	$mem_ac˚ss
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, *
buf
,

306 
mem_ac˚ss_íum
 
ac˚ss
)

308 
uöt32_t
 
off£t
;

309 
chunksize
;

311 
mem
->
œ°_addªss
 = 
addr
;

312 
size
) {

313 
off£t
 = 
addr
 & (
MEM_PAGESIZE
 - 1);

314 
chunksize
 = 
	`MIN
(
size
, 
MEM_PAGESIZE
 - 
off£t
);

315 
	`mem_ac˚ss_∑ge_bound¨y
(
mem
, 
addr
, 
chunksize
, 
buf
, 
ac˚ss
);

317 
size
 -
chunksize
;

318 
buf
 +
chunksize
;

319 
addr
 +
chunksize
;

321 
	}
}

325 
mem_t
 *
	$mem_¸óã
()

327 
mem_t
 *
mem
;

328 
mem
 = 
	`ˇŒoc
(1, (
mem_t
));

329 
mem
->
sh¨ög
 = 1;

330 
mem
->
ß„
 = 
mem_ß„_mode
;

331  
mem
;

332 
	}
}

335 
	$mem_‰ì
(
mem_t
 *
mem
)

337 
i
;

340 
i
 = 0; i < 
MEM_PAGE_COUNT
; i++)

341 
mem
->
∑ges
[
i
])

342 
	`mem_∑ge_‰ì
(
mem
, mem->
∑ges
[
i
]->
èg
);

346 
	`as£π
(!
mem
->
ho°_m≠pög_li°
);

347 
	`‰ì
(
mem
);

348 
	}
}

353 
uöt32_t
 
	$mem_m≠_•a˚
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
)

355 
uöt32_t
 
èg_°¨t
, 
èg_íd
;

357 
	`as£π
(!(
addr
 & (
MEM_PAGESIZE
 - 1)));

358 
	`as£π
(!(
size
 & (
MEM_PAGESIZE
 - 1)));

359 
èg_°¨t
 = 
addr
;

360 
èg_íd
 = 
addr
;

364 i‡(!
èg_íd
)

365  (
uöt32_t
) -1;

368 i‡(
	`mem_∑ge_gë
(
mem
, 
èg_íd
)) {

369 
èg_íd
 +
MEM_PAGESIZE
;

370 
èg_°¨t
 = 
èg_íd
;

375 i‡(
èg_íd
 - 
èg_°¨t
 + 
MEM_PAGESIZE
 =
size
)

377 
	`as£π
(
èg_íd
 - 
èg_°¨t
 + 
MEM_PAGESIZE
 < 
size
);

380 
èg_íd
 +
MEM_PAGESIZE
;

385  
èg_°¨t
;

386 
	}
}

389 
uöt32_t
 
	$mem_m≠_•a˚_down
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
)

391 
uöt32_t
 
èg_°¨t
, 
èg_íd
;

393 
	`as£π
(!(
addr
 & (
MEM_PAGESIZE
 - 1)));

394 
	`as£π
(!(
size
 & (
MEM_PAGESIZE
 - 1)));

395 
èg_°¨t
 = 
addr
;

396 
èg_íd
 = 
addr
;

400 i‡(!
èg_°¨t
)

401  (
uöt32_t
) -1;

404 i‡(
	`mem_∑ge_gë
(
mem
, 
èg_°¨t
)) {

405 
èg_°¨t
 -
MEM_PAGESIZE
;

406 
èg_íd
 = 
èg_°¨t
;

411 i‡(
èg_íd
 - 
èg_°¨t
 + 
MEM_PAGESIZE
 =
size
)

413 
	`as£π
(
èg_íd
 - 
èg_°¨t
 + 
MEM_PAGESIZE
 < 
size
);

416 
èg_°¨t
 -
MEM_PAGESIZE
;

420  
èg_°¨t
;

421 
	}
}

428 
	$mem_m≠
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
,

429 
mem_ac˚ss_íum
 
≥rm
)

431 
uöt32_t
 
èg1
, 
èg2
, 
èg
;

432 
mem_∑ge_t
 *
∑ge
;

435 
èg1
 = 
addr
 & ~(
MEM_PAGESIZE
-1);

436 
èg2
 = (
addr
 + 
size
 - 1Ë& ~(
MEM_PAGESIZE
-1);

439 
èg
 = 
èg1
;Åag <
èg2
;Åag +
MEM_PAGESIZE
) {

440 
∑ge
 = 
	`mem_∑ge_gë
(
mem
, 
èg
);

441 i‡(!
∑ge
)

442 
∑ge
 = 
	`mem_∑ge_¸óã
(
mem
, 
èg
, 
≥rm
);

443 
∑ge
->
≥rm
 |=Öerm;

445 
	}
}

453 
	$mem_unm≠
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
)

455 
uöt32_t
 
èg1
, 
èg2
, 
èg
;

458 
	`as£π
(!(
addr
 & (
MEM_PAGESIZE
 - 1)));

459 
	`as£π
(!(
size
 & (
MEM_PAGESIZE
 - 1)));

460 
èg1
 = 
addr
 & ~(
MEM_PAGESIZE
-1);

461 
èg2
 = (
addr
 + 
size
 - 1Ë& ~(
MEM_PAGESIZE
-1);

464 
èg
 = 
èg1
;Åag <
èg2
;Åag +
MEM_PAGESIZE
)

465 
	`mem_∑ge_‰ì
(
mem
, 
èg
);

466 
	}
}

474 
	$mem_m≠_ho°
(
mem_t
 *
mem
, 
fd_t
 *
fd
, 
uöt32_t
 
addr
, 
size
,

475 
mem_ac˚ss_íum
 
≥rm
, *
ho°_±r
)

477 
uöt32_t
 
±r
;

478 
mem_∑ge_t
 *
∑ge
;

479 
mem_ho°_m≠pög_t
 *
hm
;

482 i‡(
addr
 & ~
MEM_PAGEMASK
)

483 
	`Áèl
("mem_map_host: 'addr'Çotá multiple ofÖage size");

484 i‡(
size
 & ~
MEM_PAGEMASK
)

485 
	`Áèl
("mem_map_host: 'size'Çotá multiple ofÖage size");

488 
hm
 = 
	`ˇŒoc
(1, (
mem_ho°_m≠pög_t
));

489 
hm
->
ho°_±r
 = host_ptr;

490 
hm
->
addr
 =áddr;

491 
hm
->
size
 = size;

492 
hm
->
√xt
 = 
mem
->
ho°_m≠pög_li°
;

493 
	`°∫˝y
(
hm
->
∑th
, 
fd
->∑th, 
MAX_PATH_SIZE
);

494 
mem
->
ho°_m≠pög_li°
 = 
hm
;

495 
	`sysˇŒ_debug
(" ho° m≠pög cª©ed f‹ '%s'\n", 
hm
->
∑th
);

498 
±r
 = 
addr
;Öå <ádd∏+ 
size
;Öå +
MEM_PAGESIZE
) {

499 
∑ge
 = 
	`mem_∑ge_gë
(
mem
, 
±r
);

500 i‡(!
∑ge
)

501 
	`Áèl
("mem_map_host:ÑequestedÑangeÇotállocated");

505 i‡(
∑ge
->
ho°_m≠pög
)

506 
	`Áèl
("mem_map_host: cannot overwriteáÖrevious host mapping");

509 i‡(
∑ge
->
d©a
)

510 
	`‰ì
(
∑ge
->
d©a
);

513 
∑ge
->
ho°_m≠pög
 = 
hm
;

514 
∑ge
->
d©a
 = 
±r
 - 
addr
 + 
ho°_±r
;

515 
hm
->
∑ges
++;

517 
	}
}

522 
	$mem_unm≠_ho°
(
mem_t
 *
mem
, 
uöt32_t
 
addr
)

524 
ªt
;

525 
mem_ho°_m≠pög_t
 *
hm
, *
hm¥ev
;

528 
hm¥ev
 = 
NULL
;

529 
hm
 = 
mem
->
ho°_m≠pög_li°
;

530 
hm
 && hm->
addr
 !=áddr) {

531 
hm¥ev
 = 
hm
;

532 
hm
 = hm->
√xt
;

536 
	`as£π
(
hm
);

537 i‡(
hm¥ev
)

538 
hm¥ev
->
√xt
 = 
hm
->next;

540 
mem
->
ho°_m≠pög_li°
 = 
hm
->
√xt
;

543 
ªt
 = 
	`munm≠
(
hm
->
ho°_±r
, hm->
size
);

544 i‡(
ªt
 < 0)

545 
	`Áèl
("mem_unmap_host: host call 'munmap' failed");

548 
	`sysˇŒ_debug
(" ho° m≠pögÑemoved f‹ '%s'\n", 
hm
->
∑th
);

549 
	`‰ì
(
hm
);

550 
	}
}

554 
	$mem_¥Ÿe˘
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, 
mem_ac˚ss_íum
 
≥rm
)

556 
uöt32_t
 
èg1
, 
èg2
, 
èg
;

557 
mem_∑ge_t
 *
∑ge
;

558 
¥Ÿ
, 
îr
;

561 
	`as£π
(!(
addr
 & (
MEM_PAGESIZE
 - 1)));

562 
	`as£π
(!(
size
 & (
MEM_PAGESIZE
 - 1)));

563 
èg1
 = 
addr
 & ~(
MEM_PAGESIZE
-1);

564 
èg2
 = (
addr
 + 
size
 - 1Ë& ~(
MEM_PAGESIZE
-1);

567 
èg
 = 
èg1
;Åag <
èg2
;Åag +
MEM_PAGESIZE
) {

568 
∑ge
 = 
	`mem_∑ge_gë
(
mem
, 
èg
);

569 i‡(!
∑ge
)

573 
∑ge
->
≥rm
 =Öerm;

577 i‡(
∑ge
->
ho°_m≠pög
) {

578 
¥Ÿ
 = (
≥rm
 & 
mem_ac˚ss_ªad
 ? 
PROT_READ
 : 0) |

579 (
≥rm
 & 
mem_ac˚ss_wrôe
 ? 
PROT_WRITE
 : 0) |

580 (
≥rm
 & 
mem_ac˚ss_exec
 ? 
PROT_EXEC
 : 0);

581 
îr
 = 
	`m¥Ÿe˘
(
∑ge
->
d©a
, 
MEM_PAGESIZE
, 
¥Ÿ
);

582 i‡(
îr
 < 0)

583 
	`Áèl
("mem_protect: host callÅo 'mprotect' failed");

586 
	}
}

589 
	$mem_wrôe_°rög
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, *
°r
)

591 
	`mem_ac˚ss
(
mem
, 
addr
, 
	`°æí
(
°r
Ë+ 1, så, 
mem_ac˚ss_wrôe
);

592 
	}
}

598 
	$mem_ªad_°rög
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
, *
°r
)

600 
i
;

601 
i
 = 0; i < 
size
; i++) {

602 
	`mem_ac˚ss
(
mem
, 
addr
 + 
i
, 1, 
°r
 + i, 
mem_ac˚ss_ªad
);

603 i‡(!
°r
[
i
])

606  
i
;

607 
	}
}

610 
	$mem_zîo
(
mem_t
 *
mem
, 
uöt32_t
 
addr
, 
size
)

612 
zîo
 = 0;

613 
size
--)

614 
	`mem_ac˚ss
(
mem
, 
addr
++, 0, &
zîo
, 
mem_ac˚ss_wrôe
);

615 
	}
}

618 
	$mem_dump
(
mem_t
 *
mem
, *
fûíame
, 
uöt32_t
 
°¨t
, uöt32_à
íd
)

620 
FILE
 *
f
;

621 
uöt32_t
 
size
;

622 
uöt8_t
 
buf
[
MEM_PAGESIZE
];

624 
f
 = 
	`f›í
(
fûíame
, "wb");

625 i‡(!
f
)

626 
	`Áèl
("mem_dump: c™nŸ o≥¿fûê'%s'", 
fûíame
);

629 
mem
->
ß„
 = 0;

630 
°¨t
 < 
íd
) {

631 
size
 = 
	`MIN
(
MEM_PAGESIZE
, 
íd
 - 
°¨t
);

632 
	`mem_ac˚ss
(
mem
, 
°¨t
, 
size
, 
buf
, 
mem_ac˚ss_ªad
);

633 
	`fwrôe
(
buf
, 
size
, 1, 
f
);

634 
°¨t
 +
size
;

638 
mem
->
ß„
 = 
mem_ß„_mode
;

639 
	`f˛o£
(
f
);

640 
	}
}

643 
	$mem_lﬂd
(
mem_t
 *
mem
, *
fûíame
, 
uöt32_t
 
°¨t
)

645 
FILE
 *
f
;

646 
uöt32_t
 
size
;

647 
uöt8_t
 
buf
[
MEM_PAGESIZE
];

649 
f
 = 
	`f›í
(
fûíame
, "rb");

650 i‡(!
f
)

651 
	`Áèl
("mem_lﬂd: c™nŸ o≥¿fûê'%s'", 
fûíame
);

654 
mem
->
ß„
 = 0;

656 
size
 = 
	`‰ód
(
buf
, 1, 
MEM_PAGESIZE
, 
f
);

657 i‡(!
size
)

659 
	`mem_ac˚ss
(
mem
, 
°¨t
, 
size
, 
buf
, 
mem_ac˚ss_wrôe
);

660 
°¨t
 +
size
;

664 
mem
->
ß„
 = 
mem_ß„_mode
;

665 
	`f˛o£
(
f
);

666 
	}
}

	@libm2skernel/regs.c

20 
	~"m2skî√l.h
"

22 
ªgs_t
 *
	$ªgs_¸óã
()

24 
ªgs_t
 *
ªgs
;

25 
ªgs
 = 
	`ˇŒoc
(1, (
ªgs_t
));

26  
ªgs
;

27 
	}
}

30 
	$ªgs_‰ì
(
ªgs_t
 *
ªgs
)

32 
	`‰ì
(
ªgs
);

33 
	}
}

36 
	$ªgs_c›y
(
ªgs_t
 *
d°
, ªgs_à*
§c
)

38 
	`mem˝y
(
d°
, 
§c
, (
ªgs_t
));

39 
	}
}

42 
	$ªgs_Âu_°ack_dump
(
ªgs_t
 *
ªgs
, 
FILE
 *
f
)

44 
ödex
, 
i
;

45 
vÆue
;

46 *
comma
 = "";

48 
	`Ârötf
(
f
, "{");

49 
ödex
 = (
ªgs
->
Âu_t›
 + 7) % 8;

50 
i
 = 0; i < 8; i++) {

51 i‡(
ªgs
->
Âu_°ack
[
ödex
].
vÆid
) {

52 
vÆue
 = 
	`iß_exãnded_to_doubÀ
(
ªgs
->
Âu_°ack
[
ödex
].value);

53 
	`Ârötf
(
f
, "%s%g", 
comma
, 
vÆue
);

54 
comma
 = ", ";

56 
ödex
 = (index + 7) % 8;

58 
	`Ârötf
(
f
, "}\n");

59 
	}
}

62 
	$ªgs_dump
(
ªgs_t
 *
ªgs
, 
FILE
 *
f
)

65 
	`Ârötf
(
f
, "Éax=%08xÉcx=%08xÉdx=%08xÉbx=%08x\n",

66 
ªgs
->
óx
,Ñegs->
ecx
,Ñegs->
edx
,Ñegs->
ebx
);

67 
	`Ârötf
(
f
, "Ésp=%08xÉbp=%08xÉsi=%08xÉdi=%08x\n",

68 
ªgs
->
e•
,Ñegs->
ebp
,Ñegs->
esi
,Ñegs->
edi
);

69 
	`Ârötf
(
f
, "És=%x, cs=%x, ss=%x, ds=%x, fs=%x, gs=%x\n",

70 
ªgs
->
es
,Ñegs->
cs
,Ñegs->
ss
,Ñegs->
ds
,Ñegs->
fs
,Ñegs->
gs
);

71 
	`Ârötf
(
f
, "Éù=%08x\n", 
ªgs
->
eù
);

72 
	`Ârötf
(
f
, " flags=%04x (cf=%dÖf=%dáf=%d zf=%d sf=%d df=%d of=%d)\n",

73 
ªgs
->
eÊags
,

74 (
ªgs
->
eÊags
 & (1 << 
Êag_cf
)) > 0,

75 (
ªgs
->
eÊags
 & (1 << 
Êag_pf
)) > 0,

76 (
ªgs
->
eÊags
 & (1 << 
Êag_af
)) > 0,

77 (
ªgs
->
eÊags
 & (1 << 
Êag_zf
)) > 0,

78 (
ªgs
->
eÊags
 & (1 << 
Êag_sf
)) > 0,

79 (
ªgs
->
eÊags
 & (1 << 
Êag_df
)) > 0,

80 (
ªgs
->
eÊags
 & (1 << 
Êag_of
)) > 0);

83 
	`Ârötf
(
f
, " fpu_stack (last=top): ");

84 
	`ªgs_Âu_°ack_dump
(
ªgs
, 
f
);

87 
	`Ârötf
(
f
, " fpu_code (C3-C2-C1-C0): %d-%d-%d-%d\n",

88 
	`GETBIT32
(
ªgs
->
Âu_code
, 3) > 0, GETBIT32(regs->fpu_code, 2) > 0,

89 
	`GETBIT32
(
ªgs
->
Âu_code
, 1) > 0, GETBIT32(regs->fpu_code, 0) > 0);

90 
	`Ârötf
(
f
, " fpu_ctrl=%04x\n",

91 
ªgs
->
Âu_˘æ
);

92 
	}
}

	@libm2skernel/signal.c

20 
	~"m2skî√l.h
"

25 
°rög_m≠_t
 
	gsig«l_m≠
 = {

62 
°rög_m≠_t
 
	gsiga˘i⁄_Êags_m≠
 = {

77 *
	$sim_sig«l_«me
(
signum
)

79  
	`m≠_vÆue
(&
sig«l_m≠
, 
signum
);

80 
	}
}

86 
	$sim_siga˘i⁄_dump
(
sim_siga˘i⁄
 *
sim
, 
FILE
 *
f
)

88 
	`Ârötf
(
f
, "handler=0x%x, flags=0x%x,Ñestorer=0x%x, mask=0x%llx",

89 
sim
->
h™dÀr
, sim->
Êags
,

90 
sim
->
ª°‹î
, (Ësim->
mask
);

91 
	}
}

94 
	$sim_siga˘i⁄_Êags_dump
(
uöt32_t
 
Êags
, 
FILE
 *
f
)

96 
buf
[0x200];

97 
	`m≠_Êags
(&
siga˘i⁄_Êags_m≠
, 
Êags
, 
buf
, 0x200);

98 
	`Ârötf
(
f
, "%s", 
buf
);

99 
	}
}

102 
	$sim_sig£t_membî
(
uöt64_t
 *
sim_sig£t
, 
sig
)

104 i‡(
sig
 < 1 || sig > 64)

106  (*
sim_sig£t
 & (1ULL << (
sig
 - 1))) > 0;

107 
	}
}

110 
	$sim_sig£t_add
(
uöt64_t
 *
sim_sig£t
, 
sig
)

112 i‡(
sig
 < 1 || sig > 64)

114 *
sim_sig£t
 |1ULL << (
sig
 - 1);

115 
	}
}

118 
	$sim_sig£t_dñ
(
uöt64_t
 *
sim_sig£t
, 
sig
)

120 i‡(
sig
 < 1 || sig > 64)

122 *
sim_sig£t
 &~(1ULL << (
sig
 - 1));

123 
	}
}

126 
	$sim_sig£t_dump
(
uöt64_t
 
sim_sig£t
, 
FILE
 *
f
)

128 
i
;

129 *
comma
 = "", *
«me
;

130 i‡(
sim_sig£t
 =(
uöt64_t
) -1) {

131 
	`Ârötf
(
f
, "{<all>}");

134 
	`Ârötf
(
f
, "{");

135 
i
 = 1; i <= 64; i++) {

136 i‡(
	`sim_sig£t_membî
(&
sim_sig£t
, 
i
)) {

137 i‡(
i
 < 32) {

138 
«me
 = 
	`m≠_vÆue
(&
sig«l_m≠
, 
i
);

139 
	`Ârötf
(
f
, "%s%s", 
comma
, 
«me
);

141 
	`Ârötf
(
f
, "%s%d", 
comma
, 
i
);

143 
comma
 = ",";

146 
	`Ârötf
(
f
, "}");

147 
	}
}

154 
sig«l_masks_t
 *
	$sig«l_masks_¸óã
()

157  
	`ˇŒoc
(1, (
sig«l_masks_t
));

158 
	}
}

160 
	$sig«l_masks_‰ì
(
sig«l_masks_t
 *
sig«l_masks
)

162 
	`‰ì
(
sig«l_masks
);

163 
	}
}

166 
	$myh™dÀr_SIGFPE
()

168 
	`¥ötf
("\n Inside handler for SIGFPE!!!!");

169 
	}
}

170 
	$myh™dÀr_SIGUSR1
()

172 
	`¥ötf
("\n Inside handler for SIGUSR1!!!!");

173 
	}
}

174 
	$myh™dÀr_SIGUSR2
()

176 
	`¥ötf
("\n Inside handler for SIGUSR2!!!!!");

177 
	}
}

178 
sig«l_h™dÀrs_t
 *
	$ö°Æl_sig«l_h™dÀrs
()

180 
sig«l_h™dÀrs_t
 *
myh™dÀr
;

181 
myh™dÀr
=
	`ˇŒoc
(1, (
sig«l_h™dÀrs_t
));

185 
myh™dÀr
->
siga˘i⁄
[7].
sig_h™dÀr_poöãr
=
myh™dÀr_SIGFPE
;

186 
myh™dÀr
->
siga˘i⁄
[9].
sig_h™dÀr_poöãr
=
myh™dÀr_SIGUSR1
;

187 
myh™dÀr
->
siga˘i⁄
[11].
sig_h™dÀr_poöãr
=
myh™dÀr_SIGUSR2
;

188  
myh™dÀr
;

189 
	}
}

192 
	$sig«l_h™dÀrs_‰ì
(
sig«l_h™dÀrs_t
 *
sig«l_h™dÀrs
)

194 
	`‰ì
(
sig«l_h™dÀrs
);

195 
	}
}

199 
	ssim_sig‰ame
 {

200 
uöt32_t
 
	m¥ëcode
;

201 
uöt32_t
 
	msig
;

203 
uöt32_t
 
	mgs
, 
	mfs
, 
	mes
, 
	mds
;

204 
uöt32_t
 
	medi
, 
	mesi
, 
	mebp
, 
	me•
;

205 
uöt32_t
 
	mebx
, 
	medx
, 
	mecx
, 
	móx
;

206 
uöt32_t
 
	må≠no
, 
	mîr
, 
	meù
, 
	mcs
;

207 
uöt32_t
 
	meÊags
;

208 
uöt32_t
 
	me•_©_sig«l
;

209 
uöt32_t
 
	mss
;

210 
uöt32_t
 
	mpÂ°©e
;

211 
uöt32_t
 
	mﬁdmask
;

212 
uöt32_t
 
	m¸2
;

222 
	gsig«l_ªtcode
[] = "\x58\xb8\x77\x00\x00\x00\xcd\x80";

226 
	$sig«l_h™dÀr_run
(
˘x_t
 *
˘x
, 
sig
)

228 
uöt32_t
 
h™dÀr
;

229 
sim_sig‰ame
 
sig‰ame
;

232 
	`sysˇŒ_debug
("context %dÉxecutes signal handler for signal %d\n",

233 
˘x
->
pid
, 
sig
);

236 
˘x
->
sig«l_masks
->
ªgs
 = 
	`ªgs_¸óã
();

237 
	`ªgs_c›y
(
˘x
->
sig«l_masks
->
ªgs
, ctx->regs);

240 
˘x
->
sig«l_masks
->
¥ëcode
 = 
	`mem_m≠_•a˚
(˘x->
mem
, 
MEM_PAGESIZE
, MEM_PAGESIZE);

241 
	`mem_m≠
(
˘x
->
mem
, ctx->
sig«l_masks
->
¥ëcode
, 
MEM_PAGESIZE
, 
mem_ac˚ss_exec
 | 
mem_ac˚ss_öô
);

242 
	`sysˇŒ_debug
("Ñëu∫ codêo‡sig«»h™dÀ∏Æloˇãdáà0x%x\n", 
˘x
->
sig«l_masks
->
¥ëcode
);

243 
	`mem_ac˚ss
(
˘x
->
mem
, ctx->
sig«l_masks
->
¥ëcode
, (
sig«l_ªtcode
), sig«l_ªtcode, 
mem_ac˚ss_öô
);

246 
sig‰ame
.
¥ëcode
 = 
˘x
->
sig«l_masks
->pretcode;

247 
sig‰ame
.
sig
 = sig;

248 
sig‰ame
.
gs
 = 
˘x
->
ªgs
->gs;

249 
sig‰ame
.
fs
 = 
˘x
->
ªgs
->fs;

250 
sig‰ame
.
es
 = 
˘x
->
ªgs
->es;

251 
sig‰ame
.
ds
 = 
˘x
->
ªgs
->ds;

252 
sig‰ame
.
edi
 = 
˘x
->
ªgs
->edi;

253 
sig‰ame
.
esi
 = 
˘x
->
ªgs
->esi;

254 
sig‰ame
.
ebp
 = 
˘x
->
ªgs
->ebp;

255 
sig‰ame
.
e•
 = 
˘x
->
ªgs
->esp;

256 
sig‰ame
.
ebx
 = 
˘x
->
ªgs
->ebx;

257 
sig‰ame
.
edx
 = 
˘x
->
ªgs
->edx;

258 
sig‰ame
.
ecx
 = 
˘x
->
ªgs
->ecx;

259 
sig‰ame
.
óx
 = 
˘x
->
ªgs
->eax;

260 
sig‰ame
.
å≠no
 = 0;

261 
sig‰ame
.
îr
 = 0;

262 
sig‰ame
.
eù
 = 
˘x
->
ªgs
->eip;

263 
sig‰ame
.
cs
 = 
˘x
->
ªgs
->cs;

264 
sig‰ame
.
eÊags
 = 
˘x
->
ªgs
->eflags;

265 
sig‰ame
.
e•_©_sig«l
 = 
˘x
->
ªgs
->
e•
;

266 
sig‰ame
.
ss
 = 
˘x
->
ªgs
->ss;

267 
sig‰ame
.
pÂ°©e
 = 0;

268 
sig‰ame
.
ﬁdmask
 = 0;

269 
sig‰ame
.
¸2
 = 0;

272 
˘x
->
ªgs
->
e•
 -(
sig‰ame
);

273 
	`mem_wrôe
(
˘x
->
mem
, ctx->
ªgs
->
e•
, (
sig‰ame
), &sigframe);

278 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_h™dÀr
))

279 
	`Áèl
("signal_handler_run:álreadyÑunningá handler");

280 
	`˘x_£t_°©us
(
˘x
, 
˘x_h™dÀr
);

281 
	`¥ötf
("\¿ösidêsig«l_h™dÀr_ru¿****** f‹ sig«»%d",
sig
);

294 if(!
˘x
->
sig«l_h™dÀrs
->
siga˘i⁄
[
sig
-1].
sig_h™dÀr_poöãr
)

295 
	`Áèl
("signal_handler_run: invalid signal handler");

299 
˘x
->
sig«l_h™dÀrs
->
siga˘i⁄
[
sig
-1].
	`sig_h™dÀr_poöãr
();

301 
	}
}

305 
	$sig«l_h™dÀr_ªtu∫
(
˘x_t
 *
˘x
)

308 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_h™dÀr
))

309 
	`Áèl
("signal_handler_return:Çot handlingá signal");

310 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_h™dÀr
);

313 
	`mem_unm≠
(
˘x
->
mem
, ctx->
sig«l_masks
->
¥ëcode
, 
MEM_PAGESIZE
);

314 
	`sysˇŒ_debug
(" signal handlerÑeturn codeát 0x%x deallocated\n",

315 
˘x
->
sig«l_masks
->
¥ëcode
);

318 
	`ªgs_c›y
(
˘x
->
ªgs
, ctx->
sig«l_masks
->regs);

319 
	`ªgs_‰ì
(
˘x
->
sig«l_masks
->
ªgs
);

320 
	}
}

331 
	$sig«l_h™dÀr_check_öå
(
˘x_t
 *
˘x
)

333 
sig
;

337 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_h™dÀr
));

338 
	`as£π
(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
);

341 
sig
 = 1; sig <= 64; sig++)

342 i‡(
	`sim_sig£t_membî
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
) &&

343 !
	`sim_sig£t_membî
(&
˘x
->
sig«l_masks
->
blocked
, 
sig
))

345 
	`as£π
(
sig
 <= 64);

349 i‡(
˘x
->
sig«l_h™dÀrs
->
siga˘i⁄
[
sig
 - 1].
Êags
 & 0x10000000u)

351 
buf
[2];

352 
˘x
->
ªgs
->
eù
 -= 2;

353 
	`mem_ªad
(
˘x
->
mem
, ctx->
ªgs
->
eù
, 2, 
buf
);

354 
	`as£π
(
buf
[0] == 0xcd && buf[1] == 0x80);

358 
˘x
->
ªgs
->
óx
 = -
EINTR
;

362 
	`sig«l_h™dÀr_run
(
˘x
, 
sig
);

363 
	`sim_sig£t_dñ
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
);

365 
	}
}

368 
	$sig«l_h™dÀr_check
(
˘x_t
 *
˘x
)

370 
sig
;

373 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_h™dÀr
))

377 i‡(!(
˘x
->
sig«l_masks
->
≥ndög
 & ~˘x->sig«l_masks->
blocked
))

382 
sig
 = 1; sig <= 64; sig++) {

383 i‡(
	`sim_sig£t_membî
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
) &&

384 !
	`sim_sig£t_membî
(&
˘x
->
sig«l_masks
->
blocked
, 
sig
))

386 
	`sig«l_h™dÀr_run
(
˘x
, 
sig
);

387 
	`sim_sig£t_dñ
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
);

391 
	}
}

	@libm2skernel/syscall.c

20 
	~"m2skî√l.h
"

22 
	~<uni°d.h
>

23 
	~<utime.h
>

24 
	~<time.h
>

25 
	~<î∫o.h
>

26 
	~<dúít.h
>

27 
	~<pﬁl.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<sys/ut¢ame.h
>

31 
	~<sys/io˘l.h
>

32 
	~<sys/time.h
>

33 
	~<sys/ªsour˚.h
>

34 
	~<sys/times.h
>

35 
	~<sys/sysˇŒ.h
>

36 
	~<sys/sockë.h
>

37 
	~<sys/mm™.h
>

38 
	~<löux/uni°d.h
>

41 
	gsysˇŒ_debug_ˇãg‹y
;

43 *
	gsysˇŒ_«me
[] = {

44 
	#DEFSYSCALL
(
«me
,
code
Ë#«me,

	)

45 
	~"sysˇŒ.d©
"

46 #unde‡
DEFSYSCALL


51 
	#DEFSYSCALL
(
«me
,
code
Ë
sysˇŒ_code_
##«mêcode,

	)

52 
	~"sysˇŒ.d©
"

53 #unde‡
DEFSYSCALL


54 
	msysˇŒ_code_cou¡


57 
uöt64_t
 
	gsysˇŒ_‰eq
[
sysˇŒ_code_cou¡
 + 1];

61 
	$sysˇŒ_debug_°rög
(*
ãxt
, *
s
, 
Àn
, 
f‹˚
) {

62 
buf
[200], *
buÂå
;

63 
åunc
 = 0;

64 i‡(!
	`debug_°©us
(
sysˇŒ_debug_ˇãg‹y
))

67 
	`mem£t
(
buf
, 0, 200);

68 
	`°r˝y
(
buf
, "\"");

69 
buÂå
 = &
buf
[1];

70 i‡(
Àn
 > 40) {

71 
Àn
 = 40;

72 
åunc
 = 1;

75 i‡(!
Àn
 || (!*
s
 && !
f‹˚
)) {

76 
	`°r˝y
(
buÂå
, !
Àn
 && 
åunc
 ? "\"..." : "\"");

79 i‡((Ë*
s
 >= 32) {

80 *
buÂå
 = *
s
;

81 
buÂå
++;

82 } i‡(*
s
 == '\0') {

83 
	`°r˝y
(
buÂå
, "\\0");

84 
buÂå
 += 2;

85 } i‡(*
s
 == '\n') {

86 
	`°r˝y
(
buÂå
, "\\n");

87 
buÂå
 += 2;

88 } i‡(*
s
 == '\t') {

89 
	`°r˝y
(
buÂå
, "\\t");

90 
buÂå
 += 2;

92 
	`•rötf
(
buÂå
, "\\%02x", *
s
);

93 
buÂå
 += 3;

95 
s
++;

96 
Àn
--;

98 
	`sysˇŒ_debug
("%s=%s\n", 
ãxt
, 
buf
);

99 
	}
}

103 *
	gîr_sysˇŒ_nŸe
 =

113 
°rög_m≠_t
 
	g›í_Êags_m≠
 = {

138 
°rög_m≠_t
 
	gmsync_Êags_m≠
 = {

150 
°rög_m≠_t
 
	gac˚ss_mode_m≠
 = {

161 
°rög_m≠_t
 
	g˛⁄e_Êags_m≠
 = {

192 
	ssim_utimbuf
 {

193 
uöt32_t
 
	ma˘ime
;

194 
uöt32_t
 
	mmodtime
;

195 } 
__©åibuã__
((
∑cked
));

197 
	$sysˇŒ_utime_sim_to_ªad
(
utimbuf
 *
ªÆ
, 
sim_utimbuf
 *
sim
) {

198 
ªÆ
->
a˘ime
 = 
sim
->actime;

199 
ªÆ
->
modtime
 = 
sim
->modtime;

200 
	}
}

205 
°rög_m≠_t
 
	gf˙é_cmd_m≠
 = {

229 
°rög_m≠_t
 
	gsockëˇŒ_ˇŒ_m≠
 = {

252 
°rög_m≠_t
 
	gsockë_Ámûy_m≠
 = {

287 
°rög_m≠_t
 
	gsockë_ty≥_m≠
 = {

302 
	ssim_°©64
 {

303 
uöt64_t
 
	mdev
;

304 
uöt32_t
 
	m∑d1
;

305 
uöt32_t
 
	m__öo
;

306 
uöt32_t
 
	mmode
;

307 
uöt32_t
 
	m∆ök
;

308 
uöt32_t
 
	muid
;

309 
uöt32_t
 
	mgid
;

310 
uöt64_t
 
	mrdev
;

311 
uöt32_t
 
	m∑d2
;

312 
öt64_t
 
	msize
;

313 
uöt32_t
 
	mblksize
;

314 
uöt64_t
 
	mblocks
;

315 
uöt32_t
 
	m©ime
;

316 
uöt32_t
 
	m©ime_n£c
;

317 
uöt32_t
 
	mmtime
;

318 
uöt32_t
 
	mmtime_n£c
;

319 
uöt32_t
 
	m˘ime
;

320 
uöt32_t
 
	m˘ime_n£c
;

321 
uöt64_t
 
	möo
;

322 } 
__©åibuã__
((
∑cked
));

324 
	$sysˇŒ_c›y_°©64
(
sim_°©64
 *
sim
, 
°©
 *
ªÆ
) {

325 
	`bzîo
(
sim
,  (
sim_°©64
));

326 
sim
->
dev
 = 
ªÆ
->
°_dev
;

327 
sim
->
__öo
 = 
ªÆ
->
°_öo
;

328 
sim
->
mode
 = 
ªÆ
->
°_mode
;

329 
sim
->
∆ök
 = 
ªÆ
->
°_∆ök
;

330 
sim
->
uid
 = 
ªÆ
->
°_uid
;

331 
sim
->
gid
 = 
ªÆ
->
°_gid
;

332 
sim
->
rdev
 = 
ªÆ
->
°_rdev
;

333 
sim
->
size
 = 
ªÆ
->
°_size
;

334 
sim
->
blksize
 = 
ªÆ
->
°_blksize
;

335 
sim
->
blocks
 = 
ªÆ
->
°_blocks
;

336 
sim
->
©ime
 = 
ªÆ
->
°_©ime
;

337 
sim
->
mtime
 = 
ªÆ
->
°_mtime
;

338 
sim
->
˘ime
 = 
ªÆ
->
°_˘ime
;

339 
sim
->
öo
 = 
ªÆ
->
°_öo
;

340 
	`sysˇŒ_debug
(" stat64 structure:\n");

341 
	`sysˇŒ_debug
(" dev=%lld, ino=%d, mode=%d,Çlink=%d\n",

342 (Ë
sim
->
dev
, (Ësim->
öo
, (Ësim->
mode
, (Ësim->
∆ök
);

343 
	`sysˇŒ_debug
(" uid=%d, gid=%d,Ñdev=%lld\n",

344 (Ë
sim
->
uid
, (Ësim->
gid
, (Ësim->
rdev
);

345 
	`sysˇŒ_debug
(" size=%lld, blksize=%d, blocks=%lld\n",

346 (Ë
sim
->
size
, (Ësim->
blksize
, (Ësim->
blocks
);

347 
	}
}

352 
°rög_m≠_t
 
	gôimî_m≠
 = {

361 
	ssim_timevÆ
 {

362 
uöt32_t
 
	mtv_£c
;

363 
uöt32_t
 
	mtv_u£c
;

364 } 
__©åibuã__
((
∑cked
));

366 
	ssim_ôimîvÆ
 {

367 
sim_timevÆ
 
	mô_öãrvÆ
;

368 
sim_timevÆ
 
	mô_vÆue
;

369 } 
__©åibuã__
((
∑cked
));

371 
	$sim_timevÆ_debug
(
sim_timevÆ
 *sim_timeval) {

372 
	`sysˇŒ_debug
("Åv_sec=%u,Åv_usec=%u\n",

373 
sim_timevÆ
->
tv_£c
, sim_timevÆ->
tv_u£c
);

374 
	}
}

376 
	$sim_ôimîvÆ_debug
(
sim_ôimîvÆ
 *sim_itimerval) {

377 
	`sysˇŒ_debug
(" it_interval:Åv_sec=%u,Åv_usec=%u\n",

378 
sim_ôimîvÆ
->
ô_öãrvÆ
.
tv_£c
, sim_ôimîvÆ->ô_öãrvÆ.
tv_u£c
);

379 
	`sysˇŒ_debug
(" it_value:Åv_sec=%u,Åv_usec=%u\n",

380 
sim_ôimîvÆ
->
ô_vÆue
.
tv_£c
, sim_ôimîvÆ->ô_vÆue.
tv_u£c
);

381 
	}
}

385 
	ssim_ut¢ame
 {

386 
	msy¢ame
[65];

387 
	mnodíame
[65];

388 
	mªÀa£
[65];

389 
	mvîsi⁄
[65];

390 
	mmachöe
[65];

391 
	mdomaö«me
[65];

392 } 
__©åibuã__
((
∑cked
));

394 
sim_ut¢ame
 
	gsim_ut¢ame
 = {

405 
	ssim_rußge
 {

406 
uöt32_t
 
	mutime_£c
, 
	mutime_u£c
;

407 
uöt32_t
 
	m°ime_£c
, 
	m°ime_u£c
;

408 
uöt32_t
 
	mmaxrss
;

409 
uöt32_t
 
	mixrss
;

410 
uöt32_t
 
	midrss
;

411 
uöt32_t
 
	mi§ss
;

412 
uöt32_t
 
	mmöÊt
;

413 
uöt32_t
 
	mmajÊt
;

414 
uöt32_t
 
	mnsw≠
;

415 
uöt32_t
 
	möblock
;

416 
uöt32_t
 
	moublock
;

417 
uöt32_t
 
	mmsg¢d
;

418 
uöt32_t
 
	mmsgrcv
;

419 
uöt32_t
 
	mnsig«ls
;

420 
uöt32_t
 
	mnvcsw
;

421 
uöt32_t
 
	mnivcsw
;

422 } 
__©åibuã__
((
∑cked
));

424 
	$sysˇŒ_c›y_rußge
(
sim_rußge
 *
sim
, 
rußge
 *
ªÆ
) {

425 
sim
->
utime_£c
 = 
ªÆ
->
ru_utime
.
tv_£c
;

426 
sim
->
utime_u£c
 = 
ªÆ
->
ru_utime
.
tv_u£c
;

427 
sim
->
°ime_£c
 = 
ªÆ
->
ru_°ime
.
tv_£c
;

428 
sim
->
°ime_u£c
 = 
ªÆ
->
ru_°ime
.
tv_u£c
;

429 
sim
->
maxrss
 = 
ªÆ
->
ru_maxrss
;

430 
sim
->
ixrss
 = 
ªÆ
->
ru_ixrss
;

431 
sim
->
idrss
 = 
ªÆ
->
ru_idrss
;

432 
sim
->
i§ss
 = 
ªÆ
->
ru_i§ss
;

433 
sim
->
möÊt
 = 
ªÆ
->
ru_möÊt
;

434 
sim
->
majÊt
 = 
ªÆ
->
ru_majÊt
;

435 
sim
->
nsw≠
 = 
ªÆ
->
ru_nsw≠
;

436 
sim
->
öblock
 = 
ªÆ
->
ru_öblock
;

437 
sim
->
oublock
 = 
ªÆ
->
ru_oublock
;

438 
sim
->
msg¢d
 = 
ªÆ
->
ru_msg¢d
;

439 
sim
->
msgrcv
 = 
ªÆ
->
ru_msgrcv
;

440 
sim
->
nsig«ls
 = 
ªÆ
->
ru_nsig«ls
;

441 
sim
->
nvcsw
 = 
ªÆ
->
ru_nvcsw
;

442 
sim
->
nivcsw
 = 
ªÆ
->
ru_nivcsw
;

443 
	}
}

448 
°rög_m≠_t
 
	gæimô_ªsour˚_m≠
 = {

471 
	ssim_æimô
 {

472 
uöt32_t
 
	mcur
;

473 
uöt32_t
 
	mmax
;

474 } 
__©åibuã__
((
∑cked
));

476 
	$sysˇŒ_æimô_ªÆ_to_sim
(
sim_æimô
 *
sim
, 
æimô
 *
ªÆ
) {

477 
sim
->
cur
 = 
ªÆ
->
æim_cur
;

478 
sim
->
max
 = 
ªÆ
->
æim_max
;

479 
	}
}

481 
	$sysˇŒ_æimô_sim_to_ªÆ
(
æimô
 *
ªÆ
, 
sim_æimô
 *
sim
) {

482 
ªÆ
->
æim_cur
 = 
sim
->
cur
;

483 
ªÆ
->
æim_max
 = 
sim
->
max
;

484 
	}
}

488 
	ssim_tms
 {

489 
uöt32_t
 
	mutime
;

490 
uöt32_t
 
	m°ime
;

491 
uöt32_t
 
	mcutime
;

492 
uöt32_t
 
	mc°ime
;

493 } 
__©åibuã__
((
∑cked
));

495 
	$sysˇŒ_c›y_tms
(
sim_tms
 *
sim
, 
tms
 *
ªÆ
) {

496 
sim
->
utime
 = 
ªÆ
->
tms_utime
;

497 
sim
->
°ime
 = 
ªÆ
->
tms_°ime
;

498 
sim
->
cutime
 = 
ªÆ
->
tms_cutime
;

499 
sim
->
c°ime
 = 
ªÆ
->
tms_c°ime
;

500 
	}
}

504 
	ssim_u£r_desc
 {

505 
uöt32_t
 
	míåy_numbî
;

506 
uöt32_t
 
	mba£_addr
;

507 
uöt32_t
 
	mlimô
;

508 
uöt32_t
 
	m£g_32bô
 : 1;

509 
uöt32_t
 
	mc⁄ã¡s
 : 2;

510 
uöt32_t
 
	mªad_exec_⁄ly
 : 1;

511 
uöt32_t
 
	mlimô_ö_∑ges
 : 1;

512 
uöt32_t
 
	m£g_nŸ_¥e£¡
 : 1;

513 
uöt32_t
 
	mu£abÀ
 : 1;

519 
°rög_m≠_t
 
	gsig¥ocmask_how_m≠
 = {

531 
°rög_m≠_t
 
	gpﬁl_evít_m≠
 = {

543 
	ssim_pﬁlfd
 {

544 
uöt32_t
 
	mfd
;

545 
uöt16_t
 
	mevíts
;

546 
uöt16_t
 
	mªvíts
;

553 
	$sim_fd_£t_dump
(*
fd_£t_«me
, 
fd_£t
 *
fds
, 
n
) {

554 
i
;

555 *
comma
;

558 i‡(!
n
 || !
fds
) {

559 
	`sysˇŒ_debug
(" %s={}\n", 
fd_£t_«me
);

564 
	`sysˇŒ_debug
(" %s={", 
fd_£t_«me
);

565 
comma
 = "";

566 
i
 = 0; i < 
n
; i++) {

567 i‡(!
	`FD_ISSET
(
i
, 
fds
))

569 
	`sysˇŒ_debug
("%s%d", 
comma
, 
i
);

570 
comma
 = ",";

572 
	`sysˇŒ_debug
("}\n");

573 
	}
}

577 
	$sim_fd_£t_ªad
(
uöt32_t
 
addr
, 
fd_£t
 *
fds
, 
n
) {

578 
nbyã
, 
nbô
, 
i
;

579 
ho°_fd
;

580 
c
;

582 
	`FD_ZERO
(
fds
);

583 
i
 = 0; i < 
n
; i++) {

586 
nbyã
 = 
i
 >> 3;

587 
nbô
 = 
i
 & 7;

588 
	`mem_ªad
(
iß_mem
, 
addr
 + 
nbyã
, 1, &
c
);

589 i‡(!(
c
 & (1 << 
nbô
)))

593 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
i
);

594 i‡(
ho°_fd
 < 0)

596 
	`FD_SET
(
ho°_fd
, 
fds
);

599 
	}
}

603 
	$sim_fd_£t_wrôe
(
uöt32_t
 
addr
, 
fd_£t
 *
fds
, 
n
) {

604 
nbyã
, 
nbô
, 
i
;

605 
gue°_fd
;

606 
c
;

609 i‡(!
addr
)

613 
	`mem_zîo
(
iß_mem
, 
addr
, (
n
 + 7) / 8);

614 
i
 = 0; i < 
n
; i++) {

617 i‡(!
	`FD_ISSET
(
i
, 
fds
))

621 
gue°_fd
 = 
	`fdt_gë_gue°_fd
(
iß_˘x
->
fdt
, 
i
);

622 
	`as£π
(
gue°_fd
 >= 0);

623 
nbyã
 = 
gue°_fd
 >> 3;

624 
nbô
 = 
gue°_fd
 & 7;

625 
	`mem_ªad
(
iß_mem
, 
addr
 + 
nbyã
, 1, &
c
);

626 
c
 |1 << 
nbô
;

627 
	`mem_wrôe
(
iß_mem
, 
addr
 + 
nbyã
, 1, &
c
);

629 
	}
}

634 
°rög_m≠_t
 
	gwaôpid_›ti⁄s_m≠
 = {

651 
	#MMAP_BASE_ADDRESS
 0xb7fb0000

	)

653 
°rög_m≠_t
 
	gmm≠_¥Ÿ_m≠
 = {

665 
°rög_m≠_t
 
	gmm≠_Êags_m≠
 = {

682 
uöt32_t
 
	$do_mm≠
(
uöt32_t
 
addr
, uöt32_à
Àn
, 
¥Ÿ
,

683 
Êags
, 
gue°_fd
, 
uöt32_t
 
off£t
) {

684 
uöt32_t
 
Æí
;

685 
fd_t
 *
fd
;

686 
≥rm
, 
ho°_fd
;

687 *
ho°_±r
;

690 
	`as£π
(
PROT_READ
 == 1);

691 
	`as£π
(
PROT_WRITE
 == 2);

692 
	`as£π
(
PROT_EXEC
 == 4);

695 
	`as£π
(
MAP_SHARED
 == 0x01);

696 
	`as£π
(
MAP_PRIVATE
 == 0x02);

697 
	`as£π
(
MAP_FIXED
 == 0x10);

698 
	`as£π
(
MAP_ANONYMOUS
 == 0x20);

701 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

702 
ho°_fd
 = 
fd
 ? fd->host_fd : -1;

703 i‡(
gue°_fd
 > 0 && 
ho°_fd
 < 0)

704 
	`Áèl
("do_mmap: invalid 'guest_fd'");

707 
≥rm
 = 
mem_ac˚ss_öô
;

708 
≥rm
 |
¥Ÿ
 & 
PROT_READ
 ? 
mem_ac˚ss_ªad
 : 0;

709 
≥rm
 |
¥Ÿ
 & 
PROT_WRITE
 ? 
mem_ac˚ss_wrôe
 : 0;

710 
≥rm
 |
¥Ÿ
 & 
PROT_EXEC
 ? 
mem_ac˚ss_exec
 : 0;

714 i‡(
Êags
 & 
MAP_ANONYMOUS
)

715 
ho°_fd
 = -1;

719 i‡(
off£t
 & ~
MEM_PAGEMASK
)

720 
	`Áèl
("do_mmap: unaligned offset");

721 i‡(
addr
 & ~
MEM_PAGEMASK
)

722 
	`Áèl
("do_mmap: unalignedáddr");

723 
Æí
 = 
	`ROUND_UP
(
Àn
, 
MEM_PAGESIZE
);

726 i‡(
Êags
 & 
MAP_FIXED
) {

730 i‡(!
addr
)

731 
	`Áèl
("do_mmap:Ço start specified for fixed mapping");

735 
	`mem_unm≠
(
iß_mem
, 
addr
, 
Æí
);

739 i‡(!
addr
 || 
	`mem_m≠_•a˚_down
(
iß_mem
,áddr, 
Æí
) !=áddr)

740 
addr
 = 
MMAP_BASE_ADDRESS
;

741 
addr
 = 
	`mem_m≠_•a˚_down
(
iß_mem
,áddr, 
Æí
);

742 i‡(
addr
 =(
uöt32_t
) - 1)

743 
	`Áèl
("do_mmap: out of guest memory");

747 
	`mem_m≠
(
iß_mem
, 
addr
, 
Æí
, 
≥rm
);

750 i‡(
ho°_fd
 >= 0) {

751 
ho°_±r
 = 
	`mm≠
(
NULL
, 
Àn
, 
¥Ÿ
, 
Êags
 & ~
MAP_FIXED
, 
ho°_fd
, 
off£t
);

752 i‡(
ho°_±r
 =
MAP_FAILED
)

753 
	`Áèl
("do_mmap: host callÅo 'mmap' failed");

754 
	`mem_m≠_ho°
(
iß_mem
, 
fd
, 
addr
, 
Æí
, 
≥rm
, 
ho°_±r
);

755 
	`sysˇŒ_debug
(" ho°_±r=%p\n", 
ho°_±r
);

756 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

759  
addr
;

760 
	}
}

765 
°rög_m≠_t
 
	gfuãx_cmd_m≠
 = {

786 
	ssys˘l_¨gs_t
 {

787 
uöt32_t
 
	m≤ame
;

788 
uöt32_t
 
	m∆í
;

789 
uöt32_t
 
	mpﬁdvÆ
;

790 
uöt32_t
 
	mﬁdÀ≈
;

791 
uöt32_t
 
	m≤ewvÆ
;

792 
uöt32_t
 
	m√wÀn
;

796 
	$sysˇŒ_summ¨y
() {

797 
i
;

798 
	`sysˇŒ_debug
("\nSystem calls summary:\n");

799 
i
 = 1; i < 325; i++) {

800 i‡(!
sysˇŒ_‰eq
[
i
])

802 
	`sysˇŒ_debug
("%† %Œd\n", 
sysˇŒ_«me
[
i
],

803 (Ë
sysˇŒ_‰eq
[
i
]);

805 
	}
}

812 
	#RETVAL
(
X
Ë{ 
ªtvÆ
 = (X); i‡‘ëvÆ =-1ËªtvÆ = -
î∫o
; }

	)

818 
	$gë_pid
() {

819  
iß_˘x
->
pid
;

820 
	}
}

822 
	$h™dÀ_gue°_sysˇŒs
() {

823 
syscode
 = 
iß_ªgs
->
óx
;

824 
ªtvÆ
 = 0;

825 
syscode
) {

826 
sysˇŒ_code_gë_pid
:

828 
ªtvÆ
=
	`gë_pid
();

833 i‡(
syscode
 >
sysˇŒ_code_cou¡
) {

834 
ªtvÆ
 = -38;

836 
	`Áèl
("not implemented system call '%s' (code %d)át 0x%x\n%s",

837 
syscode
 < 
sysˇŒ_code_cou¡
 ? 
sysˇŒ_«me
[syscode] : "",

838 
syscode
, 
iß_ªgs
->
eù
, 
îr_sysˇŒ_nŸe
);

843  
ªtvÆ
;

844 
	}
}

850 
	$sysˇŒ_do
() {

851 
syscode
 = 
iß_ªgs
->
óx
;

852 
ªtvÆ
 = 0;

853 i‡(
syscode
 > 325) {

854 
ªtvÆ
 = 
	`h™dÀ_gue°_sysˇŒs
();

863 
	`sysˇŒ_debug
("syscall '%s' (code %d, inst %lld,Öid %d)\n",

864 
syscode
 < 
sysˇŒ_code_cou¡
 ? 
sysˇŒ_«me
[syscode] : "",

865 
syscode
, (Ë
iß_ö°_cou¡
, 
iß_˘x
->
pid
);

866 i‡(
syscode
 < 
sysˇŒ_code_cou¡
)

867 
sysˇŒ_‰eq
[
syscode
]++;

868 i‡(
	`debug_°©us
(
iß_ˇŒ_debug_ˇãg‹y
)) {

869 
i
;

870 
i
 = 0; i < 
iß_fun˘i⁄_Àvñ
; i++)

871 
	`iß_ˇŒ_debug
("| ");

872 
	`iß_ˇŒ_debug
("syscall '%s' (code %d, inst %lld,Öid %d)\n",

873 
syscode
 < 
sysˇŒ_code_cou¡
 ? 
sysˇŒ_«me
[syscode] : "",

874 
syscode
, (Ë
iß_ö°_cou¡
, 
iß_˘x
->
pid
);

877 
syscode
) {

881 
sysˇŒ_code_exô
:

883 
°©us
;

885 
°©us
 = 
iß_ªgs
->
ebx
;

886 
	`sysˇŒ_debug
(" sètus=0x%x\n", 
°©us
);

887 
	`˘x_föish
(
iß_˘x
, 
°©us
);

892 
sysˇŒ_code_˛o£
:

894 
uöt32_t
 
gue°_fd
, 
ho°_fd
;

895 
fd_t
 *
fd
;

897 
gue°_fd
 = 
iß_ªgs
->
ebx
;

898 
	`sysˇŒ_debug
(" gue°_fd=%d\n", 
gue°_fd
);

899 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
gue°_fd
);

900 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

903 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

904 i‡(!
fd
) {

905 
ªtvÆ
 = -
EBADF
;

910 i‡(
ho°_fd
 > 2)

911 
	`˛o£
(
ho°_fd
);

914 i‡(
fd
->
köd
 =
fd_köd_vútuÆ
)

915 
	`sysˇŒ_debug
(" ho° fûê'%s':Åemp‹¨y fûêdñëed\n", 
fd
->
∑th
);

916 
	`fdt_íåy_‰ì
(
iß_˘x
->
fdt
, 
fd
->
gue°_fd
);

922 
sysˇŒ_code_ªad
:

924 
uöt32_t
 
pbuf
, 
cou¡
;

925 
gue°_fd
, 
ho°_fd
, 
îr
;

926 *
buf
;

927 
fd_t
 *
fd
;

928 
pﬁlfd
 
fds
;

931 
gue°_fd
 = 
iß_ªgs
->
ebx
;

932 
pbuf
 = 
iß_ªgs
->
ecx
;

933 
cou¡
 = 
iß_ªgs
->
edx
;

934 
	`sysˇŒ_debug
(" guest_fd=%d,Öbuf=0x%x, count=0x%x\n",

935 
gue°_fd
, 
pbuf
, 
cou¡
);

938 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

939 i‡(!
fd
) {

940 
ªtvÆ
 = -
EBADF
;

943 
ho°_fd
 = 
fd
->host_fd;

944 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

947 
buf
 = 
	`ˇŒoc
(1, 
cou¡
);

948 i‡(!
buf
)

949 
	`Áèl
("syscallÑead: cannotállocate buffer");

952 
fds
.
fd
 = 
ho°_fd
;

953 
fds
.
evíts
 = 
POLLIN
;

954 
îr
 = 
	`pﬁl
(&
fds
, 1, 0);

955 i‡(
îr
 < 0)

956 
	`Áèl
("syscall 'read':Érror in 'poll'");

959 i‡(
fds
.
ªvíts
 || (
fd
->
Êags
 & 
O_NONBLOCK
)) {

960 
	`RETVAL
(
	`ªad
(
ho°_fd
, 
buf
, 
cou¡
));

961 i‡(
ªtvÆ
 > 0) {

962 
	`mem_wrôe
(
iß_mem
, 
pbuf
, 
ªtvÆ
, 
buf
);

963 
	`sysˇŒ_debug_°rög
(" buf", 
buf
, 
cou¡
, 1);

965 
	`‰ì
(
buf
);

970 
	`sysˇŒ_debug
(" blockingÑead -Örocess suspended\n");

971 
iß_˘x
->
wakeup_fd
 = 
gue°_fd
;

972 
iß_˘x
->
wakeup_evíts
 = 1;

973 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_ªad
);

974 
	`ke_¥o˚ss_evíts_scheduÀ
();

976 
	`‰ì
(
buf
);

982 
sysˇŒ_code_wrôe
:

984 
uöt32_t
 
pbuf
, 
cou¡
;

985 
gue°_fd
, 
ho°_fd
;

986 
fd_t
 *
fd
;

987 *
buf
;

988 
pﬁlfd
 
fds
;

990 
gue°_fd
 = 
iß_ªgs
->
ebx
;

991 
pbuf
 = 
iß_ªgs
->
ecx
;

992 
cou¡
 = 
iß_ªgs
->
edx
;

993 
	`sysˇŒ_debug
(" guest_fd=%d,Öbuf=0x%x, count=0x%x\n",

994 
gue°_fd
, 
pbuf
, 
cou¡
);

997 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

998 i‡(!
fd
) {

999 
ªtvÆ
 = -
EBADF
;

1002 
ho°_fd
 = 
fd
->host_fd;

1003 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

1006 
buf
 = 
	`mÆloc
(
cou¡
);

1007 i‡(!
buf
)

1008 
	`Áèl
("syscall write: out of memory");

1009 
	`mem_ªad
(
iß_mem
, 
pbuf
, 
cou¡
, 
buf
);

1010 
	`sysˇŒ_debug_°rög
(" buf", 
buf
, 
cou¡
, 0);

1013 
fds
.
fd
 = 
ho°_fd
;

1014 
fds
.
evíts
 = 
POLLOUT
;

1015 
	`pﬁl
(&
fds
, 1, 0);

1018 i‡(
fds
.
ªvíts
) {

1019 
	`RETVAL
(
	`wrôe
(
ho°_fd
, 
buf
, 
cou¡
));

1020 
	`‰ì
(
buf
);

1025 
	`sysˇŒ_debug
(" blocking write -Örocess suspended\n");

1026 
iß_˘x
->
wakeup_fd
 = 
gue°_fd
;

1027 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_wrôe
);

1028 
	`ke_¥o˚ss_evíts_scheduÀ
();

1029 
	`‰ì
(
buf
);

1034 
sysˇŒ_code_›í
:

1036 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE], 
ãmµ©h
[MAX_PATH_SIZE];

1037 
uöt32_t
 
pfûíame
;

1038 
Êags
, 
mode
;

1039 
sÊags
[
MAX_STRING_SIZE
];

1040 
Àngth
, 
fuŒ∑th_Àngth
;

1041 
ho°_fd
;

1042 
fd_t
 *
fd
;

1045 
pfûíame
 = 
iß_ªgs
->
ebx
;

1046 
Êags
 = 
iß_ªgs
->
ecx
;

1047 
mode
 = 
iß_ªgs
->
edx
;

1048 
Àngth
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

1049 i‡(
Àngth
 >
MAX_PATH_SIZE
)

1050 
	`Áèl
("syscall open: maximumÖathÜengthÉxceeded");

1051 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

1052 
fuŒ∑th_Àngth
 = 
	`°æí
(
fuŒ∑th
);

1053 
	`sysˇŒ_debug
(" filename='%s' flags=0x%x, mode=0x%x\n",

1054 
fûíame
, 
Êags
, 
mode
);

1055 
	`sysˇŒ_debug
(" fuŒ∑th='%s'\n", 
fuŒ∑th
);

1056 
	`m≠_Êags
(&
›í_Êags_m≠
, 
Êags
, 
sÊags
, 
MAX_STRING_SIZE
);

1057 
	`sysˇŒ_debug
(" fœgs=%s\n", 
sÊags
);

1060 
	`gk_lib›í˛_ªdúe˘
(
fuŒ∑th
, 
MAX_PATH_SIZE
);

1063 i‡(!
	`°∫cmp
(
fuŒ∑th
, "/proc/", 6)) {

1066 i‡(!
	`°rcmp
(
fuŒ∑th
, "/proc/self/maps")) {

1069 
	`˘x_gí_¥oc_£lf_m≠s
(
iß_˘x
, 
ãmµ©h
);

1070 
ho°_fd
 = 
	`›í
(
ãmµ©h
, 
Êags
, 
mode
);

1071 
	`as£π
(
ho°_fd
 > 0);

1074 
fd
 = 
	`fdt_íåy_√w
(
iß_˘x
->
fdt
, 
fd_köd_vútuÆ
, 
ho°_fd
, 
ãmµ©h
, 
Êags
);

1075 
	`sysˇŒ_debug
(" host file '%s' opened: guest_fd=%d, host_fd=%d\n",

1076 
ãmµ©h
, 
fd
->
gue°_fd
, fd->
ho°_fd
);

1077 
ªtvÆ
 = 
fd
->
gue°_fd
;

1083 
	`sysˇŒ_debug
(" warning: unhandled virtual file\n");

1087 
ho°_fd
 = 
	`›í
(
fuŒ∑th
, 
Êags
, 
mode
);

1088 i‡(
ho°_fd
 < 0) {

1089 
ªtvÆ
 = -
î∫o
;

1094 
fd
 = 
	`fdt_íåy_√w
(
iß_˘x
->
fdt
, 
fd_köd_ªguœr
, 
ho°_fd
, 
fuŒ∑th
, 
Êags
);

1095 
	`sysˇŒ_debug
(" file descriptor opened: guest_fd=%d, host_fd=%d\n",

1096 
fd
->
gue°_fd
, fd->
ho°_fd
);

1097 
ªtvÆ
 = 
fd
->
gue°_fd
;

1105 
sysˇŒ_code_waôpid
:

1107 
pid
, 
›ti⁄s
;

1108 
uöt32_t
 
p°©us
;

1109 
s›ti⁄s
[0x100];

1110 
˘x_t
 *
chûd
;

1112 
pid
 = 
iß_ªgs
->
ebx
;

1113 
p°©us
 = 
iß_ªgs
->
ecx
;

1114 
›ti⁄s
 = 
iß_ªgs
->
edx
;

1115 
	`sysˇŒ_debug
("Öid=%d,Östatus=0x%x, options=0x%x\n",

1116 
pid
, 
p°©us
, 
›ti⁄s
);

1117 
	`m≠_Êags
(&
waôpid_›ti⁄s_m≠
, 
›ti⁄s
, 
s›ti⁄s
, 0x100);

1118 
	`sysˇŒ_debug
(" o±i⁄s=%s\n", 
s›ti⁄s
);

1119 i‡(
pid
 != -1 &&Öid <= 0)

1120 
	`Áèl
("syscall waitpid: only supported forÖid=-1 orÖid>0");

1123 
chûd
 = 
	`˘x_gë_zombõ
(
iß_˘x
, 
pid
);

1127 i‡(!
chûd
 && !(
›ti⁄s
 & 0x1)) {

1128 
iß_˘x
->
wakeup_pid
 = 
pid
;

1129 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_waôpid
);

1135 i‡(
chûd
) {

1136 
ªtvÆ
 = 
chûd
->
pid
;

1137 i‡(
p°©us
)

1138 
	`mem_wrôe
(
iß_mem
, 
p°©us
, 4, &
chûd
->
exô_code
);

1139 
	`˘x_£t_°©us
(
chûd
, 
˘x_föished
);

1146 
sysˇŒ_code_u∆ök
:

1148 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

1149 
uöt32_t
 
pfûíame
;

1150 
Àngth
;

1152 
pfûíame
 = 
iß_ªgs
->
ebx
;

1153 
Àngth
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

1154 i‡(
Àngth
 >
MAX_PATH_SIZE
)

1155 
	`Áèl
("syscall unlink: maximumÖathÜengthÉxceeded");

1156 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

1157 
	`sysˇŒ_debug
("Öfûíame=0x%x\n", 
pfûíame
);

1158 
	`sysˇŒ_debug
(" fûíame=%s, fuŒ∑th=%s\n", 
fûíame
, 
fuŒ∑th
);

1160 
	`RETVAL
(
	`u∆ök
(
fuŒ∑th
));

1166 
sysˇŒ_code_time
:

1168 
uöt32_t
 
±ime
, 
t
;

1170 
±ime
 = 
iß_ªgs
->
ebx
;

1171 
	`sysˇŒ_debug
("Ötime=0x%x\n", 
±ime
);

1172 
t
 = 
	`time
(
NULL
);

1173 i‡(
±ime
)

1174 
	`mem_wrôe
(
iß_mem
, 
±ime
, 4, &
t
);

1175 
ªtvÆ
 = 
t
;

1181 
sysˇŒ_code_chmod
:

1183 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

1184 
uöt32_t
 
pfûíame
, 
mode
;

1185 
Àn
;

1187 
pfûíame
 = 
iß_ªgs
->
ebx
;

1188 
mode
 = 
iß_ªgs
->
ecx
;

1189 
Àn
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

1190 i‡(
Àn
 >
MAX_PATH_SIZE
)

1191 
	`Áèl
("syscall chmod: maximumÖathÜengthÉxceeded");

1192 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

1193 
	`sysˇŒ_debug
("Öfûíame=0x%x, mode=0x%x\n", 
pfûíame
, 
mode
);

1194 
	`sysˇŒ_debug
(" fûíame='%s', fuŒ∑th='%s'\n", 
fûíame
, 
fuŒ∑th
);

1195 
	`RETVAL
(
	`chmod
(
fuŒ∑th
, 
mode
));

1201 
sysˇŒ_code_l£ek
:

1203 
uöt32_t
 
fd
, 
off£t
, 
‹igö
, 
ho°_fd
;

1205 
fd
 = 
iß_ªgs
->
ebx
;

1206 
off£t
 = 
iß_ªgs
->
ecx
;

1207 
‹igö
 = 
iß_ªgs
->
edx
;

1208 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

1209 
	`sysˇŒ_debug
(" fd=%d, offset=0x%x, origin=0x%x\n",

1210 
fd
, 
off£t
, 
‹igö
);

1211 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

1213 
	`RETVAL
(
	`l£ek
(
ho°_fd
, 
off£t
, 
‹igö
));

1219 
sysˇŒ_code_gëpid
:

1221 
ªtvÆ
 = 
iß_˘x
->
pid
;

1227 
sysˇŒ_code_utime
:

1229 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

1230 
uöt32_t
 
pfûíame
, 
putimbuf
;

1231 
utimbuf
 utimbuf;

1232 
sim_utimbuf
 sim_utimbuf;

1233 
Àn
;

1235 
pfûíame
 = 
iß_ªgs
->
ebx
;

1236 
putimbuf
 = 
iß_ªgs
->
ecx
;

1237 
Àn
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

1238 i‡(
Àn
 >
MAX_PATH_SIZE
)

1239 
	`Áèl
("syscall utime: maximumÖathÜengthÉxceeded");

1240 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

1241 
	`mem_ªad
(
iß_mem
, 
putimbuf
,  (
sim_utimbuf
), &sim_utimbuf);

1242 
	`sysˇŒ_utime_sim_to_ªad
(&
utimbuf
, &
sim_utimbuf
);

1243 
	`sysˇŒ_debug
(" filename='%s',Öutimbuf=0x%x\n",

1244 
fûíame
, 
putimbuf
);

1245 
	`sysˇŒ_debug
(" fuŒ∑th='%s'\n", 
fuŒ∑th
);

1246 
	`sysˇŒ_debug
(" utimbuf.actime = %u, utimbuf.modtime = %u\n",

1247 
sim_utimbuf
.
a˘ime
, sim_utimbuf.
modtime
);

1248 
	`RETVAL
(
	`utime
(
fuŒ∑th
, &
utimbuf
));

1254 
sysˇŒ_code_ac˚ss
:

1256 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE], 
smode
[
MAX_STRING_SIZE
];

1257 
uöt32_t
 
pfûíame
, 
mode
;

1258 
Àn
;

1260 
pfûíame
 = 
iß_ªgs
->
ebx
;

1261 
mode
 = 
iß_ªgs
->
ecx
;

1262 
Àn
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

1263 i‡(
Àn
 >
MAX_PATH_SIZE
)

1264 
	`Áèl
("syscalláccess: maximumÖathÜengthÉxceeded");

1265 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

1266 
	`m≠_Êags
(&
ac˚ss_mode_m≠
, 
mode
, 
smode
, 
MAX_STRING_SIZE
);

1267 
	`sysˇŒ_debug
(" filename='%s', mode=0x%x\n",

1268 
fûíame
, 
mode
);

1269 
	`sysˇŒ_debug
(" fuŒ∑th='%s'\n", 
fuŒ∑th
);

1270 
	`sysˇŒ_debug
(" mode=%s\n", 
smode
);

1272 
	`RETVAL
(
	`ac˚ss
(
fuŒ∑th
, 
mode
));

1278 
sysˇŒ_code_kûl
:

1280 
uöt32_t
 
pid
, 
sig
;

1281 
˘x_t
 *
˘x
;

1283 
pid
 = 
iß_ªgs
->
ebx
;

1284 
sig
 = 
iß_ªgs
->
ecx
;

1285 
	`sysˇŒ_debug
("Öid=%d, sig=%d (%s)\n", 
pid
,

1286 
sig
, 
	`sim_sig«l_«me
(sig));

1290 
˘x
 = 
	`˘x_gë
(
pid
);

1291 i‡(!
˘x
)

1292 
	`Áèl
("sysˇŒ kûl:Öid %d d€†nŸÉxi°", 
pid
);

1295 
	`sim_sig£t_add
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
);

1296 
	`˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x
);

1297 
	`ke_¥o˚ss_evíts_scheduÀ
();

1298 
	`ke_¥o˚ss_evíts
();

1304 
sysˇŒ_code_ª«me
:

1306 
uöt32_t
 
pﬁd∑th
, 
≤ew∑th
;

1307 
ﬁd∑th
[
MAX_PATH_SIZE
], 
√w∑th
[MAX_PATH_SIZE];

1308 
ﬁdfuŒ∑th
[
MAX_PATH_SIZE
], 
√wfuŒ∑th
[MAX_PATH_SIZE];

1309 
Àn1
, 
Àn2
;

1311 
pﬁd∑th
 = 
iß_ªgs
->
ebx
;

1312 
≤ew∑th
 = 
iß_ªgs
->
ecx
;

1313 
Àn1
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pﬁd∑th
, 
MAX_PATH_SIZE
, 
ﬁd∑th
);

1314 
Àn2
 = 
	`mem_ªad_°rög
(
iß_mem
, 
≤ew∑th
, 
MAX_PATH_SIZE
, 
√w∑th
);

1315 i‡(
Àn1
 >
MAX_PATH_SIZE
 || 
Àn2
 >= MAX_PATH_SIZE)

1316 
	`Áèl
("syscallÑename: maximumÖathÜengthÉxceeded");

1317 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
ﬁd∑th
, 
ﬁdfuŒ∑th
, 
MAX_PATH_SIZE
);

1318 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
√w∑th
, 
√wfuŒ∑th
, 
MAX_PATH_SIZE
);

1319 
	`sysˇŒ_debug
("Öﬁd∑th=0x%x,Ö√w∑th=0x%x\n", 
pﬁd∑th
, 
≤ew∑th
);

1320 
	`sysˇŒ_debug
(" old∑th='%s',Çew∑th='%s'\n", 
ﬁd∑th
, 
√w∑th
);

1321 
	`sysˇŒ_debug
(" oldfuŒ∑th='%s',ÇewfuŒ∑th='%s'\n", 
ﬁdfuŒ∑th
, 
√wfuŒ∑th
);

1323 
	`RETVAL
(
	`ª«me
(
ﬁdfuŒ∑th
, 
√wfuŒ∑th
));

1329 
sysˇŒ_code_mkdú
:

1331 
uöt32_t
 
µ©h
, 
mode
;

1332 
∑th
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

1333 
Àngth
;

1335 
µ©h
 = 
iß_ªgs
->
ebx
;

1336 
mode
 = 
iß_ªgs
->
ecx
;

1337 
Àngth
 = 
	`mem_ªad_°rög
(
iß_mem
, 
µ©h
, 
MAX_PATH_SIZE
, 
∑th
);

1338 i‡(
Àngth
 >
MAX_PATH_SIZE
)

1339 
	`Áèl
("syscall open: maximumÖathÜengthÉxceeded");

1340 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
∑th
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

1341 
	`sysˇŒ_debug
("Ö∑th=0x%x, mode=0x%x\n", 
µ©h
, 
mode
);

1342 
	`sysˇŒ_debug
("Ö©h='%s', fuŒ∑th='%s'\n", 
∑th
, 
fuŒ∑th
);

1344 
	`RETVAL
(
	`mkdú
(
fuŒ∑th
, 
mode
));

1350 
sysˇŒ_code_dup
:

1352 
gue°_fd
, 
dup_gue°_fd
;

1353 
ho°_fd
, 
dup_ho°_fd
;

1354 
fd_t
 *
fd
, *
dup_fd
;

1356 
gue°_fd
 = 
iß_ªgs
->
ebx
;

1357 
	`sysˇŒ_debug
(" gue°_fd=%d\n", 
gue°_fd
);

1360 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

1361 i‡(!
fd
) {

1362 
ªtvÆ
 = -
EBADF
;

1365 
ho°_fd
 = 
fd
->host_fd;

1366 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

1369 
dup_ho°_fd
 = 
	`dup
(
ho°_fd
);

1370 i‡(
dup_ho°_fd
 < 0) {

1371 
ªtvÆ
 = -
î∫o
;

1376 
dup_fd
 = 
	`fdt_íåy_√w
(
iß_˘x
->
fdt
, 
fd_köd_ªguœr
, 
dup_ho°_fd
, 
fd
->
∑th
, fd->
Êags
);

1377 
dup_gue°_fd
 = 
dup_fd
->
gue°_fd
;

1380 
ªtvÆ
 = 
dup_gue°_fd
;

1386 
sysˇŒ_code_pùe
:

1388 
uöt32_t
 
pfd
;

1389 
fd_t
 *
ªad_fd
, *
wrôe_fd
;

1390 
uöt32_t
 
gue°_ªad_fd
, 
gue°_wrôe_fd
;

1391 
ho°_fd
[2], 
îr
;

1393 
pfd
 = 
iß_ªgs
->
ebx
;

1394 
	`sysˇŒ_debug
("Öfd=0x%x\n", 
pfd
);

1397 
îr
 = 
	`pùe
(
ho°_fd
);

1398 i‡(
îr
 < 0)

1399 
	`Áèl
("syscall 'pipe': couldÇot createÖipe");

1400 
	`sysˇŒ_debug
(" hostÖipe created: fd={%d, %d}\n",

1401 
ho°_fd
[0], host_fd[1]);

1404 
ªad_fd
 = 
	`fdt_íåy_√w
(
iß_˘x
->
fdt
, 
fd_köd_pùe
, 
ho°_fd
[0], "", 
O_RDONLY
);

1405 
wrôe_fd
 = 
	`fdt_íåy_√w
(
iß_˘x
->
fdt
, 
fd_köd_pùe
, 
ho°_fd
[1], "", 
O_WRONLY
);

1406 
	`sysˇŒ_debug
("Öipe created: fd={%d, %d}\n",

1407 
ªad_fd
->
gue°_fd
, 
wrôe_fd
->guest_fd);

1408 
gue°_ªad_fd
 = 
ªad_fd
->
gue°_fd
;

1409 
gue°_wrôe_fd
 = 
wrôe_fd
->
gue°_fd
;

1412 
	`mem_wrôe
(
iß_mem
, 
pfd
, 4, &
gue°_ªad_fd
);

1413 
	`mem_wrôe
(
iß_mem
, 
pfd
 + 4, 4, &
gue°_wrôe_fd
);

1419 
sysˇŒ_code_times
:

1421 
uöt32_t
 
±ms
;

1422 
tms
Åms;

1423 
sim_tms
 sim_tms;

1425 
±ms
 = 
iß_ªgs
->
ebx
;

1426 
	`sysˇŒ_debug
("Ötms=0x%x\n", 
±ms
);

1428 
ªtvÆ
 = 
	`times
(&
tms
);

1429 
	`sysˇŒ_c›y_tms
(&
sim_tms
, &
tms
);

1430 i‡(
±ms
)

1431 
	`mem_wrôe
(
iß_mem
, 
±ms
,  (
sim_tms
), &sim_tms);

1437 
sysˇŒ_code_brk
:

1439 
uöt32_t
 
ﬁdbrk
, 
√wbrk
, 
size
;

1440 
uöt32_t
 
ﬁdbrk_∫d
, 
√wbrk_∫d
;

1442 
√wbrk
 = 
iß_ªgs
->
ebx
;

1443 
ﬁdbrk
 = 
iß_˘x
->
lﬂdî
->
brk
;

1444 
	`sysˇŒ_debug
("Çewbrk=0x%x (previous brk was 0x%x)\n",

1445 
√wbrk
, 
ﬁdbrk
);

1447 
√wbrk_∫d
 = 
	`ROUND_UP
(
√wbrk
, 
MEM_PAGESIZE
);

1448 
ﬁdbrk_∫d
 = 
	`ROUND_UP
(
ﬁdbrk
, 
MEM_PAGESIZE
);

1452 i‡(!
√wbrk
) {

1453 
ªtvÆ
 = 
ﬁdbrk
;

1460 i‡(
√wbrk
 > 
ﬁdbrk
) {

1461 
size
 = 
√wbrk_∫d
 - 
ﬁdbrk_∫d
;

1462 i‡(
size
) {

1463 i‡(
	`mem_m≠_•a˚
(
iß_mem
, 
ﬁdbrk_∫d
, 
size
) != oldbrk_rnd)

1464 
	`Áèl
("syscall brk: out of memory");

1465 
	`mem_m≠
(
iß_mem
, 
ﬁdbrk_∫d
, 
size
,

1466 
mem_ac˚ss_ªad
 | 
mem_ac˚ss_wrôe
);

1468 
iß_˘x
->
lﬂdî
->
brk
 = 
√wbrk
;

1469 
ªtvÆ
 = 
√wbrk
;

1470 
	`sysˇŒ_debug
(" hó∞grow†0x%x byãs\n", 
√wbrk
 - 
ﬁdbrk
);

1475 i‡(
√wbrk
 < 
ﬁdbrk
) {

1476 
size
 = 
ﬁdbrk_∫d
 - 
√wbrk_∫d
;

1477 i‡(
size
)

1478 
	`mem_unm≠
(
iß_mem
, 
√wbrk_∫d
, 
size
);

1479 
iß_˘x
->
lﬂdî
->
brk
 = 
√wbrk
;

1480 
ªtvÆ
 = 
√wbrk
;

1481 
	`sysˇŒ_debug
(" hó∞shrök†0x%x byãs\n", 
ﬁdbrk
 - 
√wbrk
);

1495 
sysˇŒ_code_io˘l
:

1497 
uöt32_t
 
cmd
, 
¨g
;

1498 
gue°_fd
;

1499 
fd_t
 *
fd
;

1501 
gue°_fd
 = 
iß_ªgs
->
ebx
;

1502 
cmd
 = 
iß_ªgs
->
ecx
;

1503 
¨g
 = 
iß_ªgs
->
edx
;

1504 
	`sysˇŒ_debug
(" guest_fd=%d, cmd=0x%x,árg=0x%x\n",

1505 
gue°_fd
, 
cmd
, 
¨g
);

1508 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

1509 i‡(!
fd
) {

1510 
ªtvÆ
 = -
EBADF
;

1515 i‡(
cmd
 >= 0x5401 || cmd <= 0x5408) {

1521 
buf
[60];

1523 
	`mem_ªad
(
iß_mem
, 
¨g
,  (
buf
), buf);

1524 
	`RETVAL
(
	`io˘l
(
fd
->
ho°_fd
, 
cmd
, &
buf
));

1525 i‡(!
ªtvÆ
)

1526 
	`mem_wrôe
(
iß_mem
, 
¨g
,  (
buf
), buf);

1529 
	`Áèl
("sysˇŒ io˘l: cmd = 0x%xÇŸ im∂emíãd", 
cmd
);

1536 
sysˇŒ_code_gëµid
:

1539 i‡(!
iß_˘x
->
∑ª¡
)

1540 
ªtvÆ
 = 1;

1542 
ªtvÆ
 = 
iß_˘x
->
∑ª¡
->
pid
;

1548 
sysˇŒ_code_£ålimô
:

1550 
uöt32_t
 
ªsour˚
, 
¥lim
;

1551 *
§esour˚
;

1552 
sim_æimô
 sim_rlimit;

1554 
ªsour˚
 = 
iß_ªgs
->
ebx
;

1555 
¥lim
 = 
iß_ªgs
->
ecx
;

1556 
§esour˚
 = 
	`m≠_vÆue
(&
æimô_ªsour˚_m≠
, 
ªsour˚
);

1557 
	`sysˇŒ_debug
("Ñesour˚=0x%x,Öæim=0x%x\n", 
ªsour˚
, 
¥lim
);

1558 
	`sysˇŒ_debug
("Ñesour˚=%s\n", 
§esour˚
);

1560 
	`mem_ªad
(
iß_mem
, 
¥lim
,  (
sim_æimô
), &sim_rlimit);

1561 
	`sysˇŒ_debug
("Ñlim->cur=0x%x,Ñlim->max=0x%x\n",

1562 
sim_æimô
.
cur
, sim_æimô.
max
);

1563 
ªsour˚
) {

1565 
RLIMIT_DATA
:

1570 
RLIMIT_STACK
:

1578 
	`Áèl
("£ålimô:ÇŸ im∂emíãd f‹Ñesour˚=%s", 
§esour˚
);

1585 
sysˇŒ_code_gërußge
:

1587 
uöt32_t
 
who
, 
¥u
;

1588 
rußge
Ñusage;

1589 
sim_rußge
 sim_rusage;

1591 
who
 = 
iß_ªgs
->
ebx
;

1592 
¥u
 = 
iß_ªgs
->
ecx
;

1593 
	`sysˇŒ_debug
(" who=0x%x,Öru=0x%x\n", 
who
, 
¥u
);

1595 i‡(
who
 != 0)

1596 
	`Áèl
("syscall getrusage:Çot implemented for who != RUSAGE_SELF");

1597 
	`RETVAL
(
	`gërußge
(
RUSAGE_SELF
, &
rußge
));

1598 i‡(!
ªtvÆ
) {

1599 
	`sysˇŒ_c›y_rußge
(&
sim_rußge
, &
rußge
);

1600 
	`mem_wrôe
(
iß_mem
, 
¥u
,  (
sim_rußge
), &sim_rusage);

1612 
sysˇŒ_code_gëtimeofday
:

1614 
uöt32_t
 
±v
, 
±z
;

1615 
timevÆ
 
tv
;

1616 
timez⁄e
 
tz
;

1618 
±v
 = 
iß_ªgs
->
ebx
;

1619 
±z
 = 
iß_ªgs
->
ecx
;

1620 
	`sysˇŒ_debug
("Ötv=0x%x,Ötz=0x%x\n", 
±v
, 
±z
);

1622 
	`RETVAL
(
	`gëtimeofday
(&
tv
, &
tz
));

1623 i‡(
±v
) {

1624 
	`mem_wrôe
(
iß_mem
, 
±v
, 4, &
tv
.
tv_£c
);

1625 
	`mem_wrôe
(
iß_mem
, 
±v
 + 4, 4, &
tv
.
tv_u£c
);

1627 i‡(
±z
) {

1628 
	`mem_wrôe
(
iß_mem
, 
±z
, 4, &
tz
.
tz_möuãswe°
);

1629 
	`mem_wrôe
(
iß_mem
, 
±z
 + 4, 4, &
tz
.
tz_d°time
);

1636 
sysˇŒ_code_ªadlök
:

1638 
uöt32_t
 
∑th
, 
buf
, 
bufsz
;

1639 
∑th_°r
[
MAX_PATH_SIZE
];

1640 
fuŒ_∑th_°r
[
MAX_PATH_SIZE
];

1641 
de°_∑th
[
MAX_PATH_SIZE
];

1642 
de°_size
;

1644 
∑th
 = 
iß_ªgs
->
ebx
;

1645 
buf
 = 
iß_ªgs
->
ecx
;

1646 
bufsz
 = 
iß_ªgs
->
edx
;

1647 
	`sysˇŒ_debug
("Ö©h=0x%x, buf=0x%x, bufsz=%d\n", 
∑th
, 
buf
, 
bufsz
);

1650 
	`mem_ªad_°rög
(
iß_mem
, 
∑th
, 
MAX_PATH_SIZE
, 
∑th_°r
);

1651 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
∑th_°r
, 
fuŒ_∑th_°r
, 
MAX_PATH_SIZE
);

1652 
	`sysˇŒ_debug
("Ö©h_°r='%s'\n", 
∑th_°r
);

1655 i‡(!
	`°rcmp
(
fuŒ_∑th_°r
, "/proc/self/exe")) {

1658 
	`°r˝y
(
de°_∑th
, 
iß_˘x
->
lﬂdî
->
exe
);

1663 
	`RETVAL
(
	`ªadlök
(
fuŒ_∑th_°r
, 
de°_∑th
, 
MAX_PATH_SIZE
));

1664 i‡(
ªtvÆ
 < 0)

1669 
de°_size
 = 
	`°æí
(
de°_∑th
) + 1;

1670 i‡(
de°_size
 > 
bufsz
) {

1671 
ªtvÆ
 = -
EFAULT
;

1676 
	`mem_wrôe_°rög
(
iß_mem
, 
buf
, 
de°_∑th
);

1677 
	`sysˇŒ_debug
(" de°_∑th='%s'\n", 
de°_∑th
);

1683 
sysˇŒ_code_mm≠
:

1685 
uöt32_t
 
∑rgs
;

1686 
uöt32_t
 
addr
, 
Àn
, 
¥Ÿ
;

1687 
uöt32_t
 
Êags
, 
off£t
;

1688 
gue°_fd
;

1689 
•rŸ
[
MAX_STRING_SIZE
], 
sÊags
[MAX_STRING_SIZE];

1693 
∑rgs
 = 
iß_ªgs
->
ebx
;

1694 
	`mem_ªad
(
iß_mem
, 
∑rgs
, 4, &
addr
);

1695 
	`mem_ªad
(
iß_mem
, 
∑rgs
 + 4, 4, &
Àn
);

1696 
	`mem_ªad
(
iß_mem
, 
∑rgs
 + 8, 4, &
¥Ÿ
);

1697 
	`mem_ªad
(
iß_mem
, 
∑rgs
 + 12, 4, &
Êags
);

1698 
	`mem_ªad
(
iß_mem
, 
∑rgs
 + 16, 4, &
gue°_fd
);

1699 
	`mem_ªad
(
iß_mem
, 
∑rgs
 + 20, 4, &
off£t
);

1701 
	`sysˇŒ_debug
("Ö¨gs=0x%x\n", 
∑rgs
);

1702 
	`sysˇŒ_debug
("áddr=0x%x,Üen=%u,Örot=0x%x, flags=0x%x, "

1704 
addr
, 
Àn
, 
¥Ÿ
, 
Êags
, 
gue°_fd
, 
off£t
);

1705 
	`m≠_Êags
(&
mm≠_¥Ÿ_m≠
, 
¥Ÿ
, 
•rŸ
,  (sprot));

1706 
	`m≠_Êags
(&
mm≠_Êags_m≠
, 
Êags
, 
sÊags
,  (sflags));

1707 
	`sysˇŒ_debug
("ÖrŸ=%s, fœgs=%s\n", 
•rŸ
, 
sÊags
);

1710 
ªtvÆ
 = 
	`do_mm≠
(
addr
, 
Àn
, 
¥Ÿ
, 
Êags
,

1711 
gue°_fd
, 
off£t
);

1717 
sysˇŒ_code_munm≠
:

1719 
uöt32_t
 
addr
, 
size
;

1720 
uöt32_t
 
size_Æign
;

1722 
addr
 = 
iß_ªgs
->
ebx
;

1723 
size
 = 
iß_ªgs
->
ecx
;

1724 
	`sysˇŒ_debug
("áddr=0x%x, size=0x%x\n", 
addr
, 
size
);

1725 i‡(
addr
 & (
MEM_PAGESIZE
 - 1))

1726 
	`Áèl
("munmap: size isÇotá multiple ofÖage size");

1728 
size_Æign
 = 
	`ROUND_UP
(
size
, 
MEM_PAGESIZE
);

1729 
	`mem_unm≠
(
iß_mem
, 
addr
, 
size_Æign
);

1735 
sysˇŒ_code_fchmod
:

1737 
uöt32_t
 
fd
, 
ho°_fd
, 
mode
;

1739 
fd
 = 
iß_ªgs
->
ebx
;

1740 
mode
 = 
iß_ªgs
->
ecx
;

1741 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

1742 
	`sysˇŒ_debug
(" fd=%d, mode=%d\n",

1743 
fd
, 
mode
);

1744 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

1746 
	`RETVAL
(
	`fchmod
(
ho°_fd
, 
mode
));

1752 
sysˇŒ_code_sockëˇŒ
:

1754 
ˇŒ
;

1755 
uöt32_t
 
¨gs
;

1756 *
ˇŒ_«me
;

1758 
ˇŒ
 = 
iß_ªgs
->
ebx
;

1759 
¨gs
 = 
iß_ªgs
->
ecx
;

1760 
ˇŒ_«me
 = 
	`m≠_vÆue
(&
sockëˇŒ_ˇŒ_m≠
, 
ˇŒ
);

1761 
	`sysˇŒ_debug
(" cÆl=%d (%s)\n", 
ˇŒ
, 
ˇŒ_«me
);

1762 
	`sysˇŒ_debug
("árgs=0x%x\n", 
¨gs
);

1765 i‡(
ˇŒ
 == 1) {

1767 
uöt32_t
 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
;

1768 *
Ámûy_«me
, *
ty≥_«me
;

1769 
ho°_fd
;

1770 
fd_t
 *
fd
;

1773 
	`mem_ªad
(
iß_mem
, 
¨gs
, 4, &
Ámûy
);

1774 
	`mem_ªad
(
iß_mem
, 
¨gs
 + 4, 4, &
ty≥
);

1775 
	`mem_ªad
(
iß_mem
, 
¨gs
 + 8, 4, &
¥Ÿocﬁ
);

1776 
Ámûy_«me
 = 
	`m≠_vÆue
(&
sockë_Ámûy_m≠
, 
Ámûy
);

1777 
ty≥_«me
 = 
	`m≠_vÆue
(&
sockë_ty≥_m≠
, 
ty≥
 & 0xff);

1778 
	`sysˇŒ_debug
(" family=0x%x,Åype=0x%x,Örotocol=0x%x\n",

1779 
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

1780 
	`sysˇŒ_debug
(" famûy=%s\n", 
Ámûy_«me
);

1781 
	`sysˇŒ_debug
("Åy≥=%s", 
ty≥_«me
);

1782 i‡(
ty≥
 & 0x80000)

1783 
	`sysˇŒ_debug
("|SOCK_CLOEXEC");

1784 i‡(
ty≥
 & 0x800)

1785 
	`sysˇŒ_debug
("|SOCK_NONBLOCK");

1786 
	`sysˇŒ_debug
("\n");

1789 i‡((
ty≥
 & 0xff) != 1)

1790 
	`Áèl
("syscall 'socketcall': SYS_SOCKET: only sockets ofÅype SOCK_STREAMállowed");

1793 
ho°_fd
 = 
	`sockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

1794 i‡(
ho°_fd
 < 0) {

1795 
ªtvÆ
 = -
î∫o
;

1800 
fd
 = 
	`fdt_íåy_√w
(
iß_˘x
->
fdt
, 
fd_köd_sockë
, 
ho°_fd
, "", 
O_RDWR
);

1801 
	`sysˇŒ_debug
(" file descriptor opened: guest_fd=%d, host_fd=%d\n",

1802 
fd
->
gue°_fd
, fd->
ho°_fd
);

1803 
ªtvÆ
 = 
fd
->
gue°_fd
;

1806 } i‡(
ˇŒ
 == 3) {

1808 
uöt32_t
 
gue°_fd
, 
∑ddr
, 
addæí
;

1809 
fd_t
 *
fd
;

1810 
buf
[
MAX_STRING_SIZE
];

1811 
sockaddr
 *
addr
;

1813 
	`mem_ªad
(
iß_mem
, 
¨gs
, 4, &
gue°_fd
);

1814 
	`mem_ªad
(
iß_mem
, 
¨gs
 + 4, 4, &
∑ddr
);

1815 
	`mem_ªad
(
iß_mem
, 
¨gs
 + 8, 4, &
addæí
);

1816 
	`sysˇŒ_debug
(" guest_fd=%d,Öaddr=0x%x,áddrlen=%d\n",

1817 
gue°_fd
, 
∑ddr
, 
addæí
);

1820 i‡(
addæí
 > 
MAX_STRING_SIZE
)

1821 
	`Áèl
("syscall 'socketcall': SYS_CONNECT: maximum string sizeÉxceeded");

1822 
addr
 = (
sockaddr
 *Ë&
buf
[0];

1823 
	`as£π
( (
addr
->
ß_Ámûy
) == 2);

1824 
	`as£π
((*Ë&
addr
->
ß_d©a
 - (*Ë&addr->
ß_Ámûy
 == 2);

1825 
	`mem_ªad
(
iß_mem
, 
∑ddr
, 
addæí
, 
addr
);

1826 
	`sysˇŒ_debug
(" sockaddr.Ámûy=%s\n", 
	`m≠_vÆue
(&
sockë_Ámûy_m≠
, 
addr
->
ß_Ámûy
));

1827 
	`sysˇŒ_debug_°rög
(" sockaddr.d©a", 
addr
->
ß_d©a
, 
addæí
 - 2, 1);

1830 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

1831 i‡(!
fd
) {

1832 
ªtvÆ
 = -
EBADF
;

1835 i‡(
fd
->
köd
 !
fd_köd_sockë
)

1836 
	`Áèl
(" syscall 'socketcall': SYS_CONNECT: file descriptor isÇotá socket");

1837 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
fd
->
ho°_fd
);

1840 
	`RETVAL
(
	`c⁄√˘
(
fd
->
ho°_fd
, 
addr
, 
addæí
));

1843 } i‡(
ˇŒ
 == 7) {

1845 
uöt32_t
 
gue°_fd
, 
∑ddr
, 
∑ddæí
, 
addæí
;

1846 
fd_t
 *
fd
;

1847 
sockaddr
 *
addr
;

1848 
sockÀn_t
 
ho°_addæí
;

1850 
	`mem_ªad
(
iß_mem
, 
¨gs
, 4, &
gue°_fd
);

1851 
	`mem_ªad
(
iß_mem
, 
¨gs
 + 4, 4, &
∑ddr
);

1852 
	`mem_ªad
(
iß_mem
, 
¨gs
 + 8, 4, &
∑ddæí
);

1853 
	`sysˇŒ_debug
(" guest_fd=%d,Öaddr=0x%x,Öaddrlen=0x%x\n",

1854 
gue°_fd
, 
∑ddr
, 
∑ddæí
);

1857 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

1858 i‡(!
fd
) {

1859 
ªtvÆ
 = -
EBADF
;

1864 
	`mem_ªad
(
iß_mem
, 
∑ddæí
, 4, &
addæí
);

1865 
	`sysˇŒ_debug
("áddæí=%d\n", 
addæí
);

1866 
ho°_addæí
 = 
addæí
;

1867 
addr
 = 
	`mÆloc
(
addæí
);

1870 
	`RETVAL
(
	`gë≥î«me
(
fd
->
ho°_fd
, 
addr
, &
ho°_addæí
));

1871 i‡(
ªtvÆ
 < 0) {

1872 
	`‰ì
(
addr
);

1875 
addæí
 = 
ho°_addæí
;

1876 
	`sysˇŒ_debug
("Ñesult:\n");

1877 
	`sysˇŒ_debug
("áddæí=%d\n", 
ho°_addæí
);

1878 
	`sysˇŒ_debug_°rög
(" sockaddr.d©a", 
addr
->
ß_d©a
, 
addæí
 - 2, 1);

1881 
	`mem_wrôe
(
iß_mem
, 
∑ddæí
, 4, &
addæí
);

1882 
	`mem_wrôe
(
iß_mem
, 
∑ddr
, 
addæí
, 
addr
);

1883 
	`‰ì
(
addr
);

1887 
	`Áèl
("syscall 'socketcall': call '%s'Çot implemented",

1888 
ˇŒ_«me
);

1895 
sysˇŒ_code_£tôimî
:

1897 
uöt32_t
 
which
, 
pvÆue
, 
povÆue
;

1898 
sim_ôimîvÆ
 
ôimîvÆ
;

1899 
uöt64_t
 
now
 = 
	`ke_timî
();

1901 
which
 = 
iß_ªgs
->
ebx
;

1902 
pvÆue
 = 
iß_ªgs
->
ecx
;

1903 
povÆue
 = 
iß_ªgs
->
edx
;

1904 
	`sysˇŒ_debug
(" which=%d (%s),Övalue=0x%x,Öovalue=0x%x\n",

1905 
which
, 
	`m≠_vÆue
(&
ôimî_m≠
, which), 
pvÆue
, 
povÆue
);

1908 i‡(
pvÆue
) {

1909 
	`mem_ªad
(
iß_mem
, 
pvÆue
,  (
ôimîvÆ
), &itimerval);

1910 
	`sysˇŒ_debug
(" itimervalát 'pvalue':\n");

1911 
	`sim_ôimîvÆ_debug
(&
ôimîvÆ
);

1915 i‡(
which
 >= 3)

1916 
	`Áèl
("syscall 'setitimer': wrong value for 'which'árgument");

1919 
iß_˘x
->
ôimî_vÆue
[
which
] = 
now
 + 
ôimîvÆ
.
ô_vÆue
.
tv_£c
 * 1000000

1920 + 
ôimîvÆ
.
ô_vÆue
.
tv_u£c
;

1921 
iß_˘x
->
ôimî_öãrvÆ
[
which
] = 
ôimîvÆ
.
ô_öãrvÆ
.
tv_£c
 * 1000000

1922 + 
ôimîvÆ
.
ô_öãrvÆ
.
tv_u£c
;

1926 
	`˘x_ho°_thªad_timî_ˇn˚l
(
iß_˘x
);

1927 
	`ke_¥o˚ss_evíts_scheduÀ
();

1933 
sysˇŒ_code_gëôimî
:

1935 
uöt32_t
 
which
, 
pvÆue
;

1936 
sim_ôimîvÆ
 
ôimîvÆ
;

1937 
uöt64_t
 
now
 = 
	`ke_timî
();

1938 
uöt64_t
 
ªm
;

1940 
which
 = 
iß_ªgs
->
ebx
;

1941 
pvÆue
 = 
iß_ªgs
->
ecx
;

1942 
	`sysˇŒ_debug
(" which=%d (%s),Övalue=0x%x\n",

1943 
which
, 
	`m≠_vÆue
(&
ôimî_m≠
, which), 
pvÆue
);

1946 i‡(
which
 >= 3)

1947 
	`Áèl
("syscall 'getitimer': wrong value for 'which'árgument");

1950 
ªm
 = 
now
 < 
iß_˘x
->
ôimî_vÆue
[
which
] ? isa_ctx->itimer_value[which] -Çow : 0;

1951 
ôimîvÆ
.
ô_vÆue
.
tv_£c
 = 
ªm
 / 1000000;

1952 
ôimîvÆ
.
ô_vÆue
.
tv_u£c
 = 
ªm
 % 1000000;

1953 
ôimîvÆ
.
ô_öãrvÆ
.
tv_£c
 = 
iß_˘x
->
ôimî_öãrvÆ
[
which
] / 1000000;

1954 
ôimîvÆ
.
ô_öãrvÆ
.
tv_u£c
 = 
iß_˘x
->
ôimî_öãrvÆ
[
which
] % 1000000;

1955 
	`mem_wrôe
(
iß_mem
, 
pvÆue
,  (
ôimîvÆ
), &itimerval);

1961 
sysˇŒ_code_sigªtu∫
:

1963 
	`sig«l_h™dÀr_ªtu∫
(
iß_˘x
);

1964 
	`ke_¥o˚ss_evíts_scheduÀ
();

1965 
	`ke_¥o˚ss_evíts
();

1976 
sysˇŒ_code_˛⁄e
:

1978 
uöt32_t
 
Êags
, 
√w•
, 
∑ª¡_tid±r
, 
chûd_tid±r
;

1979 
uöt32_t
 
suµ‹ãd_Êags
, 
m™d©‹y_Êags
;

1980 
˘x_t
 *
√w_˘x
;

1981 
sÊags
[
MAX_STRING_SIZE
];

1983 
Êags
 = 
iß_ªgs
->
ebx
;

1984 
√w•
 = 
iß_ªgs
->
ecx
;

1985 
∑ª¡_tid±r
 = 
iß_ªgs
->
edx
;

1986 
chûd_tid±r
 = 
iß_ªgs
->
edi
;

1987 
	`sysˇŒ_debug
(" flags=0x%x,Çewsp=0x%x,Öarent_tidptr=0x%x, child_tidptr=0x%x\n",

1988 
Êags
, 
√w•
, 
∑ª¡_tid±r
, 
chûd_tid±r
);

1989 
	`m≠_Êags
(&
˛⁄e_Êags_m≠
, 
Êags
 & ~0xff, 
sÊags
, 
MAX_STRING_SIZE
);

1990 
	`sysˇŒ_debug
(" fœgs=%s\n", 
sÊags
);

1992 i‡(!
√w•
)

1993 
√w•
 = 
iß_ªgs
->
e•
;

1996 
√w_˘x
 = 
	`˘x_˛⁄e
(
iß_˘x
);

1997 
ªtvÆ
 = 
√w_˘x
->
pid
;

1998 
	`sysˇŒ_debug
(" context %d created withÖid %d\n",

1999 
√w_˘x
->
pid
, 
ªtvÆ
);

2002 
m™d©‹y_Êags
 = 0x00000f00;

2003 
suµ‹ãd_Êags
 = 0x013d00f‡| 
m™d©‹y_Êags
;

2004 i‡((
Êags
 & 
m™d©‹y_Êags
) != mandatory_flags) {

2005 
	`m≠_Êags
(&
˛⁄e_Êags_m≠
, ~
Êags
 & 
m™d©‹y_Êags
, 
sÊags
, 
MAX_STRING_SIZE
);

2006 
	`Áèl
("syscall clone:Åhese mandatory flagsáreÇot specified: %s",

2007 
sÊags
);

2009 i‡(
Êags
 & ~
suµ‹ãd_Êags
) {

2010 
	`m≠_Êags
(&
˛⁄e_Êags_m≠
, 
Êags
 & ~
suµ‹ãd_Êags
, 
sÊags
, 
MAX_STRING_SIZE
);

2011 
	`Áèl
("syscall clone: one ofÅhese flags is specifiedándÇot supported: %s",

2012 
sÊags
);

2018 i‡(
Êags
 & 0x10000) {

2019 
√w_˘x
->
exô_sig«l
 = 0;

2021 
√w_˘x
->
exô_sig«l
 = 
Êags
 & 0xff;

2025 i‡(
Êags
 & 0x100000)

2026 
	`mem_wrôe
(
iß_˘x
->
mem
, 
∑ª¡_tid±r
, 4, &
√w_˘x
->
pid
);

2029 i‡(
Êags
 & 0x1000000)

2030 
√w_˘x
->
£t_chûd_tid
 = 
chûd_tid±r
;

2031 i‡(
Êags
 & 0x200000)

2032 
√w_˘x
->
˛ór_chûd_tid
 = 
chûd_tid±r
;

2035 i‡(
Êags
 & 0x80000) {

2036 
sim_u£r_desc
 
uöfo
;

2037 
uöt32_t
 
puöfo
;

2039 
puöfo
 = 
iß_ªgs
->
esi
;

2040 
	`sysˇŒ_debug
("Öuöfo=0x%x\n", 
puöfo
);

2042 
	`mem_ªad
(
iß_mem
, 
puöfo
,  (
sim_u£r_desc
), &
uöfo
);

2043 
	`sysˇŒ_debug
("Éntry_number=0x%x, base_addr=0x%x,Üimit=0x%x\n",

2044 
uöfo
.
íåy_numbî
, uöfo.
ba£_addr
, uöfo.
limô
);

2045 
	`sysˇŒ_debug
(" seg_32bit=0x%x, contents=0x%x,Ñead_exec_only=0x%x\n",

2046 
uöfo
.
£g_32bô
, uöfo.
c⁄ã¡s
, uöfo.
ªad_exec_⁄ly
);

2047 
	`sysˇŒ_debug
("Üimit_in_pages=0x%x, seg_not_present=0x%x, useable=0x%x\n",

2048 
uöfo
.
limô_ö_∑ges
, uöfo.
£g_nŸ_¥e£¡
, uöfo.
u£abÀ
);

2049 i‡(!
uöfo
.
£g_32bô
)

2050 
	`Áèl
("syscall set_thread_area: only 32-bit segments supported");

2053 i‡(
uöfo
.
limô_ö_∑ges
)

2054 
uöfo
.
limô
 <<= 12;

2059 
uöfo
.
íåy_numbî
 = 6;

2060 
	`mem_wrôe
(
iß_mem
, 
puöfo
, 4, &
uöfo
.
íåy_numbî
);

2062 
√w_˘x
->
glibc_£gmít_ba£
 = 
uöfo
.
ba£_addr
;

2063 
√w_˘x
->
glibc_£gmít_limô
 = 
uöfo
.
limô
;

2067 
√w_˘x
->
öôül_°ack
 = 
√w•
;

2068 
√w_˘x
->
ªgs
->
e•
 = 
√w•
;

2069 
√w_˘x
->
ªgs
->
óx
 = 0;

2076 
sysˇŒ_code_√wu«me
:

2078 
uöt32_t
 
put¢ame
;

2080 
put¢ame
 = 
iß_ªgs
->
ebx
;

2081 
	`sysˇŒ_debug
("Öut¢ame=0x%x\n", 
put¢ame
);

2082 
	`sysˇŒ_debug
(" sy¢ame='%s',Çodíame='%s'\n", 
sim_ut¢ame
.
sy¢ame
, sim_ut¢ame.
nodíame
);

2083 
	`sysˇŒ_debug
("Ññ´£='%s', vîsi⁄='%s'\n", 
sim_ut¢ame
.
ªÀa£
, sim_ut¢ame.
vîsi⁄
);

2084 
	`sysˇŒ_debug
(" machöe='%s', domaö«me='%s'\n", 
sim_ut¢ame
.
machöe
, sim_ut¢ame.
domaö«me
);

2086 
	`mem_wrôe
(
iß_mem
, 
put¢ame
,  (
sim_ut¢ame
), &sim_utsname);

2092 
sysˇŒ_code_m¥Ÿe˘
:

2094 
uöt32_t
 
°¨t
, 
Àn
, 
¥Ÿ
;

2095 
mem_ac˚ss_íum
 
≥rm
 = 0;

2097 
°¨t
 = 
iß_ªgs
->
ebx
;

2098 
Àn
 = 
iß_ªgs
->
ecx
;

2099 
¥Ÿ
 = 
iß_ªgs
->
edx
;

2100 
	`sysˇŒ_debug
(" start=0x%x,Üen=0x%x,Örot=0x%x\n",

2101 
°¨t
, 
Àn
, 
¥Ÿ
);

2104 
≥rm
 |
¥Ÿ
 & 0x01 ? 
mem_ac˚ss_ªad
 : 0;

2105 
≥rm
 |
¥Ÿ
 & 0x02 ? 
mem_ac˚ss_wrôe
 : 0;

2106 
≥rm
 |
¥Ÿ
 & 0x04 ? 
mem_ac˚ss_exec
 : 0;

2107 
	`mem_¥Ÿe˘
(
iß_mem
, 
°¨t
, 
Àn
, 
≥rm
);

2113 
sysˇŒ_code_Œ£ek
:

2115 
uöt32_t
 
fd
, 
¥esu…
, 
‹igö
, 
ho°_fd
;

2116 
öt32_t
 
off£t_high
, 
off£t_low
;

2117 
öt64_t
 
off£t
;

2119 
fd
 = 
iß_ªgs
->
ebx
;

2120 
off£t_high
 = 
iß_ªgs
->
ecx
;

2121 
off£t_low
 = 
iß_ªgs
->
edx
;

2122 
off£t
 = ((
öt64_t
Ë
off£t_high
 << 32Ë| 
off£t_low
;

2123 
¥esu…
 = 
iß_ªgs
->
esi
;

2124 
‹igö
 = 
iß_ªgs
->
edi
;

2125 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

2126 
	`sysˇŒ_debug
(" fd=%d, offset_high=0x%x, offset_low=0x%x,Öresult=0x%x, origin=0x%x\n",

2127 
fd
, 
off£t_high
, 
off£t_low
, 
¥esu…
, 
‹igö
);

2128 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

2129 
	`sysˇŒ_debug
(" off£t=0x%Œx\n", (Ë
off£t
);

2130 i‡(
off£t_high
 != -1 && offset_high)

2131 
	`Áèl
("syscallÜlseek: only supported for 32-bit files");

2133 
off£t
 = 
	`l£ek
(
ho°_fd
, 
off£t_low
, 
‹igö
);

2134 
ªtvÆ
 = 
off£t
;

2135 i‡(
ªtvÆ
 >0 && 
¥esu…
) {

2136 
	`mem_wrôe
(
iß_mem
, 
¥esu…
, 8, &
off£t
);

2137 
ªtvÆ
 = 0;

2144 
sysˇŒ_code_gëdíts
:

2146 
uöt32_t
 
fd
, 
pdúít
, 
cou¡
, 
ho°_fd
;

2147 *
buf
;

2148 
ƒód
, 
ho°_offs
, 
gue°_offs
;

2149 
d_ty≥
;

2151 
	slöux_dúít
 {

2152 
d_öo
;

2153 
off_t
 
d_off
;

2154 
d_ª˛í
;

2155 
d_«me
[];

2156 } *
dúít
;

2158 
	ssim_löux_dúít
 {

2159 
uöt32_t
 
d_öo
;

2160 
uöt32_t
 
d_off
;

2161 
uöt16_t
 
d_ª˛í
;

2162 
d_«me
[];

2163 } 
	`__©åibuã__
((
∑cked
)Ë
sim_dúít
;

2166 
fd
 = 
iß_ªgs
->
ebx
;

2167 
pdúít
 = 
iß_ªgs
->
ecx
;

2168 
cou¡
 = 
iß_ªgs
->
edx
;

2169 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

2170 
	`sysˇŒ_debug
(" fd=%d,Ödirent=0x%x, count=%d\n",

2171 
fd
, 
pdúít
, 
cou¡
);

2172 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

2175 
buf
 = 
	`ˇŒoc
(1, 
cou¡
);

2176 i‡(!
buf
)

2177 
	`Áèl
("getdents: cannotállocate buffer");

2178 
ƒód
 = 
	`sysˇŒ
(
SYS_gëdíts
, 
ho°_fd
, 
buf
, 
cou¡
);

2181 i‡(
ƒód
 < 0)

2182 
	`Áèl
("getdents: callÅo host system callÑeturnedÉrror");

2183 i‡(!
ƒód
) {

2184 
ªtvÆ
 = 0;

2189 
ho°_offs
 = 0;

2190 
gue°_offs
 = 0;

2191 
ho°_offs
 < 
ƒód
) {

2192 
dúít
 = (
löux_dúít
 *Ë(
buf
 + 
ho°_offs
);

2193 
sim_dúít
.
d_öo
 = 
dúít
->d_ino;

2194 
sim_dúít
.
d_off
 = 
dúít
->d_off;

2195 
sim_dúít
.
d_ª˛í
 = (15 + 
	`°æí
(
dúít
->
d_«me
)) / 4 * 4;

2196 
d_ty≥
 = *(*Ë(
buf
 + 
ho°_offs
 + 
dúít
->
d_ª˛í
 - 1);

2198 
	`sysˇŒ_debug
(" d_öo=%u ", 
sim_dúít
.
d_öo
);

2199 
	`sysˇŒ_debug
("d_off=%u ", 
sim_dúít
.
d_off
);

2200 
	`sysˇŒ_debug
("d_ª˛í=%u(ho°),%u(gue°Ë", 
dúít
->
d_ª˛í
, 
sim_dúít
.d_reclen);

2201 
	`sysˇŒ_debug
("d_«me='%s'\n", 
dúít
->
d_«me
);

2203 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
, 4, &
sim_dúít
.
d_öo
);

2204 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 4, 4, &
sim_dúít
.
d_off
);

2205 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 8, 2, &
sim_dúít
.
d_ª˛í
);

2206 
	`mem_wrôe_°rög
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 10, 
dúít
->
d_«me
);

2207 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 
sim_dúít
.
d_ª˛í
 - 1, 1, &
d_ty≥
);

2209 
ho°_offs
 +
dúít
->
d_ª˛í
;

2210 
gue°_offs
 +
sim_dúít
.
d_ª˛í
;

2211 i‡(
gue°_offs
 > 
cou¡
)

2212 
	`Áèl
("getdents: host bufferÅoo small");

2214 
	`sysˇŒ_debug
("Ñë=%d(ho°),%d(gue°)\n", 
ho°_offs
, 
gue°_offs
);

2215 
	`‰ì
(
buf
);

2216 
ªtvÆ
 = 
gue°_offs
;

2225 
sysˇŒ_code_£À˘
:

2227 
uöt32_t
 
n
, 
öp
, 
ouç
, 
exp
, 
tvp
;

2228 
fd_£t
 
ö
, 
out
, 
ex
;

2229 
sim_timevÆ
 
sim_tv
;

2230 
timevÆ
 
tv
;

2232 
n
 = 
iß_ªgs
->
ebx
;

2233 
öp
 = 
iß_ªgs
->
ecx
;

2234 
ouç
 = 
iß_ªgs
->
edx
;

2235 
exp
 = 
iß_ªgs
->
esi
;

2236 
tvp
 = 
iß_ªgs
->
edi
;

2237 
	`sysˇŒ_debug
("Ç=%d, inp=0x%x, outp=0x%x,Éxp=0x%x,Åvp=0x%x\n",

2238 
n
, 
öp
, 
ouç
, 
exp
, 
tvp
);

2241 i‡(!
	`sim_fd_£t_ªad
(
öp
, &
ö
, 
n
)

2242 || !
	`sim_fd_£t_ªad
(
ouç
, &
out
, 
n
)

2243 || !
	`sim_fd_£t_ªad
(
exp
, &
ex
, 
n
)) {

2244 
ªtvÆ
 = -
EBADF
;

2249 
	`sim_fd_£t_dump
("öp", &
ö
, 
n
);

2250 
	`sim_fd_£t_dump
("ouç", &
out
, 
n
);

2251 
	`sim_fd_£t_dump
("exp", &
ex
, 
n
);

2254 
	`mem£t
(&
sim_tv
, 0,  (sim_tv));

2255 i‡(
tvp
)

2256 
	`mem_ªad
(
iß_mem
, 
tvp
,  (
sim_tv
), &sim_tv);

2257 
	`sysˇŒ_debug
("Åv:\n");

2258 
	`sim_timevÆ_debug
(&
sim_tv
);

2261 i‡(
sim_tv
.
tv_£c
 || sim_tv.
tv_u£c
)

2262 
	`Áèl
("syscall 'select':Çot supported for 'tv' otherÅhan 0");

2265 
	`mem£t
(&
tv
, 0,  (tv));

2266 
	`RETVAL
(
	`£À˘
(
n
, &
ö
, &
out
, &
ex
, &
tv
));

2267 i‡(
ªtvÆ
 < 0)

2271 
	`sim_fd_£t_wrôe
(
öp
, &
ö
, 
n
);

2272 
	`sim_fd_£t_wrôe
(
ouç
, &
out
, 
n
);

2273 
	`sim_fd_£t_wrôe
(
exp
, &
ex
, 
n
);

2279 
sysˇŒ_code_msync
:

2281 
uöt32_t
 
°¨t
, 
Àn
, 
Êags
;

2282 
sÊags
[
MAX_STRING_SIZE
];

2285 
°¨t
 = 
iß_ªgs
->
ebx
;

2286 
Àn
 = 
iß_ªgs
->
ecx
;

2287 
Êags
 = 
iß_ªgs
->
edx
;

2288 
	`m≠_Êags
(&
msync_Êags_m≠
, 
Êags
, 
sÊags
, 
MAX_STRING_SIZE
);

2289 
	`sysˇŒ_debug
(" start=0x%x,Üen=0x%x, flags=0x%x\n",

2290 
°¨t
, 
Àn
, 
Êags
);

2291 
	`sysˇŒ_debug
(" fœgs=%s\n", 
sÊags
);

2294 
	`w¨nög
("syscall 'msync' ignored");

2300 
sysˇŒ_code_wrôev
:

2302 
gue°_fd
, 
ho°_fd
;

2303 
fd_t
 *
fd
;

2304 
uöt32_t
 
piovec
, 
vÀn
;

2305 
uöt32_t
 
iov_ba£
, 
iov_Àn
;

2306 *
buf
;

2307 
v
, 
Àngth
;

2309 
gue°_fd
 = 
iß_ªgs
->
ebx
;

2310 
piovec
 = 
iß_ªgs
->
ecx
;

2311 
vÀn
 = 
iß_ªgs
->
edx
;

2312 
	`sysˇŒ_debug
(" guest_fd=%d,Öiovec = 0x%x, vlen=0x%x\n",

2313 
gue°_fd
, 
piovec
, 
vÀn
);

2317 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

2318 i‡(!
fd
) {

2319 
î∫o
 = -
EBADF
;

2322 
ho°_fd
 = 
fd
->host_fd;

2323 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

2324 i‡(
fd
->
köd
 =
fd_köd_pùe
)

2325 
	`Áèl
("syscall writev:Çot supported forÖipes");

2328 
v
 = 0; v < 
vÀn
; v++) {

2331 
	`mem_ªad
(
iß_mem
, 
piovec
, 4, &
iov_ba£
);

2332 
	`mem_ªad
(
iß_mem
, 
piovec
 + 4, 4, &
iov_Àn
);

2333 
piovec
 += 8;

2336 
buf
 = 
	`mÆloc
(
iov_Àn
);

2337 
	`mem_ªad
(
iß_mem
, 
iov_ba£
, 
iov_Àn
, 
buf
);

2338 
Àngth
 = 
	`wrôe
(
ho°_fd
, 
buf
, 
iov_Àn
);

2339 
	`‰ì
(
buf
);

2342 
ªtvÆ
 +
Àngth
;

2343 i‡(
Àngth
 < 0) {

2344 
ªtvÆ
 = -1;

2353 
sysˇŒ_code_sys˘l
:

2355 
uöt32_t
 
∑rgs
;

2357 
	ssys˘l_¨gs_t
 {

2358 
uöt32_t
 
≤ame
;

2359 
uöt32_t
 
∆í
;

2360 
uöt32_t
 
pﬁdvÆ
;

2361 
uöt32_t
 
ﬁdÀ≈
;

2362 
uöt32_t
 
≤ewvÆ
;

2363 
uöt32_t
 
√wÀn
;

2364 } 
¨gs
;

2365 
i
;

2366 
uöt32_t
 
aux
;

2367 
uöt32_t
 
zîo
 = 0;

2369 
∑rgs
 = 
iß_ªgs
->
ebx
;

2370 
	`sysˇŒ_debug
("Ö¨gs=0x%x\n", 
∑rgs
);

2371 
	`mem_ªad
(
iß_mem
, 
∑rgs
,  (
sys˘l_¨gs_t
), &
¨gs
);

2372 
	`sysˇŒ_debug
("Ö«me=0x%x\n", 
¨gs
.
≤ame
);

2373 
	`sysˇŒ_debug
("ÇÀn=%d\¿ ", 
¨gs
.
∆í
);

2374 
i
 = 0; i < 
¨gs
.
∆í
; i++) {

2375 
	`mem_ªad
(
iß_mem
, 
¨gs
.
≤ame
 + 
i
 * 4, 4, &
aux
);

2376 
	`sysˇŒ_debug
("«me[%d]=%d ", 
i
, 
aux
);

2378 
	`sysˇŒ_debug
("\¿ÖﬁdvÆ=0x%x\n", 
¨gs
.
pﬁdvÆ
);

2379 
	`sysˇŒ_debug
(" oldÀ≈=0x%x\n", 
¨gs
.
ﬁdÀ≈
);

2380 
	`sysˇŒ_debug
("Ö√wvÆ=0x%x\n", 
¨gs
.
≤ewvÆ
);

2381 
	`sysˇŒ_debug
("ÇewÀn=%d\n", 
¨gs
.
√wÀn
);

2382 
	`w¨nög
("syscall sysctl:Öartially supportedándÇot debugged");

2384 i‡(!
¨gs
.
ﬁdÀ≈
 || !¨gs.
pﬁdvÆ
)

2385 
	`Áèl
("syscall sysctl:Çot supported forÖoldval=0 or oldlenp=0");

2386 i‡(
¨gs
.
≤ewvÆ
 ||árgs.
√wÀn
)

2387 
	`Áèl
("syscall sysctl:Çot supported forÖnewval orÇewlen otherÅhan 0");

2389 
	`mem_wrôe
(
iß_mem
, 
¨gs
.
ﬁdÀ≈
, 4, &
zîo
);

2390 
	`mem_wrôe
(
iß_mem
, 
¨gs
.
pﬁdvÆ
, 1, &
zîo
);

2396 
sysˇŒ_code_sched_£ç¨am
:

2398 
uöt32_t
 
pid
, 
µ¨am
;

2399 
uöt32_t
 
sched_¥i‹ôy
;

2401 
pid
 = 
iß_ªgs
->
ebx
;

2402 
µ¨am
 = 
iß_ªgs
->
ecx
;

2403 
	`sysˇŒ_debug
("Öid=%d\n", 
pid
);

2404 
	`sysˇŒ_debug
("Ö∑øm=0x%x\n", 
µ¨am
);

2405 
	`mem_ªad
(
iß_mem
, 
µ¨am
, 4, &
sched_¥i‹ôy
);

2406 
	`sysˇŒ_debug
("Ö¨am.sched_¥i‹ôy=%d\n", 
sched_¥i‹ôy
);

2414 
sysˇŒ_code_sched_gë∑øm
:

2416 
uöt32_t
 
pid
, 
µ¨am
;

2417 
uöt32_t
 
zîo
 = 0;

2419 
pid
 = 
iß_ªgs
->
ebx
;

2420 
µ¨am
 = 
iß_ªgs
->
ecx
;

2421 
	`sysˇŒ_debug
("Öid=%d\n", 
pid
);

2422 
	`sysˇŒ_debug
("Ö∑øm=0x%x\n", 
µ¨am
);

2425 
	`mem_wrôe
(
iß_mem
, 
µ¨am
, 4, &
zîo
);

2431 
sysˇŒ_code_sched_gëscheduÀr
:

2433 
uöt32_t
 
pid
;

2435 
pid
 = 
iß_ªgs
->
ebx
;

2436 
	`sysˇŒ_debug
("Öid=%d\n", 
pid
);

2442 
sysˇŒ_code_sched_gë_¥i‹ôy_max
:

2444 
uöt32_t
 
pﬁicy
;

2446 
pﬁicy
 = 
iß_ªgs
->
ebx
;

2447 
	`sysˇŒ_debug
("Öﬁicy=%d\n", 
pﬁicy
);

2449 
pﬁicy
) {

2450 0: 
ªtvÆ
 = 0;

2452 1: 
ªtvÆ
 = 99;

2454 2: 
ªtvÆ
 = 99;

2456 : 
	`Áèl
("sysˇŒ 'sched_gë_¥i‹ôy_max'ÇŸ im∂emíãd f‹Öﬁicy=%d", 
pﬁicy
);

2463 
sysˇŒ_code_sched_gë_¥i‹ôy_mö
:

2465 
uöt32_t
 
pﬁicy
;

2467 
pﬁicy
 = 
iß_ªgs
->
ebx
;

2468 
	`sysˇŒ_debug
("Öﬁicy=%d\n", 
pﬁicy
);

2470 
pﬁicy
) {

2471 0: 
ªtvÆ
 = 0;

2473 1: 
ªtvÆ
 = 1;

2475 2: 
ªtvÆ
 = 1;

2477 : 
	`Áèl
("sysˇŒ 'sched_gë_¥i‹ôy_mö'ÇŸ im∂emíãd f‹Öﬁicy=%d", 
pﬁicy
);

2484 
sysˇŒ_code_«no¶ìp
:

2486 
uöt32_t
 
rqç
, 
rmç
;

2487 
uöt32_t
 
£c
, 
n£c
;

2488 
uöt64_t
 
tŸÆ
;

2490 
rqç
 = 
iß_ªgs
->
ebx
;

2491 
rmç
 = 
iß_ªgs
->
ecx
;

2492 
	`sysˇŒ_debug
("Ñqç=0x%x,Ñmç=0x%x\n", 
rqç
, 
rmç
);

2494 
	`mem_ªad
(
iß_mem
, 
rqç
, 4, &
£c
);

2495 
	`mem_ªad
(
iß_mem
, 
rqç
 + 4, 4, &
n£c
);

2496 
tŸÆ
 = (
uöt64_t
Ë
£c
 * 1000000 + (
n£c
 / 1000);

2497 
	`sysˇŒ_debug
(" sÀïÅimê(us): %Œd\n", (Ë
tŸÆ
);

2498 
iß_˘x
->
wakeup_time
 = 
	`ke_timî
(Ë+ 
tŸÆ
;

2501 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_«no¶ìp
);

2502 
	`ke_¥o˚ss_evíts_scheduÀ
();

2508 
sysˇŒ_code_mªm≠
:

2510 
uöt32_t
 
addr
, 
ﬁd_Àn
, 
√w_Àn
, 
Êags
;

2511 
uöt32_t
 
√w_addr
;

2513 
addr
 = 
iß_ªgs
->
ebx
;

2514 
ﬁd_Àn
 = 
iß_ªgs
->
ecx
;

2515 
√w_Àn
 = 
iß_ªgs
->
edx
;

2516 
Êags
 = 
iß_ªgs
->
esi
;

2517 
	`sysˇŒ_debug
("áddr=0x%x, old_len=0x%x,Çew_len=0x%x flags=0x%x\n",

2518 
addr
, 
ﬁd_Àn
, 
√w_Àn
, 
Êags
);

2521 
	`as£π
(!(
addr
 & (
MEM_PAGESIZE
 - 1)));

2522 
	`as£π
(!(
ﬁd_Àn
 & (
MEM_PAGESIZE
 - 1)));

2523 
	`as£π
(!(
√w_Àn
 & (
MEM_PAGESIZE
 - 1)));

2524 i‡(!(
Êags
 & 0x1))

2525 
	`Áèl
("syscall mremap: flags MAP_MAYMOVE must beÖresent");

2526 i‡(!
ﬁd_Àn
 || !
√w_Àn
)

2527 
	`Áèl
("syscall mremap: old_len orÇew_len cannot be zero");

2528 
ªtvÆ
 = 
addr
;

2531 i‡(
√w_Àn
 =
ﬁd_Àn
)

2535 i‡(
√w_Àn
 < 
ﬁd_Àn
) {

2536 
	`mem_unm≠
(
iß_mem
, 
addr
 + 
√w_Àn
, 
ﬁd_Àn
 -Çew_len);

2542 i‡(
√w_Àn
 > 
ﬁd_Àn
 &&

2543 
	`mem_m≠_•a˚
(
iß_mem
, 
addr
 + 
ﬁd_Àn
, 
√w_Àn
 - old_len) ==áddr + old_len) {

2544 
	`mem_m≠
(
iß_mem
, 
addr
 + 
ﬁd_Àn
, 
√w_Àn
 - old_len,

2545 
mem_ac˚ss_ªad
 | 
mem_ac˚ss_wrôe
);

2550 
√w_addr
 = 
	`mem_m≠_•a˚_down
(
iß_mem
, 
MMAP_BASE_ADDRESS
, 
√w_Àn
);

2551 i‡(
√w_addr
 =(
uöt32_t
) - 1)

2552 
	`Áèl
("syscall mremap: out of memory");

2553 
	`mem_m≠
(
iß_mem
, 
√w_addr
, 
√w_Àn
,

2554 
mem_ac˚ss_ªad
 | 
mem_ac˚ss_wrôe
);

2555 
	`mem_c›y
(
iß_mem
, 
√w_addr
, 
addr
, 
	`MIN
(
ﬁd_Àn
, 
√w_Àn
));

2556 
	`mem_unm≠
(
iß_mem
, 
addr
, 
ﬁd_Àn
);

2557 
ªtvÆ
 = 
√w_addr
;

2563 
sysˇŒ_code_pﬁl
:

2565 
uöt32_t
 
pfds
, 
nfds
;

2566 
timeout
, 
gue°_fd
, 
ho°_fd
;

2567 
sim_pﬁlfd
 
gue°_fds
;

2568 
pﬁlfd
 
ho°_fds
;

2569 
£víts
[
MAX_STRING_SIZE
];

2570 
fd_t
 *
fd
;

2572 
pfds
 = 
iß_ªgs
->
ebx
;

2573 
nfds
 = 
iß_ªgs
->
ecx
;

2574 
timeout
 = 
iß_ªgs
->
edx
;

2575 
	`sysˇŒ_debug
("Öfds=0x%x,Çfds=%d,Åimeout=%d\n",

2576 
pfds
, 
nfds
, 
timeout
);

2577 i‡(
nfds
 != 1)

2578 
	`Áèl
("syscallÖoll:Çot suported forÇfds != 1");

2579 
	`as£π
( (
sim_pﬁlfd
) == 8);

2580 
	`as£π
(
POLLIN
 =1 && 
POLLOUT
 == 4);

2583 
	`mem_ªad
(
iß_mem
, 
pfds
,  (
sim_pﬁlfd
), &
gue°_fds
);

2584 
gue°_fd
 = 
gue°_fds
.
fd
;

2585 
	`m≠_Êags
(&
pﬁl_evít_m≠
, 
gue°_fds
.
evíts
, 
£víts
, 
MAX_STRING_SIZE
);

2586 
	`sysˇŒ_debug
(" gue°_fd=%d,Évíts=%s\n", 
gue°_fd
, 
£víts
);

2589 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

2590 i‡(!
fd
) {

2591 
ªtvÆ
 = -
EBADF
;

2594 
ho°_fd
 = 
fd
->host_fd;

2595 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

2598 i‡(
gue°_fds
.
evíts
 & ~0x5)

2599 
	`Áèl
("syscallÖoll: only POLLINánd POLLOUTÉvents supported");

2602 i‡(
fd
->
ho°_fd
 < 0)

2603 
	`Áèl
("syscall 'poll':Çot supported file descriptor");

2607 
ho°_fds
.
fd
 = 
ho°_fd
;

2608 
ho°_fds
.
evíts
 = ((
gue°_fds
.evít†& 1Ë? 
POLLIN
 : 0) |

2609 ((
gue°_fds
.
evíts
 & 4Ë? 
POLLOUT
 : 0);

2610 
	`RETVAL
(
	`pﬁl
(&
ho°_fds
, 1, 0));

2611 i‡(
ªtvÆ
 < 0)

2616 i‡(
ªtvÆ
 > 0) {

2619 i‡(
gue°_fds
.
evíts
 & 
ho°_fds
.
ªvíts
 & 
POLLOUT
) {

2620 
	`sysˇŒ_debug
("Çon-blocking writeÅo file guaranteed\n");

2621 
gue°_fds
.
ªvíts
 = 
POLLOUT
;

2622 
	`mem_wrôe
(
iß_mem
, 
pfds
,  (
sim_pﬁlfd
), &
gue°_fds
);

2623 
ªtvÆ
 = 1;

2628 i‡(
gue°_fds
.
evíts
 & 
ho°_fds
.
ªvíts
 & 
POLLIN
) {

2629 
	`sysˇŒ_debug
("Çon-blockingÑead from file guaranteed\n");

2630 
gue°_fds
.
ªvíts
 = 
POLLIN
;

2631 
	`mem_wrôe
(
iß_mem
, 
pfds
,  (
sim_pﬁlfd
), &
gue°_fds
);

2632 
ªtvÆ
 = 1;

2637 
	`ab‹t
();

2642 
	`sysˇŒ_debug
("Örocess goingÅo sleep waiting forÉvents on file\n");

2643 
iß_˘x
->
wakeup_time
 = 0;

2644 i‡(
timeout
 >= 0)

2645 
iß_˘x
->
wakeup_time
 = 
	`ke_timî
(Ë+ (
uöt64_t
Ë
timeout
 * 1000;

2646 
iß_˘x
->
wakeup_fd
 = 
gue°_fd
;

2647 
iß_˘x
->
wakeup_evíts
 = 
gue°_fds
.
evíts
;

2648 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_pﬁl
);

2649 
	`ke_¥o˚ss_evíts_scheduÀ
();

2655 
sysˇŒ_code_π_siga˘i⁄
:

2657 
uöt32_t
 
sig
, 
∑˘
, 
pﬂ˘
, 
sig£tsize
;

2658 
sim_siga˘i⁄
 
a˘
;

2660 
sig
 = 
iß_ªgs
->
ebx
;

2661 
∑˘
 = 
iß_ªgs
->
ecx
;

2662 
pﬂ˘
 = 
iß_ªgs
->
edx
;

2663 
sig£tsize
 = 
iß_ªgs
->
esi
;

2664 
	`sysˇŒ_debug
(" sig=%d,Öact=0x%x,Öoact=0x%x, sigsetsize=0x%x\n",

2665 
sig
, 
∑˘
, 
pﬂ˘
, 
sig£tsize
);

2666 
	`sysˇŒ_debug
(" sig«l=%s\n", 
	`sim_sig«l_«me
(
sig
));

2669 i‡(
sig
 < 1 || sig > 64)

2670 
	`Áèl
("sysˇŒÑt_siga˘i⁄: invÆid sig«»(%d)", 
sig
);

2673 i‡(
∑˘
) {

2674 
	`mem_ªad
(
iß_mem
, 
∑˘
,  (
a˘
), &act);

2675 i‡(
	`debug_°©us
(
sysˇŒ_debug_ˇãg‹y
)) {

2676 
FILE
 *
f
 = 
	`debug_fûe
(
sysˇŒ_debug_ˇãg‹y
);

2677 
	`sysˇŒ_debug
("áct: ");

2678 
	`sim_siga˘i⁄_dump
(&
a˘
, 
f
);

2679 
	`sysˇŒ_debug
("\n flags: ");

2680 
	`sim_siga˘i⁄_Êags_dump
(
a˘
.
Êags
, 
f
);

2681 
	`sysˇŒ_debug
("\n mask: ");

2682 
	`sim_sig£t_dump
(
a˘
.
mask
, 
f
);

2683 
	`sysˇŒ_debug
("\n");

2688 i‡(
pﬂ˘
) {

2689 
	`mem_wrôe
(
iß_mem
, 
pﬂ˘
,  (
sim_siga˘i⁄
),

2690 &
iß_˘x
->
sig«l_h™dÀrs
->
siga˘i⁄
[
sig
 - 1]);

2694 i‡(
∑˘
)

2695 
iß_˘x
->
sig«l_h™dÀrs
->
siga˘i⁄
[
sig
 - 1] = 
a˘
;

2702 
sysˇŒ_code_π_sig¥ocmask
:

2704 
uöt32_t
 
how
, 
p£t
, 
po£t
, 
sig£tsize
;

2705 
uöt64_t
 
£t
, 
o£t
;

2707 
how
 = 
iß_ªgs
->
ebx
;

2708 
p£t
 = 
iß_ªgs
->
ecx
;

2709 
po£t
 = 
iß_ªgs
->
edx
;

2710 
sig£tsize
 = 
iß_ªgs
->
esi
;

2711 
	`sysˇŒ_debug
(" how=0x%x,Öset=0x%x,Öoset=0x%x, sigsetsize=0x%x\n",

2712 
how
, 
p£t
, 
po£t
, 
sig£tsize
);

2713 
	`sysˇŒ_debug
(" how=%s\n", 
	`m≠_vÆue
(&
sig¥ocmask_how_m≠
, 
how
));

2716 
o£t
 = 
iß_˘x
->
sig«l_masks
->
blocked
;

2719 i‡(
p£t
) {

2722 
	`mem_ªad
(
iß_mem
, 
p£t
, 8, &
£t
);

2723 i‡(
	`debug_°©us
(
sysˇŒ_debug_ˇãg‹y
)) {

2724 
	`sysˇŒ_debug
(" së=0x%Œx ", (Ë
£t
);

2725 
	`sim_sig£t_dump
(
£t
, 
	`debug_fûe
(
sysˇŒ_debug_ˇãg‹y
));

2726 
	`sysˇŒ_debug
("\n");

2730 
how
) {

2732 
iß_˘x
->
sig«l_masks
->
blocked
 |
£t
;

2735 
iß_˘x
->
sig«l_masks
->
blocked
 &~
£t
;

2738 
iß_˘x
->
sig«l_masks
->
blocked
 = 
£t
;

2741 
	`Áèl
("syscallÑt_sigprocmask: wrong how value");

2746 i‡(
po£t
)

2747 
	`mem_wrôe
(
iß_mem
, 
po£t
, 8, &
o£t
);

2751 
	`ke_¥o˚ss_evíts_scheduÀ
();

2752 
	`ke_¥o˚ss_evíts
();

2759 
sysˇŒ_code_π_sigsu•íd
:

2761 
uöt32_t
 
≤ew£t
, 
sig£tsize
;

2762 
uöt64_t
 
√w£t
;

2764 
≤ew£t
 = 
iß_ªgs
->
ebx
;

2765 
sig£tsize
 = 
iß_ªgs
->
ecx
;

2766 
	`sysˇŒ_debug
("Önewset=0x%x, sigsetsize=0x%x\n",

2767 
≤ew£t
, 
sig£tsize
);

2770 
	`mem_ªad
(
iß_mem
, 
≤ew£t
, 8, &
√w£t
);

2771 i‡(
	`debug_°©us
(
sysˇŒ_debug_ˇãg‹y
)) {

2772 
FILE
 *
f
 = 
	`debug_fûe
(
sysˇŒ_debug_ˇãg‹y
);

2773 
	`sysˇŒ_debug
(" old mask: ");

2774 
	`sim_sig£t_dump
(
iß_˘x
->
sig«l_masks
->
blocked
, 
f
);

2775 
	`sysˇŒ_debug
("\nÇew mask: ");

2776 
	`sim_sig£t_dump
(
√w£t
, 
f
);

2777 
	`sysˇŒ_debug
("\nÖending: ");

2778 
	`sim_sig£t_dump
(
iß_˘x
->
sig«l_masks
->
≥ndög
, 
f
);

2779 
	`sysˇŒ_debug
("\n");

2783 
iß_˘x
->
sig«l_masks
->
backup
 = iß_˘x->sig«l_masks->
blocked
;

2784 
iß_˘x
->
sig«l_masks
->
blocked
 = 
√w£t
;

2785 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_sigsu•íd
);

2788 
	`ke_¥o˚ss_evíts_scheduÀ
();

2789 
	`ke_¥o˚ss_evíts
();

2795 
sysˇŒ_code_gëcwd
:

2797 
uöt32_t
 
pbuf
, 
size
, 
Àn
;

2798 *
cwd
;

2800 
pbuf
 = 
iß_ªgs
->
ebx
;

2801 
size
 = 
iß_ªgs
->
ecx
;

2802 
	`sysˇŒ_debug
("Öbuf=0x%x, size=0x%x\n", 
pbuf
, 
size
);

2804 
cwd
 = 
iß_˘x
->
lﬂdî
->cwd;

2805 
Àn
 = 
	`°æí
(
cwd
);

2806 i‡(
size
 <
Àn
)

2807 
ªtvÆ
 = -
ERANGE
;

2809 
	`mem_wrôe_°rög
(
iß_mem
, 
pbuf
, 
cwd
);

2810 
ªtvÆ
 = 
Àn
 + 1;

2817 
sysˇŒ_code_gëæimô
:

2819 
uöt32_t
 
ªsour˚
, 
¥lim
;

2820 *
§esour˚
;

2821 
sim_æimô
 sim_rlimit;

2823 
ªsour˚
 = 
iß_ªgs
->
ebx
;

2824 
¥lim
 = 
iß_ªgs
->
ecx
;

2825 
§esour˚
 = 
	`m≠_vÆue
(&
æimô_ªsour˚_m≠
, 
ªsour˚
);

2826 
	`sysˇŒ_debug
("Ñesour˚=0x%x,Öæim=0x%x\n", 
ªsour˚
, 
¥lim
);

2827 
	`sysˇŒ_debug
("Ñesour˚=%s\n", 
§esour˚
);

2829 
ªsour˚
) {

2831 
sim_æimô
.
cur
 = 0xffffffff;

2832 
sim_æimô
.
max
 = 0xffffffff;

2835 
sim_æimô
.
cur
 = 
iß_˘x
->
lﬂdî
->
°ack_size
;

2836 
sim_æimô
.
max
 = 0xffffffff;

2839 
sim_æimô
.
cur
 = 0x400;

2840 
sim_æimô
.
max
 = 0x400;

2843 
	`Áèl
("gëæimô:ÇŸ im∂emíãd f‹Ñesour˚=%s", 
§esour˚
);

2846 
	`mem_wrôe
(
iß_mem
, 
¥lim
,  (
sim_æimô
), &sim_rlimit);

2847 
	`sysˇŒ_debug
("ÑëvÆ: cur=0x%x, max=0x%x\n", 
sim_æimô
.
cur
,

2848 
sim_æimô
.
max
);

2855 
sysˇŒ_code_mm≠2
:

2857 
uöt32_t
 
addr
, 
Àn
, 
¥Ÿ
;

2858 
uöt32_t
 
Êags
, 
off£t
;

2859 
gue°_fd
;

2860 
•rŸ
[
MAX_STRING_SIZE
], 
sÊags
[MAX_STRING_SIZE];

2863 
addr
 = 
iß_ªgs
->
ebx
;

2864 
Àn
 = 
iß_ªgs
->
ecx
;

2865 
¥Ÿ
 = 
iß_ªgs
->
edx
;

2866 
Êags
 = 
iß_ªgs
->
esi
;

2867 
gue°_fd
 = 
iß_ªgs
->
edi
;

2868 
off£t
 = 
iß_ªgs
->
ebp
;

2871 
	`sysˇŒ_debug
("áddr=0x%x,Üen=%u,Örot=0x%x, flags=0x%x, guest_fd=%d, offset=0x%x\n",

2872 
addr
, 
Àn
, 
¥Ÿ
, 
Êags
, 
gue°_fd
, 
off£t
);

2873 
	`m≠_Êags
(&
mm≠_¥Ÿ_m≠
, 
¥Ÿ
, 
•rŸ
, 
MAX_STRING_SIZE
);

2874 
	`m≠_Êags
(&
mm≠_Êags_m≠
, 
Êags
, 
sÊags
, 
MAX_STRING_SIZE
);

2875 
	`sysˇŒ_debug
("ÖrŸ=%s, fœgs=%s\n", 
•rŸ
, 
sÊags
);

2878 
ªtvÆ
 = 
	`do_mm≠
(
addr
, 
Àn
, 
¥Ÿ
, 
Êags
,

2879 
gue°_fd
, 
off£t
 << 
MEM_PAGESHIFT
);

2886 
sysˇŒ_code_·runˇã64
:

2888 
uöt32_t
 
fd
, 
Àngth
, 
ho°_fd
;

2890 
fd
 = 
iß_ªgs
->
ebx
;

2891 
Àngth
 = 
iß_ªgs
->
ecx
;

2892 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

2893 
	`sysˇŒ_debug
(" fd=%d,Üígth=0x%x\n", 
fd
, 
Àngth
);

2894 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

2896 
	`RETVAL
(
	`·runˇã
(
ho°_fd
, 
Àngth
));

2902 
sysˇŒ_code_°©64
:

2904 
uöt32_t
 
pfûíame
, 
p°©buf
;

2905 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

2906 
°©
 
°©buf
;

2907 
sim_°©64
 
sim_°©buf
;

2908 
Àngth
;

2910 
pfûíame
 = 
iß_ªgs
->
ebx
;

2911 
p°©buf
 = 
iß_ªgs
->
ecx
;

2912 
Àngth
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

2913 i‡(
Àngth
 >
MAX_PATH_SIZE
)

2914 
	`Áèl
("syscall stat64: maximumÖathÜengthÉxceeded");

2915 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

2916 
	`sysˇŒ_debug
("Öfilename=0x%x,Östatbuf=0x%x\n",

2917 
pfûíame
, 
p°©buf
);

2918 
	`sysˇŒ_debug
(" fûíame='%s', fuŒ∑th='%s'\n", 
fûíame
, 
fuŒ∑th
);

2920 
	`RETVAL
(
	`°©
(
fuŒ∑th
, &
°©buf
));

2921 i‡(!
ªtvÆ
) {

2922 
	`sysˇŒ_c›y_°©64
(&
sim_°©buf
, &
°©buf
);

2923 
	`mem_wrôe
(
iß_mem
, 
p°©buf
,  (
sim_°©buf
), &sim_statbuf);

2930 
sysˇŒ_code_l°©64
:

2932 
uöt32_t
 
pfûíame
, 
p°©buf
;

2933 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

2934 
Àngth
;

2935 
°©
 
°©buf
;

2936 
sim_°©64
 
sim_°©buf
;

2938 
pfûíame
 = 
iß_ªgs
->
ebx
;

2939 
p°©buf
 = 
iß_ªgs
->
ecx
;

2940 
Àngth
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

2941 i‡(
Àngth
 >
MAX_PATH_SIZE
)

2942 
	`Áèl
("syscallÜstat64: maximumÖathÜengthÉxceeded");

2943 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

2944 
	`sysˇŒ_debug
("Öfûíame=0x%x,Ö°©buf=0x%x\n", 
pfûíame
, 
p°©buf
);

2945 
	`sysˇŒ_debug
(" fûíame='%s', fuŒ∑th='%s'\n", 
fûíame
, 
fuŒ∑th
);

2947 
	`RETVAL
(
	`l°©
(
fuŒ∑th
, &
°©buf
));

2948 i‡(!
ªtvÆ
) {

2949 
	`sysˇŒ_c›y_°©64
(&
sim_°©buf
, &
°©buf
);

2950 
	`mem_wrôe
(
iß_mem
, 
p°©buf
,  (
sim_°©buf
), &sim_statbuf);

2957 
sysˇŒ_code_f°©64
:

2959 
uöt32_t
 
fd
, 
p°©buf
, 
ho°_fd
;

2960 
°©
 
°©buf
;

2961 
sim_°©64
 
sim_°©buf
;

2963 
fd
 = 
iß_ªgs
->
ebx
;

2964 
p°©buf
 = 
iß_ªgs
->
ecx
;

2965 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

2966 
	`sysˇŒ_debug
(" fd=%d,Ö°©buf=0x%x\n", 
fd
, 
p°©buf
);

2967 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

2969 
	`RETVAL
(
	`f°©
(
ho°_fd
, &
°©buf
));

2970 i‡(!
ªtvÆ
) {

2971 
	`sysˇŒ_c›y_°©64
(&
sim_°©buf
, &
°©buf
);

2972 
	`mem_wrôe
(
iß_mem
, 
p°©buf
,  (
sim_°©buf
), &sim_statbuf);

2979 
sysˇŒ_code_gëuid
:

2981 
	`RETVAL
(
	`gëuid
());

2987 
sysˇŒ_code_gëgid
:

2989 
	`RETVAL
(
	`gëgid
());

2995 
sysˇŒ_code_gëeuid
:

2997 
	`RETVAL
(
	`gëeuid
());

3003 
sysˇŒ_code_gëegid
:

3005 
	`RETVAL
(
	`gëegid
());

3011 
sysˇŒ_code_chown
:

3013 
fûíame
[
MAX_PATH_SIZE
], 
fuŒ∑th
[MAX_PATH_SIZE];

3014 
uöt32_t
 
pfûíame
, 
ow√r
, 
group
;

3015 
Àn
;

3017 
pfûíame
 = 
iß_ªgs
->
ebx
;

3018 
ow√r
 = 
iß_ªgs
->
ecx
;

3019 
group
 = 
iß_ªgs
->
edx
;

3020 
Àn
 = 
	`mem_ªad_°rög
(
iß_mem
, 
pfûíame
, 
MAX_PATH_SIZE
, 
fûíame
);

3021 i‡(
Àn
 >
MAX_PATH_SIZE
)

3022 
	`Áèl
("syscall chmod: maximumÖathÜengthÉxceeded");

3023 
	`ld_gë_fuŒ_∑th
(
iß_˘x
, 
fûíame
, 
fuŒ∑th
, 
MAX_PATH_SIZE
);

3024 
	`sysˇŒ_debug
("Öfûíame=0x%x, ow√r=%d, group=%d\n", 
pfûíame
, 
ow√r
, 
group
);

3025 
	`sysˇŒ_debug
(" fûíame='%s', fuŒ∑th='%s'\n", 
fûíame
, 
fuŒ∑th
);

3026 
	`RETVAL
(
	`chown
(
fuŒ∑th
, 
ow√r
, 
group
));

3032 
sysˇŒ_code_madvi£
:

3034 
uöt32_t
 
°¨t
, 
Àn
, 
advi˚
;

3036 
°¨t
 = 
iß_ªgs
->
ebx
;

3037 
Àn
 = 
iß_ªgs
->
ecx
;

3038 
advi˚
 = 
iß_ªgs
->
edx
;

3039 
	`sysˇŒ_debug
(" start=0x%x,Üen=%d,ádvice=%d\n",

3040 
°¨t
, 
Àn
, 
advi˚
);

3046 
sysˇŒ_code_gëdíts64
:

3048 
uöt32_t
 
fd
, 
pdúít
, 
cou¡
, 
ho°_fd
;

3049 *
buf
;

3050 
ƒód
, 
ho°_offs
, 
gue°_offs
;

3052 
	slöux_dúít
 {

3053 
d_öo
;

3054 
off_t
 
d_off
;

3055 
d_ª˛í
;

3056 
d_«me
[];

3057 } *
dúít
;

3059 
	ssim_löux_dúít64
 {

3060 
uöt64_t
 
d_öo
;

3061 
öt64_t
 
d_off
;

3062 
uöt16_t
 
d_ª˛í
;

3063 
d_ty≥
;

3064 
d_«me
[];

3065 } 
	`__©åibuã__
((
∑cked
)Ë
sim_dúít
;

3068 
fd
 = 
iß_ªgs
->
ebx
;

3069 
pdúít
 = 
iß_ªgs
->
ecx
;

3070 
cou¡
 = 
iß_ªgs
->
edx
;

3071 
ho°_fd
 = 
	`fdt_gë_ho°_fd
(
iß_˘x
->
fdt
, 
fd
);

3072 
	`sysˇŒ_debug
(" fd=%d,Ödirent=0x%x, count=%d\n",

3073 
fd
, 
pdúít
, 
cou¡
);

3074 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
ho°_fd
);

3077 
buf
 = 
	`ˇŒoc
(1, 
cou¡
);

3078 i‡(!
buf
)

3079 
	`Áèl
("getdents: cannotállocate buffer");

3080 
ƒód
 = 
	`sysˇŒ
(
SYS_gëdíts
, 
ho°_fd
, 
buf
, 
cou¡
);

3083 i‡(
ƒód
 < 0)

3084 
	`Áèl
("getdents: callÅo host system callÑeturnedÉrror");

3085 i‡(!
ƒód
) {

3086 
ªtvÆ
 = 0;

3091 
ho°_offs
 = 0;

3092 
gue°_offs
 = 0;

3093 
ho°_offs
 < 
ƒód
) {

3094 
dúít
 = (
löux_dúít
 *Ë(
buf
 + 
ho°_offs
);

3095 
sim_dúít
.
d_öo
 = 
dúít
->d_ino;

3096 
sim_dúít
.
d_off
 = 
dúít
->d_off;

3097 
sim_dúít
.
d_ª˛í
 = (27 + 
	`°æí
(
dúít
->
d_«me
)) / 8 * 8;

3098 
sim_dúít
.
d_ty≥
 = *(*Ë(
buf
 + 
ho°_offs
 + 
dúít
->
d_ª˛í
 - 1);

3100 
	`sysˇŒ_debug
(" d_öo=%Œd ", (Ë
sim_dúít
.
d_öo
);

3101 
	`sysˇŒ_debug
("d_off=%Œd ", (Ë
sim_dúít
.
d_off
);

3102 
	`sysˇŒ_debug
("d_ª˛í=%u(ho°),%u(gue°Ë", 
dúít
->
d_ª˛í
, 
sim_dúít
.d_reclen);

3103 
	`sysˇŒ_debug
("d_«me='%s'\n", 
dúít
->
d_«me
);

3105 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
, 8, &
sim_dúít
.
d_öo
);

3106 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 8, 8, &
sim_dúít
.
d_off
);

3107 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 16, 2, &
sim_dúít
.
d_ª˛í
);

3108 
	`mem_wrôe
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 18, 1, &
sim_dúít
.
d_ty≥
);

3109 
	`mem_wrôe_°rög
(
iß_mem
, 
pdúít
 + 
gue°_offs
 + 19, 
dúít
->
d_«me
);

3111 
ho°_offs
 +
dúít
->
d_ª˛í
;

3112 
gue°_offs
 +
sim_dúít
.
d_ª˛í
;

3113 i‡(
gue°_offs
 > 
cou¡
)

3114 
	`Áèl
("getdents: host bufferÅoo small");

3116 
	`sysˇŒ_debug
("Ñë=%d(ho°),%d(gue°)\n", 
ho°_offs
, 
gue°_offs
);

3117 
	`‰ì
(
buf
);

3118 
ªtvÆ
 = 
gue°_offs
;

3125 
sysˇŒ_code_f˙é64
:

3127 
uöt32_t
 
gue°_fd
, 
cmd
, 
¨g
;

3128 *
cmd_«me
;

3129 
sÊags
[
MAX_STRING_SIZE
];

3130 
fd_t
 *
fd
;

3132 
gue°_fd
 = 
iß_ªgs
->
ebx
;

3133 
cmd
 = 
iß_ªgs
->
ecx
;

3134 
¨g
 = 
iß_ªgs
->
edx
;

3135 
	`sysˇŒ_debug
(" guest_fd=%d, cmd=%d,árg=0x%x\n",

3136 
gue°_fd
, 
cmd
, 
¨g
);

3137 
cmd_«me
 = 
	`m≠_vÆue
(&
f˙é_cmd_m≠
, 
cmd
);

3138 
	`sysˇŒ_debug
(" cmd=%s\n", 
cmd_«me
);

3141 
fd
 = 
	`fdt_íåy_gë
(
iß_˘x
->
fdt
, 
gue°_fd
);

3142 i‡(!
fd
) {

3143 
ªtvÆ
 = -
EBADF
;

3146 i‡(
fd
->
ho°_fd
 < 0)

3147 
	`Áèl
("syscall 'fcntl64':Çot suported forÅhisÅype of files");

3148 
	`sysˇŒ_debug
(" ho°_fd=%d\n", 
fd
->
ho°_fd
);

3151 
cmd
) {

3154 
	`RETVAL
(
	`f˙é
(
fd
->
ho°_fd
, 
F_GETFD
));

3158 
	`RETVAL
(
	`f˙é
(
fd
->
ho°_fd
, 
F_SETFD
, 
¨g
));

3162 
	`RETVAL
(
	`f˙é
(
fd
->
ho°_fd
, 
F_GETFL
));

3163 
	`m≠_Êags
(&
›í_Êags_m≠
, 
ªtvÆ
, 
sÊags
, 
MAX_STRING_SIZE
);

3164 
	`sysˇŒ_debug
("ÑëvÆ=%s\n", 
sÊags
);

3168 
	`m≠_Êags
(&
›í_Êags_m≠
, 
¨g
, 
sÊags
, 
MAX_STRING_SIZE
);

3169 
	`sysˇŒ_debug
("árg=%s\n", 
sÊags
);

3170 
fd
->
Êags
 = 
¨g
;

3171 
	`RETVAL
(
	`f˙é
(
fd
->
ho°_fd
, 
F_SETFL
, 
¨g
));

3175 
	`Áèl
("sysˇŒ f˙é64: comm™d %†nŸ im∂emíãd", 
cmd_«me
);

3182 
sysˇŒ_code_gëtid
:

3187 
ªtvÆ
 = 
iß_˘x
->
pid
;

3195 
sysˇŒ_code_fuãx
:

3197 
uöt32_t
 
addr1
, 
›
, 
vÆ1
, 
±imeout
, 
addr2
, 
vÆ3
;

3198 
uöt32_t
 
timeout_£c
, 
timeout_u£c
;

3199 
uöt32_t
 
fuãx
, 
cmd
, 
bô£t
;

3201 
addr1
 = 
iß_ªgs
->
ebx
;

3202 
›
 = 
iß_ªgs
->
ecx
;

3203 
vÆ1
 = 
iß_ªgs
->
edx
;

3204 
±imeout
 = 
iß_ªgs
->
esi
;

3205 
addr2
 = 
iß_ªgs
->
edi
;

3206 
vÆ3
 = 
iß_ªgs
->
ebp
;

3207 
	`sysˇŒ_debug
("áddr1=0x%x, op=%d, val1=%d,Ötimeout=0x%x,áddr2=0x%x, val3=%d\n",

3208 
addr1
, 
›
, 
vÆ1
, 
±imeout
, 
addr2
, 
vÆ3
);

3213 
cmd
 = 
›
 & ~(256 | 128);

3214 
	`mem_ªad
(
iß_mem
, 
addr1
, 4, &
fuãx
);

3215 
	`sysˇŒ_debug
(" futex=%d, cmd=%d (%s)\n",

3216 
fuãx
, 
cmd
, 
	`m≠_vÆue
(&
fuãx_cmd_m≠
, cmd));

3218 
cmd
) {

3224 
bô£t
 = 
cmd
 =9 ? 
vÆ3
 : 0xffffffff;

3228 i‡(
fuãx
 !
vÆ1
) {

3229 
ªtvÆ
 = -11;

3234 i‡(
±imeout
) {

3235 
	`Áèl
("syscall futex: FUTEX_WAITÇot supported withÅimeout");

3236 
	`mem_ªad
(
iß_mem
, 
±imeout
, 4, &
timeout_£c
);

3237 
	`mem_ªad
(
iß_mem
, 
±imeout
 + 4, 4, &
timeout_u£c
);

3238 
	`sysˇŒ_debug
("Åimeout={sec %d, usec %d}\n",

3239 
timeout_£c
, 
timeout_u£c
);

3241 
timeout_£c
 = 0;

3242 
timeout_u£c
 = 0;

3246 
iß_˘x
->
wakeup_fuãx
 = 
addr1
;

3247 
iß_˘x
->
wakeup_fuãx_bô£t
 = 
bô£t
;

3248 
iß_˘x
->
wakeup_fuãx_¶ìp
 = ++
ke
->
fuãx_¶ìp_cou¡
;

3249 
	`˘x_£t_°©us
(
iß_˘x
, 
˘x_su•íded
 | 
˘x_fuãx
);

3256 
bô£t
 = 
cmd
 =10 ? 
vÆ3
 : 0xffffffff;

3257 
ªtvÆ
 = 
	`˘x_fuãx_wake
(
iß_˘x
, 
addr1
, 
vÆ1
, 
bô£t
);

3258 
	`sysˇŒ_debug
(" fuãxáà0x%x: %dÖro˚s£†wokí up\n", 
addr1
, 
ªtvÆ
);

3263 
ªqueued
 = 0;

3264 
˘x_t
 *
˘x
;

3267 i‡(
±imeout
 != 0x7fffffff)

3268 
	`Áèl
("syscall futex, cmd=FUTEX_CMP_REQUEUE: only supported forÖtimeout=INTMAX");

3272 i‡(
fuãx
 !
vÆ3
) {

3273 
ªtvÆ
 = -11;

3279 
ªtvÆ
 = 
	`˘x_fuãx_wake
(
iß_˘x
, 
addr1
, 
vÆ1
, 0xffffffff);

3280 
	`sysˇŒ_debug
(" fuãxáà0x%x: %dÖro˚s£†wokí up\n", 
addr1
, 
ªtvÆ
);

3283 
˘x
 = 
ke
->
su•íded_li°_hód
; ctx; ctx = ctx->
su•íded_√xt
) {

3284 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_fuãx
Ë&& ctx->
wakeup_fuãx
 =
addr1
) {

3285 
˘x
->
wakeup_fuãx
 = 
addr2
;

3286 
ªqueued
++;

3289 
	`sysˇŒ_debug
(" futexát 0x%x: %dÖrocessesÑequeuedÅo futex 0x%x\n",

3290 
addr1
, 
ªqueued
, 
addr2
);

3296 
öt32_t
 
›
, 
›¨g
, 
cmp
, 
cm∑rg
;

3297 
öt32_t
 
vÆ2
 = 
±imeout
;

3298 
öt32_t
 
ﬁdvÆ
, 
√wvÆ
 = 0, 
c⁄d
 = 0;

3300 
›
 = (
vÆ3
 >> 28) & 0xf;

3301 
cmp
 = (
vÆ3
 >> 24) & 0xf;

3302 
›¨g
 = (
vÆ3
 >> 12) & 0xfff;

3303 
cm∑rg
 = 
vÆ3
 & 0xfff;

3305 
	`mem_ªad
(
iß_mem
, 
addr2
, 4, &
ﬁdvÆ
);

3306 
›
) {

3307 0: 
√wvÆ
 = 
›¨g
;

3309 1: 
√wvÆ
 = 
ﬁdvÆ
 + 
›¨g
;

3311 2: 
√wvÆ
 = 
ﬁdvÆ
 | 
›¨g
;

3313 3: 
√wvÆ
 = 
ﬁdvÆ
 & 
›¨g
;

3315 4: 
√wvÆ
 = 
ﬁdvÆ
 ^ 
›¨g
;

3317 : 
	`Áèl
("FUTEX_WAKE_OP: invalid operation");

3319 
	`mem_wrôe
(
iß_mem
, 
addr2
, 4, &
√wvÆ
);

3321 
ªtvÆ
 = 
	`˘x_fuãx_wake
(
iß_˘x
, 
addr1
, 
vÆ1
, 0xffffffff);

3323 
cmp
) {

3324 0: 
c⁄d
 = 
ﬁdvÆ
 =
cm∑rg
;

3326 1: 
c⁄d
 = 
ﬁdvÆ
 !
cm∑rg
;

3328 2: 
c⁄d
 = 
ﬁdvÆ
 < 
cm∑rg
;

3330 3: 
c⁄d
 = 
ﬁdvÆ
 <
cm∑rg
;

3332 4: 
c⁄d
 = 
ﬁdvÆ
 > 
cm∑rg
;

3334 5: 
c⁄d
 = 
ﬁdvÆ
 >
cm∑rg
;

3336 : 
	`Áèl
("FUTEX_WAKE_OP: invalid condition");

3338 i‡(
c⁄d
)

3339 
ªtvÆ
 +
	`˘x_fuãx_wake
(
iß_˘x
, 
addr2
, 
vÆ2
, 0xffffffff);

3346 
	`Áèl
("syscall futex:Çot implemented for cmd=%d (%s)",

3347 
cmd
, 
	`m≠_vÆue
(&
fuãx_cmd_m≠
, cmd));

3354 
sysˇŒ_code_sched_£èfföôy
:

3356 
uöt32_t
 
pid
, 
Àn
, 
pmask
;

3357 
uöt32_t
 
num_¥ocs
 = 4;

3358 
uöt32_t
 
mask
;

3360 
pid
 = 
iß_ªgs
->
ebx
;

3361 
Àn
 = 
iß_ªgs
->
ecx
;

3362 
pmask
 = 
iß_ªgs
->
edx
;

3364 
	`mem_ªad
(
iß_mem
, 
pmask
, 4, &
mask
);

3365 
	`sysˇŒ_debug
("Öid=%d,Üí=%d,Ömask=0x%x\n", 
pid
, 
Àn
, 
pmask
);

3366 
	`sysˇŒ_debug
(" mask=0x%x\n", 
mask
);

3369 
ªtvÆ
 = 
num_¥ocs
;

3375 
sysˇŒ_code_sched_gëafföôy
:

3377 
uöt32_t
 
pid
, 
Àn
, 
pmask
;

3378 
uöt32_t
 
num_¥ocs
 = 4;

3379 
uöt32_t
 
mask
 = (1 << 
num_¥ocs
) - 1;

3381 
pid
 = 
iß_ªgs
->
ebx
;

3382 
Àn
 = 
iß_ªgs
->
ecx
;

3383 
pmask
 = 
iß_ªgs
->
edx
;

3384 
	`sysˇŒ_debug
("Öid=%d,Üí=%d,Ömask=0x%x\n", 
pid
, 
Àn
, 
pmask
);

3389 
	`mem_wrôe
(
iß_mem
, 
pmask
, 4, &
mask
);

3390 
ªtvÆ
 = 
num_¥ocs
;

3396 
sysˇŒ_code_£t_thªad_¨ó
:

3398 
uöt32_t
 
puöfo
;

3399 
sim_u£r_desc
 
uöfo
;

3401 
puöfo
 = 
iß_ªgs
->
ebx
;

3402 
	`sysˇŒ_debug
("Öuöfo=0x%x\n", 
puöfo
);

3404 
	`mem_ªad
(
iß_mem
, 
puöfo
,  (
sim_u£r_desc
), &
uöfo
);

3405 
	`sysˇŒ_debug
("Éntry_number=0x%x, base_addr=0x%x,Üimit=0x%x\n",

3406 
uöfo
.
íåy_numbî
, uöfo.
ba£_addr
, uöfo.
limô
);

3407 
	`sysˇŒ_debug
(" seg_32bit=0x%x, contents=0x%x,Ñead_exec_only=0x%x\n",

3408 
uöfo
.
£g_32bô
, uöfo.
c⁄ã¡s
, uöfo.
ªad_exec_⁄ly
);

3409 
	`sysˇŒ_debug
("Üimit_in_pages=0x%x, seg_not_present=0x%x, useable=0x%x\n",

3410 
uöfo
.
limô_ö_∑ges
, uöfo.
£g_nŸ_¥e£¡
, uöfo.
u£abÀ
);

3411 i‡(!
uöfo
.
£g_32bô
)

3412 
	`Áèl
("syscall set_thread_area: only 32-bit segments supported");

3415 i‡(
uöfo
.
limô_ö_∑ges
)

3416 
uöfo
.
limô
 <<= 12;

3418 i‡(
uöfo
.
íåy_numbî
 =(
uöt32_t
) - 1) {

3419 i‡(
iß_˘x
->
glibc_£gmít_ba£
)

3420 
	`Áèl
("set_thread_area: glibc segmentálready set");

3421 
iß_˘x
->
glibc_£gmít_ba£
 = 
uöfo
.
ba£_addr
;

3422 
iß_˘x
->
glibc_£gmít_limô
 = 
uöfo
.
limô
;

3423 
uöfo
.
íåy_numbî
 = 6;

3424 
	`mem_wrôe
(
iß_mem
, 
puöfo
, 4, &
uöfo
.
íåy_numbî
);

3426 i‡(
uöfo
.
íåy_numbî
 != 6)

3427 
	`Áèl
("set_thread_area:ÉrroneousÉntry_number field");

3428 i‡(!
iß_˘x
->
glibc_£gmít_ba£
)

3429 
	`Áèl
("set_thread_area: glibc segment wasÇot set");

3430 
iß_˘x
->
glibc_£gmít_ba£
 = 
uöfo
.
ba£_addr
;

3431 
iß_˘x
->
glibc_£gmít_limô
 = 
uöfo
.
limô
;

3439 
sysˇŒ_code_Ádvi£64
:

3441 
uöt32_t
 
fd
;

3442 
uöt32_t
 
off_hi
, 
off_lo
;

3443 
uöt32_t
 
Àn
, 
advi˚
;

3445 
fd
 = 
iß_ªgs
->
ebx
;

3446 
off_lo
 = 
iß_ªgs
->
ecx
;

3447 
off_hi
 = 
iß_ªgs
->
edx
;

3448 
Àn
 = 
iß_ªgs
->
esi
;

3449 
advi˚
 = 
iß_ªgs
->
edi
;

3451 
	`sysˇŒ_debug
(" fd=%d, off={0x%x, 0x%x},Üen=%d,ádvice=%d\n",

3452 
fd
, 
off_hi
, 
off_lo
, 
Àn
, 
advi˚
);

3458 
sysˇŒ_code_exô_group
:

3460 
°©us
;

3462 
°©us
 = 
iß_ªgs
->
ebx
;

3463 
	`sysˇŒ_debug
(" sètus=0x%x\n", 
°©us
);

3465 
	`˘x_föish_group
(
iß_˘x
, 
°©us
);

3471 
sysˇŒ_code_£t_tid_addªss
:

3473 
uöt32_t
 
tid±r
;

3475 
tid±r
 = 
iß_ªgs
->
ebx
;

3476 
	`sysˇŒ_debug
("Åid±r=0x%x\n", 
tid±r
);

3478 
iß_˘x
->
˛ór_chûd_tid
 = 
tid±r
;

3479 
ªtvÆ
 = 
iß_˘x
->
pid
;

3485 
sysˇŒ_code_˛ock_gëªs
:

3487 
uöt32_t
 
˛k_id
, 
¥es
;

3488 
uöt32_t
 
tv_£c
, 
tv_n£c
;

3490 
˛k_id
 = 
iß_ªgs
->
ebx
;

3491 
¥es
 = 
iß_ªgs
->
ecx
;

3492 
	`sysˇŒ_debug
(" clk_id=%d\n", 
˛k_id
);

3493 
	`sysˇŒ_debug
("Öªs=0x%x\n", 
¥es
);

3495 
tv_£c
 = 0;

3496 
tv_n£c
 = 1;

3497 
	`mem_wrôe
(
iß_mem
, 
¥es
, 4, &
tv_£c
);

3498 
	`mem_wrôe
(
iß_mem
, 
¥es
 + 4, 4, &
tv_n£c
);

3504 
sysˇŒ_code_tgkûl
:

3506 
uöt32_t
 
tgid
, 
pid
, 
sig
;

3507 
˘x_t
 *
˘x
;

3509 
tgid
 = 
iß_ªgs
->
ebx
;

3510 
pid
 = 
iß_ªgs
->
ecx
;

3511 
sig
 = 
iß_ªgs
->
edx
;

3512 
	`sysˇŒ_debug
("Ågid=%d,Öid=%d, sig=%d (%s)\n",

3513 
tgid
, 
pid
, 
sig
, 
	`sim_sig«l_«me
(sig));

3516 i‡((Ë
tgid
 == -1)

3517 
	`Áèl
("syscall 'tgkill':Çot implemented forÅgid = -1");

3520 
˘x
 = 
	`˘x_gë
(
pid
);

3521 i‡(!
˘x
)

3522 
	`Áèl
("sysˇŒ 'tgkûl':Öid %d d€†nŸÉxi°", 
pid
);

3525 
	`sim_sig£t_add
(&
˘x
->
sig«l_masks
->
≥ndög
, 
sig
);

3526 
	`˘x_ho°_thªad_su•íd_ˇn˚l
(
˘x
);

3527 
	`ke_¥o˚ss_evíts_scheduÀ
();

3528 
	`ke_¥o˚ss_evíts
();

3534 
sysˇŒ_code_£t_robu°_li°
:

3536 
uöt32_t
 
hód
, 
Àn
;

3538 
hód
 = 
iß_ªgs
->
ebx
;

3539 
Àn
 = 
iß_ªgs
->
ecx
;

3540 
	`sysˇŒ_debug
(" hód=0x%x,Üí=%d\n", 
hód
, 
Àn
);

3541 i‡(
Àn
 != 12)

3542 
	`Áèl
("set_robust_list: only working forÜen = 12");

3543 
iß_˘x
->
robu°_li°_hód
 = 
hód
;

3550 
sysˇŒ_code_›í˛
:

3552 
uöt32_t
 
func_code
, 
∑rgs
;

3553 
uöt32_t
 
¨gs
[
OPENCL_MAX_ARGS
];

3554 
i
;

3555 *
func_«me
;

3556 
func_¨gc
;

3558 
func_code
 = 
iß_ªgs
->
ebx
;

3559 
∑rgs
 = 
iß_ªgs
->
ecx
;

3562 i‡(
func_code
 < 
OPENCL_FUNC_FIRST
 || func_codê> 
OPENCL_FUNC_LAST
)

3563 
	`Áèl
("syscall 'opencl': func_code out ofÑange");

3566 
func_«me
 = 
›í˛_func_«mes
[
func_code
 - 
OPENCL_FUNC_FIRST
];

3567 
func_¨gc
 = 
›í˛_func_¨gc
[
func_code
 - 
OPENCL_FUNC_FIRST
];

3568 
	`sysˇŒ_debug
(" func_code=%d (%s, %dárguments),Öargs=0x%x\n",

3569 
func_code
, 
func_«me
, 
func_¨gc
, 
∑rgs
);

3572 
	`as£π
(
func_¨gc
 <
OPENCL_MAX_ARGS
);

3573 
	`mem_ªad
(
iß_mem
, 
∑rgs
, 
func_¨gc
 * 4, 
¨gs
);

3574 
i
 = 0; i < 
func_¨gc
; i++)

3575 
	`sysˇŒ_debug
("árgs[%d] = %d (0x%x)\n",

3576 
i
, 
¨gs
[i],árgs[i]);

3579 
ªtvÆ
 = 
	`›í˛_func_run
(
func_code
, 
¨gs
);

3585 i‡(
syscode
 >
sysˇŒ_code_cou¡
) {

3586 
ªtvÆ
 = -38;

3588 
	`Áèl
("not implemented system call '%s' (code %d)át 0x%x\n%s",

3589 
syscode
 < 
sysˇŒ_code_cou¡
 ? 
sysˇŒ_«me
[syscode] : "",

3590 
syscode
, 
iß_ªgs
->
eù
, 
îr_sysˇŒ_nŸe
);

3596 i‡(
syscode
 !
sysˇŒ_code_sigªtu∫
 && !
	`˘x_gë_°©us
(
iß_˘x
, 
˘x_su•íded
))

3597 
iß_ªgs
->
óx
 = 
ªtvÆ
;

3598 
	}
}

	@libmhandle/mhandle.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<as£π.h
>

25 
	#HT_INITIAL_SIZE
 1000

	)

28 
	#END_MARK
 0xa5

	)

29 
	#START_MARK
 0x5a

	)

30 
	#CORRUPT_RANGE
 2

	)

31 
	#CORRUPT_TOTAL
 (2 * 
CORRUPT_RANGE
)

	)

34 
	sôem_t
 {

37 *
	m±r
;

38 
	msize
;

39 *
	m©
;

42 
	mªmoved
 : 1;

43 
	ma˘ive
 : 1;

47 
	göôülized
 = 0;

48 
	gmem_busy
 = 0;

51 
ôem_t
 *
	ght
;

52 
	ght_size
 = 0, 
	ght_cou¡
 = 0;

55 
ht_ö£π
(*
±r
, 
size
, *
©
);

56 
check_c‹ru±i⁄
(*
±r
, 
size
, *
©
);

59 
	$outofmem
(*
©
)

61 
	`Ârötf
(
°dîr
, "\nÁèl: %s: ouào‡mem‹y\n", 
©
);

62 
	`ab‹t
();

63 
	}
}

66 
	$öôülize
()

69 i‡(
öôülized
)

71 
öôülized
 = 1;

74 
ht
 = (
ôem_t
 *Ë
	`ˇŒoc
(
HT_INITIAL_SIZE
, (item_t));

75 
ht_size
 = 
HT_INITIAL_SIZE
;

76 
ht_cou¡
 = 0;

77 i‡(!
ht
)

78 
	`outofmem
("lib mhandle (initialize)");

79 
	}
}

82 
	$ht_grow
()

84 
ﬁd_size
, 
i
;

85 
ôem_t
 *
ﬁd_ht
;

88 
ﬁd_size
 = 
ht_size
;

89 
ﬁd_ht
 = 
ht
;

90 
ht_size
 = ht_size * 2;

91 
ht
 = (
ôem_t
 *Ë
	`ˇŒoc
(
ht_size
, (item_t));

92 i‡(!
ht
)

93 
	`outofmem
("lib mhandle (resizing hashÅable)");

96 
i
 = 0; i < 
ﬁd_size
; i++) {

97 i‡(
ﬁd_ht
[
i
].
a˘ive
 && !ﬁd_ht[i].
ªmoved
) {

98 
ht_cou¡
--;

99 
mem_busy
 -
ﬁd_ht
[
i
].
size
;

100 
	`ht_ö£π
(
ﬁd_ht
[
i
].
±r
, old_ht[i].
size
, old_ht[i].
©
);

103 
	`‰ì
(
ﬁd_ht
);

104 
	}
}

107 
	$ht_ö£π
(*
±r
, 
size
, *
©
)

109 
idx
;

112 i‡(
ht_cou¡
 >
ht_size
 / 2)

113 
	`ht_grow
();

116 
idx
 = (Ë
±r
 % 
ht_size
;

117 
ht
[
idx
].
a˘ive
 && !ht[idx].
ªmoved
)

118 
idx
 = (idx + 1Ë% 
ht_size
;

121 
ht
[
idx
].
±r
 =Ötr;

122 
ht
[
idx
].
size
 = size;

123 
ht
[
idx
].
©
 =át;

124 
ht
[
idx
].
a˘ive
 = 1;

125 
ht
[
idx
].
ªmoved
 = 0;

126 
mem_busy
 +
size
;

127 
ht_cou¡
++;

128 
	}
}

131 
	$ht_ªmove
(*
±r
, *
©
)

133 
idx
;

136 
idx
 = (Ë
±r
 % 
ht_size
;

137 
ht
[
idx
].
±r
 !±∏|| !ht[idx].
a˘ive
 || ht[idx].
ªmoved
) {

138 i‡(!
ht
[
idx
].
a˘ive
) {

139 
	`Ârötf
(
°dîr
, "\n%s: free: invalidÖointer %p\n",

140 
©
, 
±r
);

141 
	`ab‹t
();

143 
idx
 = (idx + 1Ë% 
ht_size
;

147 
	`check_c‹ru±i⁄
(
±r
, 
ht
[
idx
].
size
, 
©
);

150 
ht
[
idx
].
ªmoved
 = 1;

151 
mem_busy
 -
ht
[
idx
].
size
;

152 
ht_cou¡
--;

153  
ht
[
idx
].
size
;

154 
	}
}

157 
	$m¨k_c‹ru±i⁄
(*
±r
, 
size
)

159 
i
;

161 
i
 = 0; i < 
CORRUPT_RANGE
; i++)

162 ((*Ë
±r
)[
i
] = 
START_MARK
;

163 
i
 = 
CORRUPT_RANGE
 + 
size
; i < 
CORRUPT_TOTAL
 + size; i++)

164 ((*Ë
±r
)[
i
] = 
END_MARK
;

165 
	}
}

168 
	$check_c‹ru±i⁄
(*
±r
, 
size
, *
©
)

170 
i
;

171 
c‹ru±
 = 0, 
¥ev
, 
√xt
;

174 
i
 = 0; i < 
CORRUPT_RANGE
; i++)

175 i‡(((*Ë
±r
)[
i
] !
START_MARK
)

176 
c‹ru±
 = 1;

177 
i
 = 
CORRUPT_RANGE
 + 
size
; i < 
CORRUPT_TOTAL
 + size; i++)

178 i‡(((*Ë
±r
)[
i
] !
END_MARK
)

179 
c‹ru±
 = 2;

180 i‡(!
c‹ru±
)

184 
¥ev
 = 
√xt
 = -1;

185 
i
 = 0; i < 
ht_size
; i++) {

186 i‡(
ht
[
i
].
a˘ive
 && !ht[i].
ªmoved
) {

187 i‡(
ht
[
i
].
±r
 <Öå && (
¥ev
 == -1 || ht[i].ptr > ht[prev].ptr))

188 
¥ev
 = 
i
;

189 i‡(
ht
[
i
].
±r
 >Öå && (
√xt
 == -1 || ht[i].ptr < ht[next].ptr))

190 
√xt
 = 
i
;

195 
	`Ârötf
(
°dîr
, "\nfatal: %s: memory corrupted %s block (%p)\n",

196 
©
, 
c‹ru±
 =1 ? "bef‹e" : "a·î", 
±r
);

197 i‡(
¥ev
 >= 0)

198 
	`Ârötf
(
°dîr
, "\çªv block: %†(%p)\n", 
ht
[
¥ev
].
©
, ht[¥ev].
±r
);

199 i‡(
√xt
 >= 0)

200 
	`Ârötf
(
°dîr
, "\äexàblock: %†(%p)\n", 
ht
[
√xt
].
©
, ht[√xt].
±r
);

201 
	`ab‹t
();

202 
	}
}

210 
	$mh™dÀ_‰ì
(*
±r
, *
©
)

212 
size
;

215 i‡(!
±r
)

217 
	`öôülize
();

220 
±r
 -
CORRUPT_RANGE
;

221 
size
 = 
	`ht_ªmove
(
±r
, 
©
);

224 
	`bzîo
(
±r
, 
size
 + 
CORRUPT_TOTAL
);

225 
	`‰ì
(
±r
);

226 
	}
}

229 *
	$mh™dÀ_mÆloc
(
size
, *
©
)

231 *
±r
;

233 
	`öôülize
();

234 
±r
 = 
	`mÆloc
(
size
 + 
CORRUPT_TOTAL
);

235 i‡(!
±r
)

236 
	`outofmem
(
©
);

237 
	`m¨k_c‹ru±i⁄
(
±r
, 
size
);

238 
	`ht_ö£π
(
±r
, 
size
, 
©
);

240  
±r
 + 
CORRUPT_RANGE
;

241 
	}
}

244 *
	$mh™dÀ_ˇŒoc
(
nmemb
, 
size
, *
©
)

246 *
±r
;

247 
tŸÆ
 = 
nmemb
 * 
size
;

249 
	`öôülize
();

250 
±r
 = 
	`ˇŒoc
(1, 
tŸÆ
 + 
CORRUPT_TOTAL
);

251 i‡(!
±r
)

252 
	`outofmem
(
©
);

253 
	`m¨k_c‹ru±i⁄
(
±r
, 
tŸÆ
);

254 
	`ht_ö£π
(
±r
, 
tŸÆ
, 
©
);

256  
±r
 + 
CORRUPT_RANGE
;

257 
	}
}

260 *
	$mh™dÀ_ªÆloc
(*
±r
, 
size
, *
©
)

263 i‡(!
±r
)

264  
	`mh™dÀ_mÆloc
(
size
, 
©
);

265 i‡(!
size
) {

266 
	`mh™dÀ_‰ì
(
±r
, 
©
);

267  
NULL
;

271 
	`öôülize
();

272 
±r
 -
CORRUPT_RANGE
;

273 
	`ht_ªmove
(
±r
, 
©
);

274 
±r
 = 
	`ªÆloc
’å, 
size
 + 
CORRUPT_TOTAL
);

275 i‡(!
±r
)

276 
	`outofmem
(
©
);

277 
	`m¨k_c‹ru±i⁄
(
±r
, 
size
);

278 
	`ht_ö£π
(
±r
, 
size
, 
©
);

279  
±r
 + 
CORRUPT_RANGE
;

280 
	}
}

283 *
	$mh™dÀ_°rdup
(c⁄° *
s
, *
©
)

285 *
±r
;

286 
size
 = 
	`°æí
(
s
) + 1;

288 
	`öôülize
();

289 
±r
 = 
	`mÆloc
(
size
 + 
CORRUPT_TOTAL
);

290 i‡(!
±r
)

291 
	`outofmem
(
©
);

292 
	`mem˝y
(
±r
 + 
CORRUPT_RANGE
, 
s
, 
size
);

293 
	`m¨k_c‹ru±i⁄
(
±r
, 
size
);

294 
	`ht_ö£π
(
±r
, 
size
, 
©
);

296  
±r
 + 
CORRUPT_RANGE
;

297 
	}
}

300 
	$__mh™dÀ_d⁄e
()

302 
i
;

305 
i
 = 0; i < 
ht_size
; i++)

306 i‡(
ht
[
i
].
a˘ive
 && !ht[i].
ªmoved
)

307 
	`Ârötf
(
°dîr
, "\nw¨nög: %s:Öoöã∏nŸ fªed", 
ht
[
i
].
©
);

308 i‡(
ht_cou¡
)

309 
	`Ârötf
(
°dîr
, "\n** %dÖoöãr†nŸ fªed (%lu byãsË**\n", 
ht_cou¡
, 
mem_busy
);

311 
	`as£π
(!
mem_busy
);

314 
	`‰ì
(
ht
);

315 
öôülized
 = 0;

316 
mem_busy
 = 0;

317 
ht_cou¡
 = 
ht_size
 = 0;

318 
	}
}

321 
	$__mh™dÀ_check
(*
©
)

323 
i
, 
cou¡
 = 0;

326 
i
 = 0; i < 
ht_size
; i++) {

327 i‡(
ht
[
i
].
a˘ive
 && !ht[i].
ªmoved
) {

328 
	`check_c‹ru±i⁄
(
ht
[
i
].
±r
, ht[i].
size
, ht[i].
©
);

329 
cou¡
++;

332 
	`Ârötf
(
°dîr
, "libmh™dÀ: %dÖoöãr†checked f‹ c‹ru±i⁄\n", 
cou¡
);

334 
	}
}

337 
	$__mh™dÀ_u£d_mem‹y
()

339  
mem_busy
;

340 
	}
}

	@libmhandle/mhandle.h

20 #i‚de‡
MHANDLE_H


21 
	#MHANDLE_H


	)

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	#MHANDLE_STRINGIFY
(
x
Ë#x

	)

27 
	#MHANDLE_TOSTRING
(
x
Ë
	`MHANDLE_STRINGIFY
(x)

	)

28 
	#MHANDLE_AT
 
__FILE__
 ":" 
	`MHANDLE_TOSTRING
(
__LINE__
)

	)

30 #ifde‡
MHANDLE


32 #unde‡
°rdup


33 
	#‰ì
(
X
Ë(
	`mh™dÀ_‰ì
(X, 
MHANDLE_AT
))

	)

34 
	#mÆloc
(
X
Ë(
	`mh™dÀ_mÆloc
(X, 
MHANDLE_AT
))

	)

35 
	#ˇŒoc
(
X
, 
Y
Ë(
	`mh™dÀ_ˇŒoc
(X, Y, 
MHANDLE_AT
))

	)

36 
	#ªÆloc
(
X
, 
Y
Ë(
	`mh™dÀ_ªÆloc
(X, Y, 
MHANDLE_AT
))

	)

37 
	#°rdup
(
X
Ë(
	`mh™dÀ_°rdup
(X, 
MHANDLE_AT
))

	)

38 
	#mh™dÀ_check
(Ë
	`__mh™dÀ_check
(
MHANDLE_AT
)

	)

39 
	#mh™dÀ_d⁄e
(Ë
	`__mh™dÀ_d⁄e
()

	)

40 
	#mh™dÀ_u£d_mem‹y
(Ë
	`__mh™dÀ_u£d_mem‹y
()

	)

44 
	#mh™dÀ_check
()

	)

45 
	#mh™dÀ_d⁄e
()

	)

46 
	#mh™dÀ_u£d_mem‹y
(Ë(0UL)

	)

51 *
mh™dÀ_mÆloc
(
size
, *
©
);

52 *
mh™dÀ_ˇŒoc
(
nmemb
, 
size
, *
©
);

53 *
mh™dÀ_ªÆloc
(*
±r
, 
size
, *
©
);

54 *
mh™dÀ_°rdup
(c⁄° *
s
, *
©
);

55 
mh™dÀ_‰ì
(*
±r
, *
©
);

57 
__mh™dÀ_check
(*
©
);

58 
__mh™dÀ_d⁄e
();

59 
__mh™dÀ_u£d_mem‹y
();

	@libmisc/misc.c

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<time.h
>

25 
	~"misc.h
"

31 
	$log_ba£2
(
x
) {

32 
ªs
 = 0, 
vÆue
 = 
x
;

33 i‡(!
vÆue
)

34 
	`ab‹t
();

35 !(
vÆue
 & 1)) {

36 
vÆue
 >>= 1;

37 
ªs
++;

39 i‡(
vÆue
 != 1)

40 
	`ab‹t
();

41  
ªs
;

42 
	}
}

47 
FILE
 *
	$›í_ªad
(*
‚ame
)

49 i‡(!
‚ame
[0])

50  
NULL
;

51 i‡(!
	`°rcmp
(
‚ame
, "stdout"))

52  
°dout
;

53 i‡(!
	`°rcmp
(
‚ame
, "stderr"))

54  
°dîr
;

56  
	`f›í
(
‚ame
, "rt");

57 
	}
}

60 
	$ˇn_›í_ªad
(*
‚ame
)

62 
FILE
 *
f
;

63 i‡(!
‚ame
[0])

65 i‡(!
	`°rcmp
(
‚ame
, "stdout") || !strcmp(fname, "stderr"))

67 
f
 = 
	`f›í
(
‚ame
, "rt");

68 i‡(!
f
)

70 
	`f˛o£
(
f
);

72 
	}
}

75 
FILE
 *
	$›í_wrôe
(*
‚ame
)

77 i‡(!
‚ame
[0])

78  
NULL
;

79 i‡(!
	`°rcmp
(
‚ame
, "stdout"))

80  
°dout
;

81 i‡(!
	`°rcmp
(
‚ame
, "stderr"))

82  
°dîr
;

84  
	`f›í
(
‚ame
, "wt");

85 
	}
}

88 
	$ˇn_›í_wrôe
(*
‚ame
)

90 
FILE
 *
f
;

91 i‡(!
‚ame
[0])

93 i‡(!
	`°rcmp
(
‚ame
, "stdout") || !strcmp(fname, "stderr"))

95 
f
 = 
	`f›í
(
‚ame
, "wt");

96 i‡(!
f
)

98 
	`f˛o£
(
f
);

100 
	}
}

105 
	$ªad_löe
(
FILE
 *
f
, *
löe
, 
size
)

107 i‡(!
f
)

109 
löe
 = 
	`fgës
÷öe, 
size
, 
f
);

110 i‡(!
löe
 || 
	`„of
(
f
))

112 
	`°æí
(
löe
) && (line[strlen(line) - 1] == 13 ||

113 
löe
[
	`°æí
(line) - 1] == 10))

114 
löe
[
	`°æí
(line) - 1] = 0;

115  
	`°æí
(
löe
);

116 
	}
}

119 
	$˛o£_fûe
(
FILE
 *
f
)

121 i‡(
f
 && f !
°dout
 && f !
°dîr
)

122 
	`f˛o£
(
f
);

123 
	}
}

126 
FILE
 *
	$¸óã_ãmp_fûe
(*
ªt_∑th
, 
ªt_∑th_size
)

128 
∑th
[
MAX_STRING_SIZE
];

129 
FILE
 *
f
;

130 
fd
;

132 
	`°r˝y
(
∑th
, "/tmp/m2s.XXXXXX");

133 i‡((
fd
 = 
	`mk°emp
(
∑th
)Ë=-1 || (
f
 = 
	`fd›í
(fd, "w+")Ë=
NULL
)

134  
NULL
;

135 i‡(
ªt_∑th
)

136 
	`°∫˝y
(
ªt_∑th
, 
∑th
, 
ªt_∑th_size
);

137  
f
;

138 
	}
}

142 
	$dump_±r
(*
±r
, 
size
, 
FILE
 *
°ªam
)

144 
i
, 
j
, 
vÆ
;

145 
i
 = 0; i < 
size
; i++, 
±r
++) {

146 
j
 = 0; j < 2; j++) {

147 
vÆ
 = 
j
 ? *(*Ë
±r
 & 0xf :

148 *(*Ë
±r
 >> 4;

149 i‡(
vÆ
 < 10)

150 
	`Ârötf
(
°ªam
, "%d", 
vÆ
);

152 
	`Ârötf
(
°ªam
, "%c", 
vÆ
 - 10 + 'a');

154 
	`Ârötf
(
°ªam
, " ");

156 
	}
}

160 
	$dump_bö
(
x
, 
digôs
, 
FILE
 *
f
)

162 
i
;

163 
s
[33];

164 i‡(!
digôs
) {

165 
	`Ârötf
(
f
, "0");

168 
digôs
 = 
	`MAX
(
	`MIN
(digits, 32), 1);

169 
i
 = 0; i < 
digôs
; i++)

170 
s
[
i
] = 
x
 & (1 << (
digôs
 - i - 1)) ? '1' : '0';

171 
s
[
digôs
] = 0;

172 
	`Ârötf
(
f
, "%s", 
s
);

173 
	}
}

177 
	$m≠_°rög
(
°rög_m≠_t
 *
m≠
, *
°rög
)

179 
i
;

180 
i
 = 0; i < 
m≠
->
cou¡
; i++)

181 i‡(!
	`°rcmp
(
°rög
, 
m≠
->m≠[
i
].string))

182  
m≠
->m≠[
i
].
vÆue
;

184 
	}
}

188 
	$m≠_°rög_ˇ£
(
°rög_m≠_t
 *
m≠
, *
s
)

190 
i
;

191 
i
 = 0; i < 
m≠
->
cou¡
; i++)

192 i‡(!
	`°rˇ£cmp
(
s
, 
m≠
->m≠[
i
].
°rög
))

193  
m≠
->m≠[
i
].
vÆue
;

195 
	}
}

198 *
	gunknown
 = "<unknown>";

199 *
	$m≠_vÆue
(
°rög_m≠_t
 *
m≠
, 
vÆue
)

201 
i
;

202 
i
 = 0; i < 
m≠
->
cou¡
; i++)

203 i‡(
m≠
->m≠[
i
].
vÆue
 == value)

204  
m≠
->m≠[
i
].
°rög
;

205  
unknown
;

206 
	}
}

209 
	$m≠_vÆue_°rög
(
°rög_m≠_t
 *
m≠
, 
vÆue
, *
buf
, 
size
)

211 
i
;

212 
i
 = 0; i < 
m≠
->
cou¡
; i++) {

213 i‡(
m≠
->m≠[
i
].
vÆue
 == value) {

214 
	`¢¥ötf
(
buf
, 
size
, "%s", 
m≠
->m≠[
i
].
°rög
);

218 
	`¢¥ötf
(
buf
, 
size
, "%d", 
vÆue
);

219 
	}
}

222 
	$m≠_Êags
(
°rög_m≠_t
 *
m≠
, 
Êags
, *
out
, 
size
)

224 
i
;

225 *
comma
 = "", 
ãmp
[
size
];

227 
	`°rc˝y
(
out
, "{", 
size
);

228 
i
 = 0; i < 32; i++) {

229 i‡(
Êags
 & (1U << 
i
)) {

230 
	`°rcˇt
(
out
, 
comma
);

231 
	`m≠_vÆue_°rög
(
m≠
, 1U << 
i
, 
ãmp
, 
size
);

232 
	`°rcˇt
(
out
, 
ãmp
);

233 
comma
 = "|";

236 
	`°rcˇt
(
out
, "}");

237 
	}
}

242 
	gmem‹yÀ·
;

244 
	$°rcˇt
(*
de°
, *
§c
)

246 
de°Àn
 = 
	`°æí
(
de°
);

247 
§˛í
 = 
	`°æí
(
§c
);

248 i‡(
mem‹yÀ·
 <= 1)

250 
§˛í
 = 
	`MIN
(§˛í, 
mem‹yÀ·
 - 1);

251 
	`mem˝y
(
de°
 + 
de°Àn
, 
§c
, 
§˛í
);

252 
de°
[
de°Àn
 + 
§˛í
] = 0;

253 
mem‹yÀ·
 -
§˛í
;

254 
	}
}

257 
	$°rc˝y
(*
de°
, *
§c
, 
size
)

259 
§˛í
 = 
	`°æí
(
§c
);

260 
mem‹yÀ·
 = 
size
;

261 i‡(
mem‹yÀ·
 <= 1)

263 
§˛í
 = 
	`MIN
(§˛í, 
mem‹yÀ·
 - 1);

264 
	`mem˝y
(
de°
, 
§c
, 
§˛í
);

265 
de°
[
§˛í
] = 0;

266 
mem‹yÀ·
 -
§˛í
;

267 
	}
}

270 
	$°rdump
(*
de°
, *
§c
, 
size
)

272 
i
;

273 
i
 = 0; i < 
size
 - 1 && *
§c
; i++) {

274 *
de°
 = *
§c
 > 31 ? *src : '.';

275 
§c
++, 
de°
++;

277 *
de°
 = 0;

278 
	}
}

287 
	$wrôe_buf„r
(*
fûe_«me
, *
buf
, 
size
)

289 
FILE
 *
f
;

290 i‡(!(
f
 = 
	`f›í
(
fûe_«me
, "wb")))

292 
	`fwrôe
(
buf
, 
size
, 1, 
f
);

293 
	`f˛o£
(
f
);

295 
	}
}

298 *
	$ªad_buf„r
(*
fûe_«me
, *
psize
)

300 
FILE
 *
f
;

301 *
buf
;

302 
size
, 
Æloc_size
, 
ªad_size
;

304 
f
 = 
	`f›í
(
fûe_«me
, "rb");

305 i‡(!
f
)

306  
NULL
;

307 
	`f£ek
(
f
, 0, 
SEEK_END
);

308 
size
 = 
	`·ñl
(
f
);

309 
Æloc_size
 = 
size
 ? size : 1;

310 
	`f£ek
(
f
, 0, 
SEEK_SET
);

312 
buf
 = 
	`mÆloc
(
Æloc_size
);

313 i‡(!
buf
)

314  
NULL
;

315 
ªad_size
 = 
	`‰ód
(
buf
, 1, 
size
, 
f
);

316 i‡(
psize
)

317 *
psize
 = 
ªad_size
;

318  
buf
;

319 
	}
}

322 
	$‰ì_buf„r
(*
buf
)

324 
	`‰ì
(
buf
);

325 
	}
}

334 
	sbô_m≠_t


336 
	msize
;

337 
	mw‹d_cou¡
;

338 
	md©a
[0];

342 
bô_m≠_t
 *
	$bô_m≠_¸óã
(
size
)

344 
bô_m≠_t
 *
m≠
;

345 
w‹d_cou¡
;

347 
w‹d_cou¡
 = (
size
 + 31) / 32;

348 
m≠
 = 
	`ˇŒoc
(1, (
bô_m≠_t
Ë+ 
w‹d_cou¡
 * 4);

349 i‡(!
m≠
)

350  
NULL
;

351 
m≠
->
size
 = size;

352 
m≠
->
w‹d_cou¡
 = word_count;

353  
m≠
;

354 
	}
}

357 
	$bô_m≠_‰ì
(
bô_m≠_t
 *
bô_m≠
)

359 
	`‰ì
(
bô_m≠
);

360 
	}
}

365 
	$bô_m≠_£t
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
,

366 
vÆue
)

368 
whîe_Æign1
, 
whîe_w‹d1
, 
whîe_off£t1
, 
size_Æign1
;

369 
whîe_Æign2
, 
whîe_w‹d2
, 
whîe_off£t2
, 
size_Æign2
;

370 *
pw‹d1
, 
w‹d1_mask
, 
w‹d1_vÆue
;

371 *
pw‹d2
, 
w‹d2_mask
, 
w‹d2_vÆue
;

373 i‡(
size
 > 32)

374 
	`ab‹t
();

377 
whîe_Æign1
 = 
whîe
;

378 
whîe_w‹d1
 = 
whîe
 / 32;

379 
whîe_off£t1
 = 
whîe
 % 32;

380 
size_Æign1
 = 
	`MIN
(
size
, 32 - 
whîe_off£t1
);

381 i‡(
whîe_w‹d1
 >
bô_m≠
->
w‹d_cou¡
)

383 
pw‹d1
 = &
bô_m≠
->
d©a
[
whîe_w‹d1
];

386 i‡(
size
 =32 && !
whîe_off£t1
) {

387 *
pw‹d1
 = 
vÆue
;

392 
w‹d1_mask
 = ((1 << 
size_Æign1
Ë- 1Ë<< 
whîe_off£t1
;

393 
w‹d1_vÆue
 = (
vÆue
 << 
whîe_off£t1
Ë& 
w‹d1_mask
;

394 *
pw‹d1
 &~
w‹d1_mask
;

395 *
pw‹d1
 |
w‹d1_vÆue
;

398 i‡(
size_Æign1
 =
size
)

402 
whîe_w‹d2
 = 
whîe_w‹d1
 + 1;

403 
whîe_Æign2
 = 
whîe_w‹d2
 * 32;

404 
whîe_off£t2
 = 0;

405 
size_Æign2
 = 
size
 - 
size_Æign1
;

406 i‡(
whîe_w‹d2
 >
bô_m≠
->
w‹d_cou¡
)

408 
pw‹d2
 = &
bô_m≠
->
d©a
[
whîe_w‹d2
];

411 
w‹d2_mask
 = (1 << 
size_Æign2
) - 1;

412 
w‹d2_vÆue
 = (
vÆue
 >> 
size_Æign1
Ë& 
w‹d2_mask
;

413 *
pw‹d2
 &~
w‹d2_mask
;

414 *
pw‹d2
 |
w‹d2_vÆue
;

415 
	}
}

418 
	$bô_m≠_gë
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
)

420 
whîe_Æign1
, 
whîe_w‹d1
, 
whîe_off£t1
, 
size_Æign1
;

421 
whîe_Æign2
, 
whîe_w‹d2
, 
whîe_off£t2
, 
size_Æign2
;

422 
w‹d1
, 
w‹d1_mask
;

423 
w‹d2
, 
w‹d2_mask
;

424 
ªsu…
;

426 i‡(
size
 > 32)

427 
	`ab‹t
();

430 
whîe_Æign1
 = 
whîe
;

431 
whîe_w‹d1
 = 
whîe
 / 32;

432 
whîe_off£t1
 = 
whîe
 % 32;

433 
size_Æign1
 = 
	`MIN
(
size
, 32 - 
whîe_off£t1
);

434 
w‹d1
 = 
whîe_w‹d1
 < 
bô_m≠
->
w‹d_cou¡
 ? bô_m≠->
d©a
[where_word1] : 0;

437 i‡(
size
 =32 && !
whîe_off£t1
)

438  
w‹d1
;

441 
w‹d1_mask
 = ((1 << 
size_Æign1
Ë- 1Ë<< 
whîe_off£t1
;

442 
ªsu…
 = (
w‹d1
 & 
w‹d1_mask
Ë>> 
whîe_off£t1
;

445 i‡(
size_Æign1
 =
size
)

446  
ªsu…
;

449 
whîe_w‹d2
 = 
whîe_w‹d1
 + 1;

450 
whîe_Æign2
 = 
whîe_w‹d2
 * 32;

451 
whîe_off£t2
 = 0;

452 
size_Æign2
 = 
size
 - 
size_Æign1
;

453 
w‹d2
 = 
whîe_w‹d2
 < 
bô_m≠
->
w‹d_cou¡
 ? bô_m≠->
d©a
[
whîe_w‹d1
] : 0;

456 
w‹d2_mask
 = (1 << 
size_Æign2
) - 1;

457 
ªsu…
 |(
w‹d1
 & 
w‹d2_mask
Ë<< 
size_Æign1
;

458  
ªsu…
;

459 
	}
}

462 
	$bô_m≠_cou¡_⁄es
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
)

464 
i
;

465 
cou¡
 = 0;

467 
i
 = 0; i < 
size
; i++)

468 
cou¡
 +
	`bô_m≠_gë
(
bô_m≠
, 
whîe
 + 
i
, 1);

469  
cou¡
;

470 
	}
}

473 
	$bô_m≠_c›y
(
bô_m≠_t
 *
d°
, 
d°_whîe
,

474 
bô_m≠_t
 *
§c
, 
§c_whîe
, 
size
)

476 
cuºít_size
;

477 
w‹d
;

479 
size
) {

480 
cuºít_size
 = 
	`MIN
(
size
, 32);

481 
w‹d
 = 
	`bô_m≠_gë
(
§c
, 
§c_whîe
, 
cuºít_size
);

482 
	`bô_m≠_£t
(
d°
, 
d°_whîe
, 
cuºít_size
, 
w‹d
);

483 
size
 -
cuºít_size
;

484 
§c_whîe
 +
cuºít_size
;

485 
d°_whîe
 +
cuºít_size
;

487 
	}
}

490 
	$bô_m≠_dump
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
, 
FILE
 *
f
)

492 
i
;

493 
i
 = 0; i < 
size
; i++)

494 
	`Ârötf
(
f
, "%d", 
	`bô_m≠_gë
(
bô_m≠
, 
whîe
 + 
i
, 1));

495 
	}
}

	@libmisc/misc.h

20 #i‚de‡
MISC_H


21 
	#MISC_H


	)

23 
	~<°döt.h
>

24 
	~<°dlib.h
>

25 
	~<°d¨g.h
>

26 
	~<°dio.h
>

30 
	#MAX_STRING_SIZE
 200

	)

33 
	#MIN
(
X
, 
Y
Ë((X)<(Y)?(X):(Y))

	)

34 
	#MAX
(
X
, 
Y
Ë((X)>(Y)?(X):(Y))

	)

35 
	#BOOL
(
X
Ë((XË? 't' : 'f')

	)

36 
	#IN_RANGE
(
X
, 
X1
, 
X2
Ë((X)>=(X1)&&(X)<=(X2))

	)

39 
	#ROUND_UP
(
N
,
ALIGN
Ë(((NË+ ((ALIGN)-1)Ë& ~((ALIGN)-1))

	)

40 
	#ROUND_DOWN
(
N
,
ALIGN
Ë((NË& ~((ALIGN)-1))

	)

43 
	#DWORD_ALIGN
(
N
Ë
	`ROUND_DOWN
((N),8)

	)

44 
	#WORD_ALIGN
(
N
Ë
	`ROUND_DOWN
((N), 4)

	)

45 
	#HALF_ALIGN
(
N
Ë
	`ROUND_DOWN
((N), 2)

	)

48 
	#MOD
(
X
, 
Y
Ë(((XË+ (Y)Ë% (Y))

	)

51 
	#SWAPH
(
X
Ë(((((
hÆf
)(X)) & 0xff) << 8) | \

52 ((((
hÆf
)(
X
)Ë& 0xff00Ë>> 8))

	)

53 
	#SWAPW
(
X
Ë((((
uöt32_t
)(X)) << 24) | \

54 ((((
uöt32_t
)(
X
)) << 8) & 0x00ff0000) | \

55 ((((
uöt32_t
)(
X
)) >> 8) & 0x0000ff00) | \

56 ((((
uöt32_t
)(
X
)Ë>> 24Ë& 0x000000ff))

	)

57 
	#SWAPDW
(
X
Ë((((
uöt64_t
)(X)) << 56) | \

58 ((((
uöt64_t
)(
X
)) << 40) & 0x00ff000000000000ULL) | \

59 ((((
uöt64_t
)(
X
)) << 24) & 0x0000ff0000000000ULL) | \

60 ((((
uöt64_t
)(
X
)) << 8) & 0x000000ff00000000ULL) | \

61 ((((
uöt64_t
)(
X
)) >> 8) & 0x00000000ff000000ULL) | \

62 ((((
uöt64_t
)(
X
)) >> 24) & 0x0000000000ff0000ULL) | \

63 ((((
uöt64_t
)(
X
)) >> 40) & 0x000000000000ff00ULL) | \

64 ((((
uöt64_t
)(
X
)Ë>> 56Ë& 0x00000000000000ffULL))

	)

68 
	#SEXT32
(
X
, 
B
Ë(((
uöt32_t
)(X))&(1U<<(B-1))?((uöt32_t)(X))|~((1U<<B)-1):(X))

	)

69 
	#SEXT64
(
X
, 
B
Ë(((
uöt64_t
)(X))&(1ULL<<(B-1))?((uöt64_t)(X))|~((1ULL<<B)-1):(X))

	)

72 
	#BITS32
(
X
, 
HI
, 
LO
Ë((((
uöt32_t
)(X))>>(LO))&((1U<<((HI)-(LO)+1))-1))

	)

73 
	#BITS64
(
X
, 
HI
, 
LO
Ë((((
uöt64_t
)(X))>>(LO))&((1ULL<<((HI)-(LO)+1ULL))-1ULL))

	)

76 
	#GETBIT32
(
X
, 
B
Ë((
uöt32_t
)(X)&(1U<<(B)))

	)

77 
	#GETBIT64
(
X
, 
B
Ë((
uöt64_t
)(X)&(1ULL<<(B)))

	)

78 
	#SETBIT32
(
X
, 
B
Ë((
uöt32_t
)(X)|(1U<<(B)))

	)

79 
	#SETBIT64
(
X
, 
B
Ë((
uöt64_t
)(X)|(1ULL<<(B)))

	)

80 
	#CLEARBIT32
(
X
, 
B
Ë((
uöt32_t
)(X)&(~(1U<<(B))))

	)

81 
	#CLEARBIT64
(
X
, 
B
Ë((
uöt64_t
)(X)&(~(1ULL<<(B))))

	)

82 
	#SETBITVALUE32
(
X
, 
B
, 
V
Ë((VË? 
	`SETBIT32
((X),(B)Ë: 
	`CLEARBIT32
((X),(B)))

	)

83 
	#SETBITVALUE64
(
X
, 
B
, 
V
Ë((VË? 
	`SETBIT64
((X),(B)Ë: 
	`CLEARBIT64
((X),(B)))

	)

87 
	#BITMAP_TYPE
(
NAME
, 
SIZE
) \

88 
NAME
[((
SIZE
Ë+ 7Ë>> 3]

	)

89 
	#BITMAP_INIT
(
NAME
, 
SIZE
Ë{ 
_i
; \

90 
_i
 = 0; _ò< (((
SIZE
) + 7) >> 3); _i++) \

91 
NAME
[
_i
] = 0; }

	)

92 
	#BITMAP_SET
(
NAME
, 
BIT
) \

93 (
NAME
[(
BIT
Ë>> 3] |1 << ((BITË& 7))

	)

94 
	#BITMAP_CLEAR
(
NAME
, 
BIT
) \

95 (
NAME
[(
BIT
Ë>> 3] &~(1 << ((BITË& 7)))

	)

96 
	#BITMAP_SET_VAL
(
NAME
, 
BIT
, 
VAL
) \

97 ((
VAL
Ë? 
	`BITMAP_SET
((
NAME
), (
BIT
)Ë: 
	`BITMAP_CLEAR
((NAME), (BIT)))

	)

98 
	#BITMAP_GET
(
NAME
, 
BIT
) \

99 ((
NAME
[(
BIT
Ë>> 3] & (1 << ((BITË& 7))Ë> 0)

	)

100 
	#BITMAP_SET_RANGE
(
NAME
, 
LO
, 
HI
Ë{ 
_i
; \

101 
_i
 = (
LO
); _ò<(
HI
); _i++) \

102 
	`BITMAP_SET
((
NAME
), 
_i
); }

	)

103 
	#BITMAP_CLEAR_RANGE
(
NAME
, 
LO
, 
HI
Ë{ 
_i
; \

104 
_i
 = (
LO
); _ò<(
HI
); _i++) \

105 
	`BITMAP_CLEAR
((
NAME
), 
_i
); }

	)

112 
	gbô_m≠_t
;

114 
bô_m≠_t
 *
bô_m≠_¸óã
(
size
);

115 
bô_m≠_‰ì
(
bô_m≠_t
 *
bô_m≠
);

117 
bô_m≠_£t
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
,

118 
vÆue
);

119 
bô_m≠_gë
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
);

120 
bô_m≠_cou¡_⁄es
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
);

121 
bô_m≠_c›y
(
bô_m≠_t
 *
d°
, 
d°_whîe
,

122 
bô_m≠_t
 *
§c
, 
§c_whîe
, 
size
);

123 
bô_m≠_dump
(
bô_m≠_t
 *
bô_m≠
, 
whîe
, 
size
, 
FILE
 *
f
);

129 
	s°rög_m≠_t
 {

130 
	mcou¡
;

132 *
	m°rög
;

133 
	mvÆue
;

134 } 
	mm≠
[];

137 
m≠_°rög
(
°rög_m≠_t
 *
m≠
, *
°rög
);

138 
m≠_°rög_ˇ£
(
°rög_m≠_t
 *
m≠
, *
s
);

139 *
m≠_vÆue
(
°rög_m≠_t
 *
m≠
, 
vÆue
);

140 
m≠_vÆue_°rög
(
°rög_m≠_t
 *
m≠
, 
vÆue
, *
out
, 
Àngth
);

141 
m≠_Êags
(
°rög_m≠_t
 *
m≠
, 
Êags
, *
out
, 
Àngth
);

144 
°rc˝y
(*
de°
, *
§c
, 
size
);

145 
°rcˇt
(*
de°
, *
§c
);

146 
°rdump
(*
de°
, *
§c
, 
size
);

149 
FILE
 *
›í_ªad
(*
‚ame
);

150 
FILE
 *
›í_wrôe
(*
‚ame
);

151 
ˇn_›í_ªad
(*
‚ame
);

152 
ˇn_›í_wrôe
(*
‚ame
);

153 
ªad_löe
(
FILE
 *
f
, *
löe
, 
size
);

154 
˛o£_fûe
(
FILE
 *
f
);

155 
FILE
 *
¸óã_ãmp_fûe
(*
ªt_∑th
, 
ªt_∑th_size
);

158 
dump_bö
(
x
, 
digôs
, 
FILE
 *
f
);

159 
dump_±r
(*
±r
, 
size
, 
FILE
 *
°ªam
);

160 
log_ba£2
(
x
);

163 
wrôe_buf„r
(*
fûe_«me
, *
buf
, 
size
);

164 *
ªad_buf„r
(*
fûe_«me
, *
psize
);

165 
‰ì_buf„r
(*
buf
);

	@libnetwork/network.c

20 
	~"√tw‹k.h
"

22 
	~<°d¨g.h
>

23 
	~<as£π.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<ªpos.h
>

27 
	~<esim.h
>

28 
	~<misc.h
>

29 
	~<mh™dÀ.h
>

36 
	#NET_ENTRY
(
i
, 
j
Ë(&
√t
->
routög_èbÀ
[(iË*Çë->
node_cou¡
 + (j)])

	)

37 
	#NET_COST
(
i
, 
j
Ë(
	`NET_ENTRY
(i, j)->
co°
)

	)

38 
	#NET_ROUTE
(
i
, 
j
Ë(
	`NET_ENTRY
(i, j)->
rouã
)

	)

39 
	#NET_PORT
(
i
, 
j
Ë(
	`NET_ENTRY
(i, j)->
p‹t
)

	)

48 
ªpos_t
 *
	g√t_msg_ªpos
;

50 
	gEV_NET_SEND
;

51 
	gEV_NET_RECEIVE
;

60 
	$√t_îr‹
(*
fmt
, ...) {

61 
va_li°
 
va
;

62 
	`va_°¨t
(
va
, 
fmt
);

63 
	`Ârötf
(
°dîr
, "fatal:Üibnetwork: ");

64 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

65 
	`Ârötf
(
°dîr
, "\n");

66 
	`ab‹t
();

67 
	}
}

71 
	$√t_Æloˇã_node
(
√t_t
 *
√t
, 
√t_node_köd_íum
 
köd
,

72 
ù‹t_cou¡
, 
ibuf„r_size
, 
›‹t_cou¡
, 
obuf„r_size
,

73 
b™dwidth
, *
«me
, *
d©a
)

75 
√t_node_t
 *
node
;

76 
√t_buf„r_t
 *
buf„r
;

77 
i
;

80 i‡(
√t
->
node_cou¡
 =√t->
node_¨øy_size
) {

81 
√t
->
node_¨øy_size
 *= 2;

82 
√t
->
nodes
 = 
	`ªÆloc
“ë->nodes,Çë->
node_¨øy_size
 * (
√t_node_t
));

83 i‡(!
√t
->
nodes
)

84 
	`√t_îr‹
("out of memory");

85 
	`mem£t
(
√t
->
nodes
 +Çë->
node_cou¡
, 0, (√t->
node_¨øy_size
 -Çet->node_count) *

86 (
√t_node_t
));

90 
√t
->
node_cou¡
++;

91 
node
 = &
√t
->
nodes
[√t->
node_cou¡
 - 1];

94 
	`°∫˝y
(
node
->
«me
,Çame, (node->name));

95 
node
->
d©a
 = data;

96 
node
->
köd
 = kind;

99 
node
->
b™dwidth
 = bandwidth;

100 i‡(
b™dwidth
 < 1)

101 
	`√t_îr‹
("switch bandwidth must be >= 1");

104 
	`as£π
(
ù‹t_cou¡
 > 0);

105 
node
->
ù‹t_cou¡
 = iport_count;

106 
node
->
ù‹ts
 = 
	`ˇŒoc
(
ù‹t_cou¡
, (
√t_p‹t_t
));

107 i‡(
ibuf„r_size
) {

108 
i
 = 0; i < 
ù‹t_cou¡
; i++) {

109 
node
->
ù‹ts
[
i
].
buf„r
 = buf„∏
	`ˇŒoc
(1, (
√t_buf„r_t
));

110 i‡(!
buf„r
)

111 
	`√t_îr‹
("out of memory");

112 
buf„r
->
size
 = 
ibuf„r_size
;

113 
	`¢¥ötf
(
buf„r
->
«me
, (buffer->name), "%s.iport[%d].buffer",

114 
node
->
«me
, 
i
);

119 
	`as£π
(
›‹t_cou¡
 > 0);

120 
node
->
›‹t_cou¡
 = oport_count;

121 
node
->
›‹ts
 = 
	`ˇŒoc
(
›‹t_cou¡
, (
√t_p‹t_t
));

122 i‡(
obuf„r_size
) {

123 
i
 = 0; i < 
›‹t_cou¡
; i++) {

124 
node
->
›‹ts
[
i
].
buf„r
 = buf„∏
	`ˇŒoc
(1, (
√t_buf„r_t
));

125 i‡(!
buf„r
)

126 
	`√t_îr‹
("out of memory");

127 
buf„r
->
size
 = 
obuf„r_size
;

128 
	`¢¥ötf
(
buf„r
->
«me
, (buffer->name), "%s.oport[%d].buffer",

129 
node
->
«me
, 
i
);

134  
√t
->
node_cou¡
 - 1;

135 
	}
}

138 
	$√t_buf„r_ö£π
(
√t_t
 *
√t
, 
√t_buf„r_t
 *
buf„r
, 
√t_msg_t
 *
msg
)

140 
	`as£π
(
buf„r
->
cou¡
 + 
msg
->
size
 <= buffer->size);

141 
buf„r
->
cou¡
 +
msg
->
size
;

142 
	`esim_debug
("msgáction=\"insert\",Çet=\"%s\", seq=%lld, buffer=\"%s\"\n",

143 
√t
->
«me
, (Ë
msg
->
£q
, 
buf„r
->name);

144 
	}
}

147 
	$√t_buf„r_exåa˘
(
√t_t
 *
√t
, 
√t_buf„r_t
 *
buf„r
, 
√t_msg_t
 *
msg
)

149 
√t_°ack_t
 *
°ack
;

151 
	`as£π
(
buf„r
->
cou¡
 >
msg
->
size
);

152 
buf„r
->
cou¡
 -
msg
->
size
;

153 
	`esim_debug
("msgáction=\"extract\",Çet=\"%s\", seq=%lld, buffer=\"%s\"\n",

154 
√t
->
«me
, (Ë
msg
->
£q
, 
buf„r
->name);

157 
buf„r
->
wakeup_hód
) {

158 
°ack
 = 
buf„r
->
wakeup_hód
;

159 i‡(
buf„r
->
wakeup_hód
 =buf„r->
wakeup_èû
)

160 
buf„r
->
wakeup_hód
 = buf„r->
wakeup_èû
 = 
NULL
;

162 
buf„r
->
wakeup_hód
 = 
°ack
->
wakeup_√xt
;

163 
	`esim_scheduÀ_evít
(
°ack
->
wakeup_evít
, stack, 0);

164 
°ack
->
wakeup_evít
 = 0;

165 
°ack
->
wakeup_√xt
 = 
NULL
;

167 
	}
}

171 
	$√t_buf„r_nŸify
(
√t_t
 *
√t
, 
√t_buf„r_t
 *
buf„r
, 
evít
,

172 
√t_°ack_t
 *
°ack
)

175 i‡(
evít
 =
ESIM_EV_NONE
)

179 
	`as£π
(
buf„r
->
size
 > 0 && buf„r->
cou¡
 > 0);

180 
	`as£π
(
°ack
 && !°ack->
wakeup_evít
 && !°ack->
wakeup_√xt
);

181 
°ack
->
wakeup_evít
 = 
evít
;

182 i‡(!
buf„r
->
wakeup_èû
)

183 
buf„r
->
wakeup_hód
 = buf„r->
wakeup_èû
 = 
°ack
;

185 
buf„r
->
wakeup_èû
->
wakeup_√xt
 = 
°ack
;

186 
buf„r
->
wakeup_èû
 = 
°ack
;

188 
	}
}

192 
	$√t_msg_èbÀ_ö£π
(
√t_t
 *
√t
, 
√t_msg_t
 *
msg
)

194 
ödex
;

196 
ödex
 = 
msg
->
£q
 % 
NET_MSG_TABLE_SIZE
;

197 
	`as£π
(!
msg
->
buckë_√xt
);

198 
msg
->
buckë_√xt
 = 
√t
->
msg_èbÀ
[
ödex
];

199 
√t
->
msg_èbÀ
[
ödex
] = 
msg
;

200 
	}
}

204 
√t_msg_t
 *
	$√t_msg_èbÀ_gë
(
√t_t
 *
√t
, 
uöt64_t
 
£q
)

206 
ödex
;

207 
√t_msg_t
 *
msg
;

209 
ödex
 = 
£q
 % 
NET_MSG_TABLE_SIZE
;

210 
msg
 = 
√t
->
msg_èbÀ
[
ödex
];

211 
msg
 && msg->
£q
 != seq)

212 
msg
 = msg->
buckë_√xt
;

213  
msg
;

214 
	}
}

218 
√t_msg_t
 *
	$√t_msg_èbÀ_exåa˘
(
√t_t
 *
√t
, 
uöt64_t
 
£q
)

220 
ödex
;

221 
√t_msg_t
 *
¥ev
, *
msg
;

223 
ödex
 = 
£q
 % 
NET_MSG_TABLE_SIZE
;

224 
¥ev
 = 
NULL
;

225 
msg
 = 
√t
->
msg_èbÀ
[
ödex
];

226 
msg
 && msg->
£q
 != seq) {

227 
¥ev
 = 
msg
;

228 
msg
 = msg->
buckë_√xt
;

230 i‡(!
msg
)

231 
	`√t_îr‹
("msg %ŒdÇŸ i¿hashÅabÀ", (Ë
£q
);

232 i‡(
¥ev
)

233 
¥ev
->
buckë_√xt
 = 
msg
->bucket_next;

235 
√t
->
msg_èbÀ
[
ödex
] = 
msg
->
buckë_√xt
;

236  
msg
;

237 
	}
}

247 
ªpos_t
 *
	g√t_°ack_ªpos
;

250 
√t_°ack_t
 *
	$√t_°ack_¸óã
(
√t_t
 *
√t
,

251 
ªãvít
, *
ªt°ack
)

253 
√t_°ack_t
 *
°ack
;

254 
°ack
 = 
	`ªpos_¸óã_obje˘
(
√t_°ack_ªpos
);

255 
°ack
->
√t
 =Çet;

256 
°ack
->
ªãvít
 =Ñetevent;

257 
°ack
->
ªt°ack
 =Ñetstack;

258  
°ack
;

259 
	}
}

262 
	$√t_°ack_ªtu∫
(
√t_°ack_t
 *
°ack
)

264 
ªãvít
 = 
°ack
->retevent;

265 
√t_°ack_t
 *
ªt°ack
 = 
°ack
->retstack;

266 
	`ªpos_‰ì_obje˘
(
√t_°ack_ªpos
, 
°ack
);

267 
	`esim_scheduÀ_evít
(
ªãvít
, 
ªt°ack
, 0);

268 
	}
}

270 
	#NET_CAN_TRANSFER
 0

	)

271 
	#NET_DO_TRANSFER
 1

	)

273 
	#NET_WHERE_IBUFFER
 0

	)

274 
	#NET_WHERE_XBAR
 1

	)

275 
	#NET_WHERE_OBUFFER
 2

	)

276 
	#NET_WHERE_LINK
 3

	)

288 
	$√t_å™s„r
(
√t_t
 *
√t
, 
√t_msg_t
 *
msg
, 
how
, 
œt
,

289 
evít
, *
°ack
)

291 
node_idx
, 
whîe
, 
p‹t_idx
, 
routög_p‹t_idx
;

292 
√t_node_t
 *
node
;

293 
√t_p‹t_t
 *
p‹t
;

294 
√t_lök_t
 *
lök
;

295 
√t_buf„r_t
 *
buf„r
;

298 i‡(!
√t
->
routög_èbÀ
)

299 
	`√t_îr‹
("%s:ÇÿroutögÅabÀ", 
√t
->
«me
);

302 
node_idx
 = 
msg
->node_idx;

303 
whîe
 = 
msg
->where;

304 
p‹t_idx
 = 
msg
->port_idx;

307 i‡(
how
 =
NET_CAN_TRANSFER
) {

308 
	`as£π
(!
esim_cy˛e
 || 
msg
->
busy
 <Ésim_cycle);

309 
œt
 = 1;

311 i‡(
how
 =
NET_DO_TRANSFER
) {

312 i‡(
œt
 < 1)

313 
	`√t_îr‹
("net_transfer:Üat must be >= 1");

314 
msg
->
busy
 = 
esim_cy˛e
 + 
œt
 - 1;

315 
msg
->
§c_buf„r
 = 
NULL
;

316 
msg
->
d°_buf„r
 = 
NULL
;

320 
node_idx
 !
msg
->
d°_node_idx
) {

323 i‡(
whîe
 =
NET_WHERE_OBUFFER
) {

326 
node
 = &
√t
->
nodes
[
node_idx
];

327 
routög_p‹t_idx
 = 
	`NET_PORT
(
node_idx
, 
msg
->
d°_node_idx
);

328 i‡(
routög_p‹t_idx
 < 0)

329 
	`√t_îr‹
("%s:Çÿrouã from %†tÿ%s", 
√t
->
«me
,

330 
node
->
«me
, 
msg
->
d°_node
->name);

331 
	`as£π
(
routög_p‹t_idx
 =
p‹t_idx
);

334 
p‹t
 = &
node
->
›‹ts
[
p‹t_idx
];

335 
lök
 = 
p‹t
->link;

336 
buf„r
 = 
p‹t
->buffer;

337 
whîe
 = 
NET_WHERE_LINK
;

340 i‡(
how
 =
NET_CAN_TRANSFER
) {

341 i‡(
buf„r
 && buf„r->
ªad_busy
 >
esim_cy˛e
) {

342 
	`esim_scheduÀ_evít
(
evít
, 
°ack
,

343 
buf„r
->
ªad_busy
 - 
esim_cy˛e
 + 1);

344 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d,"

346 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

347 (Ë
buf„r
->
ªad_busy
 + 1);

350 i‡(
lök
->
busy
 >
esim_cy˛e
) {

351 
	`esim_scheduÀ_evít
(
evít
, 
°ack
,

352 
lök
->
busy
 - 
esim_cy˛e
 + 1);

353 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d,"

355 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

356 (Ë
lök
->
busy
 + 1);

359 
œt
 = 
	`MAX
÷©, (
msg
->
size
 + 
lök
->
b™dwidth
 - 1) /Üink->bandwidth);

361 i‡(
how
 =
NET_DO_TRANSFER
) {

362 
msg
->
whîe
 = 
NET_WHERE_LINK
;

363 
lök
->
busy
 = 
esim_cy˛e
 + 
œt
 - 1;

364 i‡(
buf„r
) {

365 
msg
->
§c_buf„r
 = 
buf„r
;

366 
buf„r
->
ªad_busy
 = 
esim_cy˛e
 + 
œt
 - 1;

368 
	`esim_debug
("msgáction=\"transfer\",Çet=\"%s\", seq=%lld,Çode=%d, where=link,"

370 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

371 (Ë
lök
->
busy
);

376 i‡(
whîe
 =
NET_WHERE_LINK
) {

379 
node
 = &
√t
->
nodes
[
node_idx
];

380 
lök
 = 
node
->
›‹ts
[
p‹t_idx
].link;

381 
node_idx
 = 
lök
->
d°_node_idx
;

382 
p‹t_idx
 = 
lök
->
d°_p‹t_idx
;

383 
node
 = &
√t
->
nodes
[
node_idx
];

384 
p‹t
 = &
node
->
ù‹ts
[
p‹t_idx
];

385 
buf„r
 = 
p‹t
->buffer;

386 
whîe
 = 
NET_WHERE_IBUFFER
;

389 i‡(
how
 =
NET_CAN_TRANSFER
 && 
buf„r
) {

390 i‡(
buf„r
->
size
 < 
msg
->size)

391 
	`√t_îr‹
("msg of size %d cannotÉnter buffer of size %d in"

392 "Çodê%s, i≈uàp‹à%d", 
msg
->
size
, 
buf„r
->size,

393 
node
->
«me
, 
p‹t_idx
);

394 i‡(
buf„r
->
wrôe_busy
 >
esim_cy˛e
) {

395 
	`esim_scheduÀ_evít
(
evít
, 
°ack
,

396 
buf„r
->
wrôe_busy
 - 
esim_cy˛e
 + 1);

397 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d, where=link,"

399 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

400 (Ë
buf„r
->
wrôe_busy
 + 1);

403 i‡(
buf„r
->
cou¡
 + 
msg
->
size
 > buffer->size) {

404 
	`√t_buf„r_nŸify
(
√t
, 
buf„r
, 
evít
, 
°ack
);

405 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d, where=link,"

407 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

408 
buf„r
->
«me
);

411  
œt
;

413 i‡(
how
 =
NET_DO_TRANSFER
) {

414 
msg
->
node_idx
 =Çode_idx;

415 
msg
->
p‹t_idx
 =Öort_idx;

416 
msg
->
whîe
 = 
NET_WHERE_IBUFFER
;

417 
	`esim_debug
("msgáction=\"transfer\",Çet=\"%s\", seq=%lld,Çode=%d,"

419 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
);

420 i‡(
buf„r
) {

421 
msg
->
d°_buf„r
 = 
buf„r
;

422 
buf„r
->
wrôe_busy
 = 
esim_cy˛e
 + 
œt
 - 1;

423  
œt
;

429 i‡(
whîe
 =
NET_WHERE_IBUFFER
) {

432 
node
 = &
√t
->
nodes
[
node_idx
];

433 
p‹t
 = &
node
->
ù‹ts
[
p‹t_idx
];

434 
buf„r
 = 
p‹t
->buffer;

435 
whîe
 = 
NET_WHERE_XBAR
;

438 i‡(
how
 =
NET_CAN_TRANSFER
) {

439 i‡(
buf„r
 && buf„r->
ªad_busy
 >
esim_cy˛e
) {

440 
	`esim_scheduÀ_evít
(
evít
, 
°ack
,

441 
buf„r
->
ªad_busy
 - 
esim_cy˛e
 + 1);

442 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d,"

444 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

445 (Ë
buf„r
->
ªad_busy
 + 1);

448 i‡(
node
->
köd
 =
√t_node_bus
 &&Çode->
bus_busy
 >
esim_cy˛e
) {

449 
	`esim_scheduÀ_evít
(
evít
, 
°ack
,

450 
node
->
bus_busy
 - 
esim_cy˛e
 + 1);

451 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d,"

453 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

454 (Ë
node
->
bus_busy
 + 1);

457 
œt
 = 
	`MAX
÷©, (
msg
->
size
 + 
node
->
b™dwidth
 - 1) /Çode->bandwidth);

459 i‡(
how
 =
NET_DO_TRANSFER
) {

460 
msg
->
whîe
 = 
NET_WHERE_XBAR
;

461 i‡(
node
->
köd
 =
√t_node_bus
)

462 
node
->
bus_busy
 = 
esim_cy˛e
 + 
œt
 - 1;

463 
	`esim_debug
("msgáction=\"transfer\",Çet=\"%s\", seq=%lld,Çode=%d,"

465 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
);

466 i‡(
buf„r
) {

467 
msg
->
§c_buf„r
 = 
buf„r
;

468 
buf„r
->
ªad_busy
 = 
esim_cy˛e
 + 
œt
 - 1;

474 i‡(
whîe
 =
NET_WHERE_XBAR
) {

477 
node
 = &
√t
->
nodes
[
node_idx
];

478 
p‹t_idx
 = 
	`NET_PORT
(
node_idx
, 
msg
->
d°_node_idx
);

479 i‡(
p‹t_idx
 < 0)

480 
	`√t_îr‹
("nÿrouã from %dÅÿ%d", 
node_idx
, 
msg
->
d°_node_idx
);

481 
p‹t
 = &
node
->
›‹ts
[
p‹t_idx
];

482 
buf„r
 = 
p‹t
->buffer;

483 
whîe
 = 
NET_WHERE_OBUFFER
;

486 i‡(
how
 =
NET_CAN_TRANSFER
 && 
buf„r
) {

487 i‡(
buf„r
->
size
 < 
msg
->size)

488 
	`√t_îr‹
("msg of size %d cannotÉnter buffer of size %d in"

489 "Çodê%s, ouçuàp‹à%d", 
msg
->
size
, 
buf„r
->size,

490 
node
->
«me
, 
p‹t_idx
);

491 i‡(
buf„r
->
wrôe_busy
 >
esim_cy˛e
) {

492 
	`esim_scheduÀ_evít
(
evít
, 
°ack
,

493 
buf„r
->
wrôe_busy
 - 
esim_cy˛e
 + 1);

494 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d, where=xbar,"

496 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

497 (Ë
buf„r
->
wrôe_busy
 + 1);

500 i‡(
buf„r
->
cou¡
 + 
msg
->
size
 > buffer->size) {

501 
	`√t_buf„r_nŸify
(
√t
, 
buf„r
, 
evít
, 
°ack
);

502 
	`esim_debug
("msgáction=\"stall\",Çet=\"%s\", seq=%lld,Çode=%d, where=xbar,"

504 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
,

505 
buf„r
->
«me
);

508  
œt
;

510 i‡(
how
 =
NET_DO_TRANSFER
) {

511 
msg
->
whîe
 = 
NET_WHERE_OBUFFER
;

512 
msg
->
p‹t_idx
 =Öort_idx;

513 
	`esim_debug
("msgáction=\"transfer\",Çet=\"%s\", seq=%lld,Çode=%d,"

515 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
p‹t_idx
);

516 i‡(
buf„r
) {

517 
msg
->
d°_buf„r
 = 
buf„r
;

518 
buf„r
->
wrôe_busy
 = 
esim_cy˛e
 + 
œt
 - 1;

519  
œt
;

526  
œt
;

527 
	}
}

530 
	$√t_h™dÀr
(
evít
, *
d©a
)

532 
√t_°ack_t
 *
°ack
 = 
d©a
;

533 
√t_t
 *
√t
 = 
°ack
->net;

534 
√t_msg_t
 *
msg
 = 
°ack
->msg;

536 i‡(
evít
 =
EV_NET_SEND
)

538 
œt
;

540 
œt
 = 
	`√t_å™s„r
(
√t
, 
msg
, 
NET_CAN_TRANSFER
, 0,

541 
EV_NET_SEND
, 
°ack
);

542 i‡(!
œt
)

546 
	`esim_debug
("msgáction=\"send\",Çet=\"%s\", seq=%lld,Çode=%d, dst=%d\n",

547 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
, msg->
d°_node_idx
);

548 
	`√t_å™s„r
(
√t
, 
msg
, 
NET_DO_TRANSFER
, 
œt
, 0, 
NULL
);

549 
	`esim_scheduÀ_evít
(
EV_NET_RECEIVE
, 
°ack
, 
œt
);

552 i‡(
msg
->
d°_buf„r
)

553 
	`√t_buf„r_ö£π
(
√t
, 
msg
->
d°_buf„r
, msg);

556 i‡(
evít
 =
EV_NET_RECEIVE
)

558 
œt
;

560 
	`esim_debug
("msgáction=\"receive\",Çet=\"%s\", seq=%lld,Çode=%d\n",

561 
√t
->
«me
, (Ë
msg
->
£q
, msg->
node_idx
);

564 i‡(
msg
->
§c_buf„r
)

565 
	`√t_buf„r_exåa˘
(
√t
, 
msg
->
§c_buf„r
, msg);

568 i‡(
msg
->
node_idx
 =msg->
d°_node_idx
) {

569 
œt
 = 
esim_cy˛e
 - 
msg
->
£nd_cy˛e
;

570 
	`esim_debug
("msgáction=\"deliver\",Çet=\"%s\", seq=%lld,Çode=%d,Üat=%d\n",

571 
√t
->
«me
, (Ë
msg
->
£q
, msg->
d°_node_idx
, 
œt
);

574 
√t
->
å™s„rs
++;

575 
√t
->
œt_acc
 +
œt
;

578 
	`√t_msg_èbÀ_exåa˘
(
√t
, 
msg
->
£q
);

579 
	`ªpos_‰ì_obje˘
(
√t_msg_ªpos
, 
msg
);

580 
	`√t_°ack_ªtu∫
(
°ack
);

582 
	`esim_scheduÀ_evít
(
EV_NET_SEND
, 
°ack
, 0);

584 
	}
}

594 
	$√t_öô
()

596 
√t_°ack_ªpos
 = 
	`ªpos_¸óã
((
√t_°ack_t
), "net_stack");

597 
√t_msg_ªpos
 = 
	`ªpos_¸óã
((
√t_msg_t
), "net_msg");

598 
EV_NET_SEND
 = 
	`esim_ªgi°î_evít
(
√t_h™dÀr
);

599 
EV_NET_RECEIVE
 = 
	`esim_ªgi°î_evít
(
√t_h™dÀr
);

600 
	}
}

603 
	$√t_d⁄e
()

605 
	`ªpos_‰ì
(
√t_°ack_ªpos
);

606 
	`ªpos_‰ì
(
√t_msg_ªpos
);

607 
	}
}

610 
√t_t
 *
	$√t_¸óã
(*
«me
)

612 
√t_t
 *
√t
;

613 
√t
 = 
	`ˇŒoc
(1, (
√t_t
));

614 
	`°∫˝y
(
√t
->
«me
,Çame, (net->name));

615 
√t
->
node_¨øy_size
 = 1;

616 
√t
->
nodes
 = 
	`ˇŒoc
“ë->
node_¨øy_size
, (
√t_node_t
));

617  
√t
;

618 
	}
}

621 
	$√t_‰ì
(
√t_t
 *
√t
)

623 
i
, 
j
;

624 
√t_node_t
 *
node
;

625 
√t_p‹t_t
 *
p‹t
;

627 i‡(
√t
->
routög_èbÀ
)

628 
	`‰ì
(
√t
->
routög_èbÀ
);

629 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

630 
node
 = &
√t
->
nodes
[
i
];

633 
j
 = 0; j < 
node
->
ù‹t_cou¡
; j++) {

634 
p‹t
 = &
node
->
ù‹ts
[
j
];

635 i‡(
p‹t
->
buf„r
)

636 
	`‰ì
(
p‹t
->
buf„r
);

638 
	`‰ì
(
node
->
ù‹ts
);

641 
j
 = 0; j < 
node
->
›‹t_cou¡
; j++) {

642 
p‹t
 = &
node
->
›‹ts
[
j
];

643 i‡(
p‹t
->
buf„r
)

644 
	`‰ì
(
p‹t
->
buf„r
);

645 i‡(
p‹t
->
lök
)

646 
	`‰ì
(
p‹t
->
lök
);

648 
	`‰ì
(
node
->
›‹ts
);

650 
	`‰ì
(
√t
->
nodes
);

651 
	`‰ì
(
√t
);

652 
	}
}

655 
	$√t_√w_node
(
√t_t
 *
√t
, *
«me
, *
d©a
)

657 
√t
->
íd_node_cou¡
++;

658  
	`√t_Æloˇã_node
(
√t
, 
√t_node_íd
,

662 
«me
, 
d©a
);

663 
	}
}

666 
	$√t_√w_bus
(
√t_t
 *
√t
,

667 
ù‹t_cou¡
, 
›‹t_cou¡
,

668 
b™dwidth
, *
«me
, *
d©a
)

670  
	`√t_Æloˇã_node
(
√t
, 
√t_node_bus
,

671 
ù‹t_cou¡
, 0,

672 
›‹t_cou¡
, 0,

673 
b™dwidth
, 
«me
, 
d©a
);

674 
	}
}

677 
	$√t_√w_swôch
(
√t_t
 *
√t
,

678 
ù‹t_cou¡
, 
ibuf„r_size
, 
›‹t_cou¡
, 
obuf„r_size
,

679 
b™dwidth
, *
«me
, *
d©a
)

681  
	`√t_Æloˇã_node
(
√t
, 
√t_node_swôch
,

682 
ù‹t_cou¡
, 
ibuf„r_size
, 
›‹t_cou¡
, 
obuf„r_size
,

683 
b™dwidth
, 
«me
, 
d©a
);

684 
	}
}

687 
√t_node_t
 *
	$√t_gë_node
(
√t_t
 *
√t
, 
node_idx
)

689 i‡(
node_idx
 < 0 ||Çode_idx >
√t
->
node_cou¡
)

690 
	`√t_îr‹
("network %s:Çode %d out ofÑange",

691 
√t
->
«me
, 
node_idx
);

692  &
√t
->
nodes
[
node_idx
];

693 
	}
}

696 *
	$√t_gë_node_d©a
(
√t_t
 *
√t
, 
node_idx
)

698 
√t_node_t
 *
node
;

699 
node
 = 
	`√t_gë_node
(
√t
, 
node_idx
);

700  
node
->
d©a
;

701 
	}
}

705 
	$√t_gë_ù‹t_idx
(
√t_t
 *
√t
, 
node_idx
)

707 
i
;

708 
√t_node_t
 *
node
;

710 
node
 = 
	`√t_gë_node
(
√t
, 
node_idx
);

711 
i
 = 0; i < 
node
->
ù‹t_cou¡
; i++)

712 i‡(!
node
->
ù‹ts
[
i
].
lök
)

713  
i
;

715 
	}
}

719 
	$√t_gë_›‹t_idx
(
√t_t
 *
√t
, 
node_idx
)

721 
i
;

722 
√t_node_t
 *
node
;

724 
node
 = 
	`√t_gë_node
(
√t
, 
node_idx
);

725 
i
 = 0; i < 
node
->
›‹t_cou¡
; i++)

726 i‡(!
node
->
›‹ts
[
i
].
lök
)

727  
i
;

729 
	}
}

733 
	$√t_√w_lök
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
, 
b™dwidth
)

735 
ù‹t_idx
, 
›‹t_idx
;

736 
√t_lök_t
 *
lök
;

737 
√t_node_t
 *
§c_node
, *
d°_node
;

739 
§c_node
 = &
√t
->
nodes
[
§c_node_idx
];

740 
d°_node
 = &
√t
->
nodes
[
d°_node_idx
];

741 
›‹t_idx
 = 
	`√t_gë_›‹t_idx
(
√t
, 
§c_node_idx
);

742 
ù‹t_idx
 = 
	`√t_gë_ù‹t_idx
(
√t
, 
d°_node_idx
);

743 i‡(
›‹t_idx
 < 0)

744 
	`√t_îr‹
("node %s.%s:Ço oport free",

745 
√t
->
«me
, 
§c_node
->name);

746 i‡(
ù‹t_idx
 < 0)

747 
	`√t_îr‹
("node %s.%s:Ço iport free",

748 
√t
->
«me
, 
d°_node
->name);

749 
	`as£π
(
›‹t_idx
 >0 && op‹t_idx < 
§c_node
->
›‹t_cou¡
);

750 
	`as£π
(
ù‹t_idx
 >0 && ip‹t_idx < 
d°_node
->
ù‹t_cou¡
);

753 
lök
 = 
	`ˇŒoc
(1, (
√t_lök_t
));

754 i‡(!
lök
)

755 
	`√t_îr‹
("net %s: out of memory");

756 
lök
->
b™dwidth
 = bandwidth;

757 
lök
->
§c_node_idx
 = src_node_idx;

758 
lök
->
§c_p‹t_idx
 = 
›‹t_idx
;

759 
lök
->
d°_node_idx
 = dst_node_idx;

760 
lök
->
d°_p‹t_idx
 = 
ù‹t_idx
;

763 
§c_node
->
›‹ts
[
›‹t_idx
].
lök
 =Üink;

764 
d°_node
->
ù‹ts
[
ù‹t_idx
].
lök
 =Üink;

765 
	}
}

769 
	$√t_√w_bidúe˘i⁄Æ_lök
(
√t_t
 *
√t
, 
node1_idx
, 
node2_idx
, 
b™dwidth
)

771 
	`√t_√w_lök
(
√t
, 
node1_idx
, 
node2_idx
, 
b™dwidth
);

772 
	`√t_√w_lök
(
√t
, 
node2_idx
, 
node1_idx
, 
b™dwidth
);

773 
	}
}

776 
	$√t_ˇlcuœã_rouãs
(
√t_t
 *
√t
)

778 
i
, 
j
, 
k
;

779 
√xt
, 
p‹t
;

780 
√t_lök_t
 *
lök
;

783 i‡(
√t
->
routög_èbÀ
)

784 
	`√t_îr‹
("√tw‹k %s:ÑoutögÅabÀáÃódyÉxi°s", 
√t
->
«me
);

785 
√t
->
routög_èbÀ
 = 
	`ˇŒoc
“ë->
node_cou¡
 *Çë->node_cou¡, (
routög_íåy_t
));

786 i‡(!
√t
->
routög_èbÀ
)

787 
	`√t_îr‹
("√tw‹k %s: ouào‡mem‹yáŒoˇtögÑoutögÅabÀ", 
√t
->
«me
);

790 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

791 
j
 = 0; j < 
√t
->
node_cou¡
; j++) {

792 
	`NET_COST
(
i
, 
j
Ëò=j ? 0 : 
√t
->
node_cou¡
;

793 
	`NET_ROUTE
(
i
, 
j
) = -1;

799 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

800 
j
 = 0; j < 
√t
->
nodes
[
i
].
›‹t_cou¡
; j++) {

801 
lök
 = 
√t
->
nodes
[
i
].
›‹ts
[
j
].link;

802 i‡(
lök
) {

803 
	`NET_COST
(
i
, 
lök
->
d°_node_idx
) = 1;

804 
	`NET_ROUTE
(
i
, 
lök
->
d°_node_idx
) =Üink->dst_node_idx;

811 
k
 = 0; k < 
√t
->
node_cou¡
; k++) {

812 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

813 
j
 = 0; j < 
√t
->
node_cou¡
; j++) {

814 i‡(
	`NET_COST
(
i
, 
k
Ë+ NET_COST(k, 
j
) < NET_COST(i, j)) {

815 
	`NET_COST
(
i
, 
j
ËNET_COST(i, 
k
) + NET_COST(k, j);

816 
	`NET_ROUTE
(
i
, 
j
Ë
k
;

823 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

824 
j
 = 0; j < 
√t
->
node_cou¡
; j++) {

825 
√xt
 = 
	`NET_ROUTE
(
i
, 
j
);

826 i‡(
√xt
 < 0) {

827 
	`NET_PORT
(
i
, 
j
) = -1;

830 
	`NET_COST
(
i
, 
√xt
) > 1)

831 
√xt
 = 
	`NET_ROUTE
(
i
,Çext);

832 
p‹t
 = 0;Ö‹à< 
√t
->
nodes
[
i
].
›‹t_cou¡
;Öort++) {

833 
lök
 = 
√t
->
nodes
[
i
].
›‹ts
[
p‹t
].link;

834 i‡(
lök
 &&Üök->
d°_node_idx
 =
√xt
)

837 
	`as£π
(
p‹t
 < 
√t
->
nodes
[
i
].
›‹t_cou¡
);

838 
	`NET_PORT
(
i
, 
j
Ë
p‹t
;

843 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

844 
j
 = 0; j < 
√t
->
node_cou¡
; j++) {

845 
p‹t
 = 
	`NET_PORT
(
i
, 
j
);

846 i‡(
p‹t
 >= 0) {

847 
lök
 = 
√t
->
nodes
[
i
].
›‹ts
[
p‹t
].link;

848 
	`as£π
(
lök
);

849 
	`NET_ROUTE
(
i
, 
j
Ë
lök
->
d°_node_idx
;

853 
	}
}

856 
	$√t_dump_rouãs
(
√t_t
 *
√t
, 
FILE
 *
f
)

858 
i
, 
j
, 
k
;

861 
	`Ârötf
(
f
, " ");

862 
i
 = 0; i < 
√t
->
node_cou¡
; i++)

863 
	`Ârötf
(
f
, "%2d ", 
i
);

864 
	`Ârötf
(
f
, "\n");

865 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

866 
	`Ârötf
(
f
, "nodê%2d: ", 
i
);

867 
j
 = 0; j < 
√t
->
node_cou¡
; j++) {

868 i‡(
	`NET_ROUTE
(
i
, 
j
) >= 0)

869 
	`Ârötf
(
f
, "%2d ", 
	`NET_ROUTE
(
i
, 
j
));

871 
	`Ârötf
(
f
, "-- ");

873 
	`Ârötf
(
f
, "\n");

875 
	`Ârötf
(
f
, "\n");

878 
i
 = 0; i < 
√t
->
node_cou¡
; i++) {

879 
j
 = 0; j < 
√t
->
node_cou¡
; j++) {

880 
	`Ârötf
(
f
, "‰om %2dÅÿ%2d: ", 
i
, 
j
);

881 
k
 = 
i
;

882 
k
 !
j
) {

883 i‡(
	`NET_ROUTE
(
k
, 
j
) < 0) {

884 
	`Ârötf
(
f
, "x ");

887 
	`Ârötf
(
f
, "%2d ", 
	`NET_ROUTE
(
k
, 
j
));

888 
k
 = 
	`NET_ROUTE
(k, 
j
);

890 
	`Ârötf
(
f
, "\n");

892 
	`Ârötf
(
f
, "\n");

894 
	}
}

897 
	$√t_vÆid_rouã
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
)

899 
	`√t_gë_node
(
√t
, 
§c_node_idx
);

900 
	`√t_gë_node
(
√t
, 
d°_node_idx
);

901  
	`NET_ROUTE
(
§c_node_idx
, 
d°_node_idx
) != -1;

902 
	}
}

905 
	$√t_ˇn_£nd
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
)

907 
√t_msg_t
 *
msg
;

908 
√t_node_t
 *
§c_node
, *
d°_node
;

909 
ªsu…
;

912 
§c_node
 = 
	`√t_gë_node
(
√t
, 
§c_node_idx
);

913 
d°_node
 = 
	`√t_gë_node
(
√t
, 
d°_node_idx
);

914 i‡(
§c_node
->
köd
 !
√t_node_íd
 || 
d°_node
->kind !=Çet_node_end)

915 
	`√t_îr‹
("net_can_send:ÉxtremeÇodes must beÉndÇodes");

918 
msg
 = 
	`ªpos_¸óã_obje˘
(
√t_msg_ªpos
);

919 
msg
->
§c_node_idx
 = src_node_idx;

920 
msg
->
d°_node_idx
 = dst_node_idx;

921 
msg
->
§c_node
 = src_node;

922 
msg
->
d°_node
 = dst_node;

923 
msg
->
size
 = 1;

926 
msg
->
node_idx
 = 
§c_node_idx
;

927 
msg
->
whîe
 = 
NET_WHERE_OBUFFER
;

928 
msg
->
p‹t_idx
 = 0;

929 
	`as£π
(!
√t
->
nodes
[
msg
->
node_idx
].
›‹ts
[msg->
p‹t_idx
].
buf„r
);

932 
ªsu…
 = 
	`√t_å™s„r
(
√t
, 
msg
, 
NET_CAN_TRANSFER
, 0, 
ESIM_EV_NONE
, 
NULL
);

935 
	`ªpos_‰ì_obje˘
(
√t_msg_ªpos
, 
msg
);

936  
ªsu…
;

937 
	}
}

940 
uöt64_t
 
	$√t_£nd
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
, 
size
)

942  
	`√t_£nd_ev
(
√t
, 
§c_node_idx
, 
d°_node_idx
, 
size
,

943 
ESIM_EV_NONE
, 
NULL
);

944 
	}
}

947 
uöt64_t
 
	$√t_£nd_ev
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
, 
size
,

948 
ªãvít
, *
ªt°ack
)

950 
√t_°ack_t
 *
°ack
;

951 
√t_msg_t
 *
msg
;

952 
√t_node_t
 *
§c_node
, *
d°_node
;

955 
§c_node
 = 
	`√t_gë_node
(
√t
, 
§c_node_idx
);

956 
d°_node
 = 
	`√t_gë_node
(
√t
, 
d°_node_idx
);

957 i‡(
§c_node
->
köd
 !
√t_node_íd
 || 
d°_node
->kind !=Çet_node_end)

958 
	`√t_îr‹
("net_send_ev:ÉxtremeÇodes must beÉndÇodes");

961 
msg
 = 
	`ªpos_¸óã_obje˘
(
√t_msg_ªpos
);

962 
msg
->
§c_node_idx
 = src_node_idx;

963 
msg
->
d°_node_idx
 = dst_node_idx;

964 
msg
->
§c_node
 = src_node;

965 
msg
->
d°_node
 = dst_node;

966 
msg
->
size
 = size;

967 
msg
->
£q
 = ++
√t
->
msg_£q
;

968 
msg
->
£nd_cy˛e
 = 
esim_cy˛e
;

971 
	`√t_msg_èbÀ_ö£π
(
√t
, 
msg
);

974 
msg
->
node_idx
 = 
§c_node_idx
;

975 
msg
->
whîe
 = 
NET_WHERE_OBUFFER
;

976 
msg
->
p‹t_idx
 = 0;

977 
	`as£π
(!
√t
->
nodes
[
msg
->
node_idx
].
›‹ts
[msg->
p‹t_idx
].
buf„r
);

980 
°ack
 = 
	`√t_°ack_¸óã
(
√t
, 
ESIM_EV_NONE
, 
NULL
);

981 
°ack
->
msg
 = msg;

982 
°ack
->
ªãvít
 =Ñetevent;

983 
°ack
->
ªt°ack
 =Ñetstack;

984 
	`esim_execuã_evít
(
EV_NET_SEND
, 
°ack
);

985  
msg
->
£q
;

986 
	}
}

989 
	$√t_ö_å™sô
(
√t_t
 *
√t
, 
uöt64_t
 
£q
)

991  
	`√t_msg_èbÀ_gë
(
√t
, 
£q
Ë!
NULL
;

992 
	}
}

1001 
FILE
 *
	g√t_debug_fûe
;

1003 
	$√t_debug_öô
(*
fûíame
)

1005 
√t_debug_fûe
 = 
	`°rcmp
(
fûíame
, "stdout") ?

1006 (
	`°rcmp
(
fûíame
, "stderr") ?

1007 
	`f›í
(
fûíame
, "wt"Ë: 
°dîr
Ë: 
°dout
;

1008  
√t_debug_fûe
 !
NULL
;

1009 
	}
}

1011 
	$√t_debug_d⁄e
()

1013 i‡(
√t_debug_fûe
)

1014 
	`f˛o£
(
√t_debug_fûe
);

1015 
	}
}

1017 
	$√t_debug
(*
fmt
, ...)

1019 
va_li°
 
va
;

1021 i‡(!
√t_debug_fûe
)

1023 
	`va_°¨t
(
va
, 
fmt
);

1024 
	`vÂrötf
(
√t_debug_fûe
, 
fmt
, 
va
);

1025 
	}
}

	@libnetwork/network.h

20 #i‚de‡
NETWORK_H


21 
	#NETWORK_H


	)

23 
	~<°dio.h
>

24 
	~<°döt.h
>

31 
	s√t_msg_t
 {

32 
uöt64_t
 
	m£q
;

33 
uöt64_t
 
	m£nd_cy˛e
;

34 
	msize
;

35 
	m§c_node_idx
, 
	md°_node_idx
;

36 
√t_node_t
 *
	m§c_node
, *
	md°_node
;

37 *
	md©a
;

40 
	mnode_idx
;

41 
	mwhîe
;

42 
	mp‹t_idx
;

46 
√t_buf„r_t
 *
	m§c_buf„r
, *
	md°_buf„r
;

47 
uöt64_t
 
	mbusy
;

50 
√t_msg_t
 *
	mbuckë_√xt
;

55 
	s√t_lök_t
 {

56 
	m§c_node_idx
, 
	m§c_p‹t_idx
;

57 
	md°_node_idx
, 
	md°_p‹t_idx
;

58 
	mb™dwidth
;

59 
uöt64_t
 
	mbusy
;

64 
	s√t_buf„r_t
 {

65 
	m«me
[30];

66 
	mcou¡
, 
	msize
;

67 
uöt64_t
 
	mªad_busy
;

68 
uöt64_t
 
	mwrôe_busy
;

72 
√t_°ack_t
 *
	mwakeup_hód
, *
	mwakeup_èû
;

77 
	s√t_p‹t_t
 {

78 
√t_lök_t
 *
	mlök
;

79 
√t_buf„r_t
 *
	mbuf„r
;

84 
	e√t_node_köd_íum
 {

85 
	m√t_node_íd
 = 0,

86 
	m√t_node_swôch
,

87 
	m√t_node_bus


92 
	s√t_node_t
 {

95 
√t_node_köd_íum
 
	mköd
;

96 
	m«me
[30];

97 *
	md©a
;

100 
	mb™dwidth
;

101 
uöt64_t
 
	mbus_busy
;

104 
√t_p‹t_t
 *
	mù‹ts
;

105 
√t_p‹t_t
 *
	m›‹ts
;

106 
	mù‹t_cou¡
;

107 
	m›‹t_cou¡
;

112 
	sroutög_íåy_t
 {

113 
	mco°
;

114 
	mp‹t
;

115 
	mrouã
;

120 
	#NET_MSG_TABLE_SIZE
 32

	)

121 
	s√t_t
 {

124 
	m«me
[30];

125 
uöt64_t
 
	mmsg_£q
;

128 
√t_node_t
 *
	mnodes
;

129 
	mnode_¨øy_size
;

130 
	mnode_cou¡
;

131 
	míd_node_cou¡
;

134 
routög_íåy_t
 *
	mroutög_èbÀ
;

138 
√t_msg_t
 *
	mmsg_èbÀ
[
NET_MSG_TABLE_SIZE
];

141 
uöt64_t
 
	må™s„rs
;

142 
uöt64_t
 
	mœt_acc
;

147 
	s√t_°ack_t
 {

150 
√t_t
 *
	m√t
;

151 
√t_msg_t
 *
	mmsg
;

154 
	mwakeup_evít
;

155 
√t_°ack_t
 *
	mwakeup_√xt
;

158 
	mªãvít
;

159 
√t_°ack_t
 *
	mªt°ack
;

169 
FILE
 *
√t_debug_fûe
;

171 
√t_debug_öô
(*
fûíame
);

172 
√t_debug_d⁄e
();

173 
√t_debug
(*
fmt
, ...);

183 
√t_öô
();

184 
√t_d⁄e
();

186 
√t_t
 *
√t_¸óã
(*
«me
);

187 
√t_‰ì
(
√t_t
 *
√t
);

189 
√t_√w_node
(
√t_t
 *
√t
, *
«me
, *
d©a
);

190 
√t_√w_swôch
(
√t_t
 *
√t
,

191 
ù‹t_cou¡
, 
ibuf„r_size
, 
›‹t_cou¡
, 
obuf„r_size
,

192 
b™dwidth
, *
«me
, *
d©a
);

193 
√t_√w_bus
(
√t_t
 *
√t
,

194 
ù‹t_cou¡
, 
›‹t_cou¡
,

195 
b™dwidth
, *
«me
, *
d©a
);

197 
√t_node_t
 *
√t_gë_node
(
√t_t
 *
√t
, 
node_idx
);

198 *
√t_gë_node_d©a
(
√t_t
 *
√t
, 
node_idx
);

200 
√t_gë_ù‹t_idx
(
√t_t
 *
√t
, 
node_idx
);

201 
√t_gë_›‹t_idx
(
√t_t
 *
√t
, 
node_idx
);

203 
√t_√w_lök
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
, 
b™dwidth
);

204 
√t_√w_bidúe˘i⁄Æ_lök
(
√t_t
 *
√t
, 
node1_idx
, 
node2_idx
, 
b™dwidth
);

206 
√t_ˇlcuœã_rouãs
(
√t_t
 *
√t
);

207 
√t_dump_rouãs
(
√t_t
 *
√t
, 
FILE
 *
f
);

209 
√t_vÆid_rouã
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
);

210 
√t_ˇn_£nd
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
);

211 
uöt64_t
 
√t_£nd
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
, 
size
);

212 
uöt64_t
 
√t_£nd_ev
(
√t_t
 *
√t
, 
§c_node_idx
, 
d°_node_idx
, 
size
,

213 
ªãvít
, *
ªt°ack
);

214 
√t_ö_å™sô
(
√t_t
 *
√t
, 
uöt64_t
 
£q
);

	@libopt/options.c

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

23 
	~<uni°d.h
>

24 
	~<sys/°©.h
>

25 
	~<mh™dÀ.h
>

27 
	~"›ti⁄s.h
"

31 
	sodb_t
 {

32 
›t_t
 *
	m›ti⁄s
;

33 *
	mhódî
;

34 
›t_nŸe_t
 *
	mnŸes
;

37 
odb_t
 *
	godb
 = 
NULL
;

38 *
	gvé¨gv
 = 
NULL
;

42 
	e›t_˛ass_t
 {

43 
	moc_öt32
 = 0,

44 
	moc_uöt32
,

45 
	moc_öt64
,

46 
	moc_uöt64
,

47 
	moc_Êﬂt
,

48 
	moc_doubÀ
,

49 
	moc_°rög
,

50 
	moc_boﬁ
,

51 
	moc_íum


55 
	s›t_t
 {

56 
›t_t
 *
	m√xt
;

57 
›t_˛ass_t
 
	moc
;

58 *
	m«me
;

59 *
	mdesc
;

60 *
	mv¨s
;

61 
	mnv¨s
;

62 *
	m√Àm
;

63 *
	mf‹m©
;

64 **
	mm≠
;

65 
	mm≠cou¡
;

69 
	s›t_nŸe_t
 {

70 
›t_nŸe_t
 *
	m√xt
;

71 *
	mnŸe
;

75 
›t_t
 *
	$√w_›ti⁄
(
›t_˛ass_t
 
oc
, *
«me
, *
desc
,

76 *
v¨s
, 
nv¨s
, *
√Àm
, *
f‹m©
)

78 
›t_t
 *
›t
, *
ñt
, *
¥ev
;

80 i‡(!
odb
)

81  
NULL
;

83 
›t
 = 
	`ˇŒoc
(1, (
›t_t
));

84 
›t
->
oc
 = oc;

85 
›t
->
«me
 =Çame;

86 
›t
->
desc
 = desc;

87 
›t
->
v¨s
 = vars;

88 
›t
->
nv¨s
 =Çvars;

89 
›t
->
√Àm
 =Çelem;

90 
›t
->
f‹m©
 = format;

92 i‡(
›t
->
«me
[0] != '-') {

93 
	`Ârötf
(
°dîr
, "îr‹: o±i⁄ '%s' d€†nŸ sèπ wôh '-'\n", 
›t
->
«me
);

94 
	`ab‹t
();

97 
¥ev
 = 
NULL
, 
ñt
 = 
odb
->
›ti⁄s
;

98 
ñt
;

99 
¥ev
 = 
ñt
,É… =É…->
√xt
)

101 i‡(!
	`°rcmp
(
ñt
->
«me
, 
›t
->name)) {

102 
	`Ârötf
(
°dîr
, "îr‹: o±i⁄ '%s'Ñedeföed\n", 
›t
->
«me
);

103 
	`ab‹t
();

107 
›t
->
√xt
 = 
NULL
;

108 i‡(
¥ev
Ë¥ev->
√xt
 = 
›t
;

109 
odb
->
›ti⁄s
 = 
›t
;

110  
›t
;

111 
	}
}

115 
	$°π€num
(*
vÆ
, **
m≠
, 
m≠cou¡
)

117 
i
;

118 
s
[100];

121 
i
 = 0; i < 
m≠cou¡
; i++)

122 i‡(!
	`°rcmp
(
vÆ
, 
m≠
[
i
]))

123  
i
;

126 
	`°r˝y
(
s
, "");

127 
i
 = 0; i < 
m≠cou¡
; i++) {

128 i‡(
i
)

129 
	`°rˇt
(
s
, "|");

130 
	`°rˇt
(
s
, 
m≠
[
i
]);

132 
	`Ârötf
(
°dîr
, "îr‹: vÆuê'%s'ÇŸ vÆid;ÖossibÀ vÆue†¨ê{%s}\n", 
vÆ
, 
s
);

133 
	`exô
(1);

135 
	}
}

139 
	$›t_öô
()

141 
odb
 = 
	`ˇŒoc
(1, (
odb_t
));

142 
	}
}

145 
	$›t_d⁄e
()

147 
›t_t
 *
ñt
, *
√xt
;

149 i‡(!
odb
)

153 
ñt
 = 
odb
->
›ti⁄s
;

154 
ñt
) {

155 
√xt
 = 
ñt
->next;

156 
	`‰ì
(
ñt
);

157 
ñt
 = 
√xt
;

159 
	`‰ì
(
odb
);

160 i‡(
vé¨gv
)

161 
	`‰ì
(
vé¨gv
);

162 
odb
 = 
NULL
;

163 
vé¨gv
 = 
NULL
;

164 
	}
}

167 
	$›t_ªg_öt32_li°
(*
«me
, *
desc
, 
öt32_t
 *
v¨s
, 
nv¨s
, *
√Àm
)

169 
	`√w_›ti⁄
(
oc_öt32
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%d");

170 
	}
}

173 
	$›t_ªg_uöt32_li°
(*
«me
, *
desc
, 
uöt32_t
 *
v¨s
, 
nv¨s
, *
√Àm
)

175 
	`√w_›ti⁄
(
oc_uöt32
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%u");

176 
	}
}

179 
	$›t_ªg_öt64_li°
(*
«me
, *
desc
, 
öt64_t
 *
v¨s
, 
nv¨s
, *
√Àm
)

181 
	`√w_›ti⁄
(
oc_öt64
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%lld");

182 
	}
}

185 
	$›t_ªg_uöt64_li°
(*
«me
, *
desc
, 
uöt64_t
 *
v¨s
, 
nv¨s
, *
√Àm
)

187 
	`√w_›ti⁄
(
oc_uöt64
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%llu");

188 
	}
}

191 
	$›t_ªg_Êﬂt_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
)

193 
	`√w_›ti⁄
(
oc_Êﬂt
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%f");

194 
	}
}

197 
	$›t_ªg_doubÀ_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
)

199 
	`√w_›ti⁄
(
oc_doubÀ
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%f");

200 
	}
}

203 
	$›t_ªg_°rög_li°
(*
«me
, *
desc
, **
v¨s
, 
nv¨s
, *
√Àm
)

205 
	`√w_›ti⁄
(
oc_°rög
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, "%s");

206 
	}
}

209 
	$›t_ªg_boﬁ_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
)

211 
	`√w_›ti⁄
(
oc_boﬁ
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, 
NULL
);

212 
	}
}

215 
	$›t_ªg_íum_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
,

216 **
m≠
, 
m≠cou¡
)

218 
›t_t
 *
›t
;

219 
›t
 = 
	`√w_›ti⁄
(
oc_íum
, 
«me
, 
desc
, 
v¨s
, 
nv¨s
, 
√Àm
, 
NULL
);

220 
›t
->
m≠
 = map;

221 
›t
->
m≠cou¡
 = mapcount;

222 
	}
}

225 
	$›t_¥öt_›ti⁄s
(
FILE
 *
f
)

227 
›t_t
 *
›t
;

228 
vÆ
[128], 
s
[128];

229 
i
, 
√Àm
;

231 i‡(!
odb
)

235 
	`Ârötf
(
f
, "option value # description\n");

236 
i
 = 0; i < 60; i++)

237 
	`Ârötf
(
f
, "-");

238 
	`Ârötf
(
f
, "\n");

241 
›t
 = 
odb
->
›ti⁄s
; o±; o± = o±->
√xt
) {

243 
√Àm
 = 
›t
->√Àm ? *›t->√Àm : o±->
nv¨s
;

244 
	`Ârötf
(
f
, "%-25†", 
›t
->
«me
);

245 *
vÆ
 = 0;

247 
›t
->
oc
) {

249 
oc_öt32
: {

250 
öt32_t
 *
v¨s
 = 
›t
->vars;

251 
i
 = 0; i < 
√Àm
; i++) {

252 
	`•rötf
(
s
, 
›t
->
f‹m©
, 
v¨s
[
i
]);

253 
	`°rˇt
(
vÆ
, 
s
);

254 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

259 
oc_uöt32
: {

260 
uöt32_t
 *
v¨s
 = 
›t
->vars;

261 
i
 = 0; i < 
√Àm
; i++) {

262 
	`•rötf
(
s
, 
›t
->
f‹m©
, 
v¨s
[
i
]);

263 
	`°rˇt
(
vÆ
, 
s
);

264 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

269 
oc_öt64
: {

270 
öt64_t
 *
v¨s
 = 
›t
->vars;

271 
i
 = 0; i < 
√Àm
; i++) {

272 
	`•rötf
(
s
, 
›t
->
f‹m©
, 
v¨s
[
i
]);

273 
	`°rˇt
(
vÆ
, 
s
);

274 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

279 
oc_uöt64
: {

280 
uöt64_t
 *
v¨s
 = 
›t
->vars;

281 
i
 = 0; i < 
√Àm
; i++) {

282 
	`•rötf
(
s
, 
›t
->
f‹m©
, 
v¨s
[
i
]);

283 
	`°rˇt
(
vÆ
, 
s
);

284 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

289 
oc_Êﬂt
: {

290 *
v¨s
 = 
›t
->vars;

291 
i
 = 0; i < 
√Àm
; i++) {

292 
	`•rötf
(
s
, 
›t
->
f‹m©
, (Ë
v¨s
[
i
]);

293 
	`°rˇt
(
vÆ
, 
s
);

294 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

299 
oc_doubÀ
: {

300 *
v¨s
 = 
›t
->vars;

301 
i
 = 0; i < 
√Àm
; i++) {

302 
	`•rötf
(
s
, 
›t
->
f‹m©
, 
v¨s
[
i
]);

303 
	`°rˇt
(
vÆ
, 
s
);

304 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

309 
oc_°rög
: {

310 **
v¨s
 = 
›t
->vars;

311 
i
 = 0; i < 
√Àm
; i++) {

312 
	`•rötf
(
s
, 
›t
->
f‹m©
, 
v¨s
[
i
]);

313 
	`°rˇt
(
vÆ
, 
s
);

314 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

319 
oc_boﬁ
: {

320 *
v¨s
 = 
›t
->vars;

321 
i
 = 0; i < 
√Àm
; i++) {

322 
	`•rötf
(
s
, "%s", 
v¨s
[
i
] ? "t" : "f");

323 
	`°rˇt
(
vÆ
, 
s
);

324 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

329 
oc_íum
: {

330 *
v¨s
 = 
›t
->vars;

331 
i
 = 0; i < 
√Àm
; i++) {

332 
	`•rötf
(
s
, "%s", 
›t
->
m≠
[
v¨s
[
i
]]);

333 
	`°rˇt
(
vÆ
, 
s
);

334 i‡(
i
 < 
√Àm
 - 1Ë
	`°rˇt
(
vÆ
, " ");

340 
	`Ârötf
(
f
, "%12†# %s\n", 
vÆ
, 
›t
->
desc
);

342 
	`Ârötf
(
f
, "\n");

343 
	}
}

350 
	#IS_OPT
(
X
Ë(
¨gv
[X][0] ='-')

	)

351 
	#LAST_ARG
(
X
Ë((XË=(*
¨gc
 - 1Ë|| 
	`IS_OPT
((XË+ 1))

	)

353 
	$›t_check_›ti⁄s
(*
¨gc
, **
¨gv
)

355 
i
, 
√Àm
 = 0, 
√w_¨gc
;

356 
›t_t
 *
›t
 = 
NULL
;

359 i‡(!
odb
 || *
¨gc
 <= 1)

362 
i
 = 1; i < *
¨gc
; i++) {

364 i‡(
	`IS_OPT
(
i
)) {

366 
›t
 = 
odb
->
›ti⁄s
; o±; o± = o±->
√xt
)

367 i‡(!
	`°rcmp
(
›t
->
«me
, 
¨gv
[
i
]))

369 i‡(!
›t
) {

370 
	`Ârötf
(
°dîr
, "îr‹: %s: invÆid o±i⁄\n", 
¨gv
[
i
]);

371 
	`exô
(1);

373 i‡(
	`LAST_ARG
(
i
)) {

374 
	`Ârötf
(
°dîr
, "îr‹: %s: o±i⁄ wôhouà¨gumíts\n", 
›t
->
«me
);

375 
	`exô
(1);

379 
√Àm
 = 0;

380 i‡(
›t
->
√Àm
)

381 *
›t
->
√Àm
 = 0;

387 i‡(
i
 == 1)

392 
›t
->
oc
) {

394 
oc_öt32
: {

395 
öt32_t
 *
pv¨
 = & ((öt32_à*Ë
›t
->
v¨s
)[
√Àm
];

396 i‡(
	`°æí
(
¨gv
[
i
]) >= 2 &&árgv[i][0] == '0' &&

397 (
¨gv
[
i
][1] == 'x' ||árgv[i][1] == 'X'))

398 
	`ssˇnf
(
¨gv
[
i
] + 2, "%x", 
pv¨
);

400 
	`ssˇnf
(
¨gv
[
i
], "%d", 
pv¨
);

404 
oc_uöt32
: {

405 
uöt32_t
 *
pv¨
 = & ((uöt32_à*Ë
›t
->
v¨s
)[
√Àm
];

406 i‡(
	`°æí
(
¨gv
[
i
]) >= 2 &&árgv[i][0] == '0' &&

407 (
¨gv
[
i
][1] == 'x' ||árgv[i][1] == 'X'))

408 
	`ssˇnf
(
¨gv
[
i
] + 2, "%x", 
pv¨
);

410 
	`ssˇnf
(
¨gv
[
i
], "%u", 
pv¨
);

414 
oc_öt64
: {

415 
öt64_t
 *
pv¨
 = & ((öt64_à*Ë
›t
->
v¨s
)[
√Àm
];

416 i‡(
	`°æí
(
¨gv
[
i
]) >= 2 &&árgv[i][0] == '0' &&

417 (
¨gv
[
i
][1] == 'x' ||árgv[i][1] == 'X'))

418 
	`ssˇnf
(
¨gv
[
i
] + 2, "%Œx", (*Ë
pv¨
);

420 
	`ssˇnf
(
¨gv
[
i
], "%Œd", (*Ë
pv¨
);

424 
oc_uöt64
: {

425 
uöt64_t
 *
pv¨
 = & ((uöt64_à*Ë
›t
->
v¨s
)[
√Àm
];

426 i‡(
	`°æí
(
¨gv
[
i
]) >= 2 &&árgv[i][0] == '0' &&

427 (
¨gv
[
i
][1] == 'x' ||árgv[i][1] == 'X'))

428 
	`ssˇnf
(
¨gv
[
i
] + 2, "%Œx", (*Ë
pv¨
);

430 
	`ssˇnf
(
¨gv
[
i
], "%Œu", (*Ë
pv¨
);

434 
oc_Êﬂt
: {

435 *
pv¨
 = & ((*Ë
›t
->
v¨s
)[
√Àm
];

436 
	`ssˇnf
(
¨gv
[
i
], "%f", 
pv¨
);

440 
oc_doubÀ
: {

441 *
pv¨
 = & ((*Ë
›t
->
v¨s
)[
√Àm
];

442 
	`ssˇnf
(
¨gv
[
i
], "%lf", 
pv¨
);

446 
oc_°rög
: {

447 **
pv¨
 = & ((**Ë
›t
->
v¨s
)[
√Àm
];

448 *
pv¨
 = 
¨gv
[
i
];

452 
oc_boﬁ
: {

453 *
pv¨
 = & ((*Ë
›t
->
v¨s
)[
√Àm
];

454 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
], "t"))

455 *
pv¨
 = 1;

456 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
], "f"))

457 *
pv¨
 = 0;

459 
	`Ârötf
(
°dîr
, "îr‹: %s: o±i⁄ c™ bê't' o∏'f'\n", 
›t
->
«me
);

460 
	`exô
(1);

465 
oc_íum
: {

466 *
pv¨
 = & ((*Ë
›t
->
v¨s
)[
√Àm
];

467 *
pv¨
 = 
	`°π€num
(
¨gv
[
i
], 
›t
->
m≠
, o±->
m≠cou¡
);

473 
√Àm
++;

474 i‡(
›t
->
√Àm
)

475 *
›t
->
√Àm
 =Çelem;

476 i‡(
	`LAST_ARG
(
i
Ë&& 
√Àm
 < 
›t
->
nv¨s
) {

477 
	`Ârötf
(
°dîr
, "îr‹: %s: o±i⁄Ñequúe†%dárgumít(s)\n", 
›t
->
«me
, o±->
nv¨s
);

478 
	`exô
(1);

480 i‡(!
	`LAST_ARG
(
i
Ë&& 
√Àm
 >
›t
->
nv¨s
) {

481 
i
++;

487 
√w_¨gc
 = *
¨gc
 - 
i
 + 1;

488 
i
 = 1; i < 
√w_¨gc
; i++)

489 
¨gv
[
i
] =árgv[ò+ *
¨gc
 - 
√w_¨gc
];

490 *
¨gc
 = 
√w_¨gc
;

491 
	}
}

496 
	$›t_check_c⁄fig
(*
cfg_fûe
)

498 
FILE
 *
f
;

499 **
¨gv
, *
¨gvcuº
, 
buf
[1000], *
löe
, *
íd
;

500 
¨gc
, 
max¨gc
 = 200, 
Àn
;

501 
°©
 
fs
;

503 i‡(!
odb
 || !
cfg_fûe
 || !*cfg_file)

505 i‡(
vé¨gv
) {

506 
	`Ârötf
(
°dîr
, "error: cannotÜoad moreÅhan one config file\n");

507 
	`exô
(1);

511 
	`l°©
(
cfg_fûe
, &
fs
);

512 
f
 = 
	`f›í
(
cfg_fûe
, "rt");

513 i‡(!
f
) {

514 
	`Ârötf
(
°dîr
, "îr‹: %s: c™nŸ o≥¿c⁄fig fûe\n", 
cfg_fûe
);

515 
	`exô
(1);

519 
¨gc
 = 1;

520 
¨gv
 = (**Ë
	`ˇŒoc
(
max¨gc
, (*));

521 
vé¨gv
 = (*Ë
	`mÆloc
(
fs
.
°_size
 + 1);

522 
¨gv
[0] = "sim";

523 
¨gvcuº
 = 
vé¨gv
;

527 
löe
 = 
	`fgës
(
buf
, 1000, 
f
);

528 i‡(!
löe
 || 
	`„of
(
f
))

532 i‡(*
löe
 == '#')

536 *
löe
) {

539 *
löe
 == '\n' || *line == ' ')

540 
löe
++;

541 i‡(!*
löe
)

545 i‡(
¨gc
 =
max¨gc
) {

546 
	`Ârötf
(
°dîr
, "îr‹: %s:Åoÿm™yárgumíts\n", 
cfg_fûe
);

547 
	`exô
(1);

551 
íd
 = 
	`ödex
(
löe
, ' ');

552 
Àn
 = 
íd
 ?Énd - 
löe
 : 
	`°æí
(line);

553 i‡(
löe
[
Àn
 - 1] == '\n')Üen--;

556 
¨gv
[
¨gc
] = 
¨gvcuº
;

557 
	`°∫˝y
(
¨gvcuº
, 
löe
, 
Àn
);

558 
¨gvcuº
[
Àn
] = 0;

559 
¨gvcuº
 +
Àn
 + 1;

560 
löe
 +
Àn
;

561 
¨gc
++;

566 
	`f˛o£
(
f
);

567 
	`›t_check_›ti⁄s
(&
¨gc
, 
¨gv
);

568 
	`‰ì
(
¨gv
);

570 
	}
}

575 
	$›t_gë_›ti⁄
(*
«me
)

577 
›t_t
 *
›t
;

579 i‡(!
odb
)

582 
›t
 = 
odb
->
›ti⁄s
; o±; o± = o±->
√xt
) {

583 i‡(!
	`°rcmp
(
›t
->
«me
 + 1,Çame)) {

585 
›t
->
oc
) {

586 
oc_öt32
:

587  * (
öt32_t
 *Ë
›t
->
v¨s
;

588 
oc_uöt32
:

589  * (
uöt32_t
 *Ë
›t
->
v¨s
;

590 
oc_öt64
:

591  * (
öt64_t
 *Ë
›t
->
v¨s
;

592 
oc_uöt64
:

593  * (
uöt64_t
 *Ë
›t
->
v¨s
;

594 
oc_Êﬂt
:

595  * (*Ë
›t
->
v¨s
;

596 
oc_doubÀ
:

597  * (*Ë
›t
->
v¨s
;

599 
	`Ârötf
(
°dîr
, "îr‹: %s: c™nŸ gë doubÀ vÆuêf‹ o±i⁄\n", 
›t
->
«me
);

600 
	`ab‹t
();

604 
	`Ârötf
(
°dîr
, "îr‹: %s: o±i⁄ d€†nŸÉxi°\n", 
«me
);

605 
	`ab‹t
();

607 
	}
}

	@libopt/options.h

20 #i‚de‡
OPTIONS_H


21 
	#OPTIONS_H


	)

23 
	~<°dio.h
>

24 
	~<°döt.h
>

27 
›t_öô
();

28 
›t_d⁄e
();

32 
	#›t_ªg_öt32
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_öt32_li°
“ame, desc, v¨, 1, 
NULL
)

	)

33 
	#›t_ªg_uöt32
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_uöt32_li°
“ame, desc, v¨, 1, 
NULL
)

	)

34 
	#›t_ªg_öt64
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_öt64_li°
“ame, desc, v¨, 1, 
NULL
)

	)

35 
	#›t_ªg_uöt64
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_uöt64_li°
“ame, desc, v¨, 1, 
NULL
)

	)

36 
	#›t_ªg_Êﬂt
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_Êﬂt_li°
“ame, desc, v¨, 1, 
NULL
)

	)

37 
	#›t_ªg_doubÀ
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_doubÀ_li°
“ame, desc, v¨, 1, 
NULL
)

	)

38 
	#›t_ªg_°rög
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_°rög_li°
“ame, desc, v¨, 1, 
NULL
)

	)

39 
	#›t_ªg_boﬁ
(
«me
, 
desc
, 
v¨
Ë
	`›t_ªg_boﬁ_li°
“ame, desc, v¨, 1, 
NULL
)

	)

40 
	#›t_ªg_íum
(
«me
, 
desc
, 
v¨
, 
m≠
, 
m≠cou¡
) \

41 
	`›t_ªg_íum_li°
(
«me
, 
desc
, 
v¨
, 1, 
NULL
, 
m≠
, 
m≠cou¡
)

	)

48 
›t_ªg_öt32_li°
(*
«me
, *
desc
, 
öt32_t
 *
v¨s
, 
nv¨s
, *
√Àm
);

49 
›t_ªg_uöt32_li°
(*
«me
, *
desc
, 
uöt32_t
 *
v¨s
, 
nv¨s
, *
√Àm
);

50 
›t_ªg_öt64_li°
(*
«me
, *
desc
, 
öt64_t
 *
v¨s
, 
nv¨s
, *
√Àm
);

51 
›t_ªg_uöt64_li°
(*
«me
, *
desc
, 
uöt64_t
 *
v¨s
, 
nv¨s
, *
√Àm
);

52 
›t_ªg_Êﬂt_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
);

53 
›t_ªg_doubÀ_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
);

54 
›t_ªg_°rög_li°
(*
«me
, *
desc
, **
v¨s
, 
nv¨s
, *
√Àm
);

55 
›t_ªg_boﬁ_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
);

56 
›t_ªg_íum_li°
(*
«me
, *
desc
, *
v¨s
, 
nv¨s
, *
√Àm
,

57 **
m≠
, 
m≠cou¡
);

61 
›t_¥öt_›ti⁄s
(
FILE
 *
f
);

62 
›t_check_›ti⁄s
(*
¨gc
, **
¨gv
);

63 
›t_check_c⁄fig
(*
fûe
);

67 
›t_gë_›ti⁄
(*
«me
);

	@libstruct/buffer.c

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<mh™dÀ.h
>

23 
	~"buf„r.h
"

25 
	#MIN
(
X
,
Y
Ë((X)<(Y)?(X):(Y))

	)

26 
	#MAX
(
X
,
Y
Ë((X)>(Y)?(X):(Y))

	)

28 
	sbuf„r_t
 {

29 *
	md©a
;

30 
	mcou¡
, 
	msize
;

31 
	mhód
, 
	mèû
;

40 
	$grow
(
buf„r_t
 *
buf„r
, 
size
)

42 *
d©a
;

45 i‡(
size
 < 
buf„r
->size)

47 
d©a
 = 
	`ˇŒoc
(1, 
size
);

48 i‡(!
d©a
)

52 
	`mem˝y
(
d©a
, 
buf„r
->d©®+ buf„r->
hód
, buf„r->
size
 - buffer->head);

53 
	`mem˝y
(
d©a
 + 
buf„r
->
size
 - buf„r->
hód
, buffer->data, buffer->head);

56 
	`‰ì
(
buf„r
->
d©a
);

57 
buf„r
->
d©a
 = data;

58 
buf„r
->
size
 = size;

59 
buf„r
->
hód
 = 0;

60 
buf„r
->
èû
 = buf„r->
cou¡
;

62 
	}
}

70 
buf„r_t
 *
	$buf„r_¸óã
(
size
)

72 
buf„r_t
 *
buf„r
;

73 
buf„r
 = 
	`ˇŒoc
(1, (
buf„r_t
));

74 i‡(!
buf„r
)

75  
NULL
;

76 
buf„r
->
size
 = size;

77 
buf„r
->
d©a
 = 
	`ˇŒoc
(1, 
size
);

78 i‡(!
buf„r
->
d©a
) {

79 
	`‰ì
(
buf„r
);

80  
NULL
;

82  
buf„r
;

83 
	}
}

86 
	$buf„r_‰ì
(
buf„r_t
 *
buf„r
)

88 
	`‰ì
(
buf„r
->
d©a
);

89 
	`‰ì
(
buf„r
);

90 
	}
}

94 
	$buf„r_ªad
(
buf„r_t
 *
buf„r
, *
de°
, 
size
)

96 
right
, 
À·
;

99 
size
 = 
	`MIN
(size, 
buf„r
->
cou¡
);

100 
right
 = 
	`MIN
(
buf„r
->
size
 - buf„r->
hód
, size);

101 
À·
 = 
size
 - 
right
;

104 
	`mem˝y
(
de°
, 
buf„r
->
d©a
 + buf„r->
hód
, 
right
);

105 
	`mem˝y
(
de°
 + 
right
, 
buf„r
->
d©a
, 
À·
);

106 
buf„r
->
hód
 = (buf„r->hód + 
size
) % buffer->size;

107 
buf„r
->
cou¡
 -
size
;

109  
size
;

110 
	}
}

114 
	$buf„r_wrôe
(
buf„r_t
 *
buf„r
, *
de°
, 
size
)

116 
right
, 
À·
;

119 
buf„r
->
cou¡
 + 
size
 > buffer->size)

120 i‡(!
	`grow
(
buf„r
, 
	`MAX
(buf„r->
cou¡
 + 
size
, buffer->size * 2)))

124 
right
 = 
	`MIN
(
buf„r
->
size
 - buf„r->
èû
, size);

125 
À·
 = 
size
 - 
right
;

126 
	`mem˝y
(
buf„r
->
d©a
 + buf„r->
èû
, 
de°
, 
right
);

127 
	`mem˝y
(
buf„r
->
d©a
, 
de°
 + 
right
, 
À·
);

128 
buf„r
->
èû
 = (buf„r->èû + 
size
) % buffer->size;

129 
buf„r
->
cou¡
 +
size
;

131  
size
;

132 
	}
}

136 
	$buf„r_cou¡
(
buf„r_t
 *
buf„r
)

138  
buf„r
->
cou¡
;

139 
	}
}

	@libstruct/buffer.h

20 #i‚de‡
BUFFER_H


21 
	#BUFFER_H


	)

23 
	gbuf„r_t
;

26 
buf„r_t
 *
buf„r_¸óã
(
size
);

27 
buf„r_‰ì
(
buf„r_t
 *
buf„r
);

30 
buf„r_ªad
(
buf„r_t
 *
buf„r
, *
de°
, 
size
);

31 
buf„r_wrôe
(
buf„r_t
 *
buf„r
, *
§c
, 
size
);

32 
buf„r_cou¡
(
buf„r_t
 *
buf„r
);

	@libstruct/chrono.c

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<sys/time.h
>

23 
	~<mh™dÀ.h
>

24 
	~"chr⁄o.h
"

25 
	~"li°.h
"

28 
	#CHRONO_STOPPED
 0

	)

29 
	#CHRONO_RUNNING
 1

	)

32 
	schr⁄o_t
 {

33 
	m°©us
;

34 
	mñœp£d
;

35 
	m°¨t
;

36 *
	m«me
;

40 
	$cuºít_time
()

42 
timevÆ
 
tv
;

43 
	`gëtimeofday
(&
tv
, 
NULL
);

44  (Ë
tv
.
tv_£c
 + (Ëtv.
tv_u£c
 / 1.0e6;

45 
	}
}

48 
chr⁄o_t
 *
	$chr⁄o_¸óã
(*
«me
)

50 
chr⁄o_t
 *
chr⁄o
;

51 
chr⁄o
 = 
	`ˇŒoc
(1, (
chr⁄o_t
));

52 
chr⁄o
->
«me
 =Çame;

53  
chr⁄o
;

54 
	}
}

57 
	$chr⁄o_‰ì
(
chr⁄o_t
 *
chr⁄o
)

59 
	`‰ì
(
chr⁄o
);

60 
	}
}

63 
	$chr⁄o_°¨t
(
chr⁄o_t
 *
chr⁄o
)

65 i‡(
chr⁄o
->
°©us
 =
CHRONO_RUNNING
)

67 
chr⁄o
->
°©us
 = 
CHRONO_RUNNING
;

68 
chr⁄o
->
°¨t
 = 
	`cuºít_time
();

69 
	}
}

72 
	$chr⁄o_°›
(
chr⁄o_t
 *
chr⁄o
)

74 
now
, 
ñœp£d
;

75 i‡(
chr⁄o
->
°©us
 =
CHRONO_STOPPED
)

77 
chr⁄o
->
°©us
 = 
CHRONO_STOPPED
;

78 
now
 = 
	`cuºít_time
();

79 
ñœp£d
 = 
now
 - 
chr⁄o
->
°¨t
;

80 
chr⁄o
->
ñœp£d
 +=Éllapsed;

81 
	}
}

84 
	$chr⁄o_ª£t
(
chr⁄o_t
 *
chr⁄o
)

86 
chr⁄o
->
ñœp£d
 = 0.0;

87 
chr⁄o
->
°¨t
 = 
	`cuºít_time
();

88 
	}
}

91 
	$chr⁄o_ñœp£d
(
chr⁄o_t
 *
chr⁄o
)

93  
chr⁄o
->
°©us
 =
CHRONO_STOPPED
 ?

94 
chr⁄o
->
ñœp£d
 :

95 
chr⁄o
->
ñœp£d
 + (
	`cuºít_time
(Ë- chr⁄o->
°¨t
);

96 
	}
}

99 *
	$chr⁄o_«me
(
chr⁄o_t
 *
chr⁄o
)

101  
chr⁄o
->
«me
;

102 
	}
}

105 
	schr⁄o_li°_t


107 
li°_t
 *
	mli°
;

111 
chr⁄o_li°_t
 *
	$chr⁄o_li°_¸óã
()

113 
chr⁄o_li°_t
 *
chr⁄o_li°
;

114 
chr⁄o_li°
 = 
	`ˇŒoc
(1, (
chr⁄o_li°_t
));

115 i‡(!
chr⁄o_li°
)

116  
NULL
;

117 
chr⁄o_li°
->
li°
 = 
	`li°_¸óã
(10);

118 i‡(!
chr⁄o_li°
->
li°
) {

119 
	`‰ì
(
chr⁄o_li°
);

120  
NULL
;

122  
chr⁄o_li°
;

123 
	}
}

126 
	$chr⁄o_li°_‰ì
(
chr⁄o_li°_t
 *
chr⁄o_li°
)

128 
i
;

129 
chr⁄o_t
 *
chr⁄o
;

130 
i
 = 0; i < 
	`li°_cou¡
(
chr⁄o_li°
->
li°
); i++) {

131 
chr⁄o
 = 
	`li°_gë
(
chr⁄o_li°
->
li°
, 
i
);

132 
	`chr⁄o_‰ì
(
chr⁄o
);

134 
	`li°_‰ì
(
chr⁄o_li°
->
li°
);

135 
	`‰ì
(
chr⁄o_li°
);

136 
	}
}

139 
	$chr⁄o_li°_√w
(
chr⁄o_li°_t
 *
chr⁄o_li°
, *
«me
)

141 
chr⁄o_t
 *
chr⁄o
;

142 
chr⁄o
 = 
	`chr⁄o_¸óã
(
«me
);

143 
	`li°_add
(
chr⁄o_li°
->
li°
, 
chr⁄o
);

144  
	`li°_cou¡
(
chr⁄o_li°
->
li°
) - 1;

145 
	}
}

148 
	$chr⁄o_li°_°¨t
(
chr⁄o_li°_t
 *
chr⁄o_li°
, 
idx
)

150 
chr⁄o_t
 *
chr⁄o
;

151 i‡(
idx
 < 0 || idx >
	`li°_cou¡
(
chr⁄o_li°
->
li°
))

153 
chr⁄o
 = 
	`li°_gë
(
chr⁄o_li°
->
li°
, 
idx
);

154 
	`chr⁄o_°¨t
(
chr⁄o
);

155 
	}
}

158 
	$chr⁄o_li°_°›
(
chr⁄o_li°_t
 *
chr⁄o_li°
, 
idx
)

160 
chr⁄o_t
 *
chr⁄o
;

161 i‡(
idx
 < 0 || idx >
	`li°_cou¡
(
chr⁄o_li°
->
li°
))

163 
chr⁄o
 = 
	`li°_gë
(
chr⁄o_li°
->
li°
, 
idx
);

164 
	`chr⁄o_°›
(
chr⁄o
);

165 
	}
}

168 
	$chr⁄o_li°_dump
(
chr⁄o_li°_t
 *
chr⁄o_li°
, 
FILE
 *
f
)

170 
i
;

171 
tŸÆ
 = 0.0;

172 
chr⁄o_t
 *
chr⁄o
;

173 
i
 = 0; i < 
	`li°_cou¡
(
chr⁄o_li°
->
li°
); i++) {

174 
chr⁄o
 = 
	`li°_gë
(
chr⁄o_li°
->
li°
, 
i
);

175 
tŸÆ
 +
	`chr⁄o_ñœp£d
(
chr⁄o
);

177 i‡(
tŸÆ
 == 0.0)

178 
tŸÆ
 = 1.0;

179 
i
 = 0; i < 
	`li°_cou¡
(
chr⁄o_li°
->
li°
); i++) {

180 
chr⁄o
 = 
	`li°_gë
(
chr⁄o_li°
->
li°
, 
i
);

181 
	`Ârötf
(
f
, "chronometer %s:Éllapsed=%fs, (%.4f)\n",

182 
	`chr⁄o_«me
(
chr⁄o
),

183 
	`chr⁄o_ñœp£d
(
chr⁄o
),

184 
	`chr⁄o_ñœp£d
(
chr⁄o
Ë/ 
tŸÆ
);

186 
	}
}

	@libstruct/chrono.h

20 #i‚de‡
CHRONO_H


21 
	#CHRONO_H


	)

23 
	~<°dio.h
>

25 
	gchr⁄o_t
;

27 
chr⁄o_t
 *
chr⁄o_¸óã
();

28 
chr⁄o_‰ì
(
chr⁄o_t
 *
chr⁄o
);

30 
chr⁄o_°¨t
(
chr⁄o_t
 *
chr⁄o
);

31 
chr⁄o_°›
(
chr⁄o_t
 *
chr⁄o
);

32 
chr⁄o_ª£t
(
chr⁄o_t
 *
chr⁄o
);

33 
chr⁄o_ñœp£d
(
chr⁄o_t
 *
chr⁄o
);

34 *
chr⁄o_«me
(
chr⁄o_t
 *
chr⁄o
);

37 
	gchr⁄o_li°_t
;

39 
chr⁄o_li°_t
 *
chr⁄o_li°_¸óã
();

40 
chr⁄o_li°_‰ì
(
chr⁄o_li°_t
 *
chr⁄o_li°
);

42 
chr⁄o_li°_√w
(
chr⁄o_li°_t
 *
chr⁄o_li°
, *
«me
);

43 
chr⁄o_li°_°¨t
(
chr⁄o_li°_t
 *
chr⁄o_li°
, 
idx
);

44 
chr⁄o_li°_°›
(
chr⁄o_li°_t
 *
chr⁄o_li°
, 
idx
);

45 
chr⁄o_li°_dump
(
chr⁄o_li°_t
 *
chr⁄o_li°
, 
FILE
 *
f
);

	@libstruct/config.c

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<mh™dÀ.h
>

24 
	~"c⁄fig.h
"

25 
	~"hash.h
"

27 
	#BUFSIZE
 1000

	)

28 
	#SECTIONS_SIZE
 20

	)

29 
	#KEYS_SIZE
 20

	)

39 
	sc⁄fig_t
 {

40 *
	mfûíame
;

41 
hashèbÀ_t
 *
	m£˘i⁄s
;

52 
	$‰ì_keys
(
hashèbÀ_t
 *
keys
)

54 *
key
, *
vÆue
;

57 
key
 = 
	`hashèbÀ_föd_fú°
(
keys
, (**Ë&
vÆue
);

58 
key
) {

59 
	`‰ì
(
vÆue
);

60 
key
 = 
	`hashèbÀ_föd_√xt
(
keys
, (**Ë&
vÆue
);

64 
	`hashèbÀ_‰ì
(
keys
);

65 
	}
}

69 
	$‰ì_£˘i⁄s
(
hashèbÀ_t
 *
£˘i⁄s
)

71 *
£˘i⁄
;

72 
hashèbÀ_t
 *
keys
;

75 
£˘i⁄
 = 
	`hashèbÀ_föd_fú°
(
£˘i⁄s
, (**Ë&
keys
);

76 
£˘i⁄
) {

77 
	`‰ì_keys
(
keys
);

78 
£˘i⁄
 = 
	`hashèbÀ_föd_√xt
(
£˘i⁄s
, (**Ë&
keys
);

82 
	`hashèbÀ_‰ì
(
£˘i⁄s
);

83 
	}
}

89 
hashèbÀ_t
 *
	$√w_£˘i⁄
(
hashèbÀ_t
 *
£˘i⁄s
, *
£˘i⁄
)

91 
hashèbÀ_t
 *
keys
;

94 
keys
 = (
hashèbÀ_t
 *Ë
	`hashèbÀ_gë
(
£˘i⁄s
, 
£˘i⁄
);

95 i‡(
keys
)

96  
keys
;

99 
keys
 = 
	`hashèbÀ_¸óã
(
KEYS_SIZE
, 0);

100 
	`hashèbÀ_ö£π
(
£˘i⁄s
, 
£˘i⁄
, 
keys
);

101  
keys
;

102 
	}
}

106 
	$√w_key
(
hashèbÀ_t
 *
keys
, *
key
, *
vÆue
)

108 *
ovÆue
, *
nvÆue
;

111 
ovÆue
 = (*Ë
	`hashèbÀ_gë
(
keys
, 
key
);

112 i‡(
ovÆue
) {

113 
	`‰ì
(
ovÆue
);

114 
nvÆue
 = 
	`°rdup
(
vÆue
);

115 
	`hashèbÀ_£t
(
keys
, 
key
, 
nvÆue
);

120 
nvÆue
 = 
	`°rdup
(
vÆue
);

121 
	`hashèbÀ_ö£π
(
keys
, 
key
, 
nvÆue
);

122 
	}
}

126 *
	$åim
(*
s
)

128 
Àn
 = 
	`°æí
(
s
);

129 *
s
 == ' ' || *s == '\t')

130 
s
++, 
Àn
--;

131 
s
[
Àn
 - 1] == ' ' || s[len - 1] == '\t' || s[len - 1] == '\n')

132 
s
[--
Àn
] = 0;

133  
s
;

134 
	}
}

138 
	$bªak_löe
(*
s
, **
key
, **
vÆue
)

140 *
equÆ
;

143 
equÆ
 = 
	`ödex
(
s
, '=');

144 i‡(!
equÆ
) {

145 *
key
 = *
vÆue
 = 
NULL
;

150 *
equÆ
 = 0;

151 *
key
 = 
	`åim
(
s
);

152 *
vÆue
 = 
	`åim
(
equÆ
 + 1);

153 
	}
}

163 
c⁄fig_t
 *
	$c⁄fig_¸óã
(*
fûíame
)

165 
c⁄fig_t
 *
cfg
;

168 
cfg
 = 
	`mÆloc
((
c⁄fig_t
));

169 i‡(!
cfg
)

170  
NULL
;

173 
cfg
->
£˘i⁄s
 = 
	`hashèbÀ_¸óã
(
SECTIONS_SIZE
, 0);

174 
cfg
->
fûíame
 = 
	`°rdup
(filename);

175 i‡(!
cfg
->
fûíame
 || !cfg->
£˘i⁄s
)

178  
NULL
;

182  
cfg
;

183 
	}
}

186 
	$c⁄fig_‰ì
(
c⁄fig_t
 *
cfg
)

188 
	`‰ì_£˘i⁄s
(
cfg
->
£˘i⁄s
);

189 
	`‰ì
(
cfg
->
fûíame
);

190 
	`‰ì
(
cfg
);

191 
	}
}

194 
	$c⁄fig_lﬂd
(
c⁄fig_t
 *
cfg
)

196 
FILE
 *
f
;

197 
buf
[
BUFSIZE
], *
löe
, *
key
, *
vÆue
;

198 
hashèbÀ_t
 *
keys
 = 
NULL
;

201 
	`‰ì_£˘i⁄s
(
cfg
->
£˘i⁄s
);

202 
cfg
->
£˘i⁄s
 = 
	`hashèbÀ_¸óã
(
SECTIONS_SIZE
, 0);

205 
f
 = 
	`f›í
(
cfg
->
fûíame
, "rt");

206 i‡(!
f
)

214 !
	`„of
(
f
)) {

217 
löe
 = 
	`fgës
(
buf
, 
BUFSIZE
, 
f
);

218 i‡(!
löe
)

220 
löe
 = 
	`åim
(line);

223 i‡(*
löe
 ='[' &&Üöe[
	`°æí
(line) - 1] == ']') {

224 
löe
++;

225 
löe
[
	`°æí
(line) - 1] = 0;

226 
löe
 = 
	`åim
(line);

227 
keys
 = 
	`√w_£˘i⁄
(
cfg
->
£˘i⁄s
, 
löe
);

232 
	`bªak_löe
(
löe
, &
key
, &
vÆue
);

233 i‡(!
keys
 || !
key
)

237 
	`√w_key
(
keys
, 
key
, 
vÆue
);

241 
	`f˛o£
(
f
);

244 
	}
}

247 
	$c⁄fig_ßve
(
c⁄fig_t
 *
cfg
)

249 
FILE
 *
f
;

250 *
£˘i⁄
, *
key
, *
vÆue
;

251 
hashèbÀ_t
 *
keys
;

254 
f
 = 
	`f›í
(
cfg
->
fûíame
, "wt");

255 i‡(!
f
)

259 
£˘i⁄
 = 
	`hashèbÀ_föd_fú°
(
cfg
->
£˘i⁄s
, (**Ë&
keys
);

260 
£˘i⁄
) {

263 
	`Ârötf
(
f
, "[%s]\n", 
£˘i⁄
);

266 
key
 = 
	`hashèbÀ_föd_fú°
(
keys
, (**Ë&
vÆue
);

267 
key
) {

268 
	`Ârötf
(
f
, "%s=%s\n", 
key
, 
vÆue
);

269 
key
 = 
	`hashèbÀ_föd_√xt
(
keys
, (**Ë&
vÆue
);

273 
£˘i⁄
 = 
	`hashèbÀ_föd_√xt
(
cfg
->
£˘i⁄s
, (**Ë&
keys
);

274 
	`Ârötf
(
f
, "\n");

278 
	`f˛o£
(
f
);

280 
	}
}

283 
	$c⁄fig_£˘i⁄_exi°s
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
)

285  
	`hashèbÀ_gë
(
cfg
->
£˘i⁄s
, 
£˘i⁄
Ë!
NULL
;

286 
	}
}

289 
	$c⁄fig_key_exi°s
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
)

291 
hashèbÀ_t
 *
keys
;

294 
keys
 = (
hashèbÀ_t
 *Ë
	`hashèbÀ_gë
(
cfg
->
£˘i⁄s
, 
£˘i⁄
);

295 i‡(!
keys
)

299  
	`hashèbÀ_gë
(
keys
, 
key
Ë!
NULL
;

300 
	}
}

303 *
	$c⁄fig_£˘i⁄_fú°
(
c⁄fig_t
 *
cfg
)

305  
	`hashèbÀ_föd_fú°
(
cfg
->
£˘i⁄s
, 
NULL
);

306 
	}
}

309 *
	$c⁄fig_£˘i⁄_√xt
(
c⁄fig_t
 *
cfg
)

311  
	`hashèbÀ_föd_√xt
(
cfg
->
£˘i⁄s
, 
NULL
);

312 
	}
}

315 
	$c⁄fig_£˘i⁄_ªmove
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
)

317 
hashèbÀ_t
 *
keys
;

320 
keys
 = (
hashèbÀ_t
 *Ë
	`hashèbÀ_ªmove
(
cfg
->
£˘i⁄s
, 
£˘i⁄
);

321 i‡(!
keys
)

325 
	`‰ì_keys
(
keys
);

327 
	}
}

330 
	$c⁄fig_key_ªmove
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
)

332 
hashèbÀ_t
 *
keys
;

333 *
vÆue
;

336 
keys
 = (
hashèbÀ_t
 *Ë
	`hashèbÀ_gë
(
cfg
->
£˘i⁄s
, 
£˘i⁄
);

337 i‡(!
keys
)

341 
vÆue
 = (*Ë
	`hashèbÀ_ªmove
(
keys
, 
key
);

342 i‡(!
vÆue
)

346 
	`‰ì
(
vÆue
);

348 
	}
}

351 
	$c⁄fig_wrôe_°rög
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
vÆue
)

353 
hashèbÀ_t
 *
keys
;

354 
keys
 = 
	`√w_£˘i⁄
(
cfg
->
£˘i⁄s
, 
£˘i⁄
);

355 
	`√w_key
(
keys
, 
key
, 
vÆue
);

356 
	}
}

359 
	$c⁄fig_wrôe_öt
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
vÆue
)

361 
s
[
BUFSIZE
];

362 
	`•rötf
(
s
, "%d", 
vÆue
);

363 
	`c⁄fig_wrôe_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
s
);

364 
	}
}

367 
	$c⁄fig_wrôe_boﬁ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
vÆue
)

369 
s
[
BUFSIZE
];

370 
	`°r˝y
(
s
, 
vÆue
 ? "t" : "f");

371 
	`c⁄fig_wrôe_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
s
);

372 
	}
}

375 
	$c⁄fig_wrôe_doubÀ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
vÆue
)

377 
s
[
BUFSIZE
];

378 
	`•rötf
(
s
, "%f", 
vÆue
);

379 
	`c⁄fig_wrôe_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
s
);

380 
	}
}

383 
	$c⁄fig_wrôe_±r
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
vÆue
)

385 
s
[
BUFSIZE
];

386 
	`•rötf
(
s
, "%p", 
vÆue
);

387 
	`c⁄fig_wrôe_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
s
);

388 
	}
}

391 *
	$c⁄fig_ªad_°rög
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
def
)

393 
hashèbÀ_t
 *
keys
;

394 *
vÆue
;

397 
keys
 = (
hashèbÀ_t
 *Ë
	`hashèbÀ_gë
(
cfg
->
£˘i⁄s
, 
£˘i⁄
);

398 i‡(!
keys
)

399  
def
;

402 
vÆue
 = (*Ë
	`hashèbÀ_gë
(
keys
, 
key
);

403 i‡(!
vÆue
)

404  
def
;

405  
vÆue
;

406 
	}
}

409 
	$c⁄fig_ªad_öt
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
def
)

411 *
ªsu…
;

412 
ªsu…
 = 
	`c⁄fig_ªad_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
NULL
);

413  
ªsu…
 ? 
	`©oi
‘esu…Ë: 
def
;

414 
	}
}

417 
	$c⁄fig_ªad_boﬁ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
def
)

419 *
ªsu…
;

420 
ªsu…
 = 
	`c⁄fig_ªad_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
NULL
);

421 i‡(!
ªsu…
)

422  
def
;

423 i‡(!
	`°rcmp
(
ªsu…
, "t") || !strcmp(result, "true") ||

424 !
	`°rcmp
(
ªsu…
, "true") || !strcmp(result, "True") ||

425 !
	`°rcmp
(
ªsu…
, "TRUE"))

428 
	}
}

431 
	$c⁄fig_ªad_doubÀ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
def
)

433 *
ªsu…
;

434 
d
;

435 
ªsu…
 = 
	`c⁄fig_ªad_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
NULL
);

436 i‡(!
ªsu…
)

437  
def
;

438 
	`ssˇnf
(
ªsu…
, "%lf", &
d
);

439  
d
;

440 
	}
}

443 *
	$c⁄fig_ªad_±r
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
def
)

445 *
ªsu…
;

446 *
±r
;

447 
ªsu…
 = 
	`c⁄fig_ªad_°rög
(
cfg
, 
£˘i⁄
, 
key
, 
NULL
);

448 i‡(!
ªsu…
)

449  
def
;

450 
	`ssˇnf
(
ªsu…
, "%p", &
±r
);

451  
±r
;

452 
	}
}

	@libstruct/config.h

20 #i‚de‡
CONFIG_H


21 
	#CONFIG_H


	)

23 
	gc⁄fig_t
;

26 
c⁄fig_t
 *
c⁄fig_¸óã
(*
fûíame
);

27 
c⁄fig_‰ì
(
c⁄fig_t
 *
cfg
);

31 
c⁄fig_lﬂd
(
c⁄fig_t
 *
cfg
);

32 
c⁄fig_ßve
(
c⁄fig_t
 *
cfg
);

35 
c⁄fig_£˘i⁄_exi°s
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
);

36 
c⁄fig_key_exi°s
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
);

39 *
c⁄fig_£˘i⁄_fú°
(
c⁄fig_t
 *
cfg
);

40 *
c⁄fig_£˘i⁄_√xt
(
c⁄fig_t
 *
cfg
);

44 
c⁄fig_£˘i⁄_ªmove
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
);

45 
c⁄fig_key_ªmove
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
);

50 
c⁄fig_wrôe_°rög
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
vÆue
);

51 
c⁄fig_wrôe_öt
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
vÆue
);

52 
c⁄fig_wrôe_boﬁ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
vÆue
);

53 
c⁄fig_wrôe_doubÀ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
vÆue
);

54 
c⁄fig_wrôe_±r
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
vÆue
);

58 *
c⁄fig_ªad_°rög
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
def
);

59 
c⁄fig_ªad_öt
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
def
);

60 
c⁄fig_ªad_boﬁ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
def
);

61 
c⁄fig_ªad_doubÀ
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, 
def
);

62 *
c⁄fig_ªad_±r
(
c⁄fig_t
 *
cfg
, *
£˘i⁄
, *
key
, *
def
);

	@libstruct/debug.c

20 #i‚de‡
DEBUG_H


21 
	#DEBUG_H


	)

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°d¨g.h
>

27 
	~<mh™dÀ.h
>

29 
	~"debug.h
"

32 
	sˇãg‹y_t
 {

33 
	m°©us
;

34 
	m•a˚_cou¡
;

35 
FILE
 *
	mf
;

36 *
	mfûíame
;

39 
ˇãg‹y_t
 *
	gˇãg‹y_li°
 = 
NULL
;

40 
	gˇãg‹y_li°_size
 = 0;

41 
	gˇãg‹y_cou¡
 = 0;

44 
	$debug_öô
()

46 
	}
}

49 
	$debug_d⁄e
()

51 
i
;

52 
FILE
 *
f
;

53 
i
 = 0; i < 
ˇãg‹y_cou¡
; i++) {

54 
f
 = 
ˇãg‹y_li°
[
i
].f;

55 i‡(
f
 && f !
°dout
 && f !
°dîr
)

56 
	`f˛o£
(
f
);

58 i‡(
ˇãg‹y_li°
)

59 
	`‰ì
(
ˇãg‹y_li°
);

60 
ˇãg‹y_li°
 = 
NULL
;

61 
ˇãg‹y_li°_size
 = 0;

62 
ˇãg‹y_cou¡
 = 0;

63 
	}
}

66 
	$debug_√w_ˇãg‹y
()

68 
ˇãg‹y_t
 *
c
;

69 i‡(
ˇãg‹y_cou¡
 =
ˇãg‹y_li°_size
) {

70 
ˇãg‹y_li°_size
 += 10;

71 
ˇãg‹y_li°
 = 
	`ªÆloc
(ˇãg‹y_li°, (
ˇãg‹y_t
Ë* 
ˇãg‹y_li°_size
);

72 i‡(!
ˇãg‹y_li°
)

73 
	`ab‹t
();

75 
c
 = &
ˇãg‹y_li°
[
ˇãg‹y_cou¡
];

76 
c
->
°©us
 = 1;

77 
c
->
f
 = 
NULL
;

78 
c
->
fûíame
 = 
NULL
;

79  
ˇãg‹y_cou¡
++;

80 
	}
}

83 
FILE
 *
	$debug_assign_fûe
(
ˇãg‹y
, *
fûíame
)

85 
FILE
 *
f
;

86 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

87  
NULL
;

88 i‡(!
fûíame
 || !*filename)

89 
f
 = 
NULL
;

90 i‡(!
	`°rcmp
(
fûíame
, "stdout"))

91 
f
 = 
°dout
;

92 i‡(!
	`°rcmp
(
fûíame
, "stderr"))

93 
f
 = 
°dîr
;

95 
f
 = 
	`f›í
(
fûíame
, "wt");

96 
ˇãg‹y_li°
[
ˇãg‹y
].
f
 = f;

97 
ˇãg‹y_li°
[
ˇãg‹y
].
fûíame
 = filename;

98  
f
;

99 
	}
}

102 
	$debug_⁄
(
ˇãg‹y
)

104 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

106 
ˇãg‹y_li°
[
ˇãg‹y
].
°©us
 = 1;

107 
	}
}

110 
	$debug_off
(
ˇãg‹y
)

112 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

114 
ˇãg‹y_li°
[
ˇãg‹y
].
°©us
 = 1;

115 
	}
}

118 
	$debug_°©us
(
ˇãg‹y
)

120 
ˇãg‹y_t
 *
c
;

121 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

123 
c
 = &
ˇãg‹y_li°
[
ˇãg‹y
];

124  
c
->
°©us
 && c->
f
;

125 
	}
}

128 
FILE
 *
	$debug_fûe
(
ˇãg‹y
)

130 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

131  
NULL
;

132  
ˇãg‹y_li°
[
ˇãg‹y
].
f
;

133 
	}
}

136 
	$debug_Êush
(
ˇãg‹y
)

138 
ˇãg‹y_t
 *
c
;

139 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

141 
c
 = &
ˇãg‹y_li°
[
ˇãg‹y
];

142 i‡(
c
->
°©us
 && c->
f
)

143 
	`fÊush
(
c
->
f
);

144 
	}
}

147 
	$debug_èb
(
ˇãg‹y
, 
•a˚_cou¡
)

149 
ˇãg‹y_t
 *
c
;

150 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

152 
c
 = &
ˇãg‹y_li°
[
ˇãg‹y
];

153 
c
->
•a˚_cou¡
 = space_count;

154 
	}
}

157 
	$debug_èb_öc
(
ˇãg‹y
, 
•a˚_cou¡
)

159 
ˇãg‹y_t
 *
c
;

160 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

162 
c
 = &
ˇãg‹y_li°
[
ˇãg‹y
];

163 
c
->
•a˚_cou¡
 += space_count;

164 i‡(
c
->
•a˚_cou¡
 < 0)

165 
c
->
•a˚_cou¡
 = 0;

166 
	}
}

169 
	$debug_èb_dec
(
ˇãg‹y
, 
•a˚_cou¡
)

171 
	`debug_èb_öc
(
ˇãg‹y
, -
•a˚_cou¡
);

172 
	}
}

175 
	$debug
(
ˇãg‹y
, *
fmt
, ...)

177 
ˇãg‹y_t
 *
c
;

178 
va_li°
 
va
;

179 
•c
[200];

182 i‡(
ˇãg‹y
 < 0 || c©eg‹y >
ˇãg‹y_cou¡
)

184 
c
 = &
ˇãg‹y_li°
[
ˇãg‹y
];

185 i‡(!
c
->
°©us
 || !c->
f
)

189 i‡(
c
->
•a˚_cou¡
 >(
•c
))

190 
c
->
•a˚_cou¡
 = (
•c
) - 1;

191 
	`mem£t
(
•c
, ' ', 
c
->
•a˚_cou¡
);

192 
•c
[
c
->
•a˚_cou¡
] = '\0';

193 
	`Ârötf
(
c
->
f
, "%s", 
•c
);

196 
	`va_°¨t
(
va
, 
fmt
);

197 
	`vÂrötf
(
c
->
f
, 
fmt
, 
va
);

198 
	`fÊush
(
c
->
f
);

199 
	}
}

202 
	$Áèl
(*
fmt
, ...) {

203 
va_li°
 
va
;

204 
	`va_°¨t
(
va
, 
fmt
);

205 
	`Ârötf
(
°dîr
, "fatal: ");

206 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

207 
	`Ârötf
(
°dîr
, "\n");

208 
	`exô
(1);

209 
	}
}

212 
	$∑nic
(*
fmt
, ...) {

213 
va_li°
 
va
;

214 
	`va_°¨t
(
va
, 
fmt
);

215 
	`Ârötf
(
°dîr
, "panic: ");

216 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

217 
	`Ârötf
(
°dîr
, "\n");

218 
	`ab‹t
();

219 
	}
}

222 
	$w¨nög
(*
fmt
, ...) {

223 
va_li°
 
va
;

224 
	`va_°¨t
(
va
, 
fmt
);

225 
	`Ârötf
(
°dîr
, "warning: ");

226 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

227 
	`Ârötf
(
°dîr
, "\n");

228 
	}
}

231 
	$dump_buf
(**
pbuf
, *
psize
, *
fmt
, ...) {

232 
va_li°
 
va
;

233 
Àn
;

234 i‡(*
psize
 <= 1)

236 
	`va_°¨t
(
va
, 
fmt
);

237 
Àn
 = 
	`v¢¥ötf
(*
pbuf
, *
psize
, 
fmt
, 
va
);

238 i‡(
Àn
 >*
psize
)

239 
Àn
 = *
psize
 - 1;

240 *
psize
 -
Àn
;

241 *
pbuf
 +
Àn
;

242 
	}
}

	@libstruct/debug.h

20 #i‚de‡
DEBUG_H


21 
	#DEBUG_H


	)

23 
	~<°dio.h
>

27 
debug_öô
();

28 
debug_d⁄e
();

32 
debug_√w_ˇãg‹y
();

37 
FILE
 *
debug_assign_fûe
(
ˇãg‹y
, *
fûíame
);

41 
debug_⁄
(
ˇãg‹y
);

42 
debug_off
(
ˇãg‹y
);

46 
debug_°©us
(
ˇãg‹y
);

49 
FILE
 *
debug_fûe
(
ˇãg‹y
);

52 
debug_Êush
(
ˇãg‹y
);

55 
debug_èb
(
ˇãg‹y
, 
•a˚_cou¡
);

56 
debug_èb_öc
(
ˇãg‹y
, 
•a˚_cou¡
);

57 
debug_èb_dec
(
ˇãg‹y
, 
•a˚_cou¡
);

60 
	$debug
(
ˇãg‹y
, *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 2, 3)));

63 
	$w¨nög
(*
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

64 
	$Áèl
(*
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

65 
	$∑nic
(*
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 1, 2)));

72 
	$dump_buf
(**
pbuf
, *
psize
, *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 3, 4)));

	@libstruct/hash.c

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<˘y≥.h
>

23 
	~<mh™dÀ.h
>

24 
	~"hash.h
"

26 
	#MIN_INITIAL_SIZE
 5

	)

34 
	sñem_t
 {

35 
	ma˘ive
;

36 
	mªmoved
;

37 *
	mkey
;

38 *
	md©a
;

43 
	shashèbÀ_t
 {

44 
	mcou¡
;

45 
	msize
;

46 
	mˇ££n
;

47 
ñem_t
 *
	mñem
;

48 (*
	mcmp
)(const *, const *);

49 
	mfödpos
;

50 } 
	ghash_èbÀ_t
;

59 
	$hashcode
(*
°r
, 
ˇ££n
)

61 
ªs
 = 0;

62 
i
, 
Àn
;

64 
Àn
 = 
	`°æí
(
°r
);

65 i‡(
ˇ££n
)

66 
i
 = 0; i < 
Àn
; i++)

67 
ªs
 =Ñe†* 37 + 
°r
[
i
];

69 
i
 = 0; i < 
Àn
; i++)

70 
ªs
 =Ñe†* 37 + 
	`tﬁowî
(
°r
[
i
]);

71  
ªs
;

72 
	}
}

77 
ñem_t
 *
	$hashñem
(
hashèbÀ_t
 *
ht
, *
key
)

79 
pos
, 
ö£πpos
;

80 
ñem_t
 *
e
;

83 
ö£πpos
 = -1;

84 
pos
 = 
	`hashcode
(
key
, 
ht
->
ˇ££n
Ë% ht->
size
;

88 
e
 = &
ht
->
ñem
[
pos
];

89 i‡(!
e
->
a˘ive
)

93 i‡(!
e
->
ªmoved
 && !
ht
->
	`cmp
”->
key
, key))

94  
e
;

97 i‡(
e
->
ªmoved
 && 
ö£πpos
 < 0)

98 
ö£πpos
 = 
pos
;

101 
pos
 = (po†+ 1Ë% 
ht
->
size
;

105  
ö£πpos
 < 0 ? &
ht
->
ñem
[
pos
] :

106 &
ht
->
ñem
[
ö£πpos
];

107 
	}
}

111 
	$ªhash
(
hashèbÀ_t
 *
ht
)

113 
osize
, 
nsize
, 
i
;

114 
ñem_t
 *
€Àm
, *
€
, *
√
;

117 
€Àm
 = 
ht
->
ñem
;

118 
osize
 = 
ht
->
size
;

119 
nsize
 = 
osize
 * 2;

120 
ht
->
ñem
 = 
	`ˇŒoc
(
nsize
, (
ñem_t
));

121 i‡(!
ht
->
ñem
)

123 
ht
->
size
 = 
nsize
;

126 
i
 = 0; i < 
osize
; i++) {

127 
€
 = &
€Àm
[
i
];

128 i‡(
€
->
a˘ive
 && !€->
ªmoved
) {

129 
√
 = 
	`hashñem
(
ht
, 
€
->
key
);

130 
√
->
a˘ive
 = 1;

131 
√
->
key
 = 
€
->key;

132 
√
->
d©a
 = 
€
->data;

137 
	`‰ì
(
€Àm
);

139 
	}
}

148 
hashèbÀ_t
 *
	$hashèbÀ_¸óã
(
size
, 
ˇ££n
)

150 
hashèbÀ_t
 *
ht
;

153 
ht
 = 
	`ˇŒoc
(1, (
hashèbÀ_t
));

154 i‡(!
ht
)

155  
NULL
;

158 
ht
->
size
 = sizê< 
MIN_INITIAL_SIZE
 ? MIN_INITIAL_SIZE : size;

159 
ht
->
ˇ££n
 = casesen;

160 
ht
->
cmp
 = 
ˇ££n
 ? 
°rcmp
 : 
°rˇ£cmp
;

161 
ht
->
ñem
 = 
	`ˇŒoc
(ht->
size
, (
ñem_t
));

162 i‡(!
ht
->
ñem
) {

163 
	`‰ì
(
ht
);

164  
NULL
;

168  
ht
;

169 
	}
}

172 
	$hashèbÀ_‰ì
(
hashèbÀ_t
 *
ht
)

174 
i
;

175 
ñem_t
 *
e
;

178 
i
 = 0; i < 
ht
->
size
; i++) {

179 
e
 = &
ht
->
ñem
[
i
];

180 i‡(
e
->
a˘ive
 && !e->
ªmoved
)

181 
	`‰ì
(
e
->
key
);

185 
	`‰ì
(
ht
->
ñem
);

186 
	`‰ì
(
ht
);

187 
	}
}

190 
	$hashèbÀ_ö£π
(
hashèbÀ_t
 *
ht
, *
key
, *
d©a
)

192 
ñem_t
 *
e
;

195 i‡(!
d©a
)

199 i‡(
ht
->
cou¡
 >ht->
size
 / 2)

200 i‡(!
	`ªhash
(
ht
))

204 
e
 = 
	`hashñem
(
ht
, 
key
);

205 i‡(
e
->
a˘ive
 && !e->
ªmoved
)

209 
ht
->
cou¡
++;

210 
e
->
a˘ive
 = 1;

211 
e
->
ªmoved
 = 0;

212 
e
->
key
 = 
	`°rdup
(key);

213 
e
->
d©a
 = data;

215 
	}
}

218 
	$hashèbÀ_£t
(
hashèbÀ_t
 *
ht
, *
key
, *
d©a
)

220 
ñem_t
 *
e
;

223 i‡(!
d©a
)

227 
e
 = 
	`hashñem
(
ht
, 
key
);

228 i‡(!
e
->
a˘ive
 ||É->
ªmoved
)

232 
e
->
d©a
 = data;

234 
	}
}

237 
	$hashèbÀ_cou¡
(
hashèbÀ_t
 *
ht
)

239  
ht
->
cou¡
;

240 
	}
}

243 *
	$hashèbÀ_gë
(
hashèbÀ_t
 *
ht
, *
key
)

245 
ñem_t
 *
e
;

248 
e
 = 
	`hashñem
(
ht
, 
key
);

249 i‡(!
e
->
a˘ive
 ||É->
ªmoved
)

250  
NULL
;

253  
e
->
d©a
;

254 
	}
}

257 *
	$hashèbÀ_ªmove
(
hashèbÀ_t
 *
ht
, *
key
)

259 
ñem_t
 *
e
;

260 *
d©a
;

263 
e
 = 
	`hashñem
(
ht
, 
key
);

264 i‡(!
e
->
a˘ive
 ||É->
ªmoved
)

265  
NULL
;

268 
	`‰ì
(
e
->
key
);

269 
d©a
 = 
e
->data;

270 
e
->
key
 = 
NULL
;

271 
e
->
d©a
 = 
NULL
;

272 
e
->
ªmoved
 = 1;

273 
ht
->
cou¡
--;

274  
d©a
;

275 
	}
}

278 *
	$hashèbÀ_föd_fú°
(
hashèbÀ_t
 *
ht
, **
d©a
)

280 
ht
->
födpos
 = 0;

281  
	`hashèbÀ_föd_√xt
(
ht
, 
d©a
);

282 
	}
}

285 *
	$hashèbÀ_föd_√xt
(
hashèbÀ_t
 *
ht
, **
d©a
)

287 
ñem_t
 *
e
;

288 
ht
->
födpos
 < ht->
size
) {

289 
e
 = &
ht
->
ñem
[ht->
födpos
];

290 
ht
->
födpos
++;

291 i‡(
e
->
a˘ive
 && !e->
ªmoved
) {

292 i‡(
d©a
)

293 *
d©a
 = 
e
->data;

294  
e
->
key
;

297  
NULL
;

298 
	}
}

	@libstruct/hash.h

20 #i‚de‡
HASH_H


21 
	#HASH_H


	)

23 
	ghashèbÀ_t
;

26 
hashèbÀ_t
 *
hashèbÀ_¸óã
(
size
, 
ˇ££n
);

27 
hashèbÀ_‰ì
(
hashèbÀ_t
 *
ht
);

32 
hashèbÀ_ö£π
(
hashèbÀ_t
 *
ht
, *
key
, *
d©a
);

36 
hashèbÀ_£t
(
hashèbÀ_t
 *
ht
, *
key
, *
d©a
);

39 
hashèbÀ_cou¡
(
hashèbÀ_t
 *
ht
);

43 *
hashèbÀ_gë
(
hashèbÀ_t
 *
ht
, *
key
);

47 *
hashèbÀ_ªmove
(
hashèbÀ_t
 *
ht
, *
key
);

52 *
hashèbÀ_föd_fú°
(
hashèbÀ_t
 *
ht
, **
d©a
);

53 *
hashèbÀ_föd_√xt
(
hashèbÀ_t
 *
ht
, **
d©a
);

	@libstruct/heap.c

20 
	~<°dlib.h
>

21 
	~<mh™dÀ.h
>

22 
	~"hóp.h
"

25 
	#PARENT
(
X
Ë(((XË- 1Ë/ 2)

	)

26 
	#LEFT
(
X
Ë(((XË* 2Ë+ 1)

	)

27 
	#RIGHT
(
X
Ë(((XË* 2Ë+ 2)

	)

29 
	shóp_ñem_t
 {

30 
	mtime
, 
	mvÆue
;

31 *
	md©a
;

34 
	shóp_t
 {

35 
	msize
, 
	mcou¡
, 
	mcuºít
;

36 
	mîr‹
;

37 
	mtime
;

38 
hóp_time_pﬁicy_íum
 
	mtime_pﬁicy
;

39 
hóp_ñem_t
 *
	mñem
;

48 
	$hóp_Àss_th™
(
hóp_t
 *
hóp
, 
x
, 
y
)

51 i‡(
hóp
->
ñem
[
x
].
vÆue
 !hóp->ñem[
y
].value)

52  
hóp
->
ñem
[
x
].
vÆue
 < hóp->ñem[
y
].value;

55 i‡(
hóp
->
time_pﬁicy
 =
hóp_time_pﬁicy_fifo
)

56  
hóp
->
ñem
[
x
].
time
 < hóp->ñem[
y
].time;

59  
hóp
->
ñem
[
x
].
time
 > hóp->ñem[
y
].time;

60 
	}
}

64 
	$hóp_grow
(
hóp_t
 *
hóp
)

66 
hóp_ñem_t
 *
√Àm
;

67 
nsize
 = 
hóp
->
size
 * 2;

69 
√Àm
 = 
	`ªÆloc
(
hóp
->
ñem
, 
nsize
 * (
hóp_ñem_t
));

70 i‡(!
√Àm
)

72 
hóp
->
ñem
 = 
√Àm
;

73 
hóp
->
size
 = 
nsize
;

75 
	}
}

79 
	$hópify
(
hóp_t
 *
hóp
, 
i
)

81 
l
, 
r
, 
k
;

82 
hóp_ñem_t
 
tmp
;

85 
l
 = 
	`LEFT
(
i
);

86 
r
 = 
	`RIGHT
(
i
);

87 
k
 = 
i
;

88 i‡(
l
 < 
hóp
->
cou¡
 && 
	`hóp_Àss_th™
(hóp,Ü, 
k
))

89 
k
 = 
l
;

90 i‡(
r
 < 
hóp
->
cou¡
 && 
	`hóp_Àss_th™
(hóp,Ñ, 
k
))

91 
k
 = 
r
;

92 i‡(
k
 =
i
)

95 
tmp
 = 
hóp
->
ñem
[
k
];

96 
hóp
->
ñem
[
k
] = hóp->ñem[
i
];

97 
hóp
->
ñem
[
i
] = 
tmp
;

98 
i
 = 
k
;

100 
	}
}

108 
hóp_t
 *
	$hóp_¸óã
(
size
)

110 
hóp_t
 *
hóp
;

111 
hóp
 = 
	`ˇŒoc
(1, (
hóp_t
));

112 
hóp
->
size
 = size < 10 ? 10 : size;

113 
hóp
->
ñem
 = 
	`ˇŒoc
(hóp->
size
, (
hóp_ñem_t
));

114 i‡(!
hóp
->
ñem
) {

115 
	`‰ì
(
hóp
);

116  
NULL
;

118  
hóp
;

119 
	}
}

123 
	$hóp_‰ì
(
hóp_t
 *
hóp
)

125 
	`‰ì
(
hóp
->
ñem
);

126 
	`‰ì
(
hóp
);

127 
	}
}

131 
	$hóp_îr‹
(
hóp_t
 *
hóp
)

133  
hóp
->
îr‹
;

134 
	}
}

137 *
	$hóp_îr‹_msg
(
hóp_t
 *
hóp
)

139 
hóp
->
îr‹
) {

140 
HEAP_ENOMEM
:  "out of memory";

141 
HEAP_EEMPTY
:  "heap isÉmpty";

144 
	}
}

147 
	$hóp_cou¡
(
hóp_t
 *
hóp
)

149  
hóp
->
cou¡
;

150 
	}
}

153 
	$hóp_ö£π
(
hóp_t
 *
hóp
, 
vÆue
, *
d©a
)

155 
i
;

156 
hóp_ñem_t
 
tmp
;

159 i‡(
hóp
->
cou¡
 =hóp->
size
 && !
	`hóp_grow
(heap)) {

160 
hóp
->
îr‹
 = 
HEAP_ENOMEM
;

165 
i
 = 
hóp
->
cou¡
;

166 
hóp
->
ñem
[
i
].
vÆue
 = value;

167 
hóp
->
ñem
[
i
].
d©a
 = data;

168 
hóp
->
ñem
[
i
].
time
 = heap->time++;

169 
i
 > 0 && 
	`hóp_Àss_th™
(
hóp
, i, 
	`PARENT
(i))) {

170 
tmp
 = 
hóp
->
ñem
[
i
];

171 
hóp
->
ñem
[
i
] = hóp->ñem[
	`PARENT
(i)];

172 
hóp
->
ñem
[
	`PARENT
(
i
)] = 
tmp
;

173 
i
 = 
	`PARENT
(i);

175 
hóp
->
cou¡
++;

176 
hóp
->
îr‹
 = 0;

177 
	}
}

180 
	$hóp_≥ek
(
hóp_t
 *
hóp
, **
d©a
)

182 
vÆue
;

185 i‡(!
hóp
->
cou¡
) {

186 
hóp
->
îr‹
 = 
HEAP_EEMPTY
;

187 i‡(
d©a
)

188 *
d©a
 = 
NULL
;

193 
vÆue
 = 
hóp
->
ñem
[0].value;

194 i‡(
d©a
)

195 *
d©a
 = 
hóp
->
ñem
[0].data;

196 
hóp
->
îr‹
 = 0;

197  
vÆue
;

198 
	}
}

201 
	$hóp_exåa˘
(
hóp_t
 *
hóp
, **
d©a
)

203 
vÆue
;

206 
vÆue
 = 
	`hóp_≥ek
(
hóp
, 
d©a
);

207 i‡(
hóp
->
îr‹
)

211 
hóp
->
cou¡
--;

212 
hóp
->
ñem
[0] = hóp->ñem[hóp->
cou¡
];

213 
	`hópify
(
hóp
, 0);

214  
vÆue
;

215 
	}
}

218 
	$hóp_time_pﬁicy
(
hóp_t
 *
hóp
, 
hóp_time_pﬁicy_íum
 
pﬁicy
)

220 
hóp
->
time_pﬁicy
 = 
pﬁicy
;

221 
hóp
->
îr‹
 = 0;

222 
	}
}

225 
	$hóp_fú°
(
hóp_t
 *
hóp
, **
d©a
)

228 i‡(!
hóp
->
cou¡
) {

229 
hóp
->
îr‹
 = 
HEAP_EELEM
;

230 i‡(
d©a
)

231 *
d©a
 = 
NULL
;

236 
hóp
->
cuºít
 = 0;

237 
hóp
->
îr‹
 = 0;

238 i‡(
d©a
)

239 *
d©a
 = 
hóp
->
ñem
[0].data;

240  
hóp
->
ñem
[0].
vÆue
;

241 
	}
}

244 
	$hóp_√xt
(
hóp_t
 *
hóp
, **
d©a
)

247 i‡(
hóp
->
cuºít
 >hóp->
cou¡
 - 1) {

248 
hóp
->
îr‹
 = 
HEAP_EELEM
;

249 i‡(
d©a
)

250 *
d©a
 = 
NULL
;

255 
hóp
->
cuºít
++;

256 
hóp
->
îr‹
 = 0;

257 i‡(
d©a
)

258 *
d©a
 = 
hóp
->
ñem
[hóp->
cuºít
].data;

259  
hóp
->
ñem
[hóp->
cuºít
].
vÆue
;

260 
	}
}

	@libstruct/heap.h

20 #i‚de‡
HEAP_H


21 
	#HEAP_H


	)

24 
	#HEAP_ENOMEM
 1

	)

25 
	#HEAP_EEMPTY
 2

	)

26 
	#HEAP_EELEM
 3

	)

29 
	ghóp_t
;

34 
	ehóp_time_pﬁicy_íum
 {

35 
	mhóp_time_pﬁicy_fifo
 = 0,

36 
	mhóp_time_pﬁicy_lifo


40 
hóp_t
 *
hóp_¸óã
(
size
);

41 
hóp_‰ì
(
hóp_t
 *
hóp
);

45 
hóp_îr‹
(
hóp_t
 *
hóp
);

46 *
hóp_îr‹_msg
(
hóp_t
 *
hóp
);

49 
hóp_cou¡
(
hóp_t
 *
hóp
);

50 
hóp_ö£π
(
hóp_t
 *
hóp
, 
vÆue
, *
d©a
);

51 
hóp_exåa˘
(
hóp_t
 *
hóp
, **
d©a
);

52 
hóp_≥ek
(
hóp_t
 *
hóp
, **
d©a
);

53 
hóp_time_pﬁicy
(
hóp_t
 *
hóp
, 
hóp_time_pﬁicy_íum
 
pﬁicy
);

56 
hóp_fú°
(
hóp_t
 *
hóp
, **
d©a
);

57 
hóp_√xt
(
hóp_t
 *
hóp
, **
d©a
);

	@libstruct/list.c

20 
	~<°dlib.h
>

21 
	~<mh™dÀ.h
>

22 
	~"li°.h
"

24 
	sli°_t
 {

25 
	msize
, 
	mcou¡
;

26 
	mîr‹
;

27 
	mhód
, 
	mèû
;

28 **
	mñem
;

33 
	#INLIST
(
X
Ë(((XË+ 
li°
->
size
Ë%Üi°->size)

	)

34 
	#ELEM
(
X
Ë
li°
->
ñem
[((XË+Üi°->
hód
Ë%Üi°->
size
]

	)

40 
	$grow
(
li°_t
 *
li°
)

42 **
√Àm
;

43 
nsize
, 
i
, 
ödex
;

46 
nsize
 = 
li°
->
size
 * 2;

47 
√Àm
 = 
	`ˇŒoc
(
nsize
, (*));

48 i‡(!
√Àm
)

52 
i
 = 
li°
->
hód
, 
ödex
 = 0;

53 
ödex
 < 
li°
->
cou¡
;

54 
i
 = (ò+ 1Ë% 
li°
->
size
, 
ödex
++)

55 
√Àm
[
ödex
] = 
li°
->
ñem
[
i
];

58 
	`‰ì
(
li°
->
ñem
);

59 
li°
->
ñem
 = 
√Àm
;

60 
li°
->
size
 = 
nsize
;

61 
li°
->
hód
 = 0;

62 
li°
->
èû
 =Üi°->
cou¡
;

64 
	}
}

67 
s‹t
(
li°_t
 *
li°
, 
lo
, 
hi
, (*
comp
)(const *, const *))

69 *
±r
, *
tmp
;

70 
i
 = 
lo
, 
j
 = 
hi
;

72 
±r
 = 
	`ELEM
(
hi
);

74 
	`comp
(
	`ELEM
(
i
), 
±r
) < 0)

75 
i
++;

76 
	`comp
(
	`ELEM
(
j
), 
±r
) > 0)

77 
j
--;

78 i‡(
i
 <
j
) {

79 
tmp
 = 
	`ELEM
(
i
);

80 
	`ELEM
(
i
ËELEM(
j
);

81 
	`ELEM
(
j
Ë
tmp
;

82 
i
++, 
j
--;

84 } 
i
 <
j
);

85 i‡(
lo
 < 
j
)

86 
	`s‹t
(
li°
, 
lo
, 
j
, 
comp
);

87 i‡(
i
 < 
hi
)

88 
	`s‹t
(
li°
, 
i
, 
hi
, 
comp
);

89 
	}
}

97 
li°_t
 *
	$li°_¸óã
(
size
)

99 
li°_t
 *
li°
;

100 
li°
 = 
	`ˇŒoc
(1, (
li°_t
));

101 i‡(!
li°
)

102  
NULL
;

103 
li°
->
size
 = size < 10 ? 10 : size;

104 
li°
->
ñem
 = 
	`ˇŒoc
÷i°->
size
, (*));

105 i‡(!
li°
->
ñem
) {

106 
	`‰ì
(
li°
);

107  
NULL
;

109  
li°
;

110 
	}
}

114 
	$li°_‰ì
(
li°_t
 *
li°
)

116 
	`‰ì
(
li°
->
ñem
);

117 
	`‰ì
(
li°
);

118 
	}
}

122 
	$li°_îr‹
(
li°_t
 *
li°
)

124  
li°
->
îr‹
;

125 
	}
}

128 *
	$li°_îr‹_msg
(
li°_t
 *
li°
)

130 
li°
->
îr‹
) {

131 
LIST_ENOMEM
:  "out of memory";

132 
LIST_EBOUNDS
:  "array index out of bounds";

133 
LIST_EELEM
:  "elementÇot found";

134 
LIST_EEMPTY
:  "list isÉmpty";

137 
	}
}

140 
	$li°_cou¡
(
li°_t
 *
li°
)

142  
li°
->
cou¡
;

143 
	}
}

147 
	$li°_add
(
li°_t
 *
li°
, *
ñem
)

150 i‡(
li°
->
cou¡
 =li°->
size
 && !
	`grow
(list)) {

151 
li°
->
îr‹
 = 
LIST_ENOMEM
;

156 
li°
->
ñem
[li°->
èû
] =Élem;

157 
li°
->
èû
 = (li°->èû + 1Ë%Üi°->
size
;

158 
li°
->
cou¡
++;

159 
li°
->
îr‹
 = 0;

160 
	}
}

164 *
	$li°_gë
(
li°_t
 *
li°
, 
ödex
)

167 i‡(
ödex
 < 0 || index >
li°
->
cou¡
) {

168 
li°
->
îr‹
 = 
LIST_EBOUNDS
;

169  
NULL
;

173 
ödex
 = (ödex + 
li°
->
hód
Ë%Üi°->
size
;

174 
li°
->
îr‹
 = 0;

175  
li°
->
ñem
[
ödex
];

176 
	}
}

180 
	$li°_£t
(
li°_t
 *
li°
, 
ödex
, *
ñem
)

183 i‡(
ödex
 < 0 || index >
li°
->
cou¡
) {

184 
li°
->
îr‹
 = 
LIST_EBOUNDS
;

189 
ödex
 = (ödex + 
li°
->
hód
Ë%Üi°->
size
;

190 
li°
->
ñem
[
ödex
] =Élem;

191 
li°
->
îr‹
 = 0;

192 
	}
}

196 
	$li°_ö£π
(
li°_t
 *
li°
, 
ödex
, *
ñem
)

198 
shi·cou¡
, 
pos
, 
i
;

201 i‡(
ödex
 < 0 || index > 
li°
->
cou¡
) {

202 
li°
->
îr‹
 = 
LIST_EBOUNDS
;

207 i‡(
li°
->
cou¡
 =li°->
size
 && !
	`grow
(list)) {

208 
li°
->
îr‹
 = 
LIST_ENOMEM
;

215 i‡(
ödex
 > 
li°
->
cou¡
 / 2) {

216 
shi·cou¡
 = 
li°
->
cou¡
 - 
ödex
;

217 
i
 = 0, 
pos
 = 
li°
->
èû
;

218 
i
 < 
shi·cou¡
;

219 
i
++, 
pos
 = 
	`INLIST
(pos - 1))

220 
li°
->
ñem
[
pos
] =Üi°->ñem[
	`INLIST
(pos - 1)];

221 
li°
->
èû
 = (li°->èû + 1Ë%Üi°->
size
;

223 
i
 = 0, 
pos
 = 
li°
->
hód
;

224 
i
 < 
ödex
;

225 
i
++, 
pos
 = (po†+ 1Ë% 
li°
->
size
)

226 
li°
->
ñem
[
	`INLIST
(
pos
 - 1)] =Üist->elem[pos];

227 
li°
->
hód
 = 
	`INLIST
(list->head - 1);

230 
li°
->
ñem
[÷i°->
hód
 + 
ödex
Ë%Üi°->
size
] =Élem;

231 
li°
->
cou¡
++;

232 
li°
->
îr‹
 = 0;

233 
	}
}

238 
	$li°_ödex_of
(
li°_t
 *
li°
, *
ñem
)

240 
pos
, 
i
;

243 
li°
->
îr‹
 = 0;

244 
i
 = 0, 
pos
 = 
li°
->
hód
;

245 
i
 < 
li°
->
cou¡
;

246 
i
++, 
pos
 = (po†+ 1Ë% 
li°
->
size
)

247 i‡(
li°
->
ñem
[
pos
] ==Élem)

248  
i
;

251 
li°
->
îr‹
 = 
LIST_EELEM
;

253 
	}
}

256 *
	$li°_ªmove_©
(
li°_t
 *
li°
, 
ödex
)

258 
shi·cou¡
, 
pos
, 
i
;

259 *
ñem
;

262 i‡(
ödex
 < 0 || index >
li°
->
cou¡
) {

263 
li°
->
îr‹
 = 
LIST_EBOUNDS
;

264  
NULL
;

268 
ñem
 = 
li°
->ñem[÷i°->
hód
 + 
ödex
Ë%Üi°->
size
];

271 i‡(
ödex
 > 
li°
->
cou¡
 / 2) {

272 
shi·cou¡
 = 
li°
->
cou¡
 - 
ödex
 - 1;

273 
i
 = 0, 
pos
 = (
li°
->
hód
 + 
ödex
Ë%Üi°->
size
;

274 
i
 < 
shi·cou¡
;

275 
i
++, 
pos
 = (po†+ 1Ë% 
li°
->
size
)

276 
li°
->
ñem
[
pos
] =Üi°->ñem[’o†+ 1Ë%Üi°->
size
];

277 
li°
->
ñem
[
pos
] = 
NULL
;

278 
li°
->
èû
 = 
	`INLIST
(list->tail - 1);

280 
i
 = 0, 
pos
 = (
li°
->
hód
 + 
ödex
Ë%Üi°->
size
;

281 
i
 < 
ödex
;

282 
i
++, 
pos
 = 
	`INLIST
(pos - 1))

283 
li°
->
ñem
[
pos
] =Üi°->ñem[
	`INLIST
(pos - 1)];

284 
li°
->
ñem
[li°->
hód
] = 
NULL
;

285 
li°
->
hód
 = (li°->hód + 1Ë%Üi°->
size
;

288 
li°
->
cou¡
--;

289 
li°
->
îr‹
 = 0;

290  
ñem
;

291 
	}
}

294 *
	$li°_ªmove
(
li°_t
 *
li°
, *
ñem
)

296 
ödex
;

298 
ödex
 = 
	`li°_ödex_of
(
li°
, 
ñem
);

299 i‡(
li°
->
îr‹
)

300  
NULL
;

301  
	`li°_ªmove_©
(
li°
, 
ödex
);

302 
	}
}

305 
	$li°_˛ór
(
li°_t
 *
li°
)

307 
li°
->
cou¡
 = 0;

308 
li°
->
hód
 = 0;

309 
li°
->
èû
 = 0;

310 
li°
->
îr‹
 = 0;

311 
	}
}

314 
li°_s‹t
(
li°_t
 *
li°
, (*
comp
)(const *, const *))

316 i‡(
li°
->
cou¡
)

317 
	`s‹t
(
li°
, 0,Üi°->
cou¡
 - 1, 
comp
);

318 
	}
}

321 
	$li°_push
(
li°_t
 *
li°
, *
ñem
)

323 
	`li°_add
(
li°
, 
ñem
);

324 
	}
}

327 *
	$li°_p›
(
li°_t
 *
li°
)

329 i‡(!
li°
->
cou¡
) {

330 
li°
->
îr‹
 = 
LIST_EEMPTY
;

331  
NULL
;

333  
	`li°_ªmove_©
(
li°
,Üi°->
cou¡
 - 1);

334 
	}
}

337 *
	$li°_t›
(
li°_t
 *
li°
)

339 i‡(!
li°
->
cou¡
) {

340 
li°
->
îr‹
 = 
LIST_EEMPTY
;

341  
NULL
;

343  
	`li°_gë
(
li°
,Üi°->
cou¡
 - 1);

344 
	}
}

347 *
	$li°_bŸtom
(
li°_t
 *
li°
)

349 i‡(!
li°
->
cou¡
) {

350 
li°
->
îr‹
 = 
LIST_EEMPTY
;

351  
NULL
;

353  
	`li°_gë
(
li°
, 0);

354 
	}
}

357 
	$li°_íqueue
(
li°_t
 *
li°
, *
ñem
)

359 
	`li°_add
(
li°
, 
ñem
);

360 
	}
}

363 *
	$li°_dequeue
(
li°_t
 *
li°
)

365 i‡(!
li°
->
cou¡
) {

366 
li°
->
îr‹
 = 
LIST_EEMPTY
;

367  
NULL
;

369  
	`li°_ªmove_©
(
li°
, 0);

370 
	}
}

373 *
	$li°_hód
(
li°_t
 *
li°
)

375 i‡(!
li°
->
cou¡
) {

376 
li°
->
îr‹
 = 
LIST_EEMPTY
;

377  
NULL
;

379  
	`li°_gë
(
li°
, 0);

380 
	}
}

383 *
	$li°_èû
(
li°_t
 *
li°
)

385 i‡(!
li°
->
cou¡
) {

386 
li°
->
îr‹
 = 
LIST_EEMPTY
;

387  
NULL
;

389  
	`li°_gë
(
li°
,Üi°->
cou¡
 - 1);

390 
	}
}

	@libstruct/list.h

20 #i‚de‡
LIST_H


21 
	#LIST_H


	)

24 
	#LIST_ENOMEM
 1

	)

25 
	#LIST_EBOUNDS
 2

	)

26 
	#LIST_EELEM
 3

	)

27 
	#LIST_EEMPTY
 4

	)

30 
	gli°_t
;

33 
li°_t
 *
li°_¸óã
(
size
);

34 
li°_‰ì
(
li°_t
 *
li°
);

38 
li°_îr‹
(
li°_t
 *
li°
);

39 *
li°_îr‹_msg
(
li°_t
 *
li°
);

42 
li°_cou¡
(
li°_t
 *
li°
);

43 
li°_add
(
li°_t
 *
li°
, *
ñem
);

44 *
li°_gë
(
li°_t
 *
li°
, 
ödex
);

45 
li°_£t
(
li°_t
 *
li°
, 
ödex
, *
ñem
);

46 
li°_ö£π
(
li°_t
 *
li°
, 
ödex
, *
ñem
);

47 
li°_ödex_of
(
li°_t
 *
li°
, *
ñem
);

48 *
li°_ªmove_©
(
li°_t
 *
li°
, 
ödex
);

49 *
li°_ªmove
(
li°_t
 *
li°
, *
ñem
);

50 
li°_˛ór
(
li°_t
 *
li°
);

53 
li°_push
(
li°_t
 *
li°
, *
ñem
);

54 *
li°_p›
(
li°_t
 *
li°
);

55 *
li°_t›
(
li°_t
 *
li°
);

56 *
li°_bŸtom
(
li°_t
 *
li°
);

59 
li°_íqueue
(
li°_t
 *
li°
, *
ñem
);

60 *
li°_dequeue
(
li°_t
 *
li°
);

61 *
li°_èû
(
li°_t
 *
li°
);

62 *
li°_hód
(
li°_t
 *
li°
);

65 
li°_s‹t
(
li°_t
 *
li°
,

66 (*
comp
)(const *, const *));

	@libstruct/lnlist.c

20 
	~<°dlib.h
>

21 
	~<as£π.h
>

22 
	~<mh™dÀ.h
>

23 
	~" li°.h
"

24 
	~"ªpos.h
"

27 
	sñem_t
 {

28 
ñem_t
 *
	m¥ev
, *
	m√xt
;

29 *
	md©a
;

33 
	s li°_t
 {

34 
ªpos_t
 *
	mñem_ªpos
;

35 
ñem_t
 *
	mhód
, *
	mèû
, *
	mcuºít
;

36 
	micuºít
, 
	mcou¡
;

37 
	mîr‹
;

42 
 li°_t
 *
	$ li°_¸óã
()

44 
 li°_t
 *
 li°
;

45 
 li°
 = 
	`ˇŒoc
(1, (
 li°_t
));

46 i‡(!
 li°
)

47  
NULL
;

48 
 li°
->
ñem_ªpos
 = 
	`ªpos_¸óã
((
ñem_t
), "lnlist_elem_repos");

49 i‡(!
 li°
->
ñem_ªpos
) {

50 
	`‰ì
(
 li°
);

51  
NULL
;

53  
 li°
;

54 
	}
}

58 
	$ li°_‰ì
(
 li°_t
 *
 li°
)

60 
	` li°_˛ór
(
 li°
);

61 
	`ªpos_‰ì
(
 li°
->
ñem_ªpos
);

62 
	`‰ì
(
 li°
);

63 
	}
}

66 
	$ li°_cuºít
(
 li°_t
 *
 li°
)

68 
 li°
->
îr‹
 = 0;

69  
 li°
->
icuºít
;

70 
	}
}

73 *
	$ li°_gë
(
 li°_t
 *
 li°
)

75 i‡(
 li°
->
icuºít
 = li°->
cou¡
) {

76 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

77  
NULL
;

79 
 li°
->
îr‹
 = 0;

80  
 li°
->
cuºít
->
d©a
;

81 
	}
}

84 
	$ li°_√xt
(
 li°_t
 *
 li°
)

86 i‡(
 li°
->
icuºít
 = li°->
cou¡
) {

87 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

90 
 li°
->
îr‹
 = 0;

91 
 li°
->
icuºít
++;

92 
 li°
->
cuºít
 =Ü∆i°->cuºít->
√xt
;

93 
	}
}

96 
	$ li°_¥ev
(
 li°_t
 *
 li°
)

98 i‡(!
 li°
->
icuºít
) {

99 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

102 
 li°
->
îr‹
 = 0;

103 
 li°
->
icuºít
--;

104 
 li°
->
cuºít
 =Ü∆i°->cuºíà?Ü∆i°->cuºít->
¥ev
 :

105 
 li°
->
èû
;

106 
	}
}

109 
	$ li°_hód
(
 li°_t
 *
 li°
)

111 i‡(!
 li°
->
cou¡
) {

112 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

115 
 li°
->
îr‹
 = 0;

116 
 li°
->
icuºít
 = 0;

117 
 li°
->
cuºít
 =Ü∆i°->
hód
;

118 
	}
}

121 
	$ li°_èû
(
 li°_t
 *
 li°
)

123 i‡(!
 li°
->
cou¡
) {

124 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

127 
 li°
->
icuºít
 =Ü∆i°->
cou¡
 - 1;

128 
 li°
->
cuºít
 =Ü∆i°->
èû
;

129 
 li°
->
îr‹
 = 0;

130 
	}
}

133 
	$ li°_out
(
 li°_t
 *
 li°
)

135 
 li°
->
îr‹
 = 0;

136 
 li°
->
icuºít
 =Ü∆i°->
cou¡
;

137 
 li°
->
cuºít
 = 
NULL
;

138 
	}
}

141 
	$ li°_gŸo
(
 li°_t
 *
 li°
, 
ödex
)

143 i‡(
ödex
 < 0 || index > 
 li°
->
cou¡
) {

144 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

147 
 li°
->
îr‹
 = 0;

148 
 li°
->
icuºít
 < 
ödex
) {

149 
 li°
->
icuºít
++;

150 
 li°
->
cuºít
 =Ü∆i°->cuºít->
√xt
;

152 
 li°
->
icuºít
 > 
ödex
) {

153 
 li°
->
icuºít
--;

154 
 li°
->
cuºít
 =Ü∆i°->cuºíà?Ü∆i°->cuºít->
¥ev
 :

155 
 li°
->
èû
;

157 
	}
}

160 
	$ li°_föd
(
 li°_t
 *
 li°
, *
d©a
)

162 
 li°
->
îr‹
 = 0;

163 
 li°
->
icuºít
 = 0;

164 
 li°
->
cuºít
 =Ü∆i°->
hód
;

165 
 li°
->
cuºít
 &&Ü∆i°->cuºít->
d©a
 != data) {

166 
 li°
->
icuºít
++;

167 
 li°
->
cuºít
 =Ü∆i°->cuºít->
√xt
;

169 i‡(!
 li°
->
cuºít
)

170 
 li°
->
îr‹
 = 
LNLIST_EELEM
;

171 
	}
}

174 
	$ li°_cou¡
(
 li°_t
 *
 li°
)

176 
 li°
->
îr‹
 = 0;

177  
 li°
->
cou¡
;

178 
	}
}

181 
	$ li°_eﬁ
(
 li°_t
 *
 li°
)

183 
 li°
->
îr‹
 = 0;

184  
 li°
->
icuºít
 = li°->
cou¡
;

185 
	}
}

188 
	$ li°_ö£π
(
 li°_t
 *
 li°
, *
d©a
)

190 
ñem_t
 *
ñem
;

193 
ñem
 = 
	`ªpos_¸óã_obje˘
(
 li°
->
ñem_ªpos
);

194 i‡(!
ñem
) {

195 
 li°
->
îr‹
 = 
LNLIST_ENOMEM
;

198 
ñem
->
d©a
 = data;

201 i‡(!
 li°
->
cou¡
) {

204 
 li°
->
cuºít
 =Ü∆i°->
hód
 =Ü∆i°->
èû
 = 
ñem
;

206 } i‡(
 li°
->
cuºít
 = li°->
hód
) {

209 
ñem
->
√xt
 = 
 li°
->
hód
;

210 
 li°
->
hód
->
¥ev
 = 
ñem
;

211 
 li°
->
hód
 = 
ñem
;

213 } i‡(!
 li°
->
cuºít
) {

216 
ñem
->
¥ev
 = 
 li°
->
èû
;

217 
 li°
->
èû
->
√xt
 = 
ñem
;

218 
 li°
->
èû
 = 
ñem
;

223 
ñem
->
¥ev
 = 
 li°
->
cuºít
->prev;

224 
ñem
->
√xt
 = 
 li°
->
cuºít
;

225 
 li°
->
cuºít
->
¥ev
 = 
ñem
;

226 
ñem
->
¥ev
->
√xt
 =Élem;

231 
 li°
->
îr‹
 = 0;

232 
 li°
->
cou¡
++;

233 
 li°
->
cuºít
 = 
ñem
;

234 
	}
}

237 
	$ li°_add
(
 li°_t
 *
 li°
, *
d©a
)

239 
	` li°_out
(
 li°
);

240 
	` li°_ö£π
(
 li°
, 
d©a
);

241 i‡(!
 li°
->
îr‹
)

242 
	` li°_out
(
 li°
);

243 
	}
}

246 
	$ li°_ªmove
(
 li°_t
 *
 li°
)

248 
ñem_t
 *
ñem
;

251 i‡(
 li°
->
icuºít
 = li°->
cou¡
) {

252 
 li°
->
îr‹
 = 
LNLIST_EBOUNDS
;

257 
ñem
 = 
 li°
->
cuºít
;

258 i‡(
 li°
->
cou¡
 == 1) {

259 
 li°
->
èû
 =Ü∆i°->
hód
 = 
NULL
;

260 } i‡(
ñem
 =
 li°
->
hód
) {

261 
ñem
->
√xt
->
¥ev
 = 
NULL
;

262 
 li°
->
hód
 = 
ñem
->
√xt
;

263 } i‡(
ñem
 =
 li°
->
èû
) {

264 
ñem
->
¥ev
->
√xt
 = 
NULL
;

265 
 li°
->
èû
 = 
ñem
->
¥ev
;

267 
ñem
->
¥ev
->
√xt
 =Élem->next;

268 
ñem
->
√xt
->
¥ev
 =Élem->prev;

272 
 li°
->
îr‹
 = 0;

273 
 li°
->
cou¡
--;

274 
 li°
->
cuºít
 = 
ñem
->
√xt
;

275 
	`ªpos_‰ì_obje˘
(
 li°
->
ñem_ªpos
, 
ñem
);

276 
	}
}

279 
	$ li°_˛ór
(
 li°_t
 *
 li°
)

281 
ñem_t
 *
ñem
, *
√xt
;

283 
ñem
 = 
 li°
->
hód
;

284 
ñem
) {

285 
√xt
 = 
ñem
->next;

286 
	`ªpos_‰ì_obje˘
(
 li°
->
ñem_ªpos
, 
ñem
);

287 
ñem
 = 
√xt
;

290 
 li°
->
îr‹
 = 0;

291 
 li°
->
icuºít
 = 0;

292 
 li°
->
cou¡
 = 0;

293 
 li°
->
èû
 =Ü∆i°->
hód
 =Ü∆i°->
cuºít
 = 
NULL
;

294 
	}
}

297 
s‹t
(
ñem_t
 **
¨øy
, 
lo
, 
hi
, (*
comp
)(const *, const *))

299 
ñem_t
 *
±r
, *
tmp
;

300 
i
 = 
lo
, 
j
 = 
hi
;

302 
±r
 = 
¨øy
[(
lo
 + 
hi
) / 2];

304 
	`comp
(
¨øy
[
i
]->
d©a
, 
±r
->data) < 0)

305 
i
++;

306 
	`comp
(
¨øy
[
j
]->
d©a
, 
±r
->data) > 0)

307 
j
--;

308 i‡(
i
 <
j
) {

309 
tmp
 = 
¨øy
[
i
];

310 
¨øy
[
i
] =áºay[
j
];

311 
¨øy
[
j
] = 
tmp
;

312 
i
++, 
j
--;

314 } 
i
 <
j
);

315 i‡(
lo
 < 
j
)

316 
	`s‹t
(
¨øy
, 
lo
, 
j
, 
comp
);

317 i‡(
i
 < 
hi
)

318 
	`s‹t
(
¨øy
, 
i
, 
hi
, 
comp
);

319 
	}
}

322 
 li°_s‹t
(
 li°_t
 *
 li°
, (*
comp
)(const *, const *))

324 
ñem_t
 **
¨øy
;

325 
i
;

328 
 li°
->
îr‹
 = 0;

329 i‡(!
 li°
->
cou¡
)

333 
¨øy
 = 
	`ˇŒoc
(
 li°
->
cou¡
, (
ñem_t
 *));

334 
 li°
->
cuºít
 =Ü∆i°->
hód
;

335 
i
 = 0; i < 
 li°
->
cou¡
; i++) {

336 
¨øy
[
i
] = 
 li°
->
cuºít
;

337 
 li°
->
cuºít
 =Ü∆i°->cuºít->
√xt
;

341 
	`s‹t
(
¨øy
, 0, 
 li°
->
cou¡
 - 1, 
comp
);

344 
 li°
->
hód
 = 
¨øy
[0];

345 
 li°
->
èû
 = 
¨øy
[ li°->
cou¡
 - 1];

346 
i
 = 0; i < 
 li°
->
cou¡
; i++) {

347 
¨øy
[
i
]->
¥ev
 = i > 0 ?áºay[ò- 1] : 
NULL
;

348 
¨øy
[
i
]->
√xt
 = i < 
 li°
->
cou¡
 - 1 ?áºay[ò+ 1] : 
NULL
;

350 
	`‰ì
(
¨øy
);

353 
 li°
->
icuºít
 = 0;

354 
 li°
->
cuºít
 =Ü∆i°->
hód
;

355 
	}
}

358 
 li°_s‹ãd
(
 li°_t
 *
 li°
,

359 (*
comp
)(const *, const *))

361 
ñem_t
 *
ñem
, *
¥ev
;

362 
i
= 0;

363 
 li°
->
îr‹
 = 0;

364 i‡(!
 li°
->
hód
)

366 
¥ev
 = 
 li°
->
hód
;

367 
ñem
 = 
 li°
->
hód
->
√xt
;

368 
ñem
) {

369 
i
++;

370 i‡(
	`comp
(
¥ev
->
d©a
, 
ñem
->data) > 0)

372 
¥ev
 = 
ñem
;

373 
ñem
 =ÉÀm->
√xt
;

376 
	}
}

379 
	$ li°_îr‹
(
 li°_t
 *
 li°
)

381  
 li°
->
îr‹
;

382 
	}
}

385 *
	$ li°_îr‹_msg
(
 li°_t
 *
 li°
)

387 
 li°
->
îr‹
) {

388 
LNLIST_ENOMEM
:  "out of memory";

389 
LNLIST_EBOUNDS
:  "array index out of bounds";

392 
	}
}

	@libstruct/lnlist.h

20 #i‚de‡
LNLIST_H


21 
	#LNLIST_H


	)

24 
	#LNLIST_ENOMEM
 1

	)

25 
	#LNLIST_EBOUNDS
 2

	)

26 
	#LNLIST_EELEM
 3

	)

28 
	g li°_t
;

31 
 li°_t
 *
 li°_¸óã
();

32 
 li°_‰ì
(
 li°_t
 *
 li°
);

36 
 li°_cuºít
(
 li°_t
 *
 li°
);

40 *
 li°_gë
(
 li°_t
 *
 li°
);

43 
 li°_√xt
(
 li°_t
 *
 li°
);

44 
 li°_¥ev
(
 li°_t
 *
 li°
);

45 
 li°_hód
(
 li°_t
 *
 li°
);

46 
 li°_èû
(
 li°_t
 *
 li°
);

47 
 li°_out
(
 li°_t
 *
 li°
);

48 
 li°_gŸo
(
 li°_t
 *
 li°
, 
ödex
);

49 
 li°_föd
(
 li°_t
 *
 li°
, *
d©a
);

52 
 li°_cou¡
(
 li°_t
 *
 li°
);

53 
 li°_eﬁ
(
 li°_t
 *
 li°
);

57 
 li°_ö£π
(
 li°_t
 *
 li°
, *
d©a
);

61 
 li°_add
(
 li°_t
 *
 li°
, *
d©a
);

64 
 li°_ªmove
(
 li°_t
 *
 li°
);

65 
 li°_˛ór
(
 li°_t
 *
 li°
);

68 
 li°_s‹t
(
 li°_t
 *
 li°
,

69 (*
comp
)(const *, const *));

70 
	` li°_s‹ãd
(
 li°_t
 *
 li°
,

71 (*
comp
)(const *, const *));

74 
	` li°_îr‹
(
 li°_t
 *
 li°
);

75 *
	` li°_îr‹_msg
(
 li°_t
 *
 li°
);

	@libstruct/repos.c

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dio.h
>

23 
	~<as£π.h
>

24 
	~"ªpos.h
"

26 
	sobjèû_t
 {

27 
	mid
;

28 
	m°©us
;

29 *
	m¥ev
;

30 *
	m√xt
;

34 
	sªpos_t
 {

35 *
	m«me
;

36 
	mid
;

37 
	mobjsize
;

38 *
	mÆloc_hód
;

39 *
	mu«Œoc_hód
;

43 
ªpos_t
 *
	$ªpos_¸óã
(
objsize
, *
«me
)

45 
ªpos_t
 *
ªpos
;

46 i‡(
objsize
 <= 0)

47  
NULL
;

48 
ªpos
 = 
	`ˇŒoc
(1, (
ªpos_t
));

49 i‡(!
ªpos
)

50  
NULL
;

51 
ªpos
->
id
 = 
	`øndom
();

52 
ªpos
->
«me
 =Çame;

53 
ªpos
->
objsize
 = objsize;

54  
ªpos
;

55 
	}
}

58 
ªpos_‰ì_dump
(
ªpos_t
 *
ªpos
, (*
dump
)(*, 
FILE
 *))

60 *
obj
, *
√xt_obj
;

61 
objèû_t
 *
objèû
;

62 
cou¡
 = 0;

65 
obj
 = 
ªpos
->
u«Œoc_hód
; obj; obj = 
√xt_obj
) {

66 
objèû
 = 
obj
 + 
ªpos
->
objsize
;

67 
√xt_obj
 = 
objèû
->
√xt
;

68 
	`‰ì
(
obj
);

72 
cou¡
 = 0;

73 
obj
 = 
ªpos
->
Æloc_hód
; obj; obj = 
√xt_obj
) {

74 
objèû
 = 
obj
 + 
ªpos
->
objsize
;

75 
√xt_obj
 = 
objèû
->
√xt
;

76 
cou¡
++;

77 i‡(
dump
) {

78 
	`Ârötf
(
°dîr
, "w¨nög: %s: obje˘ÇŸ fªed: ", 
ªpos
->
«me
);

79 
	`dump
(
obj
, 
°dîr
);

80 
	`Ârötf
(
°dîr
, "\n");

82 
	`‰ì
(
obj
);

84 i‡(
cou¡
)

85 
	`Ârötf
(
°dîr
, "warning: %s: %d objects from "

87 
ªpos
->
«me
, 
cou¡
);

88 
	`‰ì
(
ªpos
);

89 
	}
}

92 
	$ªpos_‰ì
(
ªpos_t
 *
ªpos
)

94 
	`ªpos_‰ì_dump
(
ªpos
, 
NULL
);

95 
	}
}

98 *
	$ªpos_¸óã_obje˘
(
ªpos_t
 *
ªpos
)

100 *
obj
, *
√xt_obj
;

101 
objèû_t
 *
objèû
, *
√xt_objèû
;

105 i‡(!
ªpos
->
u«Œoc_hód
) {

106 
obj
 = 
	`ˇŒoc
(1, 
ªpos
->
objsize
 + (
objèû_t
));

107 i‡(!
obj
)

108  
NULL
;

109 
objèû
 = 
obj
 + 
ªpos
->
objsize
;

110 
objèû
->
id
 = 
ªpos
->id;

111 
ªpos
->
u«Œoc_hód
 = 
obj
;

115 
obj
 = 
ªpos
->
u«Œoc_hód
;

116 
objèû
 = 
obj
 + 
ªpos
->
objsize
;

117 
	`as£π
(!
objèû
->
¥ev
);

118 
	`as£π
(!
objèû
->
°©us
);

119 
√xt_obj
 = 
objèû
->
√xt
;

120 
√xt_objèû
 = 
√xt_obj
 + 
ªpos
->
objsize
;

121 i‡(
√xt_obj
)

122 
√xt_objèû
->
¥ev
 = 
NULL
;

123 
ªpos
->
u«Œoc_hód
 = 
√xt_obj
;

126 
	`mem£t
(
obj
, 0, 
ªpos
->
objsize
);

127 
√xt_obj
 = 
ªpos
->
Æloc_hód
;

128 
√xt_objèû
 = 
√xt_obj
 + 
ªpos
->
objsize
;

129 i‡(
√xt_obj
)

130 
√xt_objèû
->
¥ev
 = 
obj
;

131 
objèû
->
√xt
 = 
√xt_obj
;

132 
objèû
->
°©us
 = 1;

133 
ªpos
->
Æloc_hód
 = 
obj
;

136  
obj
;

137 
	}
}

140 
	$ªpos_‰ì_obje˘
(
ªpos_t
 *
ªpos
, *
obj
)

142 
objèû_t
 *
objèû
, *
¥ev_objèû
, *
√xt_objèû
;

143 *
¥ev_obj
, *
√xt_obj
;

146 i‡(!
obj
)

148 i‡(!
	`ªpos_Æloˇãd_obje˘
(
ªpos
, 
obj
)) {

149 
	`Ârötf
(
°dîr
, "panic: %s.repos_free_object: freed objectÇot valid\n",

150 
ªpos
->
«me
);

151 
	`ab‹t
();

155 
objèû
 = 
obj
 + 
ªpos
->
objsize
;

156 i‡(!
objèû
->
°©us
) {

157 
	`Ârötf
(
°dîr
, "panic: %s.repos_free_object: object wasÇotállocated\n",

158 
ªpos
->
«me
);

159 
	`ab‹t
();

163 
¥ev_obj
 = 
objèû
->
¥ev
;

164 
¥ev_objèû
 = 
¥ev_obj
 + 
ªpos
->
objsize
;

165 
√xt_obj
 = 
objèû
->
√xt
;

166 
√xt_objèû
 = 
√xt_obj
 + 
ªpos
->
objsize
;

167 i‡(
¥ev_obj
)

168 
¥ev_objèû
->
√xt
 = 
√xt_obj
;

169 i‡(
√xt_obj
)

170 
√xt_objèû
->
¥ev
 = 
¥ev_obj
;

171 i‡(
ªpos
->
Æloc_hód
 =
obj
)

172 
ªpos
->
Æloc_hód
 = 
√xt_obj
;

175 
√xt_obj
 = 
ªpos
->
u«Œoc_hód
;

176 
√xt_objèû
 = 
obj
 + 
ªpos
->
objsize
;

177 i‡(
√xt_obj
)

178 
√xt_objèû
->
¥ev
 = 
obj
;

179 
objèû
->
¥ev
 = 
NULL
;

180 
objèû
->
√xt
 = 
√xt_obj
;

181 
objèû
->
°©us
 = 0;

182 
ªpos
->
u«Œoc_hód
 = 
obj
;

183 
	}
}

186 
	$ªpos_Æloˇãd_obje˘
(
ªpos_t
 *
ªpos
, *
obj
)

188 
objèû_t
 *
objèû
;

189 i‡(!
obj
)

191 
objèû
 = 
obj
 + 
ªpos
->
objsize
;

192  
objèû
->
id
 =
ªpos
->id && objèû->
°©us
;

193 
	}
}

	@libstruct/repos.h

20 #i‚de‡
REPOS_H


21 
	#REPOS_H


	)

23 
	~<°dio.h
>

26 
	gªpos_t
;

29 
ªpos_t
 *
ªpos_¸óã
(
objsize
, *
«me
);

30 
ªpos_‰ì
(
ªpos_t
 *
ªpos
);

31 
ªpos_‰ì_dump
(
ªpos_t
 *
ªpos
, (*
dump
)(*, 
FILE
 *));

39 *
	`ªpos_¸óã_obje˘
(
ªpos_t
 *
ªpos
);

40 
	`ªpos_‰ì_obje˘
(
ªpos_t
 *
ªpos
, *
obj
);

45 
	`ªpos_Æloˇãd_obje˘
(
ªpos_t
 *
ªpos
, *
obj
);

	@m2s-fast.c

21 
	~<›ti⁄s.h
>

22 
	~<sig«l.h
>

23 
	~<m2skî√l.h
>

27 #i‚de‡
VERSION


28 
	#VERSION
 ""

	)

33 *
	gsim_tôÀ
 = "";

34 *
	gc⁄figfûe
 = "";

35 *
	g˘xc⁄fig
 = "";

37 *
	g˘x_debug_fûe
 = "";

38 *
	gsysˇŒ_debug_fûe
 = "";

39 *
	g›í˛_debug_fûe
 = "";

40 *
	ggpu_iß_debug_fûe
 = "";

41 *
	gñf_debug_fûe
 = "";

42 *
	glﬂdî_debug_fûe
 = "";

43 *
	giß_ˇŒ_debug_fûe
 = "";

44 *
	giß_ö°_debug_fûe
 = "";

46 *
	gö°_°©_fûe
 = "";

47 *
	gö°_°›
 = "";

48 
uöt64_t
 
	gö°_ª£t
 = 0;

49 
uöt64_t
 
	gmax_cy˛es
 = 0;

50 
uöt64_t
 
	gmax_ö°
 = 0;

51 
uöt32_t
 
	gbªak_poöt
 = 0;

52 
uöt64_t
 
	gsim_cy˛e
 = 0;

53 
uöt64_t
 
	gsim_ö°
 = 0;

57 
	gsigöt_ª˚ived
 = 0;

61 
	$sim_ªg_›ti⁄s
()

63 
	`›t_ªg_°rög
("-tôÀ", "Simuœti⁄ÅôÀ", &
sim_tôÀ
);

64 
	`›t_ªg_°rög
("-c⁄fig", "m2s-Á° c⁄figuøti⁄ fûe", &
c⁄figfûe
);

65 
	`›t_ªg_°rög
("-˘xc⁄fig", "C⁄ãxàc⁄figuøti⁄ fûe", &
˘xc⁄fig
);

67 
	`›t_ªg_°rög
("-debug:˘x", "Debug inf‹m©i⁄ f‹ c⁄ãxà¸óti⁄ & sètu†upd©es", &
˘x_debug_fûe
);

68 
	`›t_ªg_°rög
("-debug:sysˇŒ", "Debug inf‹m©i⁄ f‹ sy°em cÆls", &
sysˇŒ_debug_fûe
);

69 
	`›t_ªg_°rög
("-debug:›í˛", "Debug inf‹m©i⁄ f‹ O≥nCLÖrogøms", &
›í˛_debug_fûe
);

70 
	`›t_ªg_°rög
("-debug:gpu_iß", "Debug inf‹m©i⁄ f‹ GPU in°ru˘i⁄s", &
gpu_iß_debug_fûe
);

71 
	`›t_ªg_°rög
("-debug:ñf", "Debug inf‹m©i⁄ fromÉl‡fûê™Æyzî", &
ñf_debug_fûe
);

72 
	`›t_ªg_°rög
("-debug:lﬂdî", "Debug inf‹m©i⁄ fromÖrogømÜﬂdî", &
lﬂdî_debug_fûe
);

73 
	`›t_ªg_°rög
("-debug:ˇŒ", "Debug inf‹m©i⁄ábouà¥o˚duª cÆls", &
iß_ˇŒ_debug_fûe
);

74 
	`›t_ªg_°rög
("-debug:ö°", "Debug inf‹m©i⁄ábouàexecuãd in°ru˘i⁄s", &
iß_ö°_debug_fûe
);

76 
	`›t_ªg_°rög
("-ö°_°©", "Fûêtÿdum∞ö°ru˘i⁄ sèts", &
ö°_°©_fûe
);

77 
	`›t_ªg_°rög
("-ö°_°›", "St› whíÉxecutög in°", &
ö°_°›
);

78 
	`›t_ªg_uöt64
("-ö°_ª£t", "Cy˛êtÿª£àö°ru˘i⁄ sèts", &
ö°_ª£t
);

79 
	`›t_ªg_uöt64
("-max_cy˛es", "Cy˛êtÿ°›Örogøm (0Úÿ°›)", &
max_cy˛es
);

80 
	`›t_ªg_uöt64
("-max_ö°", "MaximumÇumbî o‡ö°ru˘i⁄s", &
max_ö°
);

81 
	`›t_ªg_uöt32
("-bªak_poöt", "VÆuêf‹ÉùÅÿ°›", &
bªak_poöt
);

82 
	`›t_ªg_boﬁ
("-mem_ß„_mode", "Sa„ác˚s£†tÿmem‹y", &
mem_ß„_mode
);

84 
	`gk_ªg_›ti⁄s
();

85 
	}
}

89 
	$sim_sig«l_h™dÀr
(
signum
)

91 
FILE
 *
f
;

93 
signum
) {

95 
SIGINT
:

96 i‡(
sigöt_ª˚ived
)

97 
	`ab‹t
();

98 
sigöt_ª˚ived
 = 1;

99 
	`Ârötf
(
°dîr
, "SIGINTÑeceived\n");

102 
SIGABRT
:

103 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

104 
	`Ârötf
(
°dîr
, "cy˛ê%Œd:áb‹ãd\n", (Ë
sim_cy˛e
);

105 
f
 = 
	`›í_wrôe
(
ö°_°©_fûe
);

106 i‡(
f
)

107 
	`iß_ö°_°©_dump
(
f
);

108 
	`iß_dump
(
°dîr
);

109 
	`ke_dump
(
°dîr
);

110 
	`exô
(1);

113 
	}
}

116 
	$maö
(
¨gc
, **
¨gv
)

118 
uöt64_t
 
t
;

121 
¨gc
 = 2;

122 
¨gv
[0] = "myself";

123 
¨gv
[1] = "/home/prajakta/praj_multi2sim_RandD/guestos_multi2sim/mytest/hello";

124 
	`Ârötf
(
°dîr
,"\n WelcomeÅo guestos\n");

130 
	`›t_öô
();

131 
	`sim_ªg_›ti⁄s
();

139 
	`ke_öô
();

152 
	`ö°Æl_sy°emˇŒ
();

156 i‡(*
˘xc⁄fig
)

157 
	`ld_lﬂd_¥og_‰om_˘xc⁄fig
(
˘xc⁄fig
);

158 i‡(
¨gc
 > 1)

159 
	`ld_lﬂd_¥og_‰om_cmdlöe
(
¨gc
 - 1, 
¨gv
 + 1);

164 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

165 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

166 !
sigöt_ª˚ived
) {

169 i‡(
bªak_poöt
 && 
ke
->
c⁄ãxt_li°_hód
->
ªgs
->
eù
 == break_point) {

170 
	`ªgs_dump
(
ke
->
c⁄ãxt_li°_hód
->
ªgs
, 
°dout
);

175 
	`ke_run
();

176 
sim_ö°
 +
ke
->
ru¬ög_cou¡
;

177 i‡(!
ke
->
c⁄ãxt_li°_hód
)

181 
sim_cy˛e
++;

182 i‡((
sim_cy˛e
 >
max_cy˛es
 && max_cycles) ||

183 (
sim_ö°
 >
max_ö°
 && max_inst))

185 
	`ªgs_dump
(
iß_ªgs
, 
°dout
);

186 
	`ke_dump
(
°dout
);

189 i‡(
sim_cy˛e
 =
ö°_ª£t
 && inst_reset)

190 
	`iß_ö°_°©_ª£t
();

192 i‡(*
ö°_°›
 && !
	`°rcmp
(
iß_ö°
.
f‹m©
, inst_stop))

193 
	`∑nic
("ö°ru˘i⁄ '%s' found", 
ö°_°›
);

229 
	`ke_d⁄e
();

232 
	`mh™dÀ_d⁄e
();

234 
	}
}

	@m2s-objdump.c

20 
	~<›ti⁄s.h
>

21 
	~<m2skî√l.h
>

25 
uöt32_t
 
	g°¨t_addªss
 = 0;

26 
uöt32_t
 
	g°›_addªss
 = 0;

30 
	$sim_ªg_›ti⁄s
()

32 
	`›t_ªg_uöt32
("-°¨t_addªss", "addªs†tÿ°¨àdump", &
°¨t_addªss
);

33 
	`›t_ªg_uöt32
("-°›_addªss", "addªs†tÿ°› dump", &
°›_addªss
);

34 
	}
}

37 
	$sim_dump_£˘i⁄
(*
buf
, 
uöt32_t
 
addr
, 
size
)

39 
uöt32_t
 
°¨t
, 
°›
, 
off£t
;

40 
x86_ö°_t
 
ö°
;

42 
°¨t
 = 
°¨t_addªss
 > 
addr
 ? start_address -áddr : 0;

43 i‡(!
°›_addªss
 || st›_addªs†>
addr
 + 
size
 - 1)

44 
°›
 = 
size
 - 1;

46 
°›
 = 
°›_addªss
 - 
addr
;

48 
off£t
 = 
°¨t
; off£à<
°›
; off£à+
ö°
.
size
) {

49 
	`x86_dißsm
(
buf
 + 
off£t
, 
addr
 + off£t, &
ö°
);

50 
	`¥ötf
("%x ", 
addr
 + 
off£t
);

51 i‡(
ö°
.
›code
 =
›_n⁄e
) {

52 
	`¥ötf
("???\n");

55 
	`x86_ö°_dump
(&
ö°
, 
°dout
);

56 
	`¥ötf
("\n");

58 
	}
}

61 
	$sim_dump
(*
fûe
)

63 
ñf_fûe_t
 *
ñf
;

64 *
buf
;

65 
uöt32_t
 
addr
, 
size
, 
Êags
;

66 *
«me
;

67 
i
;

70 
ñf
 = 
	`ñf_›í
(
fûe
);

71 i‡(!
ñf
)

72 
	`Áèl
("%s: c™nŸ o≥¿fûe", 
fûe
);

75 
i
 = 0; i < 
	`ñf_£˘i⁄_cou¡
(
ñf
); i++) {

76 
	`ñf_£˘i⁄_öfo
(
ñf
, 
i
, &
«me
, &
addr
, &
size
, &
Êags
);

77 i‡(!(
Êags
 & 
SHF_EXECINSTR
))

81 i‡(
°›_addªss
 && st›_addªs†< 
addr
)

83 i‡(
°¨t_addªss
 >
addr
 + 
size
)

87 
buf
 = 
	`ñf_£˘i⁄_ªad
(
ñf
, 
i
);

88 
	`sim_dump_£˘i⁄
(
buf
, 
addr
, 
size
);

89 
	`ñf_‰ì_buf„r
(
buf
);

91 
	}
}

94 
	$maö
(
¨gc
, **
¨gv
)

97 
	`Ârötf
(
°dîr
, "\nMulti2Sim. Executable file dumper (m2s-objdump)\n");

98 
	`Ârötf
(
°dîr
, "La° compû©i⁄: %†%s\n\n", 
__DATE__
, 
__TIME__
);

101 
	`›t_öô
();

102 
	`sim_ªg_›ti⁄s
();

103 
	`›t_check_›ti⁄s
(&
¨gc
, 
¨gv
);

104 
	`›t_¥öt_›ti⁄s
(
°dîr
);

106 i‡(
¨gc
 != 2) {

107 
	`Ârötf
(
°dîr
, "syntax: m2s-objdump [<options>] <file>\n");

108 
	`exô
(1);

111 
	`dißsm_öô
();

112 
	`sim_dump
(
¨gv
[1]);

113 
	`dißsm_d⁄e
();

115 
	`›t_d⁄e
();

117 
	}
}

	@m2s.c

20 
	~<m2s.h
>

24 #i‚de‡
VERSION


25 
	#VERSION
 ""

	)

30 
	gsigöt_ª˚ived
 = 0;

31 
	gsigu§_ª˚ived
 = 0;

32 
	gsigÆrm_öãrvÆ
 = 30;

33 
uöt64_t
 
	gœ°_sigÆrm_cy˛e
 = 0;

37 
uöt64_t
 
	gmax_cy˛es
 = 0;

38 
uöt64_t
 
	gmax_ö°
 = 0;

39 
uöt64_t
 
	gmax_time
 = 0;

40 
uöt64_t
 
	gÁ°fwd
;

41 *
	g˘xfûe
 = "";

42 *
	gc⁄figfûe
 = "";

43 *
	gsim_tôÀ
 = "";

45 *
	g˘x_debug_fûe_«me
 = "";

46 *
	gsysˇŒ_debug_fûe_«me
 = "";

47 *
	g›í˛_debug_fûe_«me
 = "";

48 *
	ggpu_iß_debug_fûe
 = "";

49 *
	glﬂdî_debug_fûe_«me
 = "";

50 *
	giß_ˇŒ_debug_fûe_«me
 = "";

51 *
	giß_ö°_debug_fûe_«me
 = "";

52 *
	gˇche_debug_fûe_«me
 = "";

53 *
	gesim_debug_fûe_«me
 = "";

54 *
	gîr‹_debug_fûe_«me
 = "";

58 
uöt64_t
 
	gsim_cy˛e
;

59 
uöt64_t
 
	gsim_ö°
;

63 
	gîr‹_debug_ˇãg‹y
;

68 
	$sim_ªg_›ti⁄s
()

70 
	`›t_ªg_°rög
("-tôÀ", "Simuœti⁄ÅôÀ", &
sim_tôÀ
);

71 
	`›t_ªg_°rög
("-c⁄fig", "Pro˚ss‹ c⁄figuøti⁄ fûe", &
c⁄figfûe
);

72 
	`›t_ªg_°rög
("-˘xc⁄fig", "C⁄ãxàc⁄figuøti⁄ fûe", &
˘xfûe
);

74 
	`›t_ªg_uöt64
("-max_cy˛es", "Cy˛êtÿ°›Örogøm (0Úÿ°›)", &
max_cy˛es
);

75 
	`›t_ªg_uöt64
("-max_ö°", "MaxÇumbî o‡ªtúìd in°ru˘i⁄†(0Úÿmax)", &
max_ö°
);

76 
	`›t_ªg_uöt64
("-max_time", "MaxÑu¬ögÅimê(ö sec⁄ds)", &
max_time
);

77 
	`›t_ªg_uöt64
("-Á°fwd", "Cy˛e†tÿru¿wôh fa° simuœti⁄", &
Á°fwd
);

79 
	`›t_ªg_°rög
("-debug:˘x", "Debug inf‹m©i⁄ f‹ c⁄ãxà¸óti⁄ & sètu†upd©es", &
˘x_debug_fûe_«me
);

80 
	`›t_ªg_°rög
("-debug:sysˇŒ", "Debug inf‹m©i⁄ f‹ sy°em cÆls", &
sysˇŒ_debug_fûe_«me
);

81 
	`›t_ªg_°rög
("-debug:›í˛", "Debug inf‹m©i⁄ f‹ O≥nCLÖrogøms", &
›í˛_debug_fûe_«me
);

82 
	`›t_ªg_°rög
("-debug:gpu_iß", "Debug inf‹m©i⁄ f‹ GPU in°ru˘i⁄s", &
gpu_iß_debug_fûe
);

83 
	`›t_ªg_°rög
("-debug:lﬂdî", "Debug inf‹m©i⁄ fromÖrogømÜﬂdî", &
lﬂdî_debug_fûe_«me
);

84 
	`›t_ªg_°rög
("-debug:ˇŒ", "Debug inf‹m©i⁄ábouà¥o˚duª cÆls", &
iß_ˇŒ_debug_fûe_«me
);

85 
	`›t_ªg_°rög
("-debug:ö°", "Debug inf‹m©i⁄ábouàexecuãd in°ru˘i⁄s", &
iß_ö°_debug_fûe_«me
);

86 
	`›t_ªg_°rög
("-debug:ˇche", "Debug inf‹m©i⁄ f‹ cachêsy°em", &
ˇche_debug_fûe_«me
);

87 
	`›t_ªg_°rög
("-debug:pùñöe", "Debug inf‹m©i⁄ f‹Öùñöe", &
esim_debug_fûe_«me
);

88 
	`›t_ªg_°rög
("-debug:îr‹", "Debug inf‹m©i⁄á·îÉº‹s", &
îr‹_debug_fûe_«me
);

90 
	`›t_ªg_°rög
("-ªp‹t:pùñöe", "Rï‹àf‹Öùñöê°©i°ics", &
p_ªp‹t_fûe
);

91 
	`›t_ªg_°rög
("-ªp‹t:ˇche", "Rï‹àf‹ cachêsy°em", &
ˇche_sy°em_ªp‹t_fûe
);

93 
	`gk_ªg_›ti⁄s
();

94 
	}
}

98 
	$sim_dump_log
()

100 
FILE
 *
f
;

101 
«me
[100];

104 
	`•rötf
(
«me
, "m2s.%d.%Œd", (Ë
	`gëpid
(), (Ë
sim_cy˛e
);

105 
f
 = 
	`f›í
(
«me
, "wt");

106 i‡(
f
) {

107 
	`p_¥öt_°©s
(
f
);

108 
	`p_dump
(
f
);

109 
	`f˛o£
(
f
);

113 
sigu§_ª˚ived
 = 0;

114 
	}
}

118 
	$sim_sig«l_h™dÀr
(
signum
)

120 
signum
) {

122 
SIGINT
:

123 i‡(
sigöt_ª˚ived
)

124 
	`ab‹t
();

125 
sigöt_ª˚ived
 = 1;

126 
	`p_dump
(
°dîr
);

127 
	`Ârötf
(
°dîr
, "SIGINTÑeceived\n");

130 
SIGALRM
:

131 i‡(
sim_cy˛e
 - 
œ°_sigÆrm_cy˛e
 == 0)

132 
	`∑nic
("simuœt‹ sèŒed i¿°agê%s", 
p
->
°age
);

133 
œ°_sigÆrm_cy˛e
 = 
sim_cy˛e
;

134 
	`Æ¨m
(
sigÆrm_öãrvÆ
);

137 
SIGABRT
:

138 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

139 i‡(
	`debug_°©us
(
îr‹_debug_ˇãg‹y
)) {

140 
	`p_¥öt_°©s
(
	`debug_fûe
(
îr‹_debug_ˇãg‹y
));

141 
	`p_dump
(
	`debug_fûe
(
îr‹_debug_ˇãg‹y
));

143 
	`exô
(1);

146 
SIGUSR2
:

147 
sigu§_ª˚ived
 = 1;

150 
	}
}

153 
	$maö
(
¨gc
, **
¨gv
)

156 
	`›t_öô
();

157 
	`sim_ªg_›ti⁄s
();

158 
	`p_ªg_›ti⁄s
();

159 
	`ˇche_sy°em_ªg_›ti⁄s
();

160 
	`›t_check_›ti⁄s
(&
¨gc
, 
¨gv
);

161 i‡(*
c⁄figfûe
)

162 
	`›t_check_c⁄fig
(
c⁄figfûe
);

165 
	`Ârötf
(
°dîr
, "\nMu…i2Sim %†- Mu…ic‹êMu…ôhªaded Pro˚ss‹ Simuœt‹\n",
VERSION
);

166 
	`Ârötf
(
°dîr
, "La° compû©i⁄: %†%s\n\n", 
__DATE__
, 
__TIME__
);

167 
	`›t_¥öt_›ti⁄s
(
°dîr
);

170 
	`u›_öô
();

171 
	`esim_öô
();

172 
	`√t_öô
();

173 
	`ˇche_sy°em_öô
(
p_c‹es
, 
p_thªads
);

174 
	`ke_öô
();

177 
	`debug_öô
();

178 
îr‹_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

179 
	`debug_assign_fûe
(
˘x_debug_ˇãg‹y
, 
˘x_debug_fûe_«me
);

180 
	`debug_assign_fûe
(
sysˇŒ_debug_ˇãg‹y
, 
sysˇŒ_debug_fûe_«me
);

181 
	`debug_assign_fûe
(
›í˛_debug_ˇãg‹y
, 
›í˛_debug_fûe_«me
);

182 
	`debug_assign_fûe
(
gpu_iß_debug_ˇãg‹y
, 
gpu_iß_debug_fûe
);

183 
	`debug_assign_fûe
(
ld_debug_ˇãg‹y
, 
lﬂdî_debug_fûe_«me
);

184 
	`debug_assign_fûe
(
iß_ˇŒ_debug_ˇãg‹y
, 
iß_ˇŒ_debug_fûe_«me
);

185 
	`debug_assign_fûe
(
iß_ö°_debug_ˇãg‹y
, 
iß_ö°_debug_fûe_«me
);

186 
	`debug_assign_fûe
(
ˇche_debug_ˇãg‹y
, 
ˇche_debug_fûe_«me
);

187 
	`debug_assign_fûe
(
îr‹_debug_ˇãg‹y
, 
îr‹_debug_fûe_«me
);

188 
	`esim_debug_öô
(
esim_debug_fûe_«me
);

191 
	`p_öô
();

192 
	`p_lﬂd_¥ogs
(
¨gc
, 
¨gv
, 
˘xfûe
);

198 
	`p_Á°_f‹w¨d
(
Á°fwd
);

201 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

202 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

203 
	`sig«l
(
SIGUSR1
, &
sim_sig«l_h™dÀr
);

204 
	`sig«l
(
SIGUSR2
, &
sim_sig«l_h™dÀr
);

205 
	`sig«l
(
SIGALRM
, &
sim_sig«l_h™dÀr
);

206 
	`Æ¨m
(
sigÆrm_öãrvÆ
);

208 
ke
->
föished_cou¡
 < ke->
c⁄ãxt_cou¡
) {

211 
sim_cy˛e
++;

214 
	`p_°ages
();

217 
	`ke_¥o˚ss_evíts
();

220 
	`esim_¥o˚ss_evíts
();

224 i‡(
sigöt_ª˚ived
)

226 i‡(
max_cy˛es
 && 
sim_cy˛e
 >= max_cycles)

228 i‡(
max_ö°
 && 
sim_ö°
 >= max_inst)

230 i‡(
max_time
 && !(
sim_cy˛e
 % 10000Ë&& 
	`ke_timî
() > max_time * 1000000)

234 i‡(
sigu§_ª˚ived
)

235 
	`sim_dump_log
();

237 
	`sig«l
(
SIGALRM
, 
SIG_IGN
);

238 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

241 
	`esim_≥ndög
(Ë&& 
esim_cy˛e
 < 
sim_cy˛e
 + (1<<20))

242 
	`esim_¥o˚ss_evíts
();

243 
	`esim_debug_d⁄e
();

246 
	`Ârötf
(
°dîr
, "\n");

247 
	`›t_d⁄e
();

248 
	`p_d⁄e
();

249 
	`ke_d⁄e
();

250 
	`u›_d⁄e
();

251 
	`ˇche_sy°em_d⁄e
();

252 
	`√t_d⁄e
();

253 
	`esim_d⁄e
();

254 
	`debug_d⁄e
();

255 
	`Ârötf
(
°dîr
, "\n");

256 
	`mh™dÀ_d⁄e
();

258 
	}
}

	@m2s.h

20 
	~<time.h
>

21 
	~<›ti⁄s.h
>

22 
	~<sig«l.h
>

23 
	~<li°.h
>

24 
	~< li°.h
>

25 
	~<ªpos.h
>

26 
	~<ˇchesy°em.h
>

27 
	~<m2skî√l.h
>

32 
uöt64_t
 
sim_cy˛e
;

33 
uöt64_t
 
sim_ö°
;

37 **
ívú⁄
;

41 
	#îr‹_debug
(...Ë
	`debug
(
îr‹_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

42 
îr‹_debug_ˇãg‹y
;

48 *
p_ªp‹t_fûe
;

49 
p_°age_time_°©s
;

50 
uöt32_t
 
p_c‹es
;

51 
uöt32_t
 
p_thªads
;

52 
uöt32_t
 
p_˝us
;

53 
uöt32_t
 
p_c⁄ãxt_qu™tum
;

54 
uöt32_t
 
p_thªad_qu™tum
;

55 
uöt32_t
 
p_thªad_swôch_≥«…y
;

58 
	ep_ªcovî_köd_íum
 {

59 
p_ªcovî_köd_wrôeback
 = 0,

60 
p_ªcovî_köd_commô


61 } 
p_ªcovî_köd
;

62 
uöt32_t
 
p_ªcovî_≥«…y
;

65 
	ep_„tch_köd_íum
 {

66 
p_„tch_köd_sh¨ed
 = 0,

67 
p_„tch_köd_time¶i˚
,

68 
p_„tch_köd_swôch⁄evít


69 } 
p_„tch_köd
;

72 
uöt32_t
 
p_decode_width
;

75 
	ep_di•©ch_köd_íum
 {

76 
p_di•©ch_köd_sh¨ed
 = 0,

77 
p_di•©ch_köd_time¶i˚
,

78 } 
p_di•©ch_köd
;

79 
uöt32_t
 
p_di•©ch_width
;

82 
	ep_issue_köd_íum
 {

83 
p_issue_köd_sh¨ed
 = 0,

84 
p_issue_köd_time¶i˚
,

85 } 
p_issue_köd
;

86 
uöt32_t
 
p_issue_width
;

89 
	ep_commô_köd_íum
 {

90 
p_commô_köd_sh¨ed
 = 0,

91 
p_commô_köd_time¶i˚


92 } 
p_commô_köd
;

93 
uöt32_t
 
p_commô_width
;

100 
	gmm_t
;

102 
mm_t
 *
mm_¸óã
();

103 
mm_‰ì
(
mm_t
 *
mm
);

104 
mm_å™¶©e
(
mm_t
 *
mm
, 
˘x
, 
uöt32_t
 
vé_addr
, uöt32_à*
phaddr
);

105 
mm_πøn¶©e
(
mm_t
 *
mm
, 
uöt32_t
 
phaddr
, *
˘x
, uöt32_à*
véaddr
);

112 
	edï_íum
 {

114 
	mDNONE
 = 0,

118 
	mDEAX
 = 0x01,

119 
	mDECX
 = 0x02,

120 
	mDEDX
 = 0x03,

121 
	mDEBX
 = 0x04,

122 
	mDESP
 = 0x05,

123 
	mDEBP
 = 0x06,

124 
	mDESI
 = 0x07,

125 
	mDEDI
 = 0x08,

127 
	mDES
 = 0x09,

128 
	mDCS
 = 0x0a,

129 
	mDSS
 = 0x0b,

130 
	mDDS
 = 0x0c,

131 
	mDFS
 = 0x0d,

132 
	mDGS
 = 0x0e,

134 
	mDZPS
 = 0x0f,

135 
	mDOF
 = 0x10,

136 
	mDCF
 = 0x11,

137 
	mDDF
 = 0x12,

139 
	mDAUX
 = 0x13,

140 
	mDAUX2
 = 0x14,

141 
	mDEA
 = 0x15,

142 
	mDDATA
 = 0x16,

144 
	mDEP_INT_FIRST
 = 
DEAX
,

145 
	mDEP_INT_LAST
 = 
DDATA
,

146 
	mDEP_INT_COUNT
 = 
DEP_INT_LAST
 - 
DEP_INT_FIRST
 + 1,

148 
	mDEP_FLAG_FIRST
 = 
DZPS
,

149 
	mDEP_FLAG_LAST
 = 
DDF
,

150 
	mDEP_FLAG_COUNT
 = 
DEP_FLAG_LAST
 - 
DEP_FLAG_FIRST
 + 1,

155 
	mDST0
 = 0x17,

156 
	mDST1
 = 0x18,

157 
	mDST2
 = 0x19,

158 
	mDST3
 = 0x1a,

159 
	mDST4
 = 0x1b,

160 
	mDST5
 = 0x1c,

161 
	mDST6
 = 0x1d,

162 
	mDST7
 = 0x1e,

163 
	mDFPST
 = 0x1f,

164 
	mDFPCW
 = 0x20,

165 
	mDFPAUX
 = 0x21,

167 
	mDEP_FP_FIRST
 = 
DST0
,

168 
	mDEP_FP_LAST
 = 
DFPAUX
,

169 
	mDEP_FP_COUNT
 = 
DEP_FP_LAST
 - 
DEP_FP_FIRST
 + 1,

171 
	mDEP_FP_STACK_FIRST
 = 
DST0
,

172 
	mDEP_FP_STACK_LAST
 = 
DST7
,

173 
	mDEP_FP_STACK_COUNT
 = 
DEP_FP_STACK_LAST
 - 
DEP_FP_STACK_FIRST
 + 1,

178 
	mDRM8
 = 0x100,

179 
	mDRM16
 = 0x101,

180 
	mDRM32
 = 0x102,

181 
	mDIR8
 = 0x200,

182 
	mDIR16
 = 0x201,

183 
	mDIR32
 = 0x202,

184 
	mDR8
 = 0x300,

185 
	mDR16
 = 0x301,

186 
	mDR32
 = 0x302,

187 
	mDSREG
 = 0x400,

188 
	mDMEM
 = 0x500,

189 
	mDEASEG
 = 0x501,

190 
	mDEABAS
 = 0x502,

191 
	mDEAIDX
 = 0x503,

192 
	mDSTI
 = 0x600,

193 
	mDFPOP
 = 0x601,

194 
	mDFPOP2
 = 0x602,

195 
	mDFPUSH
 = 0x603

198 
	#DEP_IS_INT_REG
(
dï
Ë((dïË>
DEP_INT_FIRST
 && (dïË<
DEP_INT_LAST
)

	)

199 
	#DEP_IS_FP_REG
(
dï
Ë((dïË>
DEP_FP_FIRST
 && (dïË<
DEP_FP_LAST
)

	)

200 
	#DEP_IS_FLAG
(
dï
Ë((dïË>
DEP_FLAG_FIRST
 && (dïË<
DEP_FLAG_LAST
)

	)

201 
	#DEP_IS_VALID
(
dï
Ë(
	`DEP_IS_INT_REG
(dïË|| 
	`DEP_IS_FP_REG
(dï))

	)

203 
	eu›_íum
 {

204 
	#UOP
(
_u›
, 
_fu
, 
_Êags
Ë
u›_
##_u›,

	)

205 
	~"u›1.d©
"

206 #unde‡
UOP


207 
	mu›_cou¡


210 
	efu_˛ass_íum
 {

211 
	mfu_n⁄e
 = 0,

212 
	mfu_öèdd
,

213 
	mfu_ötsub
,

214 
	mfu_ötmu…
,

215 
	mfu_ötdiv
,

216 
	mfu_efÁddr
,

217 
	mfu_logiˇl
,

219 
	mfu_Âsim∂e
,

220 
	mfu_Âadd
,

221 
	mfu_Âcomp
,

222 
	mfu_Âmu…
,

223 
	mfu_Âdiv
,

224 
	mfu_Âcom∂ex
,

226 
	mfu_cou¡


229 
	eu›_Êags_íum
 {

230 
	mFICOMP
 = 0x001,

231 
	mFLCOMP
 = 0x002,

232 
	mFFCOMP
 = 0x004,

233 
	mFMEM
 = 0x008,

234 
	mFLOAD
 = 0x010,

235 
	mFSTORE
 = 0x020,

236 
	mFCTRL
 = 0x040,

237 
	mFCALL
 = 0x080,

238 
	mFRET
 = 0x100,

239 
	mFCOND
 = 0x200

242 
	#IDEP_COUNT
 3

	)

243 
	#ODEP_COUNT
 4

	)

245 
	su›_t
 {

248 
	m«me
[40];

249 
u›_íum
 
	mu›
;

250 
˘x_t
 *
	m˘x
;

251 
	mc‹e
, 
	mthªad
;

252 
uöt64_t
 
	m£q
;

253 
uöt64_t
 
	mdi_£q
;

254 
uöt32_t
 
	meù
;

255 
uöt32_t
 
	m√ù
;

256 
uöt32_t
 
	m¥ed_√ù
;

257 
uöt32_t
 
	mèrgë_√ù
;

258 
	m•ecmode
;

259 
uöt64_t
 
	m„tch_ac˚ss
;

262 
	mm›_«me
[40];

263 
	mm›_ödex
;

264 
	mm›_cou¡
;

265 
	mm›_size
;

266 
uöt64_t
 
	mm›_£q
;

269 
	midï_cou¡
;

270 
	modï_cou¡
;

271 
	midï
[
IDEP_COUNT
];

272 
	modï
[
ODEP_COUNT
];

275 
	mph_öt_idï_cou¡
, 
	mph_Â_idï_cou¡
;

276 
	mph_öt_odï_cou¡
, 
	mph_Â_odï_cou¡
;

277 
	mph_idï
[
IDEP_COUNT
];

278 
	mph_odï
[
ODEP_COUNT
];

279 
	mph_oodï
[
ODEP_COUNT
];

282 
	m„tch_tˇche
;

285 
	mfu_˛ass
;

286 
	mÊags
;

289 
	mö_„tchq
 : 1;

290 
	mö_u›q
 : 1;

291 
	mö_iq
 : 1;

292 
	mö_lq
 : 1;

293 
	mö_sq
 : 1;

294 
	mö_evítq
 : 1;

295 
	mö_rob
 : 1;

298 
	mªady
;

299 
	missued
;

300 
	mcom∂ëed
;

303 
uöt32_t
 
	mmem_véaddr
;

304 
uöt32_t
 
	mmem_phaddr
;

307 
uöt64_t
 
	mwhí
;

308 
uöt64_t
 
	missue_åy_whí
;

309 
uöt64_t
 
	missue_whí
;

312 
	m¥ed
;

313 
	mbimod_ödex
, 
	mbimod_¥ed
;

314 
	mtwﬁevñ_bht_ödex
, 
	mtwﬁevñ_pht_row
, 
	mtwﬁevñ_pht_cﬁ
, 
	mtwﬁevñ_¥ed
;

315 
	mchoi˚_ödex
, 
	mchoi˚_¥ed
;

318 
u›_öô
();

319 
u›_d⁄e
();

321 
u›_li°_dump
(
li°_t
 *
u›_li°
, 
FILE
 *
f
);

322 
u›_ li°_dump
(
 li°_t
 *
u›_li°
, 
FILE
 *
f
);

323 
u›_ li°_check_if_ªady
(
 li°_t
 *
u›_li°
);

324 
u›_t
 *
u›_decode
(
li°_t
 *
li°
);

326 
u›_‰ì_if_nŸ_queued
(
u›_t
 *
u›
);

327 
u›_dump_buf
(
u›_t
 *
u›
, *
buf
, 
size
);

328 
u›_dump
(
u›_t
 *
u›
, 
FILE
 *
f
);

329 
u›_exi°s
(
u›_t
 *
u›
);

336 
	#FU_RES_MAX
 10

	)

338 
	sfu_t
 {

339 
uöt64_t
 
	mcy˛e_whí_‰ì
[
fu_cou¡
][
FU_RES_MAX
];

340 
uöt64_t
 
	mac˚s£s
[
fu_cou¡
];

341 
uöt64_t
 
	mdíõd
[
fu_cou¡
];

342 
uöt64_t
 
	mwaôög_time
[
fu_cou¡
];

345 
fu_ªg_›ti⁄s
();

346 
fu_öô
();

347 
fu_d⁄e
();

349 
fu_ª£rve
(
u›_t
 *
u›
);

350 
fu_ªÀa£
(
c‹e
);

357 
uöt32_t
 
„tchq_size
;

359 
„tchq_ªg_›ti⁄s
();

360 
„tchq_öô
();

361 
„tchq_d⁄e
();

363 
„tchq_ªcovî
(
c‹e
, 
thªad
);

364 
u›_t
 *
„tchq_ªmove
(
c‹e
, 
thªad
, 
ödex
);

371 
uöt32_t
 
u›q_size
;

373 
u›q_ªg_›ti⁄s
();

374 
u›q_öô
();

375 
u›q_d⁄e
();

377 
u›q_ªcovî
(
c‹e
, 
thªad
);

384 
uöt32_t
 
rob_size
;

385 
	erob_köd_íum
 {

386 
rob_köd_¥iv©e
 = 0,

387 
rob_köd_sh¨ed


388 } 
rob_köd
;

390 
rob_ªg_›ti⁄s
();

391 
rob_öô
();

392 
rob_d⁄e
();

393 
rob_dump
(
c‹e
, 
FILE
 *
f
);

395 
rob_ˇn_íqueue
(
u›_t
 *
u›
);

396 
rob_íqueue
(
u›_t
 *
u›
);

397 
rob_ˇn_dequeue
(
c‹e
, 
thªad
);

398 
u›_t
 *
rob_hód
(
c‹e
, 
thªad
);

399 
rob_ªmove_hód
(
c‹e
, 
thªad
);

400 
u›_t
 *
rob_èû
(
c‹e
, 
thªad
);

401 
rob_ªmove_èû
(
c‹e
, 
thªad
);

402 
u›_t
 *
rob_gë
(
c‹e
, 
thªad
, 
ödex
);

409 
uöt32_t
 
iq_size
;

410 
	eiq_köd_íum
 {

411 
iq_köd_sh¨ed
 = 0,

412 
iq_köd_¥iv©e


413 } 
iq_köd
;

416 
iq_ªg_›ti⁄s
();

417 
iq_öô
();

418 
iq_d⁄e
();

420 
iq_ˇn_ö£π
(
u›_t
 *
u›
);

421 
iq_ö£π
(
u›_t
 *
u›
);

422 
iq_ªmove
(
c‹e
, 
thªad
);

423 
iq_ªcovî
(
c‹e
, 
thªad
);

430 
uöt32_t
 
lsq_size
;

432 
	elsq_köd_íum
 {

433 
lsq_köd_sh¨ed
 = 0,

434 
lsq_köd_¥iv©e


435 } 
lsq_köd
;

437 
lsq_ªg_›ti⁄s
();

438 
lsq_öô
();

439 
lsq_d⁄e
();

441 
lsq_ˇn_ö£π
(
u›_t
 *
u›
);

442 
lsq_ö£π
(
u›_t
 *
u›
);

443 
lsq_ªcovî
(
c‹e
, 
thªad
);

445 
lq_ªmove
(
c‹e
, 
thªad
);

446 
sq_ªmove
(
c‹e
, 
thªad
);

453 
evítq_öô
();

454 
evítq_d⁄e
();

456 
evítq_l⁄gœt
(
c‹e
, 
thªad
);

457 
evítq_ˇchemiss
(
c‹e
, 
thªad
);

458 
evítq_ö£π
(
 li°_t
 *
evítq
, 
u›_t
 *
u›
);

459 
u›_t
 *
evítq_exåa˘
(
 li°_t
 *
evítq
);

460 
evítq_ªcovî
(
c‹e
, 
thªad
);

466 
	#RF_MIN_INT_SIZE
 (
DEP_INT_COUNT
 + 
ODEP_COUNT
)

	)

467 
	#RF_MIN_FP_SIZE
 (
DEP_FP_COUNT
 + 
ODEP_COUNT
)

	)

469 
uöt32_t
 
rf_öt_size
;

470 
uöt32_t
 
rf_Â_size
;

471 
	erf_köd_íum
 {

472 
rf_köd_sh¨ed
 = 0,

473 
rf_köd_¥iv©e


474 } 
rf_köd
;

476 
	sphªg_t
 {

477 
	m≥ndög
;

478 
	mbusy
;

481 
	srf_t
 {

484 
	möt_øt
[
DEP_INT_COUNT
];

485 
phªg_t
 *
	möt_phªg
;

486 
	möt_phªg_cou¡
;

487 *
	möt_‰ì_phªg
;

488 
	möt_‰ì_phªg_cou¡
;

491 
	mÂ_t›_of_°ack
;

492 
	mÂ_øt
[
DEP_FP_COUNT
];

493 
phªg_t
 *
	mÂ_phªg
;

494 
	mÂ_phªg_cou¡
;

495 *
	mÂ_‰ì_phªg
;

496 
	mÂ_‰ì_phªg_cou¡
;

499 
rf_ªg_›ti⁄s
();

500 
rf_öô
();

501 
rf_d⁄e
();

503 
rf_t
 *
rf_¸óã
(
öt_size
, 
Â_size
);

504 
rf_‰ì
(
rf_t
 *
rf
);

506 
rf_dump
(
c‹e
, 
thªad
, 
FILE
 *
f
);

507 
rf_cou¡_dïs
(
u›_t
 *
u›
);

508 
rf_ˇn_ª«me
(
u›_t
 *
u›
);

509 
rf_ª«me
(
u›_t
 *
u›
);

510 
rf_ªady
(
u›_t
 *
u›
);

511 
rf_wrôe
(
u›_t
 *
u›
);

512 
rf_undo
(
u›_t
 *
u›
);

513 
rf_commô
(
u›_t
 *
u›
);

514 
rf_check_öãgrôy
(
c‹e
, 
thªad
);

521 
	gb¥ed_t
;

523 
b¥ed_ªg_›ti⁄s
();

524 
b¥ed_öô
();

525 
b¥ed_d⁄e
();

527 
b¥ed_t
 *
b¥ed_¸óã
();

528 
b¥ed_‰ì
(
b¥ed_t
 *
b¥ed
);

529 
b¥ed_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

530 
b¥ed_lookup_mu…ùÀ
(
b¥ed_t
 *
b¥ed
, 
uöt32_t
 
eù
, 
cou¡
);

531 
b¥ed_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

533 
uöt32_t
 
b¥ed_btb_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

534 
b¥ed_btb_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

535 
uöt32_t
 
b¥ed_btb_√xt_bønch
(
b¥ed_t
 *
b¥ed
, uöt32_à
eù
, uöt32_à
bsize
);

542 
	#TCACHE_ENTRY_SIZE
 ((
tˇche_íåy_t
Ë+ (
uöt32_t
Ë* 
tˇche_åa˚_size
)

	)

543 
	#TCACHE_ENTRY
(
SET
, 
WAY
Ë((
tˇche_íåy_t
 *Ë(((*Ë
tˇche
->
íåy
Ë+ 
TCACHE_ENTRY_SIZE
 * ((SETË* 
tˇche_assoc
 + (WAY))))

	)

545 
	stˇche_íåy_t
 {

546 
	mcou¡î
;

547 
uöt32_t
 
	mèg
;

548 
	mu›_cou¡
, 
	mm›_cou¡
;

549 
	mbønch_mask
, 
	mbønch_Êags
, 
	mbønch_cou¡
;

550 
uöt32_t
 
	mÁŒ_through
;

551 
uöt32_t
 
	mèrgë
;

556 
uöt32_t
 
	mm›_¨øy
[0];

559 
	stˇche_t
 {

562 
tˇche_íåy_t
 *
	míåy
;

563 
tˇche_íåy_t
 *
	mãmp
;

566 
	m«me
[20];

567 
uöt64_t
 
	mac˚s£s
;

568 
uöt64_t
 
	mhôs
;

569 
uöt64_t
 
	mcommôãd
;

570 
uöt64_t
 
	msquashed
;

571 
uöt64_t
 
	måa˚_Àngth_acc
;

572 
uöt64_t
 
	måa˚_Àngth_cou¡
;

576 
tˇche_¥e£¡
;

577 
uöt32_t
 
tˇche_åa˚_size
;

578 
uöt32_t
 
tˇche_bønch_max
;

579 
uöt32_t
 
tˇche_queue_size
;

581 
	gtˇche_t
;

583 
tˇche_ªg_›ti⁄s
();

584 
tˇche_dump_ªp‹t
(
tˇche_t
 *
tˇche
, 
FILE
 *
f
);

585 
tˇche_öô
();

586 
tˇche_d⁄e
();

588 
tˇche_t
 *
tˇche_¸óã
();

589 
tˇche_‰ì
(
tˇche_t
 *
tˇche
);

590 
tˇche_√w_u›
(
tˇche_t
 *
tˇche
, 
u›_t
 *
u›
);

591 
tˇche_lookup
(
tˇche_t
 *
tˇche
, 
uöt32_t
 
eù
, 
¥ed
,

592 *
±r_m›_cou¡
, 
uöt32_t
 **
±r_m›_¨øy
, uöt32_à*
±r_√ù
);

598 
	e±ø˚_°age_íum
 {

599 
	m±ø˚_„tch
 = 0,

600 
	m±ø˚_di•©ch
,

601 
	m±ø˚_issue
,

602 
	m±ø˚_executi⁄
,

603 
	m±ø˚_mem‹y
,

604 
	m±ø˚_wrôeback
,

605 
	m±ø˚_commô


608 
±ø˚_öô
();

609 
±ø˚_d⁄e
();

610 
±ø˚_ªg_›ti⁄s
();

612 
±ø˚_√w_u›
(
u›_t
 *
u›
);

613 
±ø˚_íd_u›
(
u›_t
 *
u›
);

614 
±ø˚_√w_°age
(
u›_t
 *
u›
, 
±ø˚_°age_íum
 
°age
);

615 
±ø˚_√w_cy˛e
();

624 
uöt64_t
 
°age_time_„tch
;

625 
uöt64_t
 
°age_time_di•©ch
;

626 
uöt64_t
 
°age_time_issue
;

627 
uöt64_t
 
°age_time_wrôeback
;

628 
uöt64_t
 
°age_time_commô
;

629 
uöt64_t
 
°age_time_ª°
;

632 
	#CORE
 (
p
->
c‹e
[c‹e])

	)

633 
	#THREAD
 (
p
->
c‹e
[c‹e].
thªad
[thªad])

	)

634 
	#ICORE
(
I
Ë(
p
->
c‹e
[(I)])

	)

635 
	#ITHREAD
(
I
Ë(
p
->
c‹e
[c‹e].
thªad
[(I)])

	)

636 
	#FOREACH_CORE
 
c‹e
 = 0; c‹ê< 
p_c‹es
; c‹e++)

	)

637 
	#FOREACH_THREAD
 
thªad
 = 0;Åhªad < 
p_thªads
;Åhªad++)

	)

641 
	edi_°Æl_íum
 {

642 
	mdi_°Æl_u£d
 = 0,

643 
	mdi_°Æl_•ec
,

644 
	mdi_°Æl_u›q
,

645 
	mdi_°Æl_rob
,

646 
	mdi_°Æl_iq
,

647 
	mdi_°Æl_lsq
,

648 
	mdi_°Æl_ª«me
,

649 
	mdi_°Æl_˘x
,

650 
	mdi_°Æl_max


655 
	s¥o˚ss‹_thªad_t
 {

657 
˘x_t
 *
	m˘x
;

658 
	mœ°_Æloc_pid
;

661 
	mrob_cou¡
;

662 
	mrob_À·_bound
;

663 
	mrob_right_bound
;

664 
	mrob_hód
;

665 
	mrob_èû
;

668 
	miq_cou¡
;

669 
	mlsq_cou¡
;

670 
	mrf_öt_cou¡
;

671 
	mrf_Â_cou¡
;

674 
li°_t
 *
	m„tchq
;

675 
li°_t
 *
	mu›q
;

676 
 li°_t
 *
	miq
;

677 
 li°_t
 *
	mlq
;

678 
 li°_t
 *
	msq
;

679 
b¥ed_t
 *
	mb¥ed
;

680 
tˇche_t
 *
	mtˇche
;

681 
rf_t
 *
	mrf
;

684 
uöt32_t
 
	m„tch_eù
, 
	m„tch_√ù
;

685 
	m„tchq_occ
;

686 
	mtˇcheq_occ
;

687 
	m„tch_°Æl
;

688 
	m„tch_bsize
;

689 
uöt32_t
 
	m„tch_block
;

690 
uöt64_t
 
	m„tch_ac˚ss
;

693 
uöt64_t
 
	m„tched
;

694 
uöt64_t
 
	mdi•©ched
[
u›_cou¡
];

695 
uöt64_t
 
	missued
[
u›_cou¡
];

696 
uöt64_t
 
	mcommôãd
[
u›_cou¡
];

697 
uöt64_t
 
	msquashed
;

698 
uöt64_t
 
	mbønches
;

699 
uöt64_t
 
	mmi•ªd
;

700 
uöt64_t
 
	mœ°_commô_cy˛e
;

703 
uöt64_t
 
	mrob_occu∑ncy
;

704 
uöt64_t
 
	mrob_fuŒ
;

705 
uöt64_t
 
	mrob_ªads
;

706 
uöt64_t
 
	mrob_wrôes
;

708 
uöt64_t
 
	miq_occu∑ncy
;

709 
uöt64_t
 
	miq_fuŒ
;

710 
uöt64_t
 
	miq_ªads
;

711 
uöt64_t
 
	miq_wrôes
;

712 
uöt64_t
 
	miq_wakeup_ac˚s£s
;

714 
uöt64_t
 
	mlsq_occu∑ncy
;

715 
uöt64_t
 
	mlsq_fuŒ
;

716 
uöt64_t
 
	mlsq_ªads
;

717 
uöt64_t
 
	mlsq_wrôes
;

718 
uöt64_t
 
	mlsq_wakeup_ac˚s£s
;

720 
uöt64_t
 
	mrf_öt_occu∑ncy
;

721 
uöt64_t
 
	mrf_öt_fuŒ
;

722 
uöt64_t
 
	mrf_öt_ªads
;

723 
uöt64_t
 
	mrf_öt_wrôes
;

725 
uöt64_t
 
	mrf_Â_occu∑ncy
;

726 
uöt64_t
 
	mrf_Â_fuŒ
;

727 
uöt64_t
 
	mrf_Â_ªads
;

728 
uöt64_t
 
	mrf_Â_wrôes
;

730 
uöt64_t
 
	møt_öt_ªads
;

731 
uöt64_t
 
	møt_öt_wrôes
;

732 
uöt64_t
 
	møt_Â_ªads
;

733 
uöt64_t
 
	møt_Â_wrôes
;

735 
uöt64_t
 
	mbtb_ªads
;

736 
uöt64_t
 
	mbtb_wrôes
;

741 
	s¥o˚ss‹_c‹e_t
 {

744 
¥o˚ss‹_thªad_t
 *
	mthªad
;

747 
 li°_t
 *
	mevítq
;

748 
fu_t
 *
	mfu
;

751 
uöt64_t
 
	mdi_£q
;

752 
	miq_cou¡
;

753 
	mlsq_cou¡
;

754 
	mrf_öt_cou¡
;

755 
	mrf_Â_cou¡
;

758 
li°_t
 *
	mrob
;

759 
	mrob_cou¡
;

760 
	mrob_hód
;

761 
	mrob_èû
;

764 
	m„tch_cuºít
;

765 
öt64_t
 
	m„tch_swôch
;

766 
	mdecode_cuºít
;

767 
	mdi•©ch_cuºít
;

768 
	missue_cuºít
;

769 
	mcommô_cuºít
;

772 
uöt64_t
 
	mdi_°Æl
[
di_°Æl_max
];

773 
uöt64_t
 
	mdi•©ched
[
u›_cou¡
];

774 
uöt64_t
 
	missued
[
u›_cou¡
];

775 
uöt64_t
 
	mcommôãd
[
u›_cou¡
];

776 
uöt64_t
 
	msquashed
;

777 
uöt64_t
 
	mbønches
;

778 
uöt64_t
 
	mmi•ªd
;

781 
uöt64_t
 
	mrob_occu∑ncy
;

782 
uöt64_t
 
	mrob_fuŒ
;

783 
uöt64_t
 
	mrob_ªads
;

784 
uöt64_t
 
	mrob_wrôes
;

786 
uöt64_t
 
	miq_occu∑ncy
;

787 
uöt64_t
 
	miq_fuŒ
;

788 
uöt64_t
 
	miq_ªads
;

789 
uöt64_t
 
	miq_wrôes
;

790 
uöt64_t
 
	miq_wakeup_ac˚s£s
;

792 
uöt64_t
 
	mlsq_occu∑ncy
;

793 
uöt64_t
 
	mlsq_fuŒ
;

794 
uöt64_t
 
	mlsq_ªads
;

795 
uöt64_t
 
	mlsq_wrôes
;

796 
uöt64_t
 
	mlsq_wakeup_ac˚s£s
;

798 
uöt64_t
 
	mrf_öt_occu∑ncy
;

799 
uöt64_t
 
	mrf_öt_fuŒ
;

800 
uöt64_t
 
	mrf_öt_ªads
;

801 
uöt64_t
 
	mrf_öt_wrôes
;

803 
uöt64_t
 
	mrf_Â_occu∑ncy
;

804 
uöt64_t
 
	mrf_Â_fuŒ
;

805 
uöt64_t
 
	mrf_Â_ªads
;

806 
uöt64_t
 
	mrf_Â_wrôes
;

811 
	s¥o˚ss‹_t
 {

814 
¥o˚ss‹_c‹e_t
 *
	mc‹e
;

817 
uöt64_t
 
	m£q
;

818 *
	m°age
;

821 
uöt64_t
 
	m˘x_Æloc_ﬁde°
;

822 
	m˘x_dóŒoc_sig«ls
;

825 
mm_t
 *
	mmm
;

828 
uöt64_t
 
	m„tched
;

829 
uöt64_t
 
	mdi•©ched
[
u›_cou¡
];

830 
uöt64_t
 
	missued
[
u›_cou¡
];

831 
uöt64_t
 
	mcommôãd
[
u›_cou¡
];

832 
uöt64_t
 
	msquashed
;

833 
uöt64_t
 
	mbønches
;

834 
uöt64_t
 
	mmi•ªd
;

835 
	mtime
;

838 
uöt64_t
 
	mœ°_commôãd
;

839 
uöt64_t
 
	mœ°_dump
;

845 
¥o˚ss‹_t
 *
p
;

849 
p_ªg_›ti⁄s
();

850 
p_¥öt_°©s
(
FILE
 *
f
);

851 
p_öô
();

852 
p_d⁄e
();

853 
p_lﬂd_¥ogs
(
¨gc
, **
¨gv
, *
˘xfûe
);

854 
p_dump
(
FILE
 *
f
);

855 
p_upd©e_occu∑ncy_°©s
();

856 
uöt32_t
 
p_éb_addªss
(
˘x
, uöt32_à
vaddr
);

857 
p_Á°_f‹w¨d
(
uöt64_t
 
cy˛es
);

859 
p_pùñöe_em±y
(
c‹e
, 
thªad
);

860 
p_m≠_c⁄ãxt
(
c‹e
, 
thªad
, 
˘x_t
 *
˘x
);

861 
p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
);

862 
p_°©ic_scheduÀ
();

863 
p_dy«mic_scheduÀ
();

865 
p_°ages
();

866 
p_„tch
();

867 
p_decode
();

868 
p_di•©ch
();

869 
p_issue
();

870 
p_wrôeback
();

871 
p_commô
();

872 
p_ªcovî
(
c‹e
, 
thªad
);

	@processor.c

20 
	~<m2s.h
>

24 
¥o˚ss‹_t
 *
	gp
;

28 
	gp_°age_time_°©s
 = 0;

29 
	gp_occu∑ncy_°©s
 = 0;

30 
uöt32_t
 
	gp_c‹es
 = 1;

31 
uöt32_t
 
	gp_thªads
 = 1;

32 
uöt32_t
 
	gp_˝us
 = 1;

33 
uöt32_t
 
	gp_c⁄ãxt_qu™tum
 = 100000;

34 
	gp_c⁄ãxt_swôch
 = 1;

35 
uöt32_t
 
	gp_thªad_qu™tum
 = 1000;

36 
uöt32_t
 
	gp_thªad_swôch_≥«…y
 = 0;

37 *
	gp_ªp‹t_fûe
 = "";

39 
p_ªcovî_köd_íum
 
	gp_ªcovî_köd
 = 
p_ªcovî_köd_wrôeback
;

40 
uöt32_t
 
	gp_ªcovî_≥«…y
 = 0;

42 
p_„tch_köd_íum
 
	gp_„tch_köd
 = 
p_„tch_köd_time¶i˚
;

44 
uöt32_t
 
	gp_decode_width
 = 4;

46 
p_di•©ch_köd_íum
 
	gp_di•©ch_köd
 = 
p_di•©ch_köd_time¶i˚
;

47 
uöt32_t
 
	gp_di•©ch_width
 = 4;

49 
p_issue_köd_íum
 
	gp_issue_köd
 = 
p_issue_köd_time¶i˚
;

50 
uöt32_t
 
	gp_issue_width
 = 4;

52 
p_commô_köd_íum
 
	gp_commô_köd
 = 
p_commô_köd_sh¨ed
;

53 
uöt32_t
 
	gp_commô_width
 = 4;

60 
	$p_ªg_›ti⁄s
()

62 *
p_ªcovî_köd_m≠
[] = { "writeback", "commit" };

63 *
p_„tch_köd_m≠
[] = { "shared", "timeslice", "switchonevent" };

64 *
p_di•©ch_köd_m≠
[] = { "shared", "timeslice" };

65 *
p_issue_köd_m≠
[] = { "shared", "timeslice" };

66 *
p_commô_köd_m≠
[] = { "shared", "timeslice" };

68 
	`›t_ªg_uöt32
("-c‹es", "numbî o‡¥o˚ss‹ c‹es", &
p_c‹es
);

69 
	`›t_ªg_uöt32
("-thªads", "numbî o‡thªad†≥∏c‹e", &
p_thªads
);

71 
	`›t_ªg_boﬁ
("-context_switch", "allow context switchesánd scheduling",

72 &
p_c⁄ãxt_swôch
);

73 
	`›t_ªg_uöt32
("-context_quantum", "quantum forá context before context switch",

74 &
p_c⁄ãxt_qu™tum
);

76 
	`›t_ªg_boﬁ
("-stage_time_stats", "measureÅime for stages",

77 &
p_°age_time_°©s
);

78 
	`›t_ªg_boﬁ
("-occupancy_stats", "include occupancy stats inÅheÖipelineÑeport",

79 &
p_occu∑ncy_°©s
);

81 
	`›t_ªg_íum
("-recover_kind", "whenÅoÑecover {writeback|commit}",

82 (*Ë&
p_ªcovî_köd
, 
p_ªcovî_köd_m≠
, 2);

83 
	`›t_ªg_uöt32
("-recover_penalty", "cyclesÅo stall fetcháfterÑecover",

84 &
p_ªcovî_≥«…y
);

86 
	`›t_ªg_uöt32
("-thread_quantum", "thread quantum in cycles for switch-on-event fetch",

87 &
p_thªad_qu™tum
);

88 
	`›t_ªg_uöt32
("-thread_switch_penalty", "for switch-on-event fetch",

89 &
p_thªad_swôch_≥«…y
);

90 
	`›t_ªg_íum
("-fetch_kind", "fetchÖolicy {shared|timeslice|switchonevent}",

91 (*Ë&
p_„tch_köd
, 
p_„tch_köd_m≠
, 3);

93 
	`›t_ªg_uöt32
("-decode_width", "decode width",

94 &
p_decode_width
);

96 
	`›t_ªg_íum
("-dispatch_kind", "dispatch stage sharing {shared|timeslice}",

97 (*Ë&
p_di•©ch_köd
, 
p_di•©ch_köd_m≠
, 2);

98 
	`›t_ªg_uöt32
("-dispatch_width", "dispatch width (for shared/timeslice dispatch)",

99 &
p_di•©ch_width
);

101 
	`›t_ªg_íum
("-issue_kind", "issue stage sharing {shared|timeslice}",

102 (*Ë&
p_issue_köd
, 
p_issue_köd_m≠
, 2);

103 
	`›t_ªg_uöt32
("-issue_width", "issuêwidth (f‹ sh¨ed/time¶i˚ issue)", &
p_issue_width
);

105 
	`›t_ªg_íum
("-commit_kind", "commit stage sharing {shared|timeslice}",

106 (*Ë&
p_commô_köd
, 
p_commô_köd_m≠
, 2);

107 
	`›t_ªg_uöt32
("-commô_width", "commô dïth (ö in°r/thªad/cy˛e)", &
p_commô_width
);

110 
	`b¥ed_ªg_›ti⁄s
();

111 
	`tˇche_ªg_›ti⁄s
();

112 
	`„tchq_ªg_›ti⁄s
();

113 
	`u›q_ªg_›ti⁄s
();

114 
	`rob_ªg_›ti⁄s
();

115 
	`rf_ªg_›ti⁄s
();

116 
	`iq_ªg_›ti⁄s
();

117 
	`lsq_ªg_›ti⁄s
();

118 
	`fu_ªg_›ti⁄s
();

119 
	}
}

122 
	$p_dump_u›_ªp‹t
(
FILE
 *
f
, 
uöt64_t
 *
u›_°©s
, *
¥efix
, 
≥ak_ùc
)

124 
uöt64_t
 
icomp
 = 0;

125 
uöt64_t
 
lcomp
 = 0;

126 
uöt64_t
 
fcomp
 = 0;

127 
uöt64_t
 
mem
 = 0;

128 
uöt64_t
 
˘æ
 = 0;

129 
uöt64_t
 
tŸÆ
 = 0;

131 
	#UOP
(
_u›
, 
_fu
, 
_Êags
) \

132 
	`Ârötf
(
f
, "%s.U›." #_u› " = %Œd\n", 
¥efix
, (Ë
u›_°©s
[
u›_
##
_u›
]); \

133 i‡((
_Êags
Ë& 
FICOMP
Ë
icomp
 +
u›_°©s
[
u›_
##
_u›
]; \

134 i‡((
_Êags
Ë& 
FLCOMP
Ë
lcomp
 +
u›_°©s
[
u›_
##
_u›
]; \

135 i‡((
_Êags
Ë& 
FFCOMP
Ë
fcomp
 +
u›_°©s
[
u›_
##
_u›
]; \

136 i‡((
_Êags
Ë& 
FMEM
Ë
mem
 +
u›_°©s
[
u›_
##
_u›
]; \

137 i‡((
_Êags
Ë& 
FCTRL
Ë
˘æ
 +
u›_°©s
[
u›_
##
_u›
]; \

138 
tŸÆ
 +
u›_°©s
[
u›_
##
_u›
];

	)

139 
	~"u›1.d©
"

140 #unde‡
UOP


142 
	`Ârötf
(
f
, "%s.Sim∂eI¡egî = %Œd\n", 
¥efix
,

143 (Ë(
icomp
 - 
u›_°©s
[
u›_mu…
] - u›_°©s[
u›_div
]));

144 
	`Ârötf
(
f
, "%s.Com∂exI¡egî = %Œd\n", 
¥efix
,

145 (Ë(
u›_°©s
[
u›_mu…
] + u›_°©s[
u›_div
]));

146 
	`Ârötf
(
f
, "%s.I¡egî = %Œd\n", 
¥efix
, (Ë
icomp
);

147 
	`Ârötf
(
f
, "%s.Logiˇ»%Œd\n", 
¥efix
, (Ë
lcomp
);

148 
	`Ârötf
(
f
, "%s.FlﬂtögPoöà%Œd\n", 
¥efix
, (Ë
fcomp
);

149 
	`Ârötf
(
f
, "%s.Mem‹y = %Œd\n", 
¥efix
, (Ë
mem
);

150 
	`Ârötf
(
f
, "%s.Cå»%Œd\n", 
¥efix
, (Ë
˘æ
);

151 
	`Ârötf
(
f
, "%s.WndSwôch = %Œd\n", 
¥efix
, ()

152 (
u›_°©s
[
u›_ˇŒ
] + u›_°©s[
u›_ªt
]));

153 
	`Ârötf
(
f
, "%s.TŸÆ = %Œd\n", 
¥efix
, (Ë
tŸÆ
);

154 
	`Ârötf
(
f
, "%s.IPC = %.4g\n", 
¥efix
, 
sim_cy˛e
 ? (Ë
tŸÆ
 / sim_cycle : 0.0);

155 
	`Ârötf
(
f
, "%s.DutyCy˛ê%.4g\n", 
¥efix
, 
sim_cy˛e
 && 
≥ak_ùc
 ?

156 (Ë
tŸÆ
 / 
sim_cy˛e
 / 
≥ak_ùc
 : 0.0);

157 
	`Ârötf
(
f
, "\n");

158 
	}
}

161 
	#DUMP_FU_STAT
(
NAME
, 
ITEM
) { \

162 
	`Ârötf
(
f
, "fu." #NAME ".Ac˚s£†%Œd\n", (Ë
CORE
.
fu
->
ac˚s£s
[
ITEM
]); \

163 
	`Ârötf
(
f
, "fu." #NAME ".Díõd = %Œd\n", (Ë
CORE
.
fu
->
díõd
[
ITEM
]); \

164 
	`Ârötf
(
f
, "fu." #NAME ".WaôögTimê%.4g\n", 
CORE
.
fu
->
ac˚s£s
[
ITEM
] ? \

165 (Ë
CORE
.
fu
->
waôög_time
[
ITEM
] / CORE.fu->
ac˚s£s
[ITEM] : 0.0); \

166 }

	)

168 
	#DUMP_DISPATCH_STAT
(
NAME
) { \

169 
	`Ârötf
(
f
, "Di•©ch.SèŒ." #NAME " = %Œd\n", (Ë
CORE
.
di_°Æl
[
di_°Æl_
##
NAME
]); \

170 }

	)

172 
	#DUMP_CORE_STRUCT_STATS
(
NAME
, 
ITEM
) { \

173 
	`Ârötf
(
f
, #NAME ".Sizê%d\n", (Ë
ITEM
##
_size
 * 
p_thªads
); \

174 i‡(
p_occu∑ncy_°©s
) \

175 
	`Ârötf
(
f
, #NAME ".Occu∑ncy = %.2f\n", 
sim_cy˛e
 ? (Ë
CORE
.
ITEM
##
_occu∑ncy
 / sim_cycle : 0.0); \

176 
	`Ârötf
(
f
, #NAME ".FuŒ = %Œd\n", (Ë
CORE
.
ITEM
##
_fuŒ
); \

177 
	`Ârötf
(
f
, #NAME ".Ród†%Œd\n", (Ë
CORE
.
ITEM
##
_ªads
); \

178 
	`Ârötf
(
f
, #NAME ".Wrôe†%Œd\n", (Ë
CORE
.
ITEM
##
_wrôes
); \

179 }

	)

181 
	#DUMP_THREAD_STRUCT_STATS
(
NAME
, 
ITEM
) { \

182 
	`Ârötf
(
f
, #NAME ".Sizê%d\n", (Ë
ITEM
##
_size
); \

183 i‡(
p_occu∑ncy_°©s
) \

184 
	`Ârötf
(
f
, #NAME ".Occu∑ncy = %.2f\n", 
sim_cy˛e
 ? (Ë
THREAD
.
ITEM
##
_occu∑ncy
 / sim_cycle : 0.0); \

185 
	`Ârötf
(
f
, #NAME ".FuŒ = %Œd\n", (Ë
THREAD
.
ITEM
##
_fuŒ
); \

186 
	`Ârötf
(
f
, #NAME ".Ród†%Œd\n", (Ë
THREAD
.
ITEM
##
_ªads
); \

187 
	`Ârötf
(
f
, #NAME ".Wrôe†%Œd\n", (Ë
THREAD
.
ITEM
##
_wrôes
); \

188 }

	)

190 
	$p_dump_ªp‹t
()

192 
FILE
 *
f
;

193 
c‹e
, 
thªad
;

194 
uöt64_t
 
now
 = 
	`ke_timî
();

197 
f
 = 
	`›í_wrôe
(
p_ªp‹t_fûe
);

198 i‡(!
f
)

202 
	`Ârötf
(
f
, "; Global statistics\n");

203 
	`Ârötf
(
f
, "[ global ]\n\n");

204 
	`Ârötf
(
f
, "Cy˛e†%Œd\n", (Ë
sim_cy˛e
);

205 
	`Ârötf
(
f
, "Timê%.1f\n", (Ë
now
 / 1000000);

206 
	`Ârötf
(
f
, "Cy˛esPîSec⁄d = %.0f\n", 
now
 ? (Ë
sim_cy˛e
 /Çow * 1000000 : 0.0);

207 
	`Ârötf
(
f
, "Mem‹yU£d = %lu\n", (Ë
mem_m≠≥d_•a˚
);

208 
	`Ârötf
(
f
, "Mem‹yU£dMax = %lu\n", (Ë
mem_max_m≠≥d_•a˚
);

209 
	`Ârötf
(
f
, "\n");

212 
	`Ârötf
(
f
, "; Dispatch stage\n");

213 
	`p_dump_u›_ªp‹t
(
f
, 
p
->
di•©ched
, "Di•©ch", 
p_di•©ch_width
);

216 
	`Ârötf
(
f
, "; Issue stage\n");

217 
	`p_dump_u›_ªp‹t
(
f
, 
p
->
issued
, "Issue", 
p_issue_width
);

220 
	`Ârötf
(
f
, "; Commit stage\n");

221 
	`p_dump_u›_ªp‹t
(
f
, 
p
->
commôãd
, "Commô", 
p_commô_width
);

224 
	`Ârötf
(
f
, "; Committed branches\n");

225 
	`Ârötf
(
f
, "; Branches - Number of committed control uops\n");

226 
	`Ârötf
(
f
, "; Squashed - Number of mispredicted uops squashed fromÅhe ROB\n");

227 
	`Ârötf
(
f
, "; Mispred - Number of mispredicted branches inÅhe correctÖath\n");

228 
	`Ârötf
(
f
, "; PredAcc - Predictionáccuracy\n");

229 
	`Ârötf
(
f
, "Commô.Bønche†%Œd\n", (Ë
p
->
bønches
);

230 
	`Ârötf
(
f
, "Commô.Squashed = %Œd\n", (Ë
p
->
squashed
);

231 
	`Ârötf
(
f
, "Commô.Mi•ªd = %Œd\n", (Ë
p
->
mi•ªd
);

232 
	`Ârötf
(
f
, "Commô.PªdAc¯%.4g\n", 
p
->
bønches
 ?

233 (Ë(
p
->
bønches
 -Ö->
mi•ªd
) /Ö->branches : 0.0);

234 
	`Ârötf
(
f
, "\n");

237 
FOREACH_CORE
 {

240 
	`Ârötf
(
f
, "\n; Sèti°ic†f‹ c‹ê%d\n", 
c‹e
);

241 
	`Ârötf
(
f
, "[ c%d ]\n\n", 
c‹e
);

244 
	`Ârötf
(
f
, "; Functional unitÖool\n");

245 
	`Ârötf
(
f
, "; Accesses - Number of uops issuedÅoá f.u.\n");

246 
	`Ârötf
(
f
, "; Denied - Number ofÑequests denied dueÅo busy f.u.\n");

247 
	`Ârötf
(
f
, "; WaitingTime - AverageÇumber of waiting cyclesÅoÑeserve f.u.\n");

248 
	`DUMP_FU_STAT
(
I¡Add
, 
fu_öèdd
);

249 
	`DUMP_FU_STAT
(
I¡Sub
, 
fu_ötsub
);

250 
	`DUMP_FU_STAT
(
I¡Mu…
, 
fu_ötmu…
);

251 
	`DUMP_FU_STAT
(
I¡Div
, 
fu_ötdiv
);

252 
	`DUMP_FU_STAT
(
EfÁddr
, 
fu_efÁddr
);

253 
	`DUMP_FU_STAT
(
Logiˇl
, 
fu_logiˇl
);

254 
	`DUMP_FU_STAT
(
FPSim∂e
, 
fu_Âsim∂e
);

255 
	`DUMP_FU_STAT
(
FPAdd
, 
fu_Âadd
);

256 
	`DUMP_FU_STAT
(
FPComp
, 
fu_Âcomp
);

257 
	`DUMP_FU_STAT
(
FPMu…
, 
fu_Âmu…
);

258 
	`DUMP_FU_STAT
(
FPDiv
, 
fu_Âdiv
);

259 
	`DUMP_FU_STAT
(
FPCom∂ex
, 
fu_Âcom∂ex
);

260 
	`Ârötf
(
f
, "\n");

263 i‡(
p_di•©ch_köd
 =
p_di•©ch_köd_time¶i˚
) {

264 
	`Ârötf
(
f
, "; Dispatch slots usage (sum = cycles * dispatch width)\n");

265 
	`Ârötf
(
f
, "; used - dispatch slot was used byáÇon-spec uop\n");

266 
	`Ârötf
(
f
, "; spec - used byá mispeculated uop\n");

267 
	`Ârötf
(
f
, "; ctx -Ço contextállocatedÅoÅhread\n");

268 
	`Ârötf
(
f
, "; uopq,rob,iq,lsq,rename -Ço space in structure\n");

269 
	`DUMP_DISPATCH_STAT
(
u£d
);

270 
	`DUMP_DISPATCH_STAT
(
•ec
);

271 
	`DUMP_DISPATCH_STAT
(
u›q
);

272 
	`DUMP_DISPATCH_STAT
(
rob
);

273 
	`DUMP_DISPATCH_STAT
(
iq
);

274 
	`DUMP_DISPATCH_STAT
(
lsq
);

275 
	`DUMP_DISPATCH_STAT
(
ª«me
);

276 
	`DUMP_DISPATCH_STAT
(
˘x
);

277 
	`Ârötf
(
f
, "\n");

281 
	`Ârötf
(
f
, "; Dispatch stage\n");

282 
	`p_dump_u›_ªp‹t
(
f
, 
CORE
.
di•©ched
, "Di•©ch", 
p_di•©ch_width
);

285 
	`Ârötf
(
f
, "; Issue stage\n");

286 
	`p_dump_u›_ªp‹t
(
f
, 
CORE
.
issued
, "Issue", 
p_issue_width
);

289 
	`Ârötf
(
f
, "; Commit stage\n");

290 
	`p_dump_u›_ªp‹t
(
f
, 
CORE
.
commôãd
, "Commô", 
p_commô_width
);

293 
	`Ârötf
(
f
, "; Committed branches\n");

294 
	`Ârötf
(
f
, "Commô.Bønche†%Œd\n", (Ë
CORE
.
bønches
);

295 
	`Ârötf
(
f
, "Commô.Squashed = %Œd\n", (Ë
CORE
.
squashed
);

296 
	`Ârötf
(
f
, "Commô.Mi•ªd = %Œd\n", (Ë
CORE
.
mi•ªd
);

297 
	`Ârötf
(
f
, "Commô.PªdAc¯%.4g\n", 
CORE
.
bønches
 ?

298 (Ë(
CORE
.
bønches
 - CORE.
mi•ªd
) / CORE.branches : 0.0);

299 
	`Ârötf
(
f
, "\n");

302 
	`Ârötf
(
f
, "; Structure statistics (reorder buffer, instruction queue,\n");

303 
	`Ârötf
(
f
, ";Üoad-store queue,ánd integer/floating-pointÑegister file)\n");

304 
	`Ârötf
(
f
, "; Size - Available size\n");

305 
	`Ârötf
(
f
, "; Occupancy - AverageÇumber of occupiedÉntries\n");

306 
	`Ârötf
(
f
, "; Full - Number of cycles whenÅhe structure was full\n");

307 
	`Ârötf
(
f
, "; Reads, Writes - AccessesÅoÅhe structure\n");

308 i‡(
rob_köd
 =
rob_köd_sh¨ed
)

309 
	`DUMP_CORE_STRUCT_STATS
(
ROB
, 
rob
);

310 i‡(
iq_köd
 =
iq_köd_sh¨ed
) {

311 
	`DUMP_CORE_STRUCT_STATS
(
IQ
, 
iq
);

312 
	`Ârötf
(
f
, "IQ.WakeupAc˚s£†%Œd\n", (Ë
CORE
.
iq_wakeup_ac˚s£s
);

314 i‡(
lsq_köd
 =
lsq_köd_sh¨ed
)

315 
	`DUMP_CORE_STRUCT_STATS
(
LSQ
, 
lsq
);

316 i‡(
rf_köd
 =
rf_köd_sh¨ed
) {

317 
	`DUMP_CORE_STRUCT_STATS
(
RF_I¡
, 
rf_öt
);

318 
	`DUMP_CORE_STRUCT_STATS
(
RF_Fp
, 
rf_Â
);

320 
	`Ârötf
(
f
, "\n");

323 
FOREACH_THREAD
 {

324 
	`Ârötf
(
f
, "\n; Sèti°ic†f‹ c‹ê%d -Åhªad %d\n", 
c‹e
, 
thªad
);

325 
	`Ârötf
(
f
, "[ c%dt%d ]\n\n", 
c‹e
, 
thªad
);

328 
	`Ârötf
(
f
, "; Dispatch stage\n");

329 
	`p_dump_u›_ªp‹t
(
f
, 
THREAD
.
di•©ched
, "Di•©ch", 
p_di•©ch_width
);

332 
	`Ârötf
(
f
, "; Issue stage\n");

333 
	`p_dump_u›_ªp‹t
(
f
, 
THREAD
.
issued
, "Issue", 
p_issue_width
);

336 
	`Ârötf
(
f
, "; Commit stage\n");

337 
	`p_dump_u›_ªp‹t
(
f
, 
THREAD
.
commôãd
, "Commô", 
p_commô_width
);

340 
	`Ârötf
(
f
, "; Committed branches\n");

341 
	`Ârötf
(
f
, "Commô.Bønche†%Œd\n", (Ë
THREAD
.
bønches
);

342 
	`Ârötf
(
f
, "Commô.Squashed = %Œd\n", (Ë
THREAD
.
squashed
);

343 
	`Ârötf
(
f
, "Commô.Mi•ªd = %Œd\n", (Ë
THREAD
.
mi•ªd
);

344 
	`Ârötf
(
f
, "Commô.PªdAc¯%.4g\n", 
THREAD
.
bønches
 ?

345 (Ë(
THREAD
.
bønches
 - THREAD.
mi•ªd
) / THREAD.branches : 0.0);

346 
	`Ârötf
(
f
, "\n");

349 
	`Ârötf
(
f
, "; Structure statistics (reorder buffer, instruction queue,Üoad-store queue,\n");

350 
	`Ârötf
(
f
, "; integer/floating-pointÑegister file,ándÑenamingÅable)\n");

351 i‡(
rob_köd
 =
rob_köd_¥iv©e
)

352 
	`DUMP_THREAD_STRUCT_STATS
(
ROB
, 
rob
);

353 i‡(
iq_köd
 =
iq_köd_¥iv©e
) {

354 
	`DUMP_THREAD_STRUCT_STATS
(
IQ
, 
iq
);

355 
	`Ârötf
(
f
, "IQ.WakeupAc˚s£†%Œd\n", (Ë
THREAD
.
iq_wakeup_ac˚s£s
);

357 i‡(
lsq_köd
 =
lsq_köd_¥iv©e
)

358 
	`DUMP_THREAD_STRUCT_STATS
(
LSQ
, 
lsq
);

359 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

360 
	`DUMP_THREAD_STRUCT_STATS
(
RF_I¡
, 
rf_öt
);

361 
	`DUMP_THREAD_STRUCT_STATS
(
RF_Fp
, 
rf_Â
);

363 
	`Ârötf
(
f
, "RAT.I¡Ród†%Œd\n", (Ë
THREAD
.
øt_öt_ªads
);

364 
	`Ârötf
(
f
, "RAT.I¡Wrôe†%Œd\n", (Ë
THREAD
.
øt_öt_wrôes
);

365 
	`Ârötf
(
f
, "RAT.FpRód†%Œd\n", (Ë
THREAD
.
øt_Â_ªads
);

366 
	`Ârötf
(
f
, "RAT.FpWrôe†%Œd\n", (Ë
THREAD
.
øt_Â_wrôes
);

367 
	`Ârötf
(
f
, "BTB.Ród†%Œd\n", (Ë
THREAD
.
btb_ªads
);

368 
	`Ârötf
(
f
, "BTB.Wrôe†%Œd\n", (Ë
THREAD
.
btb_wrôes
);

369 
	`Ârötf
(
f
, "\n");

372 i‡(
THREAD
.
tˇche
)

373 
	`tˇche_dump_ªp‹t
(
THREAD
.
tˇche
, 
f
);

378 
	`f˛o£
(
f
);

379 
	}
}

382 
	$p_¥öt_°©s
(
FILE
 *
f
)

384 
uöt64_t
 
now
 = 
	`ke_timî
();

387 
	`Ârötf
(
f
, "sim.cycles %lld # Simulation cycles\n",

388 (Ë
sim_cy˛e
);

389 
	`Ârötf
(
f
, "sim.inst %lld # Total committed instructions\n",

390 (Ë
sim_ö°
);

391 
	`Ârötf
(
f
, "sim.ipc %.4g # Global IPC\n",

392 
sim_cy˛e
 ? (Ë
sim_ö°
 / sim_cycle : 0);

393 
	`Ârötf
(
f
, "sim.predacc %.4g # BranchÖredictionáccuracy\n",

394 
p
->
bønches
 ? (Ë’->bønche†-Ö->
mi•ªd
) /Ö->branches : 0.0);

395 
	`Ârötf
(
f
, "sim.time %.1f # SimulationÅime in seconds\n",

396 (Ë
now
 / 1000000);

397 
	`Ârötf
(
f
, "sim.cps %.0f # Cycles simulatedÖer second\n",

398 
now
 ? (Ë
sim_cy˛e
 /Çow * 1000000 : 0.0);

399 
	`Ârötf
(
f
, "sim.contexts %d # MaximumÇumber of contextsÑunning concurrently\n",

400 
ke
->
ru¬ög_max
);

401 
	`Ârötf
(
f
, "sim.memory %lu # Physical memory used by benchmarks\n",

402 
mem_m≠≥d_•a˚
);

403 
	`Ârötf
(
f
, "sim.memory_max %lu # MaximumÖhysical memory used by benchmarks\n",

404 
mem_max_m≠≥d_•a˚
);

407 i‡(
p_°age_time_°©s
 && 
sim_cy˛e
) {

408 
	`Ârötf
(
f
, "stage_time.fetch %.3f # Time for stage in us/cycle\n",

409 (Ë
°age_time_„tch
 / 
sim_cy˛e
);

410 
	`Ârötf
(
f
, "stage_time.dispatch %.3f\n",

411 (Ë
°age_time_di•©ch
 / 
sim_cy˛e
);

412 
	`Ârötf
(
f
, "stage_time.issue %.3f\n",

413 (Ë
°age_time_issue
 / 
sim_cy˛e
);

414 
	`Ârötf
(
f
, "stage_time.writeback %.3f\n",

415 (Ë
°age_time_wrôeback
 / 
sim_cy˛e
);

416 
	`Ârötf
(
f
, "stage_time.commit %.3f\n",

417 (Ë
°age_time_commô
 / 
sim_cy˛e
);

418 
	`Ârötf
(
f
, "stage_time.rest %.3f\n",

419 (Ë
°age_time_ª°
 / 
sim_cy˛e
);

423 
	`p_dump_ªp‹t
();

424 
	}
}

427 
	$p_thªad_öô
(
c‹e
, 
thªad
)

430 
THREAD
.
„tch_bsize
 = 
	`ˇche_sy°em_block_size
(
c‹e
, 
thªad
,

431 
ˇche_köd_ö°
);

432 
	}
}

435 
	$p_c‹e_öô
(
c‹e
)

437 
thªad
;

438 
CORE
.
thªad
 = 
	`ˇŒoc
(
p_thªads
, (
¥o˚ss‹_thªad_t
));

439 
FOREACH_THREAD


440 
	`p_thªad_öô
(
c‹e
, 
thªad
);

441 
	}
}

445 
	$p_öô
()

447 
c‹e
;

450 
p_˝us
 = 
p_c‹es
 * 
p_thªads
;

451 
p
 = 
	`ˇŒoc
(1, (
¥o˚ss‹_t
));

452 
p
->
c‹e
 = 
	`ˇŒoc
(
p_c‹es
, (
¥o˚ss‹_c‹e_t
));

453 
FOREACH_CORE


454 
	`p_c‹e_öô
(
c‹e
);

456 
	`rf_öô
();

457 
	`b¥ed_öô
();

458 
	`tˇche_öô
();

459 
	`„tchq_öô
();

460 
	`u›q_öô
();

461 
	`rob_öô
();

462 
	`iq_öô
();

463 
	`lsq_öô
();

464 
	`evítq_öô
();

465 
	`fu_öô
();

466 
	}
}

470 
	$p_d⁄e
()

472 
c‹e
;

475 
	`p_¥öt_°©s
(
°dîr
);

478 
	`„tchq_d⁄e
();

479 
	`u›q_d⁄e
();

480 
	`rob_d⁄e
();

481 
	`iq_d⁄e
();

482 
	`lsq_d⁄e
();

483 
	`evítq_d⁄e
();

484 
	`b¥ed_d⁄e
();

485 
	`tˇche_d⁄e
();

486 
	`rf_d⁄e
();

487 
	`fu_d⁄e
();

490 
FOREACH_CORE


491 
	`‰ì
(
CORE
.
thªad
);

492 
	`‰ì
(
p
->
c‹e
);

493 
	`‰ì
(
p
);

494 
	}
}

499 
	$p_lﬂd_¥ogs
(
¨gc
, **
¨gv
, *
˘xfûe
)

501 i‡(
¨gc
 > 1)

502 
	`ld_lﬂd_¥og_‰om_cmdlöe
(
¨gc
 - 1, 
¨gv
 + 1);

503 i‡(*
˘xfûe
)

504 
	`ld_lﬂd_¥og_‰om_˘xc⁄fig
(
˘xfûe
);

505 
	}
}

508 
	$p_dump
(
FILE
 *
f
)

510 
c‹e
, 
thªad
;

513 
	`Ârötf
(
f
, "\n");

514 
	`Ârötf
(
f
, "sim.œ°_dum∞ %Œd # Cy˛êo‡œ° dump\n", (Ë
p
->
œ°_dump
);

515 
	`Ârötf
(
f
, "sim.ùc_œ°_dum∞ %.4g # IPC sö˚Üa° dump\n", 
sim_cy˛e
 - 
p
->
œ°_dump
 > 0 ?

516 (Ë(
sim_ö°
 - 
p
->
œ°_commôãd
Ë/ (
sim_cy˛e
 -Ö->
œ°_dump
) : 0);

517 
	`Ârötf
(
f
, "\n");

520 
FOREACH_CORE
 {

521 
	`Ârötf
(
f
, "C‹ê%d:\n", 
c‹e
);

523 
	`Ârötf
(
f
, "eventq:\n");

524 
	`u›_ li°_dump
(
CORE
.
evítq
, 
f
);

525 
	`Ârötf
(
f
, "rob:\n");

526 
	`rob_dump
(
c‹e
, 
f
);

528 
FOREACH_THREAD
 {

529 
	`Ârötf
(
f
, "Thªad %d:\n", 
thªad
);

531 
	`Ârötf
(
f
, "fetch queue:\n");

532 
	`u›_li°_dump
(
THREAD
.
„tchq
, 
f
);

533 
	`Ârötf
(
f
, "uop queue:\n");

534 
	`u›_li°_dump
(
THREAD
.
u›q
, 
f
);

535 
	`Ârötf
(
f
, "iq:\n");

536 
	`u›_ li°_dump
(
THREAD
.
iq
, 
f
);

537 
	`Ârötf
(
f
, "lq:\n");

538 
	`u›_ li°_dump
(
THREAD
.
lq
, 
f
);

539 
	`Ârötf
(
f
, "sq:\n");

540 
	`u›_ li°_dump
(
THREAD
.
sq
, 
f
);

541 
	`rf_dump
(
c‹e
, 
thªad
, 
f
);

542 i‡(
THREAD
.
˘x
) {

543 
	`Ârötf
(
f
, "m≠≥d c⁄ãxt: %d\n", 
THREAD
.
˘x
->
pid
);

544 
	`˘x_dump
(
THREAD
.
˘x
, 
f
);

547 
	`Ârötf
(
f
, "\n");

552 
p
->
œ°_dump
 = 
sim_cy˛e
;

553 
p
->
œ°_commôãd
 = 
sim_ö°
;

554 
	}
}

557 
	#UPDATE_THREAD_OCCUPANCY_STATS
(
ITEM
) { \

558 
THREAD
.
ITEM
##
_occu∑ncy
 +THREAD.ITEM##
_cou¡
; \

559 i‡(
THREAD
.
ITEM
##
_cou¡
 =ITEM##
_size
) \

560 
THREAD
.
ITEM
##
_fuŒ
++; \

561 }

	)

564 
	#UPDATE_CORE_OCCUPANCY_STATS
(
ITEM
) { \

565 
CORE
.
ITEM
##
_occu∑ncy
 +CORE.ITEM##
_cou¡
; \

566 i‡(
CORE
.
ITEM
##
_cou¡
 =ITEM##
_size
 * 
p_thªads
) \

567 
CORE
.
ITEM
##
_fuŒ
++; \

568 }

	)

571 
	$p_upd©e_occu∑ncy_°©s
()

573 
c‹e
, 
thªad
;

575 
FOREACH_CORE
 {

578 i‡(
rob_köd
 =
rob_köd_sh¨ed
)

579 
	`UPDATE_CORE_OCCUPANCY_STATS
(
rob
);

580 i‡(
iq_köd
 =
iq_köd_sh¨ed
)

581 
	`UPDATE_CORE_OCCUPANCY_STATS
(
iq
);

582 i‡(
lsq_köd
 =
lsq_köd_sh¨ed
)

583 
	`UPDATE_CORE_OCCUPANCY_STATS
(
lsq
);

584 i‡(
rf_köd
 =
rf_köd_sh¨ed
) {

585 
	`UPDATE_CORE_OCCUPANCY_STATS
(
rf_öt
);

586 
	`UPDATE_CORE_OCCUPANCY_STATS
(
rf_Â
);

590 
FOREACH_THREAD
 {

591 i‡(
rob_köd
 =
rob_köd_¥iv©e
)

592 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
rob
);

593 i‡(
iq_köd
 =
iq_köd_¥iv©e
)

594 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
iq
);

595 i‡(
lsq_köd
 =
lsq_köd_¥iv©e
)

596 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
lsq
);

597 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

598 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
rf_öt
);

599 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
rf_Â
);

603 
	}
}

606 
uöt64_t
 
	g°age_time_„tch
;

607 
uöt64_t
 
	g°age_time_decode
;

608 
uöt64_t
 
	g°age_time_di•©ch
;

609 
uöt64_t
 
	g°age_time_issue
;

610 
uöt64_t
 
	g°age_time_wrôeback
;

611 
uöt64_t
 
	g°age_time_commô
;

612 
uöt64_t
 
	g°age_time_ª°
;

613 
uöt64_t
 
	g°age_time_°¨t
;

615 
	#STAGE
(
«me
) \

616 
p_
##
	`«me
(); \

617 i‡(
p_°age_time_°©s
) { \

618 
uöt64_t
 
íd
 = 
	`ke_timî
(); \

619 
°age_time_
##
«me
 +
íd
 - 
°age_time_°¨t
; \

620 
°age_time_°¨t
 = 
íd
; }

	)

621 
	$p_°ages
()

624 i‡(!
p_c⁄ãxt_swôch
 && 
ke
->
c⁄ãxt_ªscheduÀ
) {

625 
	`p_°©ic_scheduÀ
();

626 
ke
->
c⁄ãxt_ªscheduÀ
 = 0;

631 i‡(
p_c⁄ãxt_swôch
 && !
p
->
˘x_dóŒoc_sig«ls
 &&

632 (
ke
->
c⁄ãxt_ªscheduÀ
 || 
p
->
˘x_Æloc_ﬁde°
 + 
p_c⁄ãxt_qu™tum
 <
sim_cy˛e
))

634 
	`p_dy«mic_scheduÀ
();

635 
ke
->
c⁄ãxt_ªscheduÀ
 = 0;

639 i‡(
p_°age_time_°©s
) {

640 
uöt64_t
 
íd
 = 
	`ke_timî
();

641 i‡(
°age_time_°¨t
)

642 
°age_time_ª°
 +
íd
 - 
°age_time_°¨t
;

643 
°age_time_°¨t
 = 
íd
;

647 
	`STAGE
(
commô
);

648 
	`STAGE
(
wrôeback
);

649 
	`STAGE
(
issue
);

650 
	`STAGE
(
di•©ch
);

651 
	`STAGE
(
decode
);

652 
	`STAGE
(
„tch
);

655 i‡(
p_occu∑ncy_°©s
)

656 
	`p_upd©e_occu∑ncy_°©s
();

657 
	}
}

658 #unde‡
STAGE


662 
	$p_Á°_f‹w¨d
(
uöt64_t
 
cy˛es
)

664 
c‹e
, 
thªad
;

667 
cy˛es
 && 
ke
->
c⁄ãxt_li°_hód
) {

668 
	`ke_run
();

669 
cy˛es
--;

674 
FOREACH_CORE
 
FOREACH_THREAD
 {

675 i‡(
THREAD
.
˘x
 && 
	`˘x_gë_°©us
(THREAD.˘x, 
˘x_föished
)) {

676 
	`ke_li°_ªmove
(
ke_li°_föished
, 
THREAD
.
˘x
);

677 
	`˘x_‰ì
(
THREAD
.
˘x
);

678 
THREAD
.
˘x
 = 
NULL
;

681 
	}
}

687 
uöt32_t
 
	$p_éb_addªss
(
˘x
, 
uöt32_t
 
vaddr
)

689 
	`as£π
(
˘x
 >0 && ctx < 
p_c‹es
 * 
p_thªads
);

690  (
vaddr
 >> 
MEM_LOGPAGESIZE
Ë* 
p_c‹es
 * 
p_thªads
 + 
˘x
;

691 
	}
}

	@queues.c

20 
	~<m2s.h
>

27 
uöt32_t
 
	g„tchq_size
 = 64;

30 
	$„tchq_ªg_›ti⁄s
()

32 
	`›t_ªg_uöt32
("-„tchq_size", "„tch queuêsizêö byãs", &
„tchq_size
);

33 
	}
}

36 
	$„tchq_öô
()

38 
c‹e
, 
thªad
;

39 
FOREACH_CORE
 
FOREACH_THREAD


40 
THREAD
.
„tchq
 = 
	`li°_¸óã
(
„tchq_size
);

41 
	}
}

44 
	$„tchq_d⁄e
()

46 
c‹e
, 
thªad
;

47 
li°_t
 *
„tchq
;

48 
u›_t
 *
u›
;

50 
FOREACH_CORE
 
FOREACH_THREAD
 {

51 
„tchq
 = 
THREAD
.fetchq;

52 
	`li°_cou¡
(
„tchq
)) {

53 
u›
 = 
	`li°_ªmove_©
(
„tchq
, 0);

54 
u›
->
ö_„tchq
 = 0;

55 
	`u›_‰ì_if_nŸ_queued
(
u›
);

57 
	`li°_‰ì
(
„tchq
);

59 
	}
}

62 
u›_t
 *
	$„tchq_ªmove
(
c‹e
, 
thªad
, 
ödex
)

64 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

65 
u›_t
 *
u›
;

66 
	`as£π
(
ödex
 >0 && index < 
	`li°_cou¡
(
„tchq
));

67 
u›
 = 
	`li°_ªmove_©
(
„tchq
, 
ödex
);

68 
u›
->
ö_„tchq
 = 0;

69 i‡(!
u›
->
„tch_tˇche
 && !u›->
m›_ödex
) {

70 
THREAD
.
„tchq_occ
 -
u›
->
m›_size
;

71 
	`as£π
(
THREAD
.
„tchq_occ
 >= 0);

73 i‡(
u›
->
„tch_tˇche
) {

74 
THREAD
.
tˇcheq_occ
--;

75 
	`as£π
(
THREAD
.
tˇcheq_occ
 >= 0);

77 i‡(!
	`li°_cou¡
(
„tchq
)) {

78 
	`as£π
(!
THREAD
.
„tchq_occ
);

79 
	`as£π
(!
THREAD
.
tˇcheq_occ
);

81  
u›
;

82 
	}
}

85 
	$„tchq_ªcovî
(
c‹e
, 
thªad
)

87 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

88 
u›_t
 *
u›
;

90 
	`li°_cou¡
(
„tchq
)) {

91 
u›
 = 
	`li°_gë
(
„tchq
, 
	`li°_cou¡
(fetchq) - 1);

92 
	`as£π
(
u›
->
thªad
 ==Åhread);

93 i‡(!
u›
->
•ecmode
)

95 
u›
 = 
	`„tchq_ªmove
(
c‹e
, 
thªad
, 
	`li°_cou¡
(
„tchq
) - 1);

96 
	`u›_‰ì_if_nŸ_queued
(
u›
);

98 
	}
}

105 
uöt32_t
 
	gu›q_size
 = 32;

108 
	$u›q_ªg_›ti⁄s
()

110 
	`›t_ªg_uöt32
("-u›q_size", "u› queuêsizêö mi¸oö°ru˘i⁄s", &
u›q_size
);

111 
	}
}

114 
	$u›q_öô
()

116 
c‹e
, 
thªad
;

117 
FOREACH_CORE
 
FOREACH_THREAD


118 
THREAD
.
u›q
 = 
	`li°_¸óã
(
u›q_size
);

119 
	}
}

122 
	$u›q_d⁄e
()

124 
c‹e
, 
thªad
;

125 
li°_t
 *
u›q
;

126 
u›_t
 *
u›
;

128 
FOREACH_CORE
 
FOREACH_THREAD
 {

129 
u›q
 = 
THREAD
.uopq;

130 
	`li°_cou¡
(
u›q
)) {

131 
u›
 = 
	`li°_ªmove_©
(
u›q
, 0);

132 
u›
->
ö_u›q
 = 0;

133 
	`u›_‰ì_if_nŸ_queued
(
u›
);

135 
	`li°_‰ì
(
u›q
);

137 
	}
}

140 
	$u›q_ªcovî
(
c‹e
, 
thªad
)

142 
li°_t
 *
u›q
 = 
THREAD
.uopq;

143 
u›_t
 *
u›
;

145 
	`li°_cou¡
(
u›q
)) {

146 
u›
 = 
	`li°_gë
(
u›q
, 
	`li°_cou¡
(uopq) - 1);

147 
	`as£π
(
u›
->
thªad
 ==Åhread);

148 i‡(!
u›
->
•ecmode
)

150 
	`li°_ªmove_©
(
u›q
, 
	`li°_cou¡
(uopq) - 1);

151 
u›
->
ö_u›q
 = 0;

152 
	`u›_‰ì_if_nŸ_queued
(
u›
);

154 
	}
}

161 
uöt32_t
 
	giq_size
 = 40;

162 
iq_köd_íum
 
	giq_köd
 = 
iq_köd_¥iv©e
;

165 
	$iq_ªg_›ti⁄s
()

167 *
iq_köd_m≠
[] = { "shared", "private" };

168 
	`›t_ªg_íum
("-iq_kind", "instruction queue kind {shared|private}",

169 (*Ë&
iq_köd
, 
iq_köd_m≠
, 2);

170 
	`›t_ªg_uöt32
("-iq_size", "instruction queue sizeÖerÅhread",

171 &
iq_size
);

172 
	}
}

175 
	$iq_öô
()

177 
c‹e
, 
thªad
;

178 
FOREACH_CORE
 
FOREACH_THREAD


179 
THREAD
.
iq
 = 
	` li°_¸óã
();

180 
	}
}

183 
	$iq_d⁄e
()

185 
 li°_t
 *
iq
;

186 
u›_t
 *
u›
;

187 
c‹e
, 
thªad
;

188 
FOREACH_CORE
 
FOREACH_THREAD
 {

189 
iq
 = 
THREAD
.iq;

190 
	` li°_hód
(
iq
);

191 
	` li°_cou¡
(
iq
)) {

192 
u›
 = 
	` li°_gë
(
iq
);

193 
u›
->
ö_iq
 = 0;

194 
	` li°_ªmove
(
iq
);

195 
	`u›_‰ì_if_nŸ_queued
(
u›
);

197 
	` li°_‰ì
(
iq
);

199 
	}
}

202 
	$iq_ˇn_ö£π
(
u›_t
 *
u›
)

204 
c‹e
 = 
u›
->core;

205 
thªad
 = 
u›
->thread;

206 
cou¡
, 
size
;

208 
size
 = 
iq_köd
 =
iq_köd_¥iv©e
 ? 
iq_size
 : iq_sizê* 
p_thªads
;

209 
cou¡
 = 
iq_köd
 =
iq_köd_¥iv©e
 ? 
THREAD
.
iq_cou¡
 : 
CORE
.iq_count;

210  
cou¡
 < 
size
;

211 
	}
}

216 
	$iq_ö£π
(
u›_t
 *
u›
)

218 
c‹e
 = 
u›
->core;

219 
thªad
 = 
u›
->thread;

220 
 li°_t
 *
iq
 = 
THREAD
.iq;

222 
	`as£π
(!
u›
->
ö_iq
);

223 
	` li°_out
(
iq
);

224 
	` li°_ö£π
(
iq
, 
u›
);

225 
u›
->
ö_iq
 = 1;

227 
CORE
.
iq_cou¡
++;

228 
THREAD
.
iq_cou¡
++;

229 
	}
}

234 
	$iq_ªmove
(
c‹e
, 
thªad
)

236 
 li°_t
 *
iq
 = 
THREAD
.iq;

237 
u›_t
 *
u›
;

239 
u›
 = 
	` li°_gë
(
iq
);

240 
	`as£π
(
	`u›_exi°s
(
u›
));

241 
	` li°_ªmove
(
iq
);

242 
u›
->
ö_iq
 = 0;

244 
	`as£π
(
CORE
.
iq_cou¡
 && 
THREAD
.iq_count);

245 
CORE
.
iq_cou¡
--;

246 
THREAD
.
iq_cou¡
--;

247 
	}
}

251 
	$iq_ªcovî
(
c‹e
, 
thªad
)

253 
 li°_t
 *
iq
 = 
THREAD
.iq;

254 
u›_t
 *
u›
;

256 
	` li°_hód
(
iq
);

257 !
	` li°_eﬁ
(
iq
)) {

258 
u›
 = 
	` li°_gë
(
iq
);

259 i‡(
u›
->
•ecmode
) {

260 
	`iq_ªmove
(
c‹e
, 
thªad
);

261 
	`u›_‰ì_if_nŸ_queued
(
u›
);

264 
	` li°_√xt
(
iq
);

266 
	}
}

273 
uöt32_t
 
	glsq_size
 = 20;

274 
lsq_köd_íum
 
	glsq_köd
 = 
lsq_köd_¥iv©e
;

277 
	$lsq_ªg_›ti⁄s
()

279 *
lsq_köd_m≠
[] = { "shared", "private" };

280 
	`›t_ªg_íum
("-lsq_kind", "load/store queue kind {shared|private}",

281 (*Ë&
lsq_köd
, 
lsq_köd_m≠
, 2);

282 
	`›t_ªg_uöt32
("-lsq_size", "load/store queue sizeÖerÅhread",

283 &
lsq_size
);

284 
	}
}

287 
	$lsq_öô
()

289 
c‹e
, 
thªad
;

290 
FOREACH_CORE
 
FOREACH_THREAD
 {

291 
THREAD
.
lq
 = 
	` li°_¸óã
();

292 
THREAD
.
sq
 = 
	` li°_¸óã
();

294 
	}
}

297 
	$lsq_d⁄e
()

299 
 li°_t
 *
lq
, *
sq
;

300 
u›_t
 *
u›
;

301 
c‹e
, 
thªad
;

304 
FOREACH_CORE
 
FOREACH_THREAD
 {

305 
lq
 = 
THREAD
.lq;

306 
	` li°_hód
(
lq
);

307 
	` li°_cou¡
(
lq
)) {

308 
u›
 = 
	` li°_gë
(
lq
);

309 
u›
->
ö_lq
 = 0;

310 
	` li°_ªmove
(
lq
);

311 
	`u›_‰ì_if_nŸ_queued
(
u›
);

313 
	` li°_‰ì
(
lq
);

317 
FOREACH_CORE
 
FOREACH_THREAD
 {

318 
sq
 = 
THREAD
.sq;

319 
	` li°_hód
(
sq
);

320 
	` li°_cou¡
(
sq
)) {

321 
u›
 = 
	` li°_gë
(
sq
);

322 
u›
->
ö_sq
 = 0;

323 
	` li°_ªmove
(
sq
);

324 
	`u›_‰ì_if_nŸ_queued
(
u›
);

326 
	` li°_‰ì
(
sq
);

328 
	}
}

331 
	$lsq_ˇn_ö£π
(
u›_t
 *
u›
)

333 
c‹e
 = 
u›
->core;

334 
thªad
 = 
u›
->thread;

335 
cou¡
, 
size
;

337 
size
 = 
lsq_köd
 =
lsq_köd_¥iv©e
 ? 
lsq_size
 :Üsq_sizê* 
p_thªads
;

338 
cou¡
 = 
lsq_köd
 =
lsq_köd_¥iv©e
 ? 
THREAD
.
lsq_cou¡
 : 
CORE
.lsq_count;

339  
cou¡
 < 
size
;

340 
	}
}

344 
	$lsq_ö£π
(
u›_t
 *
u›
)

346 
c‹e
 = 
u›
->core;

347 
thªad
 = 
u›
->thread;

348 
 li°_t
 *
lq
 = 
THREAD
.lq;

349 
 li°_t
 *
sq
 = 
THREAD
.sq;

351 
	`as£π
(!
u›
->
ö_lq
 && !u›->
ö_sq
);

352 
	`as£π
((
u›
->
Êags
 & 
FLOAD
Ë|| (u›->Êag†& 
FSTORE
));

353 i‡(
u›
->
Êags
 & 
FLOAD
) {

354 
	` li°_out
(
lq
);

355 
	` li°_ö£π
(
lq
, 
u›
);

356 
u›
->
ö_lq
 = 1;

358 
	` li°_out
(
sq
);

359 
	` li°_ö£π
(
sq
, 
u›
);

360 
u›
->
ö_sq
 = 1;

362 
CORE
.
lsq_cou¡
++;

363 
THREAD
.
lsq_cou¡
++;

364 
	}
}

369 
	$lsq_ªcovî
(
c‹e
, 
thªad
)

371 
 li°_t
 *
lq
 = 
THREAD
.lq;

372 
 li°_t
 *
sq
 = 
THREAD
.sq;

373 
u›_t
 *
u›
;

376 
	` li°_hód
(
lq
);

377 !
	` li°_eﬁ
(
lq
)) {

378 
u›
 = 
	` li°_gë
(
lq
);

379 i‡(
u›
->
•ecmode
) {

380 
	`lq_ªmove
(
c‹e
, 
thªad
);

381 
	`u›_‰ì_if_nŸ_queued
(
u›
);

384 
	` li°_√xt
(
lq
);

388 
	` li°_hód
(
sq
);

389 !
	` li°_eﬁ
(
sq
)) {

390 
u›
 = 
	` li°_gë
(
sq
);

391 i‡(
u›
->
•ecmode
) {

392 
	`sq_ªmove
(
c‹e
, 
thªad
);

393 
	`u›_‰ì_if_nŸ_queued
(
u›
);

396 
	` li°_√xt
(
sq
);

398 
	}
}

403 
	$lq_ªmove
(
c‹e
, 
thªad
)

405 
 li°_t
 *
lq
 = 
THREAD
.lq;

406 
u›_t
 *
u›
;

408 
u›
 = 
	` li°_gë
(
lq
);

409 
	`as£π
(
	`u›_exi°s
(
u›
));

410 
	` li°_ªmove
(
lq
);

411 
u›
->
ö_lq
 = 0;

413 
	`as£π
(
CORE
.
lsq_cou¡
 && 
THREAD
.lsq_count);

414 
CORE
.
lsq_cou¡
--;

415 
THREAD
.
lsq_cou¡
--;

416 
	}
}

420 
	$sq_ªmove
(
c‹e
, 
thªad
)

422 
 li°_t
 *
sq
 = 
THREAD
.sq;

423 
u›_t
 *
u›
;

425 
u›
 = 
	` li°_gë
(
sq
);

426 
	`as£π
(
	`u›_exi°s
(
u›
));

427 
	`as£π
(
u›
->
ö_sq
);

428 
	` li°_ªmove
(
sq
);

429 
u›
->
ö_sq
 = 0;

431 
	`as£π
(
CORE
.
lsq_cou¡
 && 
THREAD
.lsq_count);

432 
CORE
.
lsq_cou¡
--;

433 
THREAD
.
lsq_cou¡
--;

434 
	}
}

441 
	$evítq_öô
()

443 
c‹e
;

444 
FOREACH_CORE


445 
CORE
.
evítq
 = 
	` li°_¸óã
();

446 
	}
}

449 
	$evítq_d⁄e
()

451 
c‹e
;

452 
FOREACH_CORE
 {

453 
	` li°_cou¡
(
CORE
.
evítq
))

454 
	`u›_‰ì_if_nŸ_queued
(
	`evítq_exåa˘
(
CORE
.
evítq
));

455 
	` li°_‰ì
(
CORE
.
evítq
);

457 
	}
}

460 
	$evítq_com∑ª
(c⁄° *
ôem1
, c⁄° *
ôem2
)

462 c⁄° 
u›_t
 *
u›1
 = 
ôem1
;

463 c⁄° 
u›_t
 *
u›2
 = 
ôem2
;

464  
u›1
->
whí
 !
u›2
->when ? uop1->when - uop2->when

465 : 
u›1
->
£q
 - 
u›2
->seq;

466 
	}
}

469 
	$evítq_l⁄gœt
(
c‹e
, 
thªad
)

471 
 li°_t
 *
evítq
 = 
CORE
.eventq;

472 
u›_t
 *
u›
;

474 
	` li°_hód
(
evítq
); !
	` li°_eﬁ
”vítq); 
	` li°_√xt
(eventq)) {

475 
u›
 = 
	` li°_gë
(
evítq
);

476 i‡(
u›
->
thªad
 !=Åhread)

478 i‡(
sim_cy˛e
 - 
u›
->
issue_whí
 > 20)

482 
	}
}

485 
	$evítq_ˇchemiss
(
c‹e
, 
thªad
)

487 
 li°_t
 *
evítq
 = 
CORE
.eventq;

488 
u›_t
 *
u›
;

490 
	` li°_hód
(
evítq
); !
	` li°_eﬁ
”vítq); 
	` li°_√xt
(eventq)) {

491 
u›
 = 
	` li°_gë
(
evítq
);

492 i‡(
u›
->
thªad
 !thªad || !(u›->
Êags
 & 
FLOAD
))

494 i‡(
sim_cy˛e
 - 
u›
->
issue_whí
 > 5)

498 
	}
}

501 
	$evítq_ö£π
(
 li°_t
 *
evítq
, 
u›_t
 *
u›
)

503 
u›_t
 *
ôem
;

504 
	`as£π
(!
u›
->
ö_evítq
);

505 
	` li°_hód
(
evítq
);

507 
ôem
 = 
	` li°_gë
(
evítq
);

508 i‡(!
ôem
 || 
	`evítq_com∑ª
(
u›
, item) < 0)

510 
	` li°_√xt
(
evítq
);

512 
	` li°_ö£π
(
evítq
, 
u›
);

513 
u›
->
ö_evítq
 = 1;

514 
	}
}

517 
u›_t
 *
	$evítq_exåa˘
(
 li°_t
 *
evítq
)

519 
u›_t
 *
u›
;

520 i‡(!
	` li°_cou¡
(
evítq
))

521  
NULL
;

522 
	` li°_hód
(
evítq
);

523 
u›
 = 
	` li°_gë
(
evítq
);

524 
	`as£π
(
	`u›_exi°s
(
u›
));

525 
	`as£π
(
u›
->
ö_evítq
);

526 
	` li°_ªmove
(
evítq
);

527 
u›
->
ö_evítq
 = 0;

528  
u›
;

529 
	}
}

532 
	$evítq_ªcovî
(
c‹e
, 
thªad
)

534 
 li°_t
 *
evítq
 = 
CORE
.eventq;

535 
u›_t
 *
u›
;

537 
	` li°_hód
(
evítq
);

538 !
	` li°_eﬁ
(
evítq
)) {

539 
u›
 = 
	` li°_gë
(
evítq
);

540 i‡(
u›
->
thªad
 =thªad && u›->
•ecmode
) {

541 
	` li°_ªmove
(
evítq
);

542 
u›
->
ö_evítq
 = 0;

543 
	`u›_‰ì_if_nŸ_queued
(
u›
);

546 
	` li°_√xt
(
evítq
);

548 
	}
}

	@recover.c

20 
	~<m2s.h
>

23 
	$p_ªcovî
(
c‹e
, 
thªad
)

25 
u›_t
 *
u›
;

28 
	`„tchq_ªcovî
(
c‹e
, 
thªad
);

29 
	`u›q_ªcovî
(
c‹e
, 
thªad
);

30 
	`iq_ªcovî
(
c‹e
, 
thªad
);

31 
	`lsq_ªcovî
(
c‹e
, 
thªad
);

32 
	`evítq_ªcovî
(
c‹e
, 
thªad
);

39 
u›
 = 
	`rob_èû
(
c‹e
, 
thªad
);

40 i‡(!
u›
)

45 
	`as£π
(
u›
->
c‹e
 == core);

46 
	`as£π
(
u›
->
thªad
 ==Åhread);

47 i‡(!
u›
->
•ecmode
)

51 i‡(
u›
->
„tch_tˇche
)

52 
THREAD
.
tˇche
->
squashed
++;

53 
THREAD
.
squashed
++;

54 
CORE
.
squashed
++;

55 
p
->
squashed
++;

58 i‡(!
u›
->
com∂ëed
)

59 
	`rf_wrôe
(
u›
);

60 
	`rf_undo
(
u›
);

63 
	`esim_debug
("uopáction=\"squash\", core=%d, seq=%llu\n",

64 
u›
->
c‹e
, (Ëu›->
di_£q
);

67 
	`rob_ªmove_èû
(
c‹e
, 
thªad
);

71 i‡(
	`˘x_gë_°©us
(
THREAD
.
˘x
, 
˘x_•ecmode
))

72 
	`˘x_ªcovî
(
THREAD
.
˘x
);

75 
THREAD
.
„tch_°Æl
 = 
	`MAX
(THREAD.„tch_°Æl, 
p_ªcovî_≥«…y
);

76 
THREAD
.
„tch_√ù
 = THREAD.
˘x
->
ªgs
->
eù
;

77 
	}
}

	@rf.c

20 
	~<m2s.h
>

25 
uöt32_t
 
	grf_öt_size
 = 80;

26 
uöt32_t
 
	grf_Â_size
 = 40;

27 
rf_köd_íum
 
	grf_köd
 = 
rf_köd_¥iv©e
;

34 
uöt32_t
 
	grf_öt_loˇl_size
;

35 
uöt32_t
 
	grf_Â_loˇl_size
;

39 
	$rf_öt_ª˛aim
(
c‹e
, 
thªad
)

41 
phªg
;

42 
rf_t
 *
rf
 = 
THREAD
.rf;

45 
	`as£π
(
rf
->
öt_‰ì_phªg_cou¡
 > 0);

46 
phªg
 = 
rf
->
öt_‰ì_phªg
[rf->
öt_‰ì_phªg_cou¡
 - 1];

47 
rf
->
öt_‰ì_phªg_cou¡
--;

48 
CORE
.
rf_öt_cou¡
++;

49 
THREAD
.
rf_öt_cou¡
++;

50 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
busy
);

51 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
≥ndög
);

52  
phªg
;

53 
	}
}

57 
	$rf_Â_ª˛aim
(
c‹e
, 
thªad
)

59 
phªg
;

60 
rf_t
 *
rf
 = 
THREAD
.rf;

63 
	`as£π
(
rf
->
Â_‰ì_phªg_cou¡
 > 0);

64 
phªg
 = 
rf
->
Â_‰ì_phªg
[rf->
Â_‰ì_phªg_cou¡
 - 1];

65 
rf
->
Â_‰ì_phªg_cou¡
--;

66 
CORE
.
rf_Â_cou¡
++;

67 
THREAD
.
rf_Â_cou¡
++;

68 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
busy
);

69 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
≥ndög
);

70  
phªg
;

71 
	}
}

79 
	$rf_ªg_›ti⁄s
()

81 *
rf_köd_m≠
[] = { "shared", "private" };

82 
	`›t_ªg_íum
("-rf_kind", "physicalÑegister file {shared|private}",

83 (*Ë&
rf_köd
, 
rf_köd_m≠
, 2);

84 
	`›t_ªg_uöt32
("-rf_int_size", "integerÖhysicalÑegister file sizeÖerÅhread",

85 &
rf_öt_size
);

86 
	`›t_ªg_uöt32
("-rf_fp_size", "floating-pointÖhysicalÑegister file sizeÖerÅhread",

87 &
rf_Â_size
);

88 
	}
}

91 
	$rf_öô_thªad
(
c‹e
, 
thªad
)

93 
dï
, 
phªg
, 
Âhªg
;

94 
rf_t
 *
rf
 = 
THREAD
.rf;

99 
Âhªg
 = -1;

100 
dï
 = 0; dï < 
DEP_INT_COUNT
; dep++) {

101 i‡(
	`DEP_IS_FLAG
(
dï
 + 
DEP_INT_FIRST
)) {

102 
	`as£π
(
Âhªg
 >= 0);

103 
phªg
 = 
Âhªg
;

105 
phªg
 = 
	`rf_öt_ª˛aim
(
c‹e
, 
thªad
);

106 
Âhªg
 = 
phªg
;

108 
rf
->
öt_phªg
[
phªg
].
busy
++;

109 
rf
->
öt_øt
[
dï
] = 
phªg
;

113 
dï
 = 0; dï < 
DEP_FP_COUNT
; dep++) {

114 
phªg
 = 
	`rf_Â_ª˛aim
(
c‹e
, 
thªad
);

115 
rf
->
Â_phªg
[
phªg
].
busy
++;

116 
rf
->
Â_øt
[
dï
] = 
phªg
;

118 
	}
}

121 
	$rf_öô
()

123 
c‹e
, 
thªad
;

126 i‡(
rf_öt_size
 < 
RF_MIN_INT_SIZE
)

127 
	`Áèl
("rf_öt_sizêmu° bê©Üó° %d", 
RF_MIN_INT_SIZE
);

128 i‡(
rf_Â_size
 < 
RF_MIN_FP_SIZE
)

129 
	`Áèl
("rf_Â_sizêmu° bê©Üó° %d", 
RF_MIN_FP_SIZE
);

132 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

133 
rf_öt_loˇl_size
 = 
rf_öt_size
;

134 
rf_Â_loˇl_size
 = 
rf_Â_size
;

136 
rf_öt_loˇl_size
 = 
rf_öt_size
 * 
p_thªads
;

137 
rf_Â_loˇl_size
 = 
rf_Â_size
 * 
p_thªads
;

141 
FOREACH_CORE
 
FOREACH_THREAD
 {

142 
THREAD
.
rf
 = 
	`rf_¸óã
(
rf_öt_loˇl_size
, 
rf_Â_loˇl_size
);

143 
	`rf_öô_thªad
(
c‹e
, 
thªad
);

145 
	}
}

148 
	$rf_d⁄e
()

150 
c‹e
, 
thªad
;

151 
FOREACH_CORE
 
FOREACH_THREAD


152 
	`rf_‰ì
(
THREAD
.
rf
);

153 
	}
}

156 
rf_t
 *
	$rf_¸óã
(
öt_size
, 
Â_size
)

158 
rf_t
 *
rf
;

159 
phªg
;

162 
rf
 = 
	`ˇŒoc
(1, (
rf_t
));

165 
rf
->
öt_phªg_cou¡
 = 
öt_size
;

166 
rf
->
öt_phªg
 = 
	`ˇŒoc
(
öt_size
, (
phªg_t
));

167 
rf
->
öt_‰ì_phªg
 = 
	`ˇŒoc
(
öt_size
, ());

168 
rf
->
öt_‰ì_phªg_cou¡
 = 
öt_size
;

169 
phªg
 = 0;Öhªg < 
öt_size
;Öhreg++)

170 
rf
->
öt_‰ì_phªg
[
phªg
] =Öhreg;

173 
rf
->
Â_phªg_cou¡
 = 
Â_size
;

174 
rf
->
Â_phªg
 = 
	`ˇŒoc
(
Â_size
, (
phªg_t
));

175 
rf
->
Â_‰ì_phªg
 = 
	`ˇŒoc
(
Â_size
, ());

176 
rf
->
Â_‰ì_phªg_cou¡
 = 
Â_size
;

177 
phªg
 = 0;Öhªg < 
Â_size
;Öhreg++)

178 
rf
->
Â_‰ì_phªg
[
phªg
] =Öhreg;

181  
rf
;

182 
	}
}

185 
	$rf_‰ì
(
rf_t
 *
rf
)

187 
	`‰ì
(
rf
->
öt_phªg
);

188 
	`‰ì
(
rf
->
öt_‰ì_phªg
);

189 
	`‰ì
(
rf
->
Â_phªg
);

190 
	`‰ì
(
rf
->
Â_‰ì_phªg
);

191 
	`‰ì
(
rf
);

192 
	}
}

195 
	$rf_dump
(
c‹e
, 
thªad
, 
FILE
 *
f
)

197 
i
;

200 
	`Ârötf
(
f
, "I¡egîÑegi°î fûê© c‹ê%d,Åhªad %d\n", 
c‹e
, 
thªad
);

201 
	`Ârötf
(
f
, "Format is [busy,Öending], * = free\n");

202 
i
 = 0; i < 
rf_öt_loˇl_size
; i++) {

203 
	`Ârötf
(
f
, " %3d%c[%d-%d]", 
i
, 
THREAD
.
rf
->
öt_phªg
[i].
busy
 ? ' ' : '*',

204 
THREAD
.
rf
->
öt_phªg
[
i
].
busy
,

205 
THREAD
.
rf
->
öt_phªg
[
i
].
≥ndög
);

206 i‡(
i
 % 5 =4 && i !
rf_öt_loˇl_size
 - 1)

207 
	`Ârötf
(
f
, "\n");

210 
	`Ârötf
(
f
, "\nIteger Register Aliasing Table:\n");

211 
i
 = 
DEP_INT_FIRST
; i <
DEP_INT_LAST
; i++) {

212 
	`Ârötf
(
f
, " %2d->%-3d", 
i
, 
THREAD
.
rf
->
öt_øt
[ò- 
DEP_INT_FIRST
]);

213 i‡((
i
 - 
DEP_INT_FIRST
) % 8 == 7)

214 
	`Ârötf
(
f
, "\n");

217 
	`Ârötf
(
f
, "\n");

218 
	`Ârötf
(
f
, "int_free_phreg_count %d # Number of free integerÑegisters\n",

219 
THREAD
.
rf
->
öt_‰ì_phªg_cou¡
);

220 
	`Ârötf
(
f
, "\n");

223 
	`Ârötf
(
f
, "Flﬂtög-poöàªgi°î fûê© c‹ê%d,Åhªad %d\n", 
c‹e
, 
thªad
);

224 
	`Ârötf
(
f
, "Format is [busy,Öending], * = free\n");

225 
i
 = 0; i < 
rf_Â_loˇl_size
; i++) {

226 
	`Ârötf
(
f
, " %3d%c[%d-%d]", 
i
, 
THREAD
.
rf
->
Â_phªg
[i].
busy
 ? ' ' : '*',

227 
THREAD
.
rf
->
Â_phªg
[
i
].
busy
,

228 
THREAD
.
rf
->
Â_phªg
[
i
].
≥ndög
);

229 i‡(
i
 % 5 =4 && i !
rf_Â_loˇl_size
 - 1)

230 
	`Ârötf
(
f
, "\n");

233 
	`Ârötf
(
f
, "\nIteger Register Aliasing Table:\n");

234 
i
 = 
DEP_FP_FIRST
; i <
DEP_FP_LAST
; i++) {

235 
	`Ârötf
(
f
, " %2d->%-3d", 
i
, 
THREAD
.
rf
->
Â_øt
[ò- 
DEP_FP_FIRST
]);

236 i‡((
i
 - 
DEP_FP_FIRST
) % 8 == 7)

237 
	`Ârötf
(
f
, "\n");

240 
	`Ârötf
(
f
, "\n");

241 
	`Ârötf
(
f
, "fp_free_phreg_count %d # Number of free floating-pointÑegisters\n",

242 
THREAD
.
rf
->
Â_‰ì_phªg_cou¡
);

243 
	`Ârötf
(
f
, "\n");

244 
	}
}

252 
	$rf_cou¡_dïs
(
u›_t
 *
u›
)

254 
dï
, 
l‹eg
;

255 
öt_cou¡
, 
Â_cou¡
, 
Êag_cou¡
;

258 
u›
->
idï_cou¡
 = 0;

259 
u›
->
odï_cou¡
 = 0;

260 
u›
->
ph_öt_idï_cou¡
 = 0;

261 
u›
->
ph_Â_idï_cou¡
 = 0;

262 
u›
->
ph_öt_odï_cou¡
 = 0;

263 
u›
->
ph_Â_odï_cou¡
 = 0;

266 
öt_cou¡
 = 
Â_cou¡
 = 
Êag_cou¡
 = 0;

267 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

268 
l‹eg
 = 
u›
->
odï
[
dï
];

269 i‡(
	`DEP_IS_FLAG
(
l‹eg
))

270 
Êag_cou¡
++;

271 i‡(
	`DEP_IS_INT_REG
(
l‹eg
))

272 
öt_cou¡
++;

273 i‡(
	`DEP_IS_FP_REG
(
l‹eg
))

274 
Â_cou¡
++;

276 
u›
->
odï_cou¡
 = 
Êag_cou¡
 + 
öt_cou¡
 + 
Â_cou¡
;

277 
u›
->
ph_öt_odï_cou¡
 = 
Êag_cou¡
 && !
öt_cou¡
 ? 1 : int_count;

278 
u›
->
ph_Â_odï_cou¡
 = 
Â_cou¡
;

281 
öt_cou¡
 = 
Â_cou¡
 = 
Êag_cou¡
 = 0;

282 
dï
 = 0; dï < 
IDEP_COUNT
; dep++) {

283 
l‹eg
 = 
u›
->
idï
[
dï
];

284 i‡(
	`DEP_IS_FLAG
(
l‹eg
))

285 
Êag_cou¡
++;

286 i‡(
	`DEP_IS_INT_REG
(
l‹eg
))

287 
öt_cou¡
++;

288 i‡(
	`DEP_IS_FP_REG
(
l‹eg
))

289 
Â_cou¡
++;

291 
u›
->
idï_cou¡
 = 
Êag_cou¡
 + 
öt_cou¡
 + 
Â_cou¡
;

292 
u›
->
ph_öt_idï_cou¡
 = 
Êag_cou¡
 + 
öt_cou¡
;

293 
u›
->
ph_Â_idï_cou¡
 = 
Â_cou¡
;

294 
	}
}

298 
	$rf_ˇn_ª«me
(
u›_t
 *
u›
)

300 
c‹e
 = 
u›
->core;

301 
thªad
 = 
u›
->thread;

304 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

305 i‡(
THREAD
.
rf_öt_cou¡
 + 
u›
->
ph_öt_odï_cou¡
 > 
rf_öt_loˇl_size
)

307 i‡(
THREAD
.
rf_Â_cou¡
 + 
u›
->
ph_Â_odï_cou¡
 > 
rf_Â_loˇl_size
)

310 i‡(
CORE
.
rf_öt_cou¡
 + 
u›
->
ph_öt_odï_cou¡
 > 
rf_öt_loˇl_size
)

312 i‡(
CORE
.
rf_Â_cou¡
 + 
u›
->
ph_Â_odï_cou¡
 > 
rf_Â_loˇl_size
)

318 
	}
}

321 
	$rf_ª«me
(
u›_t
 *
u›
)

323 
dï
;

324 
l‹eg
, 
°ªg
, 
phªg
, 
›hªg
;

325 
Êag_phªg
, 
Êag_cou¡
;

326 
c‹e
 = 
u›
->core;

327 
thªad
 = 
u›
->thread;

328 
rf_t
 *
rf
 = 
THREAD
.rf;

331 
dï
 = 0; dï < 
IDEP_COUNT
; dep++) {

332 
l‹eg
 = 
u›
->
idï
[
dï
];

333 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

334 
phªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

335 
u›
->
ph_idï
[
dï
] = 
phªg
;

336 
THREAD
.
øt_öt_ªads
++;

337 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

340 
°ªg
 = (
l‹eg
 - 
DEP_FP_FIRST
 + 
rf
->
Â_t›_of_°ack
) % 8 + DEP_FP_FIRST;

341 
	`as£π
(
	`DEP_IS_FP_REG
(
°ªg
));

344 
phªg
 = 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
];

345 
u›
->
ph_idï
[
dï
] = 
phªg
;

346 
THREAD
.
øt_Â_ªads
++;

349 
u›
->
ph_idï
[
dï
] = -1;

354 
Êag_phªg
 = -1;

355 
Êag_cou¡
 = 0;

356 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

357 
l‹eg
 = 
u›
->
odï
[
dï
];

358 i‡(
	`DEP_IS_FLAG
(
l‹eg
)) {

361 
Êag_cou¡
++;

363 } i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

366 
phªg
 = 
	`rf_öt_ª˛aim
(
c‹e
, 
thªad
);

367 
rf
->
öt_phªg
[
phªg
].
busy
++;

368 
rf
->
öt_phªg
[
phªg
].
≥ndög
 = 1;

369 
›hªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

370 i‡(
Êag_phªg
 < 0)

371 
Êag_phªg
 = 
phªg
;

374 
u›
->
ph_odï
[
dï
] = 
phªg
;

375 
u›
->
ph_oodï
[
dï
] = 
›hªg
;

376 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
] = 
phªg
;

377 
THREAD
.
øt_öt_wrôes
++;

379 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

382 
°ªg
 = (
l‹eg
 - 
DEP_FP_FIRST
 + 
rf
->
Â_t›_of_°ack
) % 8 + DEP_FP_FIRST;

383 
	`as£π
(
	`DEP_IS_FP_REG
(
°ªg
));

386 
phªg
 = 
	`rf_Â_ª˛aim
(
c‹e
, 
thªad
);

387 
rf
->
Â_phªg
[
phªg
].
busy
++;

388 
rf
->
Â_phªg
[
phªg
].
≥ndög
 = 1;

389 
›hªg
 = 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
];

392 
u›
->
ph_odï
[
dï
] = 
phªg
;

393 
u›
->
ph_oodï
[
dï
] = 
›hªg
;

394 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
] = 
phªg
;

395 
THREAD
.
øt_Â_wrôes
++;

397 } i‡(
l‹eg
 =
DFPOP
) {

400 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 1) % 8;

402 } i‡(
l‹eg
 =
DFPOP2
) {

405 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 2) % 8;

407 } i‡(
l‹eg
 =
DFPUSH
) {

410 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 7) % 8;

415 
u›
->
ph_odï
[
dï
] = -1;

416 
u›
->
ph_oodï
[
dï
] = -1;

421 i‡(
Êag_cou¡
 > 0) {

422 i‡(
Êag_phªg
 < 0)

423 
Êag_phªg
 = 
	`rf_öt_ª˛aim
(
c‹e
, 
thªad
);

424 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

425 
l‹eg
 = 
u›
->
odï
[
dï
];

426 i‡(!
	`DEP_IS_FLAG
(
l‹eg
))

428 
rf
->
öt_phªg
[
Êag_phªg
].
busy
++;

429 
rf
->
öt_phªg
[
Êag_phªg
].
≥ndög
 = 1;

430 
›hªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

431 
u›
->
ph_oodï
[
dï
] = 
›hªg
;

432 
u›
->
ph_odï
[
dï
] = 
Êag_phªg
;

433 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
] = 
Êag_phªg
;

436 
	}
}

440 
	$rf_ªady
(
u›_t
 *
u›
)

442 
l‹eg
, 
phªg
, 
dï
;

443 
c‹e
 = 
u›
->core;

444 
thªad
 = 
u›
->thread;

445 
rf_t
 *
rf
 = 
THREAD
.rf;

447 
dï
 = 0; dï < 
IDEP_COUNT
; dep++) {

448 
l‹eg
 = 
u›
->
idï
[
dï
];

449 
phªg
 = 
u›
->
ph_idï
[
dï
];

450 i‡(
	`DEP_IS_INT_REG
(
l‹eg
Ë&& 
rf
->
öt_phªg
[
phªg
].
≥ndög
)

452 i‡(
	`DEP_IS_FP_REG
(
l‹eg
Ë&& 
rf
->
Â_phªg
[
phªg
].
≥ndög
)

456 
	}
}

459 
	$rf_wrôe
(
u›_t
 *
u›
)

461 
dï
, 
l‹eg
, 
phªg
;

462 
c‹e
 = 
u›
->core;

463 
thªad
 = 
u›
->thread;

464 
rf_t
 *
rf
 = 
THREAD
.rf;

466 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

467 
l‹eg
 = 
u›
->
odï
[
dï
];

468 
phªg
 = 
u›
->
ph_odï
[
dï
];

469 i‡(
	`DEP_IS_INT_REG
(
l‹eg
))

470 
rf
->
öt_phªg
[
phªg
].
≥ndög
 = 0;

471 i‡(
	`DEP_IS_FP_REG
(
l‹eg
))

472 
rf
->
Â_phªg
[
phªg
].
≥ndög
 = 0;

474 
	}
}

477 
	$rf_undo
(
u›_t
 *
u›
)

479 
dï
, 
l‹eg
, 
°ªg
, 
phªg
, 
›hªg
;

480 
c‹e
 = 
u›
->core;

481 
thªad
 = 
u›
->thread;

482 
rf_t
 *
rf
 = 
THREAD
.rf;

486 
	`as£π
(
u›
->
•ecmode
);

487 
dï
 = 
ODEP_COUNT
 - 1; dep >= 0; dep--) {

488 
l‹eg
 = 
u›
->
odï
[
dï
];

489 
phªg
 = 
u›
->
ph_odï
[
dï
];

490 
›hªg
 = 
u›
->
ph_oodï
[
dï
];

491 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

494 
	`as£π
(
rf
->
öt_phªg
[
phªg
].
busy
 > 0);

495 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
≥ndög
);

496 
rf
->
öt_phªg
[
phªg
].
busy
--;

497 i‡(!
rf
->
öt_phªg
[
phªg
].
busy
) {

498 
	`as£π
(
rf
->
öt_‰ì_phªg_cou¡
 < 
rf_öt_loˇl_size
);

499 
	`as£π
(
CORE
.
rf_öt_cou¡
 > 0 && 
THREAD
.rf_int_count > 0);

500 
rf
->
öt_‰ì_phªg
[rf->
öt_‰ì_phªg_cou¡
] = 
phªg
;

501 
rf
->
öt_‰ì_phªg_cou¡
++;

502 
CORE
.
rf_öt_cou¡
--;

503 
THREAD
.
rf_öt_cou¡
--;

507 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
] = 
›hªg
;

508 
	`as£π
(
rf
->
öt_phªg
[
›hªg
].
busy
);

510 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

513 
°ªg
 = (
l‹eg
 - 
DEP_FP_FIRST
 + 
rf
->
Â_t›_of_°ack
) % 8 + DEP_FP_FIRST;

514 
	`as£π
(
	`DEP_IS_FP_REG
(
°ªg
));

517 
	`as£π
(
rf
->
Â_phªg
[
phªg
].
busy
 > 0);

518 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
≥ndög
);

519 
rf
->
Â_phªg
[
phªg
].
busy
--;

520 i‡(!
rf
->
Â_phªg
[
phªg
].
busy
) {

521 
	`as£π
(
rf
->
Â_‰ì_phªg_cou¡
 < 
rf_Â_loˇl_size
);

522 
	`as£π
(
CORE
.
rf_Â_cou¡
 > 0 && 
THREAD
.rf_fp_count > 0);

523 
rf
->
Â_‰ì_phªg
[rf->
Â_‰ì_phªg_cou¡
] = 
phªg
;

524 
rf
->
Â_‰ì_phªg_cou¡
++;

525 
CORE
.
rf_Â_cou¡
--;

526 
THREAD
.
rf_Â_cou¡
--;

530 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
] = 
›hªg
;

531 
	`as£π
(
rf
->
Â_phªg
[
›hªg
].
busy
);

533 } i‡(
l‹eg
 =
DFPOP
) {

536 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 7) % 8;

538 } i‡(
l‹eg
 =
DFPOP2
) {

541 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 6) % 8;

543 } i‡(
l‹eg
 =
DFPUSH
) {

546 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 1) % 8;

551 
	`as£π
(
phªg
 == -1);

552 
	`as£π
(
›hªg
 == -1);

555 
	}
}

558 
	$rf_commô
(
u›_t
 *
u›
)

560 
dï
, 
l‹eg
, 
phªg
, 
›hªg
;

561 
c‹e
 = 
u›
->core;

562 
thªad
 = 
u›
->thread;

563 
rf_t
 *
rf
 = 
THREAD
.rf;

565 
	`as£π
(!
u›
->
•ecmode
);

566 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

567 
l‹eg
 = 
u›
->
odï
[
dï
];

568 
phªg
 = 
u›
->
ph_odï
[
dï
];

569 
›hªg
 = 
u›
->
ph_oodï
[
dï
];

571 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

574 
	`as£π
(
rf
->
öt_phªg
[
›hªg
].
busy
 > 0);

575 
rf
->
öt_phªg
[
›hªg
].
busy
--;

576 i‡(!
rf
->
öt_phªg
[
›hªg
].
busy
) {

577 
	`as£π
(!
rf
->
öt_phªg
[
›hªg
].
≥ndög
);

578 
	`as£π
(
rf
->
öt_‰ì_phªg_cou¡
 < 
rf_öt_loˇl_size
);

579 
	`as£π
(
CORE
.
rf_öt_cou¡
 > 0 && 
THREAD
.rf_int_count > 0);

580 
rf
->
öt_‰ì_phªg
[rf->
öt_‰ì_phªg_cou¡
] = 
›hªg
;

581 
rf
->
öt_‰ì_phªg_cou¡
++;

582 
CORE
.
rf_öt_cou¡
--;

583 
THREAD
.
rf_öt_cou¡
--;

586 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

589 
	`as£π
(
rf
->
Â_phªg
[
›hªg
].
busy
 > 0);

590 
rf
->
Â_phªg
[
›hªg
].
busy
--;

591 i‡(!
rf
->
Â_phªg
[
›hªg
].
busy
) {

592 
	`as£π
(!
rf
->
Â_phªg
[
›hªg
].
≥ndög
);

593 
	`as£π
(
rf
->
Â_‰ì_phªg_cou¡
 < 
rf_Â_loˇl_size
);

594 
	`as£π
(
CORE
.
rf_Â_cou¡
 > 0 && 
THREAD
.rf_fp_count > 0);

595 
rf
->
Â_‰ì_phªg
[rf->
Â_‰ì_phªg_cou¡
] = 
›hªg
;

596 
rf
->
Â_‰ì_phªg_cou¡
++;

597 
CORE
.
rf_Â_cou¡
--;

598 
THREAD
.
rf_Â_cou¡
--;

601 } i‡(
l‹eg
 =
DFPUSH
 ||Ü‹eg =
DFPOP
 ||Ü‹eg =
DFPOP2
) {

608 
	`as£π
(
phªg
 == -1);

609 
	`as£π
(
›hªg
 == -1);

612 
	}
}

615 
	$rf_check_öãgrôy
(
c‹e
, 
thªad
)

617 
rf_t
 *
rf
 = 
THREAD
.rf;

618 
u›_t
 *
u›
;

619 
l‹eg
, 
phªg
, 
›hªg
, 
dï
, 
i
;

622 
i
 = 0; i < 
rf
->
öt_‰ì_phªg_cou¡
; i++) {

623 
phªg
 = 
rf
->
öt_‰ì_phªg
[
i
];

624 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
busy
);

625 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
≥ndög
);

627 
i
 = 0; i < 
rf
->
Â_‰ì_phªg_cou¡
; i++) {

628 
phªg
 = 
rf
->
Â_‰ì_phªg
[
i
];

629 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
busy
);

630 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
≥ndög
);

634 
l‹eg
 = 
DEP_INT_FIRST
;Ü‹eg <
DEP_INT_LAST
;Üoreg++) {

635 
phªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

636 
	`as£π
(
rf
->
öt_phªg
[
phªg
].
busy
);

638 
l‹eg
 = 
DEP_FP_FIRST
;Ü‹eg <
DEP_FP_LAST
;Üoreg++) {

639 
phªg
 = 
rf
->
Â_øt
[
l‹eg
 - 
DEP_FP_FIRST
];

640 
	`as£π
(
rf
->
Â_phªg
[
phªg
].
busy
);

645 
i
 = 0; i < 
THREAD
.
rob_cou¡
; i++) {

646 
u›
 = 
	`rob_gë
(
c‹e
, 
thªad
, 
i
);

647 
	`as£π
(
u›
);

648 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

649 
l‹eg
 = 
u›
->
odï
[
dï
];

650 
phªg
 = 
u›
->
ph_odï
[
dï
];

651 
›hªg
 = 
u›
->
ph_oodï
[
dï
];

652 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

653 
	`as£π
(
rf
->
öt_phªg
[
phªg
].
busy
);

654 
	`as£π
(
rf
->
öt_phªg
[
›hªg
].
busy
);

655 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

656 
	`as£π
(
rf
->
Â_phªg
[
phªg
].
busy
);

657 
	`as£π
(
rf
->
Â_phªg
[
›hªg
].
busy
);

659 
	`as£π
(
phªg
 == -1);

660 
	`as£π
(
›hªg
 == -1);

664 
	}
}

	@rob.c

20 
	~<m2s.h
>

26 
uöt32_t
 
	grob_size
 = 64;

27 
rob_köd_íum
 
	grob_köd
 = 
rob_köd_¥iv©e
;

28 
	gtŸÆ_rob_size
 = 0;

35 
	$rob_åim
(
c‹e
)

37 
idx
;

38 
u›_t
 *
u›
;

41 
CORE
.
rob_cou¡
) {

42 
u›
 = 
	`li°_gë
(
CORE
.
rob
, CORE.
rob_hód
);

43 i‡(
u›
)

45 
CORE
.
rob_hód
 = CORE.rob_hód =
tŸÆ_rob_size
 - 1 ?

46 0 : 
CORE
.
rob_hód
 + 1;

47 
CORE
.
rob_cou¡
--;

51 
CORE
.
rob_cou¡
) {

52 
idx
 = 
CORE
.
rob_èû
 ? CORE.rob_èû - 1 : 
tŸÆ_rob_size
 - 1;

53 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

54 i‡(
u›
)

56 
CORE
.
rob_èû
 = 
idx
;

57 
CORE
.
rob_cou¡
--;

59 
	}
}

66 
	$rob_ªg_›ti⁄s
()

68 *
rob_köd_m≠
[] = { "private", "shared" };

69 
	`›t_ªg_íum
("-rob_kind", "reorder buffer sharing {private|shared}",

70 (*Ë&
rob_köd
, 
rob_köd_m≠
, 2);

71 
	`›t_ªg_uöt32
("-rob_size", "reorder buffer sizeÖerÅhread",

72 &
rob_size
);

73 
	}
}

76 
	$rob_öô
()

78 
c‹e
, 
thªad
;

79 
i
;

81 
rob_köd
) {

83 
rob_köd_¥iv©e
:

86 
FOREACH_CORE
 
FOREACH_THREAD
 {

87 
THREAD
.
rob_À·_bound
 = 
thªad
 * 
rob_size
;

88 
THREAD
.
rob_right_bound
 = (
thªad
 + 1Ë* 
rob_size
 - 1;

89 
THREAD
.
rob_hód
 = THREAD.
rob_À·_bound
;

90 
THREAD
.
rob_èû
 = THREAD.
rob_À·_bound
;

95 
rob_köd_sh¨ed
:

100 
tŸÆ_rob_size
 = 
rob_size
 * 
p_thªads
;

101 
FOREACH_CORE
 {

102 
CORE
.
rob
 = 
	`li°_¸óã
(
tŸÆ_rob_size
);

103 
i
 = 0; i < 
tŸÆ_rob_size
; i++)

104 
	`li°_add
(
CORE
.
rob
, 
NULL
);

106 
	}
}

109 
	$rob_d⁄e
()

111 
c‹e
, 
i
;

112 
u›_t
 *
u›
;

114 
rob_köd
) {

115 
rob_köd_¥iv©e
:

118 
rob_köd_sh¨ed
:

122 
FOREACH_CORE
 {

123 
	`as£π
(
	`li°_cou¡
(
CORE
.
rob
Ë=
tŸÆ_rob_size
);

124 
i
 = 0; i < 
tŸÆ_rob_size
; i++) {

125 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
i
);

126 i‡(
u›
) {

127 
u›
->
ö_rob
 = 0;

128 
	`u›_‰ì_if_nŸ_queued
(
u›
);

131 
	`li°_‰ì
(
CORE
.
rob
);

133 
	}
}

136 
	$rob_ˇn_íqueue
(
u›_t
 *
u›
)

138 
c‹e
 = 
u›
->core;

139 
thªad
 = 
u›
->thread;

141 
rob_köd
) {

142 
rob_köd_¥iv©e
:

143 i‡(
THREAD
.
rob_cou¡
 < 
rob_size
)

147 
rob_köd_sh¨ed
:

148 
	`rob_åim
(
c‹e
);

149 i‡(
CORE
.
rob_cou¡
 < 
tŸÆ_rob_size
)

154 
	}
}

157 
	$rob_íqueue
(
u›_t
 *
u›
)

159 
c‹e
 = 
u›
->core;

160 
thªad
 = 
u›
->thread;

162 
rob_köd
) {

163 
rob_köd_¥iv©e
:

164 
	`as£π
(
THREAD
.
rob_cou¡
 < 
rob_size
);

165 
	`as£π
(!
	`li°_gë
(
CORE
.
rob
, 
THREAD
.
rob_èû
));

166 
	`li°_£t
(
CORE
.
rob
, 
THREAD
.
rob_èû
, 
u›
);

167 
THREAD
.
rob_èû
 = THREAD.rob_èû =THREAD.
rob_right_bound
 ?

168 
THREAD
.
rob_À·_bound
 : THREAD.
rob_èû
 + 1;

169 
THREAD
.
rob_cou¡
++;

172 
rob_köd_sh¨ed
:

173 
	`rob_åim
(
c‹e
);

174 
	`as£π
(
CORE
.
rob_cou¡
 < 
tŸÆ_rob_size
);

175 
	`as£π
(!
	`li°_gë
(
CORE
.
rob
, CORE.
rob_èû
));

176 
	`li°_£t
(
CORE
.
rob
, CORE.
rob_èû
, 
u›
);

177 
CORE
.
rob_èû
 = CORE.rob_èû =
tŸÆ_rob_size
 - 1 ?

178 0 : 
CORE
.
rob_èû
 + 1;

179 
CORE
.
rob_cou¡
++;

180 
THREAD
.
rob_cou¡
++;

185 
u›
->
ö_rob
 = 1;

186 
	}
}

189 
	$rob_ˇn_dequeue
(
c‹e
, 
thªad
)

191 
u›_t
 *
u›
;

193 
rob_köd
) {

194 
rob_köd_¥iv©e
:

195 i‡(
THREAD
.
rob_cou¡
 > 0)

199 
rob_köd_sh¨ed
:

200 
	`rob_åim
(
c‹e
);

201 i‡(!
CORE
.
rob_cou¡
)

203 
u›
 = 
	`li°_gë
(
CORE
.
rob
, CORE.
rob_hód
);

204 
	`as£π
(
	`u›_exi°s
(
u›
));

205 
	`as£π
(
u›
->
c‹e
 == core);

206 i‡(
u›
->
thªad
 ==Åhread)

211 
	}
}

214 
u›_t
 *
	$rob_hód
(
c‹e
, 
thªad
)

216 
u›_t
 *
u›
;

217 
idx
, 
i
;

219 
rob_köd
) {

220 
rob_köd_¥iv©e
:

221 i‡(
THREAD
.
rob_cou¡
 > 0) {

222 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
THREAD
.
rob_hód
);

223  
u›
;

227 
rob_köd_sh¨ed
:

228 
	`rob_åim
(
c‹e
);

229 i‡(!
THREAD
.
rob_cou¡
)

230  
NULL
;

231 
i
 = 0; i < 
CORE
.
rob_cou¡
; i++) {

232 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

233 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

234 i‡(
u›
 && u›->
thªad
 ==Åhread)

235  
u›
;

237 
	`∑nic
("rob_head:Ço head found");

240  
NULL
;

241 
	}
}

244 
	$rob_ªmove_hód
(
c‹e
, 
thªad
)

246 
u›_t
 *
u›
 = 
NULL
;

247 
idx
, 
i
;

249 
rob_köd
) {

250 
rob_köd_¥iv©e
:

251 
	`as£π
(
THREAD
.
rob_cou¡
 > 0);

252 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
THREAD
.
rob_hód
);

253 
	`as£π
(
	`u›_exi°s
(
u›
));

254 
	`as£π
(
u›
->
c‹e
 =c‹ê&& u›->
thªad
 ==Åhread);

255 
	`li°_£t
(
CORE
.
rob
, 
THREAD
.
rob_hód
, 
NULL
);

256 
THREAD
.
rob_hód
 = THREAD.rob_hód =THREAD.
rob_right_bound
 ?

257 
THREAD
.
rob_À·_bound
 : THREAD.
rob_hód
 + 1;

258 
THREAD
.
rob_cou¡
--;

261 
rob_köd_sh¨ed
:

262 
	`rob_åim
(
c‹e
);

263 
	`as£π
(
THREAD
.
rob_cou¡
);

264 
i
 = 0; i < 
CORE
.
rob_cou¡
; i++) {

265 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

266 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

267 i‡(
u›
 && u›->
thªad
 ==Åhread) {

268 
	`li°_£t
(
CORE
.
rob
, 
idx
, 
NULL
);

269 
THREAD
.
rob_cou¡
--;

277 
u›
->
ö_rob
 = 0;

278 
	`u›_‰ì_if_nŸ_queued
(
u›
);

279 
	}
}

282 
u›_t
 *
	$rob_èû
(
c‹e
, 
thªad
)

284 
u›_t
 *
u›
;

285 
idx
, 
i
;

287 
rob_köd
) {

288 
rob_köd_¥iv©e
:

289 i‡(
THREAD
.
rob_cou¡
 > 0) {

290 
idx
 = 
THREAD
.
rob_èû
 =THREAD.
rob_À·_bound
 ?

291 
THREAD
.
rob_right_bound
 : THREAD.
rob_èû
 - 1;

292 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

293  
u›
;

297 
rob_köd_sh¨ed
:

298 
	`rob_åim
(
c‹e
);

299 i‡(!
THREAD
.
rob_cou¡
)

300  
NULL
;

301 
i
 = 
CORE
.
rob_cou¡
 - 1; i >= 0; i--) {

302 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

303 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

304 i‡(
u›
 && u›->
thªad
 ==Åhread)

305  
u›
;

307 
	`∑nic
("rob_tail:ÇoÅail found");

310  
NULL
;

311 
	}
}

314 
u›_t
 *
	$rob_gë
(
c‹e
, 
thªad
, 
ödex
)

316 
u›_t
 *
u›
;

319 i‡(
ödex
 < 0 || index >
THREAD
.
rob_cou¡
)

320  
NULL
;

322 
rob_köd
) {

323 
rob_köd_¥iv©e
:

324 
ödex
 +
THREAD
.
rob_hód
;

325 i‡(
ödex
 > 
THREAD
.
rob_right_bound
)

326 
ödex
 = index - 
THREAD
.
rob_right_bound
 + THREAD.
rob_À·_bound
 - 1;

327 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
ödex
);

328 
	`as£π
(
u›
);

329  
u›
;

331 
rob_köd_sh¨ed
:

332 
	`rob_åim
(
c‹e
);

333 
ödex
 = (
CORE
.
rob_hód
 + indexË% 
tŸÆ_rob_size
;

334 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
ödex
);

335 
	`as£π
(
u›
);

336  
u›
;

338  
NULL
;

339 
	}
}

342 
	$rob_ªmove_èû
(
c‹e
, 
thªad
)

344 
u›_t
 *
u›
 = 
NULL
;

345 
idx
, 
i
;

347 
rob_köd
) {

348 
rob_köd_¥iv©e
:

349 
	`as£π
(
THREAD
.
rob_cou¡
 > 0);

350 
idx
 = 
THREAD
.
rob_èû
 =THREAD.
rob_À·_bound
 ?

351 
THREAD
.
rob_right_bound
 : THREAD.
rob_èû
 - 1;

352 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

353 
	`as£π
(
	`u›_exi°s
(
u›
));

354 
	`as£π
(
u›
->
c‹e
 =c‹ê&& u›->
thªad
 ==Åhread);

355 
	`li°_£t
(
CORE
.
rob
, 
idx
, 
NULL
);

356 
THREAD
.
rob_èû
 = 
idx
;

357 
THREAD
.
rob_cou¡
--;

360 
rob_köd_sh¨ed
:

361 
	`rob_åim
(
c‹e
);

362 
	`as£π
(
THREAD
.
rob_cou¡
);

363 
i
 = 
CORE
.
rob_cou¡
 - 1; i >= 0; i--) {

364 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

365 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

366 i‡(
u›
 && u›->
thªad
 ==Åhread) {

367 
	`li°_£t
(
CORE
.
rob
, 
idx
, 
NULL
);

368 
THREAD
.
rob_cou¡
--;

376 
u›
->
ö_rob
 = 0;

377 
	`u›_‰ì_if_nŸ_queued
(
u›
);

378 
	}
}

381 
	$rob_dump
(
c‹e
, 
FILE
 *
f
)

383 
thªad
, 
i
;

384 
u›_t
 *
u›
;

386 
rob_köd
) {

387 
rob_köd_¥iv©e
:

388 
FOREACH_THREAD
 {

389 
	`Ârötf
(
f
, "Ñob forÅhread %d (entries %dÅo %d), count=%d, size=%d\n",

390 
thªad
, 
THREAD
.
rob_À·_bound
, THREAD.
rob_right_bound
,

391 
THREAD
.
rob_cou¡
, 
rob_size
);

392 
i
 = 
THREAD
.
rob_À·_bound
; i <THREAD.
rob_right_bound
; i++) {

393 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
i
);

394 
	`Ârötf
(
f
, " %c%c ",

395 
i
 =
THREAD
.
rob_hód
 ? 'H' : ' ',

396 
i
 =
THREAD
.
rob_èû
 ? 'T' : ' ');

397 i‡(
u›
)

398 
	`u›_dump
(
u›
, 
f
), 
	`Ârötf
(f, "\n");

400 
	`Ârötf
(
f
, "-\n");

405 
rob_köd_sh¨ed
:

406 
	`rob_åim
(
c‹e
);

407 
i
 = 0; i < 
tŸÆ_rob_size
; i++) {

408 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
i
);

409 
	`Ârötf
(
f
, " %c%c ",

410 
i
 =
CORE
.
rob_hód
 ? 'H' : ' ',

411 
i
 =
CORE
.
rob_èû
 ? 'T' : ' ');

412 i‡(
u›
)

413 
	`u›_dump
(
u›
, 
f
), 
	`Ârötf
(f, "\n");

415 
	`Ârötf
(
f
, "-\n");

419 
	}
}

	@sched.c

20 
	~<m2s.h
>

23 
	$p_pùñöe_em±y
(
c‹e
, 
thªad
)

25  !
THREAD
.
rob_cou¡
 && !
	`li°_cou¡
(THREAD.
„tchq
) &&

26 !
	`li°_cou¡
(
THREAD
.
u›q
);

27 
	}
}

36 
	$p_c⁄ãxt_to_˝u
(
˘x_t
 *
˘x
)

38 
˝u
, 
‰ì_˝u
;

39 
c‹e
, 
thªad
;

40 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

41 
	`as£π
(
ke
->
Æloc_cou¡
 <
p_˝us
);

44 i‡(
ke
->
Æloc_cou¡
 =
p_˝us
)

49 i‡(
˘x
->
Æloc_whí
 && !
p
->
c‹e
[˘x->
Æloc_c‹e
].
thªad
[˘x->
Æloc_thªad
].ctx)

50  
˘x
->
Æloc_c‹e
 * 
p_thªads
 + ctx->
Æloc_thªad
;

54 
‰ì_˝u
 = -1;

55 
˝u
 = 0; cpu < 
p_˝us
; cpu++) {

56 
c‹e
 = 
˝u
 / 
p_thªads
;

57 
thªad
 = 
˝u
 % 
p_thªads
;

58 i‡(!
THREAD
.
˘x
 && 
‰ì_˝u
 < 0)

59 
‰ì_˝u
 = 
˝u
;

60 i‡(!
THREAD
.
œ°_Æloc_pid
)

61  
˝u
;

63 
	`as£π
(
‰ì_˝u
 >= 0);

64  
‰ì_˝u
;

65 
	}
}

68 
	$p_m≠_c⁄ãxt
(
c‹e
, 
thªad
, 
˘x_t
 *
˘x
)

70 
	`as£π
(!
THREAD
.
˘x
);

71 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

72 
	`as£π
(
ke
->
Æloc_cou¡
 < 
p_˝us
);

73 
	`as£π
(!
˘x
->
dóŒoc_sig«l
);

75 
THREAD
.
˘x
 = ctx;

76 
THREAD
.
œ°_Æloc_pid
 = 
˘x
->
pid
;

77 
THREAD
.
„tch_√ù
 = 
˘x
->
ªgs
->
eù
;

79 
	`˘x_£t_°©us
(
˘x
, 
˘x_Æloc
);

80 
˘x
->
Æloc_c‹e
 = 
c‹e
;

81 
˘x
->
Æloc_thªad
 = 
thªad
;

82 
˘x
->
Æloc_whí
 = 
sim_cy˛e
;

84 
	`˘x_debug
("cycle %lld: ctx %dállocatedÅo c%dt%d\n",

85 (Ë
sim_cy˛e
, 
˘x
->
pid
, 
c‹e
, 
thªad
);

86 
	}
}

89 
	$p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
)

91 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

93 
	`as£π
(
˘x
);

94 
	`as£π
(
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

95 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
));

96 
	`as£π
(!
THREAD
.
rob_cou¡
);

97 
	`as£π
(
˘x
->
dóŒoc_sig«l
);

98 
	`as£π
(
p
->
˘x_dóŒoc_sig«ls
 > 0);

100 
THREAD
.
˘x
 = 
NULL
;

101 
THREAD
.
„tch_√ù
 = 0;

103 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_Æloc
);

104 
˘x
->
dóŒoc_whí
 = 
sim_cy˛e
;

105 
˘x
->
dóŒoc_sig«l
 = 0;

106 
p
->
˘x_dóŒoc_sig«ls
--;

108 
	`˘x_debug
("cycle %lld: ctx %dÉvicted from c%dt%d\n",

109 (Ë
sim_cy˛e
, 
˘x
->
pid
, 
c‹e
, 
thªad
);

112 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_föished
))

113 
	`˘x_‰ì
(
˘x
);

114 
	}
}

121 
	$p_unm≠_c⁄ãxt_sig«l
(
˘x_t
 *
˘x
)

123 
c‹e
, 
thªad
;

125 
	`as£π
(
˘x
);

126 
	`as£π
(
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

127 
	`as£π
(!
˘x
->
dóŒoc_sig«l
);

128 
	`as£π
(
p
->
˘x_dóŒoc_sig«ls
 < 
p_˝us
);

130 
˘x
->
dóŒoc_sig«l
 = 1;

131 
p
->
˘x_dóŒoc_sig«ls
++;

132 
c‹e
 = 
˘x
->
Æloc_c‹e
;

133 
thªad
 = 
˘x
->
Æloc_thªad
;

134 
	`˘x_debug
("cycle %lld: ctx %dÑeceivesÉviction signal from c%dt%d\n",

135 (Ë
sim_cy˛e
, 
˘x
->
pid
, 
c‹e
, 
thªad
);

136 i‡(
	`p_pùñöe_em±y
(
c‹e
, 
thªad
))

137 
	`p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
);

139 
	}
}

142 
	$p_°©ic_scheduÀ
()

144 
˘x_t
 *
˘x
;

145 
˝u
;

147 
	`˘x_debug
("cycle %lld: static scheduler called\n",

148 (Ë
sim_cy˛e
);

151 
	`as£π
(
ke
->
Æloc_cou¡
 <ke->
c⁄ãxt_cou¡
);

152 i‡(
ke
->
Æloc_cou¡
 =ke->
c⁄ãxt_cou¡
)

156 
˘x
 = 
ke
->
c⁄ãxt_li°_hód
; ctx; ctx = ctx->
c⁄ãxt_√xt
) {

159 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
))

164 
˝u
 = 
	`p_c⁄ãxt_to_˝u
(
˘x
);

165 i‡(
˝u
 < 0)

166 
	`Áèl
("no cpu free for context %d; increaseÇumber of cores/threads"

167 " o∏a˘iv©êthêc⁄ãxàscheduÀr.", 
˘x
->
pid
);

170 
	`p_m≠_c⁄ãxt
(
˝u
 / 
p_thªads
, cpu %Ö_thªads, 
˘x
);

172 
	}
}

175 
	$p_dy«mic_scheduÀ
()

177 
˘x_t
 *
˘x
, *
found_˘x
;

178 
˝u
;

180 
	`˘x_debug
("cycle %lld: scheduler called\n",

181 (Ë
sim_cy˛e
);

184 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

185 i‡(!
˘x
->
dóŒoc_sig«l
 && !
	`˘x_gë_°©us
(˘x, 
˘x_ru¬ög
))

186 
	`p_unm≠_c⁄ãxt_sig«l
(
˘x
);

190 i‡(
ke
->
Æloc_cou¡
 =ke->
ru¬ög_cou¡
) {

191 
p
->
˘x_Æloc_ﬁde°
 = 
sim_cy˛e
;

192 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

193 
˘x
->
Æloc_whí
 = 
sim_cy˛e
;

199 i‡(!
p
->
˘x_dóŒoc_sig«ls
 &&Ö->
˘x_Æloc_ﬁde°
 + 
p_c⁄ãxt_qu™tum
 <
sim_cy˛e
) {

200 
found_˘x
 = 
NULL
;

201 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

202 i‡(!
found_˘x
 || 
˘x
->
Æloc_whí
 < found_ctx->alloc_when)

203 
found_˘x
 = 
˘x
;

204 i‡(
found_˘x
)

205 
	`p_unm≠_c⁄ãxt_sig«l
(
found_˘x
);

209 
ke
->
Æloc_cou¡
 < ke->
ru¬ög_cou¡
 && ke->Æloc_cou¡ < 
p_˝us
) {

212 
found_˘x
 = 
NULL
;

213 
˘x
 = 
ke
->
ru¬ög_li°_hód
; ctx; ctx = ctx->
ru¬ög_√xt
)

214 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
Ë&& (!
found_˘x
 || ctx->
dóŒoc_whí
 < found_ctx->dealloc_when))

215 
found_˘x
 = 
˘x
;

216 i‡(!
found_˘x
)

218 
˘x
 = 
found_˘x
;

221 
˝u
 = 
	`p_c⁄ãxt_to_˝u
(
˘x
);

222 
	`as£π
(
˝u
 >0 && cpu < 
p_˝us
);

223 
	`p_m≠_c⁄ãxt
(
˝u
 / 
p_thªads
, cpu %Ö_thªads, 
˘x
);

227 
p
->
˘x_Æloc_ﬁde°
 = 
sim_cy˛e
;

228 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

229 i‡(!
˘x
->
dóŒoc_sig«l
 && ctx->
Æloc_whí
 < 
p
->
˘x_Æloc_ﬁde°
)

230 
p
->
˘x_Æloc_ﬁde°
 = 
˘x
->
Æloc_whí
;

231 
	}
}

	@tcache.c

20 
	~<m2s.h
>

25 
	gtˇche_¥e£¡
 = 0;

26 
uöt32_t
 
	gtˇche_åa˚_size
 = 16;

27 
uöt32_t
 
	gtˇche_bønch_max
 = 3;

28 
uöt32_t
 
	gtˇche_queue_size
 = 32;

29 *
	gtˇche_t›o
 = "64:4";

30 
uöt32_t
 
	gtˇche_£ts
;

31 
uöt32_t
 
	gtˇche_assoc
;

34 
	$tˇche_ªg_›ti⁄s
()

36 
	`›t_ªg_boﬁ
("-tˇche", "U£Åø˚ cachê{t|f}", &
tˇche_¥e£¡
);

37 
	`›t_ªg_°rög
("-tcache:topo", "Trace cacheÅopology (<sets>:<assoc>)",

38 &
tˇche_t›o
);

39 
	`›t_ªg_uöt32
("-tcache:trace_size", "MaximumÇumber of uops ináÅrace",

40 &
tˇche_åa˚_size
);

41 
	`›t_ªg_uöt32
("-tcache:branch_max", "MaximumÇumber of branches ináÅrace",

42 &
tˇche_bønch_max
);

43 
	`›t_ªg_uöt32
("-tcache:queue_size", "Fetch queue forÖredecoded uops",

44 &
tˇche_queue_size
);

45 
	}
}

48 
	$tˇche_öô
()

50 
c‹e
, 
thªad
;

53 i‡(!
tˇche_¥e£¡
)

57 i‡(
	`ssˇnf
(
tˇche_t›o
, "%d:%d", &
tˇche_£ts
, &
tˇche_assoc
) != 2)

58 
	`Áèl
("invalidÅcache:topo format");

61 i‡((
tˇche_£ts
 & (tcache_sets - 1)) || !tcache_sets)

62 
	`Áèl
("trace cache sets must beÖower of 2ánd > 0");

63 i‡((
tˇche_assoc
 & (tcache_assoc - 1)) || !tcache_assoc)

64 
	`Áèl
("trace cacheássociativity must beÖower of 2ánd > 0");

65 i‡(!
tˇche_åa˚_size
 || !
tˇche_bønch_max
)

66 
	`Áèl
("trace cache: maxÇumber of branchesánd microinst must be > 0");

67 i‡(
tˇche_bønch_max
 > 
tˇche_åa˚_size
)

68 
	`Áèl
("tcache:branch_max cannot be greaterÅhanÅcache:trace_size");

69 i‡(
tˇche_bønch_max
 > 31)

70 
	`Áèl
("tcache:branch_max cannot be greaterÅhan 31");

73 
FOREACH_CORE
 
FOREACH_THREAD
 {

74 
THREAD
.
tˇche
 = 
	`tˇche_¸óã
();

75 
	`•rötf
(
THREAD
.
tˇche
->
«me
, "c%dt%d.tˇche", 
c‹e
, 
thªad
);

77 
	}
}

80 
	$tˇche_d⁄e
()

82 
c‹e
, 
thªad
;

85 i‡(!
tˇche_¥e£¡
)

89 
FOREACH_CORE
 
FOREACH_THREAD


90 
	`tˇche_‰ì
(
THREAD
.
tˇche
);

91 
	}
}

94 
tˇche_t
 *
	$tˇche_¸óã
()

96 
tˇche_t
 *
tˇche
;

97 
tˇche_íåy_t
 *
íåy
;

98 
£t
, 
way
;

101 
tˇche
 = 
	`ˇŒoc
(1, (
tˇche_t
));

102 
tˇche
->
íåy
 = 
	`ˇŒoc
(
tˇche_£ts
 * 
tˇche_assoc
, 
TCACHE_ENTRY_SIZE
);

103 
tˇche
->
ãmp
 = 
	`ˇŒoc
(1, 
TCACHE_ENTRY_SIZE
);

106 
£t
 = 0; së < 
tˇche_£ts
; set++) {

107 
way
 = 0; way < 
tˇche_assoc
; way++) {

108 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

109 
íåy
->
cou¡î
 = 
way
;

114  
tˇche
;

115 
	}
}

118 
	$tˇche_‰ì
(
tˇche_t
 *
tˇche
)

120 
	`‰ì
(
tˇche
->
íåy
);

121 
	`‰ì
(
tˇche
->
ãmp
);

122 
	`‰ì
(
tˇche
);

123 
	}
}

126 
	$tˇche_dump_ªp‹t
(
tˇche_t
 *
tˇche
, 
FILE
 *
f
)

129 
	`Ârötf
(
f
, "# Trace cache\n");

130 
	`Ârötf
(
f
, "Tø˚Cache.Ac˚s£†%Œd\n", (Ë
tˇche
->
ac˚s£s
);

131 
	`Ârötf
(
f
, "Tø˚Cache.Hô†%Œd\n", (Ë
tˇche
->
hôs
);

132 
	`Ârötf
(
f
, "Tø˚Cache.HôR©iÿ%.4g\n", 
tˇche
->
ac˚s£s
 ? ()

133 
tˇche
->
hôs
 /Åˇche->
ac˚s£s
 : 0.0);

134 
	`Ârötf
(
f
, "Tø˚Cache.Commôãd = %Œd\n", (Ë
tˇche
->
commôãd
);

135 
	`Ârötf
(
f
, "Tø˚Cache.Squashed = %Œd\n", (Ë
tˇche
->
squashed
);

136 
	`Ârötf
(
f
, "TraceCache.TraceLength = %.2g\n",

137 
tˇche
->
åa˚_Àngth_cou¡
 ? (Ëtˇche->
åa˚_Àngth_acc
 /

138 
tˇche
->
åa˚_Àngth_cou¡
 : 0);

139 
	`Ârötf
(
f
, "\n");

140 
	}
}

144 
	$tˇche_Êush_åa˚
(
tˇche_t
 *
tˇche
)

146 
tˇche_íåy_t
 *
íåy
, *
found
 = 
NULL
, *
åa˚
 = 
tˇche
->
ãmp
;

147 
£t
, 
way
;

150 i‡(!
åa˚
->
u›_cou¡
)

152 
	`as£π
(
åa˚
->
èg
);

157 i‡(
åa˚
->
èrgë
) {

158 
	`as£π
(
åa˚
->
bønch_cou¡
);

159 
åa˚
->
bønch_cou¡
--;

160 
åa˚
->
bønch_mask
 &~(1 <<Åø˚->
bønch_cou¡
);

161 
åa˚
->
bønch_Êags
 &~(1 <<Åø˚->
bønch_cou¡
);

166 
£t
 = 
åa˚
->
èg
 % 
tˇche_£ts
;

167 
way
 = 0; way < 
tˇche_assoc
; way++) {

168 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

169 i‡(
íåy
->
èg
 =
åa˚
->èg &&É¡ry->
bønch_mask
 ==Årace->branch_mask

170 && 
íåy
->
bønch_Êags
 =
åa˚
->branch_flags)

172 
found
 = 
íåy
;

175 i‡(!
íåy
->
èg
) {

176 
found
 = 
íåy
;

182 i‡(!
found
) {

183 
way
 = 0; way < 
tˇche_assoc
; way++) {

184 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

185 
íåy
->
cou¡î
--;

186 i‡(
íåy
->
cou¡î
 < 0) {

187 
íåy
->
cou¡î
 = 
tˇche_assoc
 - 1;

188 
found
 = 
íåy
;

195 
	`as£π
(
found
);

196 
tˇche
->
åa˚_Àngth_acc
 +
åa˚
->
u›_cou¡
;

197 
tˇche
->
åa˚_Àngth_cou¡
++;

198 
åa˚
->
cou¡î
 = 
found
->counter;

199 
	`mem˝y
(
found
, 
åa˚
, 
TCACHE_ENTRY_SIZE
);

200 
	`mem£t
(
tˇche
->
ãmp
, 0, 
TCACHE_ENTRY_SIZE
);

201 
	}
}

204 
	$tˇche_√w_u›
(
tˇche_t
 *
tˇche
, 
u›_t
 *
u›
)

206 
tˇche_íåy_t
 *
åa˚
 = 
tˇche
->
ãmp
;

207 
èkí
;

210 i‡(
u›
->
m›_ödex
)

215 
	`as£π
(!
u›
->
•ecmode
);

216 
	`as£π
(
u›
->
eù
);

217 
	`as£π
(
u›
->
£q
 =u›->
m›_£q
);

218 i‡(
åa˚
->
u›_cou¡
 + 
u›
->
m›_cou¡
 > 
tˇche_åa˚_size
)

219 
	`tˇche_Êush_åa˚
(
tˇche
);

220 i‡(
u›
->
m›_cou¡
 > 
tˇche_åa˚_size
)

224 i‡(!
åa˚
->
u›_cou¡
)

225 
åa˚
->
èg
 = 
u›
->
eù
;

228 
åa˚
->
m›_¨øy
[åa˚->
m›_cou¡
] = 
u›
->
eù
;

229 
åa˚
->
m›_cou¡
++;

230 
åa˚
->
u›_cou¡
 +
u›
->
m›_cou¡
;

231 
åa˚
->
èrgë
 = 0;

232 
åa˚
->
ÁŒ_through
 = 
u›
->
eù
 + u›->
m›_size
;

236 i‡(
u›
->
Êags
 & 
FCTRL
) {

237 
èkí
 = 
u›
->
√ù
 !u›->
eù
 + u›->
m›_size
;

238 
åa˚
->
bønch_mask
 |1 <<Åø˚->
bønch_cou¡
;

239 
åa˚
->
bønch_Êags
 |
èkí
 <<Åø˚->
bønch_cou¡
;

240 
åa˚
->
bønch_cou¡
++;

241 
åa˚
->
èrgë
 = 
u›
->
èrgë_√ù
;

242 i‡(
åa˚
->
bønch_cou¡
 =
tˇche_bønch_max
)

243 
	`tˇche_Êush_åa˚
(
tˇche
);

245 
	}
}

248 
	$tˇche_lookup
(
tˇche_t
 *
tˇche
, 
uöt32_t
 
eù
, 
¥ed
,

249 *
±r_m›_cou¡
, 
uöt32_t
 **
±r_m›_¨øy
, uöt32_à*
±r_√ù
)

251 
tˇche_íåy_t
 *
íåy
 = 
NULL
, *
found
 = NULL;

252 
£t
, 
way
;

253 
uöt32_t
 
√ù
;

256 
£t
 = 
eù
 % 
tˇche_£ts
;

257 
way
 = 0; way < 
tˇche_assoc
; way++) {

258 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

259 i‡(
íåy
->
èg
 =
eù
 && ((
¥ed
 &É¡ry->
bønch_mask
Ë=íåy->
bønch_Êags
)) {

260 
found
 = 
íåy
;

266 
tˇche
->
ac˚s£s
++;

267 i‡(!
found
)

269 
tˇche
->
hôs
++;

273 
√ù
 = 
íåy
->
èrgë
 && (
¥ed
 & (1 <<É¡ry->
bønch_cou¡
)) ?

274 
íåy
->
èrgë
 :É¡ry->
ÁŒ_through
;

275 
	`PTR_ASSIGN
(
±r_m›_cou¡
, 
íåy
->
m›_cou¡
);

276 
	`PTR_ASSIGN
(
±r_m›_¨øy
, 
íåy
->
m›_¨øy
);

277 
	`PTR_ASSIGN
(
±r_√ù
, 
√ù
);

279 
	}
}

	@uop.c

20 
	~<m2s.h
>

23 
°rög_m≠_t
 
	gdï_m≠
 = {

25 { "óx", 
DEAX
 },

26 { "ecx", 
DECX
 },

27 { "edx", 
DEDX
 },

28 { "ebx", 
DEBX
 },

29 { "e•", 
DESP
 },

30 { "ebp", 
DEBP
 },

31 { "esi", 
DESI
 },

32 { "edi", 
DEDI
 },

34 { "es", 
DES
 },

35 { "cs", 
DCS
 },

36 { "ss", 
DSS
 },

37 { "ds", 
DDS
 },

38 { "fs", 
DFS
 },

39 { "gs", 
DGS
 },

41 { "zps", 
DZPS
 },

42 { "of", 
DOF
 },

43 { "cf", 
DCF
 },

44 { "df", 
DDF
 },

46 { "aux", 
DAUX
 },

47 { "aux2", 
DAUX2
 },

49 { "addr", 
DEA
 },

50 { "d©a", 
DDATA
 },

52 { "°", 
DST0
 },

53 { "°(1)", 
DST1
 },

54 { "°(2)", 
DST2
 },

55 { "°(3)", 
DST3
 },

56 { "°(4)", 
DST4
 },

57 { "°(5)", 
DST5
 },

58 { "°(6)", 
DST6
 },

59 { "°(7)", 
DST7
 },

61 { "Â°", 
DFPST
 },

62 { "Âcw", 
DFPCW
 },

63 { "Âaux", 
DFPAUX
 }

70 
	su›_b™k_íåy_t
 {

71 *
	m«me
;

72 
	mfu_˛ass
;

73 
	mÊags
;

76 
u›_b™k_íåy_t
 
	gu›_b™k
[
u›_cou¡
 + 1] = {

77 
	#UOP
(
_u›
, 
_fu_˛ass
, 
_Êags
Ë{ #_u›, 
fu_
##_fu_˛ass, _Êags},

	)

78 
	~"u›1.d©
"

79 #unde‡
UOP


86 
	su›_èbÀ_íåy_t
 {

87 
	mu›
;

88 
	midï
[
IDEP_COUNT
];

89 
	modï
[
ODEP_COUNT
];

90 
u›_èbÀ_íåy_t
 *
	m√xt
;

93 
u›_èbÀ_íåy_t
 *
	gu›_èbÀ
[
x86_›code_cou¡
];

96 
ªpos_t
 *
	gu›_ªpos
;

99 
	$u›_èbÀ_íåy_add
(
x86_›code_t
 
›code
,

100 
u›_èbÀ_íåy_t
 *
íåy
)

102 
u›_èbÀ_íåy_t
 *
œ°
;

103 
œ°
 = 
u›_èbÀ
[
›code
];

104 i‡(!
œ°
) {

105 
u›_èbÀ
[
›code
] = 
íåy
;

108 
œ°
->
√xt
)

109 
œ°
 =Üa°->
√xt
;

110 
œ°
->
√xt
 = 
íåy
;

111 
	}
}

114 
	$u›_öô
()

116 
x86_›code_t
 
›code
;

117 
u›_èbÀ_íåy_t
 *
íåy
;

118 
i
, 
j
;

120 
u›_ªpos
 = 
	`ªpos_¸óã
((
u›_t
), "uop_repos");

122 
	#X86_INST
(
_›code
Ë
›code
 = 
›_
##_›code;

	)

123 
	#UOP
(
_u›
, 
_idï0
, 
_idï1
, 
_idï2
, 
_odï0
, 
_odï1
, 
_odï2
, 
_odï3
) \

124 
íåy
 = 
	`ˇŒoc
(1, (
u›_èbÀ_íåy_t
)); \

125 
íåy
->
u›
 = 
u›_
##
_u›
; \

126 
íåy
->
idï
[0] = 
_idï0
; \

127 
íåy
->
idï
[1] = 
_idï1
; \

128 
íåy
->
idï
[2] = 
_idï2
; \

129 
íåy
->
odï
[0] = 
_odï0
; \

130 
íåy
->
odï
[1] = 
_odï1
; \

131 
íåy
->
odï
[2] = 
_odï2
; \

132 
íåy
->
odï
[3] = 
_odï3
; \

133 
	`u›_èbÀ_íåy_add
(
›code
, 
íåy
);

	)

134 
	~"u›2.d©
"

135 #unde‡
X86_INST


136 #unde‡
UOP


140 
›code
 = 0; opcodê< 
x86_›code_cou¡
; opcode++) {

141 
íåy
 = 
u›_èbÀ
[
›code
];É¡ry;É¡ry =É¡ry->
√xt
) {

142 
i
 = 0; i < 
IDEP_COUNT
; i++)

143 
j
 = 0; j < 
i
; j++)

144 i‡(
íåy
->
idï
[
i
] &&É¡ry->idï[i] =íåy->idï[
j
])

145 
	`∑nic
("uop2.dat: opcode=0x%x,Ñepeated input dependence",

146 
›code
);

147 
i
 = 0; i < 
ODEP_COUNT
; i++)

148 
j
 = 0; j < 
i
; j++)

149 i‡(
íåy
->
odï
[
i
] &&É¡ry->odï[i] =íåy->odï[
j
])

150 
	`∑nic
("uop2.dat: opcode=0x%x,Ñepeated output dependence",

151 
›code
);

154 
	}
}

157 
	$u›_d⁄e
()

159 
x86_›code_t
 
›code
;

160 
u›_èbÀ_íåy_t
 *
íåy
;

161 
›code
 = 0; opcodê< 
x86_›code_cou¡
; opcode++) {

162 
u›_èbÀ
[
›code
]) {

163 
íåy
 = 
u›_èbÀ
[
›code
]->
√xt
;

164 
	`‰ì
(
u›_èbÀ
[
›code
]);

165 
u›_èbÀ
[
›code
] = 
íåy
;

169 
	`ªpos_‰ì
(
u›_ªpos
);

170 
	}
}

173 
	$u›_dï_∑r£
(
li°_t
 *
u›_li°
, 
dï
)

176 i‡(
	`DEP_IS_VALID
(
dï
))

177  
dï
;

180 
dï
) {

182 
DNONE
:

183 
DFPOP
:

184 
DFPOP2
:

185 
DFPUSH
:

186  
dï
;

188 
DRM8
:

189  
iß_ö°
.
modrm_rm
 < 4 ? 
DEAX
 + isa_inst.modrm_rm : DEAX + isa_inst.modrm_rm - 4;

191 
DRM16
:

192 
DRM32
:

193  
DEAX
 + 
iß_ö°
.
modrm_rm
;

195 
DR8
:

196  
iß_ö°
.
ªg
 < 4 ? 
DEAX
 + isa_inst.reg : DEAX + isa_inst.reg - 4;

198 
DR16
:

199 
DR32
:

200  
DEAX
 + 
iß_ö°
.
ªg
;

202 
DIR8
:

203  
iß_ö°
.
›ödex
 < 4 ? 
DEAX
 + isa_inst.opindex : DEAX + isa_inst.opindex - 4;

205 
DIR16
:

206 
DIR32
:

207  
DEAX
 + 
iß_ö°
.
›ödex
;

209 
DSREG
:

210  
DES
 + 
iß_ö°
.
ªg
;

212 
DSTI
:

213  
DST0
 + 
iß_ö°
.
›ödex
;

217 
	`∑nic
("u›_dï_∑r£: unknow¿dï: 0x%x\n", 
dï
);

219 
	}
}

222 
	$u›_idï_∑r£
(
li°_t
 *
u›_li°
, 
dï
)

224 
u›_t
 *
u›
;

229 i‡(((
dï
 =
DRM8
 || dï =
DRM16
 || dï =
DRM32
Ë&& 
iß_ö°
.
modrm_mod
 != 3) ||

230 
dï
 =
DMEM
)

234 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

235 
u›
->u› = 
u›_efÁddr
;

236 
u›
->
idï
[0] = 
iß_ö°
.
£gmít
 ? iß_ö°.£gmíà- 
ªg_es
 + 
DES
 : 
DNONE
;

237 
u›
->
idï
[1] = 
iß_ö°
.
ó_ba£
 ? iß_ö°.ó_ba£ - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

238 
u›
->
idï
[2] = 
iß_ö°
.
ó_ödex
 ? iß_ö°.ó_ödex - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

239 
u›
->
odï
[0] = 
DEA
;

240 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

241 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

242 
	`li°_add
(
u›_li°
, 
u›
);

245 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

246 
u›
->u› = 
u›_lﬂd
;

247 
u›
->
idï
[0] = 
DEA
;

248 
u›
->
odï
[0] = 
DDATA
;

249 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

250 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

251 
	`li°_add
(
u›_li°
, 
u›
);

254  
DDATA
;

258 i‡(
dï
 =
DEASEG
)

259  
iß_ö°
.
£gmít
 ? iß_ö°.£gmíà- 
ªg_es
 + 
DES
 : 
DNONE
;

260 i‡(
dï
 =
DEABAS
)

261  
iß_ö°
.
ó_ba£
 ? iß_ö°.ó_ba£ - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

262 i‡(
dï
 =
DEAIDX
)

263  
iß_ö°
.
ó_ödex
 ? iß_ö°.ó_ödex - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

266  
	`u›_dï_∑r£
(
u›_li°
, 
dï
);

267 
	}
}

270 
	$u›_odï_∑r£
(
li°_t
 *
u›_li°
, 
dï
)

272 
u›_t
 *
u›
;

275 i‡(((
dï
 =
DRM8
 || dï =
DRM16
 || dï =
DRM32
Ë&& 
iß_ö°
.
modrm_mod
 != 3) ||

276 
dï
 =
DMEM
)

282 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

283 
u›
->u› = 
u›_efÁddr
;

284 
u›
->
idï
[0] = 
iß_ö°
.
£gmít
 ? iß_ö°.£gmíà- 
ªg_es
 + 
DES
 : 
DNONE
;

285 
u›
->
idï
[1] = 
iß_ö°
.
ó_ba£
 ? iß_ö°.ó_ba£ - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

286 
u›
->
idï
[2] = 
iß_ö°
.
ó_ödex
 ? iß_ö°.ó_ödex - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

287 
u›
->
odï
[0] = 
DEA
;

288 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

289 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

290 
	`li°_add
(
u›_li°
, 
u›
);

293 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

294 
u›
->u› = 
u›_°‹e
;

295 
u›
->
idï
[0] = 
DEA
;

296 
u›
->
idï
[1] = 
DDATA
;

297 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

298 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

299 
	`li°_add
(
u›_li°
, 
u›
);

302  
DDATA
;

306  
	`u›_dï_∑r£
(
u›_li°
, 
dï
);

307 
	}
}

310 
	$u›_‰ì_if_nŸ_queued
(
u›_t
 *
u›
)

312 i‡(
u›
->
ö_„tchq
 || u›->
ö_u›q
 || u›->
ö_iq
 ||

313 
u›
->
ö_lq
 || u›->
ö_sq
 ||

314 
u›
->
ö_rob
 || u›->
ö_evítq
)

316 
	`ªpos_‰ì_obje˘
(
u›_ªpos
, 
u›
);

317 
	}
}

320 
	$u›_exi°s
(
u›_t
 *
u›
)

322  
	`ªpos_Æloˇãd_obje˘
(
u›_ªpos
, 
u›
);

323 
	}
}

326 
	$u›_dump_buf
(
u›_t
 *
u›
, *
buf
, 
size
)

328 
i
, 
l‹eg
, 
cou¡
, 
Â_t›_of_°ack
;

329 *
comma
;

331 
	`dump_buf
(&
buf
, &
size
, "%†", 
u›_b™k
[
u›
->u›].
«me
);

332 
comma
 = "";

333 
i
 = 
cou¡
 = 0; i < 
IDEP_COUNT
; i++) {

334 i‡(!
	`DEP_IS_VALID
(
u›
->
idï
[
i
]))

336 
	`dump_buf
(&
buf
, &
size
, "%s%s", 
comma
,

337 
	`m≠_vÆue
(&
dï_m≠
, 
u›
->
idï
[
i
]));

338 
comma
 = ",";

339 
cou¡
++;

341 i‡(!
cou¡
)

342 
	`dump_buf
(&
buf
, &
size
, "-");

343 
	`dump_buf
(&
buf
, &
size
, "/");

344 
comma
 = "";

345 
Â_t›_of_°ack
 = 0;

346 
i
 = 
cou¡
 = 0; i < 
ODEP_COUNT
; i++) {

347 
l‹eg
 = 
u›
->
odï
[
i
];

348 i‡(
l‹eg
 =
DFPOP
)

349 
Â_t›_of_°ack
--;

350 i‡(
l‹eg
 =
DFPOP2
)

351 
Â_t›_of_°ack
 -= 2;

352 i‡(
l‹eg
 =
DFPUSH
)

353 
Â_t›_of_°ack
++;

354 i‡(!
	`DEP_IS_VALID
(
l‹eg
))

356 
	`dump_buf
(&
buf
, &
size
, "%s%s", 
comma
, 
	`m≠_vÆue
(&
dï_m≠
, 
l‹eg
));

357 
comma
 = ",";

358 
cou¡
++;

360 i‡(!
cou¡
)

361 
	`dump_buf
(&
buf
, &
size
, "-");

362 i‡(
Â_t›_of_°ack
)

363 
	`dump_buf
(&
buf
, &
size
, "(°=>%+d)", 
Â_t›_of_°ack
);

364 
	}
}

367 
	$u›_dump
(
u›_t
 *
u›
, 
FILE
 *
f
)

369 
buf
[100];

370 
	`u›_dump_buf
(
u›
, 
buf
, (buf));

371 
	`Ârötf
(
f
, "%s", 
buf
);

372 
	}
}

375 
	$u›_li°_dump
(
li°_t
 *
u›_li°
, 
FILE
 *
f
)

377 
u›_t
 *
u›
;

378 
i
;

380 
i
 = 0; i < 
	`li°_cou¡
(
u›_li°
); i++) {

381 
u›
 = 
	`li°_gë
(
u›_li°
, 
i
);

382 
	`Ârötf
(
f
, "%3d. ", 
i
);

383 
	`u›_dump
(
u›
, 
f
);

384 
	`Ârötf
(
f
, "\n");

386 
	}
}

389 
	$u›_ li°_dump
(
 li°_t
 *
u›_li°
, 
FILE
 *
f
)

391 
u›_t
 *
u›
;

393 
	` li°_hód
(
u›_li°
);

394 !
	` li°_eﬁ
(
u›_li°
)) {

395 
u›
 = 
	` li°_gë
(
u›_li°
);

396 
	`Ârötf
(
f
, "%3d. ", 
	` li°_cuºít
(
u›_li°
));

397 
	`u›_dump
(
u›
, 
f
);

398 
	`Ârötf
(
f
, "\n");

399 
	` li°_√xt
(
u›_li°
);

401 
	}
}

408 
	$u›_ li°_check_if_ªady
(
 li°_t
 *
u›_li°
)

410 
u›_t
 *
u›
;

411 
	` li°_hód
(
u›_li°
);

412 
	` li°_hód
(
u›_li°
); !
	` li°_eﬁ
(u›_li°); 
	` li°_√xt
(uop_list)) {

413 
u›
 = 
	` li°_gë
(
u›_li°
);

414 i‡(
u›
->
ªady
 || !
	`rf_ªady
(uop))

416 
u›
->
ªady
 = 1;

417 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%lld,Ñeady=1\n",

418 
u›
->
c‹e
, (Ëu›->
di_£q
);

420 
	}
}

426 
u›_t
 *
	$u›_decode
(
li°_t
 *
li°
)

428 
u›_èbÀ_íåy_t
 *
íåy
;

429 
u›_t
 *
u›
, *
ªt
 = 
NULL
;

430 
cou¡
, 
i
;

432 
cou¡
 = 
	`li°_cou¡
(
li°
);

433 
íåy
 = 
u›_èbÀ
[
iß_ö°
.
›code
];É¡ry;É¡ry =É¡ry->
√xt
) {

436 i‡(
ªt
)

437 
	`∑nic
("uop_decode:Ço uopállowedáfter control uop");

438 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

441 
i
 = 0; i < 
IDEP_COUNT
; i++)

442 
u›
->
idï
[
i
] = 
	`u›_idï_∑r£
(
li°
, 
íåy
->idep[i]);

445 
	`li°_add
(
li°
, 
u›
);

448 
i
 = 0; i < 
ODEP_COUNT
; i++)

449 
u›
->
odï
[
i
] = 
	`u›_odï_∑r£
(
li°
, 
íåy
->odep[i]);

452 
u›
->u› = 
íåy
->uop;

453 
u›
->
fu_˛ass
 = 
u›_b™k
[
íåy
->uop].fu_class;

454 
u›
->
Êags
 = 
u›_b™k
[
íåy
->uop].flags;

455 i‡(
u›
->
Êags
 & 
FCTRL
)

456 
ªt
 = 
u›
;

460  
ªt
 ?Ñë : 
	`li°_gë
(
li°
, 
cou¡
);

461 
	}
}

	@writeback.c

20 
	~<m2s.h
>

24 
	$wrôeback_c‹e
(
c‹e
)

26 
u›_t
 *
u›
;

27 
thªad
, 
ªcovî
 = 0;

32 
	` li°_hód
(
CORE
.
evítq
);

33 
u›
 = 
	` li°_gë
(
CORE
.
evítq
);

34 i‡(
	` li°_îr‹
(
CORE
.
evítq
))

39 i‡(
u›
->
Êags
 & 
FMEM
)

40 
u›
->
whí
 = 
sim_cy˛e
;

41 i‡(
u›
->
whí
 > 
sim_cy˛e
)

45 
	`as£π
(
	`u›_exi°s
(
u›
));

46 
	`as£π
(
u›
->
whí
 =
sim_cy˛e
);

47 
	`as£π
(
u›
->
c‹e
 == core);

48 
	`as£π
(
u›
->
ªady
);

49 
	`as£π
(!
u›
->
com∂ëed
);

52 
	` li°_ªmove
(
CORE
.
evítq
);

53 
u›
->
ö_evítq
 = 0;

54 
thªad
 = 
u›
->thread;

58 i‡(
p_ªcovî_köd
 =
p_ªcovî_köd_wrôeback
 &&

59 (
u›
->
Êags
 & 
FCTRL
Ë&& !u›->
•ecmode
 &&

60 
u›
->
√ù
 !u›->
¥ed_√ù
)

61 
ªcovî
 = 1;

64 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

66 
u›
->
c‹e
, (Ëu›->
di_£q
);

69 
u›
->
com∂ëed
 = 1;

70 
	`rf_wrôe
(
u›
);

71 
CORE
.
rf_öt_wrôes
 +
u›
->
ph_öt_odï_cou¡
;

72 
CORE
.
rf_Â_wrôes
 +
u›
->
ph_Â_odï_cou¡
;

73 
CORE
.
iq_wakeup_ac˚s£s
++;

74 
THREAD
.
rf_öt_wrôes
 +
u›
->
ph_öt_odï_cou¡
;

75 
THREAD
.
rf_Â_wrôes
 +
u›
->
ph_Â_odï_cou¡
;

76 
THREAD
.
iq_wakeup_ac˚s£s
++;

77 
	`u›_‰ì_if_nŸ_queued
(
u›
);

81 i‡(
ªcovî
)

82 
	`p_ªcovî
(
c‹e
, 
thªad
);

84 
	}
}

87 
	$p_wrôeback
()

89 
c‹e
;

90 
p
->
°age
 = "writeback";

91 
FOREACH_CORE


92 
	`wrôeback_c‹e
(
c‹e
);

93 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_GNU
 3

	)

146 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM_AEABI
 64

	)

155 
	#ELFOSABI_ARM
 97

	)

156 
	#ELFOSABI_STANDALONE
 255

	)

158 
	#EI_ABIVERSION
 8

	)

160 
	#EI_PAD
 9

	)

164 
	#ET_NONE
 0

	)

165 
	#ET_REL
 1

	)

166 
	#ET_EXEC
 2

	)

167 
	#ET_DYN
 3

	)

168 
	#ET_CORE
 4

	)

169 
	#ET_NUM
 5

	)

170 
	#ET_LOOS
 0x„00

	)

171 
	#ET_HIOS
 0x„f‡

	)

172 
	#ET_LOPROC
 0xff00

	)

173 
	#ET_HIPROC
 0xfff‡

	)

177 
	#EM_NONE
 0

	)

178 
	#EM_M32
 1

	)

179 
	#EM_SPARC
 2

	)

180 
	#EM_386
 3

	)

181 
	#EM_68K
 4

	)

182 
	#EM_88K
 5

	)

183 
	#EM_860
 7

	)

184 
	#EM_MIPS
 8

	)

185 
	#EM_S370
 9

	)

186 
	#EM_MIPS_RS3_LE
 10

	)

188 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

196 
	#EM_V800
 36

	)

197 
	#EM_FR20
 37

	)

198 
	#EM_RH32
 38

	)

199 
	#EM_RCE
 39

	)

200 
	#EM_ARM
 40

	)

201 
	#EM_FAKE_ALPHA
 41

	)

202 
	#EM_SH
 42

	)

203 
	#EM_SPARCV9
 43

	)

204 
	#EM_TRICORE
 44

	)

205 
	#EM_ARC
 45

	)

206 
	#EM_H8_300
 46

	)

207 
	#EM_H8_300H
 47

	)

208 
	#EM_H8S
 48

	)

209 
	#EM_H8_500
 49

	)

210 
	#EM_IA_64
 50

	)

211 
	#EM_MIPS_X
 51

	)

212 
	#EM_COLDFIRE
 52

	)

213 
	#EM_68HC12
 53

	)

214 
	#EM_MMA
 54

	)

215 
	#EM_PCP
 55

	)

216 
	#EM_NCPU
 56

	)

217 
	#EM_NDR1
 57

	)

218 
	#EM_STARCORE
 58

	)

219 
	#EM_ME16
 59

	)

220 
	#EM_ST100
 60

	)

221 
	#EM_TINYJ
 61

	)

222 
	#EM_X86_64
 62

	)

223 
	#EM_PDSP
 63

	)

225 
	#EM_FX66
 66

	)

226 
	#EM_ST9PLUS
 67

	)

227 
	#EM_ST7
 68

	)

228 
	#EM_68HC16
 69

	)

229 
	#EM_68HC11
 70

	)

230 
	#EM_68HC08
 71

	)

231 
	#EM_68HC05
 72

	)

232 
	#EM_SVX
 73

	)

233 
	#EM_ST19
 74

	)

234 
	#EM_VAX
 75

	)

235 
	#EM_CRIS
 76

	)

236 
	#EM_JAVELIN
 77

	)

237 
	#EM_FIREPATH
 78

	)

238 
	#EM_ZSP
 79

	)

239 
	#EM_MMIX
 80

	)

240 
	#EM_HUANY
 81

	)

241 
	#EM_PRISM
 82

	)

242 
	#EM_AVR
 83

	)

243 
	#EM_FR30
 84

	)

244 
	#EM_D10V
 85

	)

245 
	#EM_D30V
 86

	)

246 
	#EM_V850
 87

	)

247 
	#EM_M32R
 88

	)

248 
	#EM_MN10300
 89

	)

249 
	#EM_MN10200
 90

	)

250 
	#EM_PJ
 91

	)

251 
	#EM_OPENRISC
 92

	)

252 
	#EM_ARC_A5
 93

	)

253 
	#EM_XTENSA
 94

	)

254 
	#EM_NUM
 95

	)

260 
	#EM_ALPHA
 0x9026

	)

264 
	#EV_NONE
 0

	)

265 
	#EV_CURRENT
 1

	)

266 
	#EV_NUM
 2

	)

272 
Elf32_W‹d
 
	msh_«me
;

273 
Elf32_W‹d
 
	msh_ty≥
;

274 
Elf32_W‹d
 
	msh_Êags
;

275 
Elf32_Addr
 
	msh_addr
;

276 
Elf32_Off
 
	msh_off£t
;

277 
Elf32_W‹d
 
	msh_size
;

278 
Elf32_W‹d
 
	msh_lök
;

279 
Elf32_W‹d
 
	msh_öfo
;

280 
Elf32_W‹d
 
	msh_addølign
;

281 
Elf32_W‹d
 
	msh_ítsize
;

282 } 
	tElf32_Shdr
;

286 
Elf64_W‹d
 
	msh_«me
;

287 
Elf64_W‹d
 
	msh_ty≥
;

288 
Elf64_Xw‹d
 
	msh_Êags
;

289 
Elf64_Addr
 
	msh_addr
;

290 
Elf64_Off
 
	msh_off£t
;

291 
Elf64_Xw‹d
 
	msh_size
;

292 
Elf64_W‹d
 
	msh_lök
;

293 
Elf64_W‹d
 
	msh_öfo
;

294 
Elf64_Xw‹d
 
	msh_addølign
;

295 
Elf64_Xw‹d
 
	msh_ítsize
;

296 } 
	tElf64_Shdr
;

300 
	#SHN_UNDEF
 0

	)

301 
	#SHN_LORESERVE
 0xff00

	)

302 
	#SHN_LOPROC
 0xff00

	)

303 
	#SHN_BEFORE
 0xff00

	)

305 
	#SHN_AFTER
 0xff01

	)

307 
	#SHN_HIPROC
 0xff1‡

	)

308 
	#SHN_LOOS
 0xff20

	)

309 
	#SHN_HIOS
 0xff3‡

	)

310 
	#SHN_ABS
 0xfff1

	)

311 
	#SHN_COMMON
 0xfff2

	)

312 
	#SHN_XINDEX
 0xfff‡

	)

313 
	#SHN_HIRESERVE
 0xfff‡

	)

317 
	#SHT_NULL
 0

	)

318 
	#SHT_PROGBITS
 1

	)

319 
	#SHT_SYMTAB
 2

	)

320 
	#SHT_STRTAB
 3

	)

321 
	#SHT_RELA
 4

	)

322 
	#SHT_HASH
 5

	)

323 
	#SHT_DYNAMIC
 6

	)

324 
	#SHT_NOTE
 7

	)

325 
	#SHT_NOBITS
 8

	)

326 
	#SHT_REL
 9

	)

327 
	#SHT_SHLIB
 10

	)

328 
	#SHT_DYNSYM
 11

	)

329 
	#SHT_INIT_ARRAY
 14

	)

330 
	#SHT_FINI_ARRAY
 15

	)

331 
	#SHT_PREINIT_ARRAY
 16

	)

332 
	#SHT_GROUP
 17

	)

333 
	#SHT_SYMTAB_SHNDX
 18

	)

334 
	#SHT_NUM
 19

	)

335 
	#SHT_LOOS
 0x60000000

	)

336 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

337 
	#SHT_GNU_HASH
 0x6ffffff6

	)

338 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

339 
	#SHT_CHECKSUM
 0x6ffffff8

	)

340 
	#SHT_LOSUNW
 0x6fffffÁ

	)

341 
	#SHT_SUNW_move
 0x6fffffÁ

	)

342 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

343 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

344 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

345 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

346 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

347 
	#SHT_HISUNW
 0x6ffffff‡

	)

348 
	#SHT_HIOS
 0x6ffffff‡

	)

349 
	#SHT_LOPROC
 0x70000000

	)

350 
	#SHT_HIPROC
 0x7ffffff‡

	)

351 
	#SHT_LOUSER
 0x80000000

	)

352 
	#SHT_HIUSER
 0x8ffffff‡

	)

356 
	#SHF_WRITE
 (1 << 0Ë

	)

357 
	#SHF_ALLOC
 (1 << 1Ë

	)

358 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

359 
	#SHF_MERGE
 (1 << 4Ë

	)

360 
	#SHF_STRINGS
 (1 << 5Ë

	)

361 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

362 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

363 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 (1 << 30Ë

	)

371 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

375 
	#GRP_COMDAT
 0x1

	)

381 
Elf32_W‹d
 
	m°_«me
;

382 
Elf32_Addr
 
	m°_vÆue
;

383 
Elf32_W‹d
 
	m°_size
;

384 
	m°_öfo
;

385 
	m°_Ÿhî
;

386 
Elf32_Se˘i⁄
 
	m°_shndx
;

387 } 
	tElf32_Sym
;

391 
Elf64_W‹d
 
	m°_«me
;

392 
	m°_öfo
;

393 
	m°_Ÿhî
;

394 
Elf64_Se˘i⁄
 
	m°_shndx
;

395 
Elf64_Addr
 
	m°_vÆue
;

396 
Elf64_Xw‹d
 
	m°_size
;

397 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

410 
Elf64_HÆf
 
	msi_boundto
;

411 
Elf64_HÆf
 
	msi_Êags
;

412 } 
	tElf64_Symöfo
;

415 
	#SYMINFO_BT_SELF
 0xfff‡

	)

416 
	#SYMINFO_BT_PARENT
 0xff„

	)

417 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

420 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

421 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

422 
	#SYMINFO_FLG_COPY
 0x0004

	)

423 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

426 
	#SYMINFO_NONE
 0

	)

427 
	#SYMINFO_CURRENT
 1

	)

428 
	#SYMINFO_NUM
 2

	)

433 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

434 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

435 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

438 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

439 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

440 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

444 
	#STB_LOCAL
 0

	)

445 
	#STB_GLOBAL
 1

	)

446 
	#STB_WEAK
 2

	)

447 
	#STB_NUM
 3

	)

448 
	#STB_LOOS
 10

	)

449 
	#STB_GNU_UNIQUE
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_GNU_IFUNC
 10

	)

466 
	#STT_HIOS
 12

	)

467 
	#STT_LOPROC
 13

	)

468 
	#STT_HIPROC
 15

	)

475 
	#STN_UNDEF
 0

	)

480 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

483 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

486 
	#STV_DEFAULT
 0

	)

487 
	#STV_INTERNAL
 1

	)

488 
	#STV_HIDDEN
 2

	)

489 
	#STV_PROTECTED
 3

	)

496 
Elf32_Addr
 
	mr_off£t
;

497 
Elf32_W‹d
 
	mr_öfo
;

498 } 
	tElf32_Rñ
;

507 
Elf64_Addr
 
	mr_off£t
;

508 
Elf64_Xw‹d
 
	mr_öfo
;

509 } 
	tElf64_Rñ
;

515 
Elf32_Addr
 
	mr_off£t
;

516 
Elf32_W‹d
 
	mr_öfo
;

517 
Elf32_Sw‹d
 
	mr_addíd
;

518 } 
	tElf32_Rña
;

522 
Elf64_Addr
 
	mr_off£t
;

523 
Elf64_Xw‹d
 
	mr_öfo
;

524 
Elf64_Sxw‹d
 
	mr_addíd
;

525 } 
	tElf64_Rña
;

529 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

530 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

531 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

533 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

534 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

535 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

541 
Elf32_W‹d
 
	mp_ty≥
;

542 
Elf32_Off
 
	mp_off£t
;

543 
Elf32_Addr
 
	mp_vaddr
;

544 
Elf32_Addr
 
	mp_∑ddr
;

545 
Elf32_W‹d
 
	mp_fûesz
;

546 
Elf32_W‹d
 
	mp_memsz
;

547 
Elf32_W‹d
 
	mp_Êags
;

548 
Elf32_W‹d
 
	mp_Æign
;

549 } 
	tElf32_Phdr
;

553 
Elf64_W‹d
 
	mp_ty≥
;

554 
Elf64_W‹d
 
	mp_Êags
;

555 
Elf64_Off
 
	mp_off£t
;

556 
Elf64_Addr
 
	mp_vaddr
;

557 
Elf64_Addr
 
	mp_∑ddr
;

558 
Elf64_Xw‹d
 
	mp_fûesz
;

559 
Elf64_Xw‹d
 
	mp_memsz
;

560 
Elf64_Xw‹d
 
	mp_Æign
;

561 } 
	tElf64_Phdr
;

567 
	#PN_XNUM
 0xffff

	)

571 
	#PT_NULL
 0

	)

572 
	#PT_LOAD
 1

	)

573 
	#PT_DYNAMIC
 2

	)

574 
	#PT_INTERP
 3

	)

575 
	#PT_NOTE
 4

	)

576 
	#PT_SHLIB
 5

	)

577 
	#PT_PHDR
 6

	)

578 
	#PT_TLS
 7

	)

579 
	#PT_NUM
 8

	)

580 
	#PT_LOOS
 0x60000000

	)

581 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

582 
	#PT_GNU_STACK
 0x6474e551

	)

583 
	#PT_GNU_RELRO
 0x6474e552

	)

584 
	#PT_LOSUNW
 0x6fffffÁ

	)

585 
	#PT_SUNWBSS
 0x6fffffÁ

	)

586 
	#PT_SUNWSTACK
 0x6ffffffb

	)

587 
	#PT_HISUNW
 0x6fffffff

	)

588 
	#PT_HIOS
 0x6ffffff‡

	)

589 
	#PT_LOPROC
 0x70000000

	)

590 
	#PT_HIPROC
 0x7ffffff‡

	)

594 
	#PF_X
 (1 << 0Ë

	)

595 
	#PF_W
 (1 << 1Ë

	)

596 
	#PF_R
 (1 << 2Ë

	)

597 
	#PF_MASKOS
 0x0ff00000

	)

598 
	#PF_MASKPROC
 0xf0000000

	)

602 
	#NT_PRSTATUS
 1

	)

603 
	#NT_FPREGSET
 2

	)

604 
	#NT_PRPSINFO
 3

	)

605 
	#NT_PRXREG
 4

	)

606 
	#NT_TASKSTRUCT
 4

	)

607 
	#NT_PLATFORM
 5

	)

608 
	#NT_AUXV
 6

	)

609 
	#NT_GWINDOWS
 7

	)

610 
	#NT_ASRS
 8

	)

611 
	#NT_PSTATUS
 10

	)

612 
	#NT_PSINFO
 13

	)

613 
	#NT_PRCRED
 14

	)

614 
	#NT_UTSNAME
 15

	)

615 
	#NT_LWPSTATUS
 16

	)

616 
	#NT_LWPSINFO
 17

	)

617 
	#NT_PRFPXREG
 20

	)

618 
	#NT_PRXFPREG
 0x46e62b7‡

	)

619 
	#NT_PPC_VMX
 0x100

	)

620 
	#NT_PPC_SPE
 0x101

	)

621 
	#NT_PPC_VSX
 0x102

	)

622 
	#NT_386_TLS
 0x200

	)

623 
	#NT_386_IOPERM
 0x201

	)

624 
	#NT_X86_XSTATE
 0x202

	)

628 
	#NT_VERSION
 1

	)

635 
Elf32_Sw‹d
 
	md_èg
;

638 
Elf32_W‹d
 
	md_vÆ
;

639 
Elf32_Addr
 
	md_±r
;

640 } 
	md_un
;

641 } 
	tElf32_Dyn
;

645 
Elf64_Sxw‹d
 
	md_èg
;

648 
Elf64_Xw‹d
 
	md_vÆ
;

649 
Elf64_Addr
 
	md_±r
;

650 } 
	md_un
;

651 } 
	tElf64_Dyn
;

655 
	#DT_NULL
 0

	)

656 
	#DT_NEEDED
 1

	)

657 
	#DT_PLTRELSZ
 2

	)

658 
	#DT_PLTGOT
 3

	)

659 
	#DT_HASH
 4

	)

660 
	#DT_STRTAB
 5

	)

661 
	#DT_SYMTAB
 6

	)

662 
	#DT_RELA
 7

	)

663 
	#DT_RELASZ
 8

	)

664 
	#DT_RELAENT
 9

	)

665 
	#DT_STRSZ
 10

	)

666 
	#DT_SYMENT
 11

	)

667 
	#DT_INIT
 12

	)

668 
	#DT_FINI
 13

	)

669 
	#DT_SONAME
 14

	)

670 
	#DT_RPATH
 15

	)

671 
	#DT_SYMBOLIC
 16

	)

672 
	#DT_REL
 17

	)

673 
	#DT_RELSZ
 18

	)

674 
	#DT_RELENT
 19

	)

675 
	#DT_PLTREL
 20

	)

676 
	#DT_DEBUG
 21

	)

677 
	#DT_TEXTREL
 22

	)

678 
	#DT_JMPREL
 23

	)

679 
	#DT_BIND_NOW
 24

	)

680 
	#DT_INIT_ARRAY
 25

	)

681 
	#DT_FINI_ARRAY
 26

	)

682 
	#DT_INIT_ARRAYSZ
 27

	)

683 
	#DT_FINI_ARRAYSZ
 28

	)

684 
	#DT_RUNPATH
 29

	)

685 
	#DT_FLAGS
 30

	)

686 
	#DT_ENCODING
 32

	)

687 
	#DT_PREINIT_ARRAY
 32

	)

688 
	#DT_PREINIT_ARRAYSZ
 33

	)

689 
	#DT_NUM
 34

	)

690 
	#DT_LOOS
 0x6000000d

	)

691 
	#DT_HIOS
 0x6ffff000

	)

692 
	#DT_LOPROC
 0x70000000

	)

693 
	#DT_HIPROC
 0x7ffffff‡

	)

694 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

699 
	#DT_VALRNGLO
 0x6ffffd00

	)

700 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

701 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

702 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

703 
	#DT_CHECKSUM
 0x6ffffdf8

	)

704 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

705 
	#DT_MOVEENT
 0x6ffffdÁ

	)

706 
	#DT_MOVESZ
 0x6ffffdfb

	)

707 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

708 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

710 
	#DT_SYMINSZ
 0x6ffffd„

	)

711 
	#DT_SYMINENT
 0x6ffffdf‡

	)

712 
	#DT_VALRNGHI
 0x6ffffdff

	)

713 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

714 
	#DT_VALNUM
 12

	)

721 
	#DT_ADDRRNGLO
 0x6fff„00

	)

722 
	#DT_GNU_HASH
 0x6fff„f5

	)

723 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

724 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

725 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

726 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

727 
	#DT_CONFIG
 0x6fff„Á

	)

728 
	#DT_DEPAUDIT
 0x6fff„fb

	)

729 
	#DT_AUDIT
 0x6fff„f¯

	)

730 
	#DT_PLTPAD
 0x6fff„fd

	)

731 
	#DT_MOVETAB
 0x6fff„„

	)

732 
	#DT_SYMINFO
 0x6fff„f‡

	)

733 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

734 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

735 
	#DT_ADDRNUM
 11

	)

739 
	#DT_VERSYM
 0x6ffffff0

	)

741 
	#DT_RELACOUNT
 0x6ffffff9

	)

742 
	#DT_RELCOUNT
 0x6fffffÁ

	)

745 
	#DT_FLAGS_1
 0x6ffffffb

	)

746 
	#DT_VERDEF
 0x6ffffff¯

	)

748 
	#DT_VERDEFNUM
 0x6ffffffd

	)

749 
	#DT_VERNEED
 0x6fffff„

	)

751 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

752 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

753 
	#DT_VERSIONTAGNUM
 16

	)

757 
	#DT_AUXILIARY
 0x7ffffffd

	)

758 
	#DT_FILTER
 0x7ffffff‡

	)

759 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

760 
	#DT_EXTRANUM
 3

	)

763 
	#DF_ORIGIN
 0x00000001

	)

764 
	#DF_SYMBOLIC
 0x00000002

	)

765 
	#DF_TEXTREL
 0x00000004

	)

766 
	#DF_BIND_NOW
 0x00000008

	)

767 
	#DF_STATIC_TLS
 0x00000010

	)

771 
	#DF_1_NOW
 0x00000001

	)

772 
	#DF_1_GLOBAL
 0x00000002

	)

773 
	#DF_1_GROUP
 0x00000004

	)

774 
	#DF_1_NODELETE
 0x00000008

	)

775 
	#DF_1_LOADFLTR
 0x00000010

	)

776 
	#DF_1_INITFIRST
 0x00000020

	)

777 
	#DF_1_NOOPEN
 0x00000040

	)

778 
	#DF_1_ORIGIN
 0x00000080

	)

779 
	#DF_1_DIRECT
 0x00000100

	)

780 
	#DF_1_TRANS
 0x00000200

	)

781 
	#DF_1_INTERPOSE
 0x00000400

	)

782 
	#DF_1_NODEFLIB
 0x00000800

	)

783 
	#DF_1_NODUMP
 0x00001000

	)

784 
	#DF_1_CONFALT
 0x00002000

	)

785 
	#DF_1_ENDFILTEE
 0x00004000

	)

786 
	#DF_1_DISPRELDNE
 0x00008000

	)

787 
	#DF_1_DISPRELPND
 0x00010000

	)

790 
	#DTF_1_PARINIT
 0x00000001

	)

791 
	#DTF_1_CONFEXP
 0x00000002

	)

794 
	#DF_P1_LAZYLOAD
 0x00000001

	)

795 
	#DF_P1_GROUPPERM
 0x00000002

	)

802 
Elf32_HÆf
 
	mvd_vîsi⁄
;

803 
Elf32_HÆf
 
	mvd_Êags
;

804 
Elf32_HÆf
 
	mvd_ndx
;

805 
Elf32_HÆf
 
	mvd_˙t
;

806 
Elf32_W‹d
 
	mvd_hash
;

807 
Elf32_W‹d
 
	mvd_aux
;

808 
Elf32_W‹d
 
	mvd_√xt
;

810 } 
	tElf32_Vîdef
;

814 
Elf64_HÆf
 
	mvd_vîsi⁄
;

815 
Elf64_HÆf
 
	mvd_Êags
;

816 
Elf64_HÆf
 
	mvd_ndx
;

817 
Elf64_HÆf
 
	mvd_˙t
;

818 
Elf64_W‹d
 
	mvd_hash
;

819 
Elf64_W‹d
 
	mvd_aux
;

820 
Elf64_W‹d
 
	mvd_√xt
;

822 } 
	tElf64_Vîdef
;

826 
	#VER_DEF_NONE
 0

	)

827 
	#VER_DEF_CURRENT
 1

	)

828 
	#VER_DEF_NUM
 2

	)

831 
	#VER_FLG_BASE
 0x1

	)

832 
	#VER_FLG_WEAK
 0x2

	)

835 
	#VER_NDX_LOCAL
 0

	)

836 
	#VER_NDX_GLOBAL
 1

	)

837 
	#VER_NDX_LORESERVE
 0xff00

	)

838 
	#VER_NDX_ELIMINATE
 0xff01

	)

844 
Elf32_W‹d
 
	mvda_«me
;

845 
Elf32_W‹d
 
	mvda_√xt
;

847 } 
	tElf32_Vîdaux
;

851 
Elf64_W‹d
 
	mvda_«me
;

852 
Elf64_W‹d
 
	mvda_√xt
;

854 } 
	tElf64_Vîdaux
;

861 
Elf32_HÆf
 
	mvn_vîsi⁄
;

862 
Elf32_HÆf
 
	mvn_˙t
;

863 
Elf32_W‹d
 
	mvn_fûe
;

865 
Elf32_W‹d
 
	mvn_aux
;

866 
Elf32_W‹d
 
	mvn_√xt
;

868 } 
	tElf32_Vî√ed
;

872 
Elf64_HÆf
 
	mvn_vîsi⁄
;

873 
Elf64_HÆf
 
	mvn_˙t
;

874 
Elf64_W‹d
 
	mvn_fûe
;

876 
Elf64_W‹d
 
	mvn_aux
;

877 
Elf64_W‹d
 
	mvn_√xt
;

879 } 
	tElf64_Vî√ed
;

883 
	#VER_NEED_NONE
 0

	)

884 
	#VER_NEED_CURRENT
 1

	)

885 
	#VER_NEED_NUM
 2

	)

891 
Elf32_W‹d
 
	mv«_hash
;

892 
Elf32_HÆf
 
	mv«_Êags
;

893 
Elf32_HÆf
 
	mv«_Ÿhî
;

894 
Elf32_W‹d
 
	mv«_«me
;

895 
Elf32_W‹d
 
	mv«_√xt
;

897 } 
	tElf32_Vî«ux
;

901 
Elf64_W‹d
 
	mv«_hash
;

902 
Elf64_HÆf
 
	mv«_Êags
;

903 
Elf64_HÆf
 
	mv«_Ÿhî
;

904 
Elf64_W‹d
 
	mv«_«me
;

905 
Elf64_W‹d
 
	mv«_√xt
;

907 } 
	tElf64_Vî«ux
;

911 
	#VER_FLG_WEAK
 0x2

	)

925 
uöt32_t
 
	ma_ty≥
;

928 
uöt32_t
 
	ma_vÆ
;

932 } 
	ma_un
;

933 } 
	tElf32_auxv_t
;

937 
uöt64_t
 
	ma_ty≥
;

940 
uöt64_t
 
	ma_vÆ
;

944 } 
	ma_un
;

945 } 
	tElf64_auxv_t
;

949 
	#AT_NULL
 0

	)

950 
	#AT_IGNORE
 1

	)

951 
	#AT_EXECFD
 2

	)

952 
	#AT_PHDR
 3

	)

953 
	#AT_PHENT
 4

	)

954 
	#AT_PHNUM
 5

	)

955 
	#AT_PAGESZ
 6

	)

956 
	#AT_BASE
 7

	)

957 
	#AT_FLAGS
 8

	)

958 
	#AT_ENTRY
 9

	)

959 
	#AT_NOTELF
 10

	)

960 
	#AT_UID
 11

	)

961 
	#AT_EUID
 12

	)

962 
	#AT_GID
 13

	)

963 
	#AT_EGID
 14

	)

964 
	#AT_CLKTCK
 17

	)

967 
	#AT_PLATFORM
 15

	)

968 
	#AT_HWCAP
 16

	)

973 
	#AT_FPUCW
 18

	)

976 
	#AT_DCACHEBSIZE
 19

	)

977 
	#AT_ICACHEBSIZE
 20

	)

978 
	#AT_UCACHEBSIZE
 21

	)

982 
	#AT_IGNOREPPC
 22

	)

984 
	#AT_SECURE
 23

	)

986 
	#AT_BASE_PLATFORM
 24

	)

988 
	#AT_RANDOM
 25

	)

990 
	#AT_EXECFN
 31

	)

994 
	#AT_SYSINFO
 32

	)

995 
	#AT_SYSINFO_EHDR
 33

	)

999 
	#AT_L1I_CACHESHAPE
 34

	)

1000 
	#AT_L1D_CACHESHAPE
 35

	)

1001 
	#AT_L2_CACHESHAPE
 36

	)

1002 
	#AT_L3_CACHESHAPE
 37

	)

1009 
Elf32_W‹d
 
	mn_«mesz
;

1010 
Elf32_W‹d
 
	mn_descsz
;

1011 
Elf32_W‹d
 
	mn_ty≥
;

1012 } 
	tElf32_Nhdr
;

1016 
Elf64_W‹d
 
	mn_«mesz
;

1017 
Elf64_W‹d
 
	mn_descsz
;

1018 
Elf64_W‹d
 
	mn_ty≥
;

1019 } 
	tElf64_Nhdr
;

1024 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1027 
	#ELF_NOTE_GNU
 "GNU"

	)

1033 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1044 
	#NT_GNU_ABI_TAG
 1

	)

1045 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1049 
	#ELF_NOTE_OS_LINUX
 0

	)

1050 
	#ELF_NOTE_OS_GNU
 1

	)

1051 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1052 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1060 
	#NT_GNU_HWCAP
 2

	)

1064 
	#NT_GNU_BUILD_ID
 3

	)

1067 
	#NT_GNU_GOLD_VERSION
 4

	)

1073 
Elf32_Xw‹d
 
	mm_vÆue
;

1074 
Elf32_W‹d
 
	mm_öfo
;

1075 
Elf32_W‹d
 
	mm_poff£t
;

1076 
Elf32_HÆf
 
	mm_ª≥©
;

1077 
Elf32_HÆf
 
	mm_°ride
;

1078 } 
	tElf32_Move
;

1082 
Elf64_Xw‹d
 
	mm_vÆue
;

1083 
Elf64_Xw‹d
 
	mm_öfo
;

1084 
Elf64_Xw‹d
 
	mm_poff£t
;

1085 
Elf64_HÆf
 
	mm_ª≥©
;

1086 
Elf64_HÆf
 
	mm_°ride
;

1087 } 
	tElf64_Move
;

1090 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1091 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1092 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1094 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1095 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1096 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1102 
	#EF_CPU32
 0x00810000

	)

1106 
	#R_68K_NONE
 0

	)

1107 
	#R_68K_32
 1

	)

1108 
	#R_68K_16
 2

	)

1109 
	#R_68K_8
 3

	)

1110 
	#R_68K_PC32
 4

	)

1111 
	#R_68K_PC16
 5

	)

1112 
	#R_68K_PC8
 6

	)

1113 
	#R_68K_GOT32
 7

	)

1114 
	#R_68K_GOT16
 8

	)

1115 
	#R_68K_GOT8
 9

	)

1116 
	#R_68K_GOT32O
 10

	)

1117 
	#R_68K_GOT16O
 11

	)

1118 
	#R_68K_GOT8O
 12

	)

1119 
	#R_68K_PLT32
 13

	)

1120 
	#R_68K_PLT16
 14

	)

1121 
	#R_68K_PLT8
 15

	)

1122 
	#R_68K_PLT32O
 16

	)

1123 
	#R_68K_PLT16O
 17

	)

1124 
	#R_68K_PLT8O
 18

	)

1125 
	#R_68K_COPY
 19

	)

1126 
	#R_68K_GLOB_DAT
 20

	)

1127 
	#R_68K_JMP_SLOT
 21

	)

1128 
	#R_68K_RELATIVE
 22

	)

1129 
	#R_68K_TLS_GD32
 25

	)

1130 
	#R_68K_TLS_GD16
 26

	)

1131 
	#R_68K_TLS_GD8
 27

	)

1132 
	#R_68K_TLS_LDM32
 28

	)

1133 
	#R_68K_TLS_LDM16
 29

	)

1134 
	#R_68K_TLS_LDM8
 30

	)

1135 
	#R_68K_TLS_LDO32
 31

	)

1136 
	#R_68K_TLS_LDO16
 32

	)

1137 
	#R_68K_TLS_LDO8
 33

	)

1138 
	#R_68K_TLS_IE32
 34

	)

1139 
	#R_68K_TLS_IE16
 35

	)

1140 
	#R_68K_TLS_IE8
 36

	)

1141 
	#R_68K_TLS_LE32
 37

	)

1143 
	#R_68K_TLS_LE16
 38

	)

1145 
	#R_68K_TLS_LE8
 39

	)

1147 
	#R_68K_TLS_DTPMOD32
 40

	)

1148 
	#R_68K_TLS_DTPREL32
 41

	)

1149 
	#R_68K_TLS_TPREL32
 42

	)

1151 
	#R_68K_NUM
 43

	)

1157 
	#R_386_NONE
 0

	)

1158 
	#R_386_32
 1

	)

1159 
	#R_386_PC32
 2

	)

1160 
	#R_386_GOT32
 3

	)

1161 
	#R_386_PLT32
 4

	)

1162 
	#R_386_COPY
 5

	)

1163 
	#R_386_GLOB_DAT
 6

	)

1164 
	#R_386_JMP_SLOT
 7

	)

1165 
	#R_386_RELATIVE
 8

	)

1166 
	#R_386_GOTOFF
 9

	)

1167 
	#R_386_GOTPC
 10

	)

1168 
	#R_386_32PLT
 11

	)

1169 
	#R_386_TLS_TPOFF
 14

	)

1170 
	#R_386_TLS_IE
 15

	)

1172 
	#R_386_TLS_GOTIE
 16

	)

1174 
	#R_386_TLS_LE
 17

	)

1176 
	#R_386_TLS_GD
 18

	)

1178 
	#R_386_TLS_LDM
 19

	)

1181 
	#R_386_16
 20

	)

1182 
	#R_386_PC16
 21

	)

1183 
	#R_386_8
 22

	)

1184 
	#R_386_PC8
 23

	)

1185 
	#R_386_TLS_GD_32
 24

	)

1187 
	#R_386_TLS_GD_PUSH
 25

	)

1188 
	#R_386_TLS_GD_CALL
 26

	)

1190 
	#R_386_TLS_GD_POP
 27

	)

1191 
	#R_386_TLS_LDM_32
 28

	)

1193 
	#R_386_TLS_LDM_PUSH
 29

	)

1194 
	#R_386_TLS_LDM_CALL
 30

	)

1196 
	#R_386_TLS_LDM_POP
 31

	)

1197 
	#R_386_TLS_LDO_32
 32

	)

1198 
	#R_386_TLS_IE_32
 33

	)

1200 
	#R_386_TLS_LE_32
 34

	)

1202 
	#R_386_TLS_DTPMOD32
 35

	)

1203 
	#R_386_TLS_DTPOFF32
 36

	)

1204 
	#R_386_TLS_TPOFF32
 37

	)

1206 
	#R_386_TLS_GOTDESC
 39

	)

1207 
	#R_386_TLS_DESC_CALL
 40

	)

1210 
	#R_386_TLS_DESC
 41

	)

1214 
	#R_386_IRELATIVE
 42

	)

1216 
	#R_386_NUM
 43

	)

1222 
	#STT_SPARC_REGISTER
 13

	)

1226 
	#EF_SPARCV9_MM
 3

	)

1227 
	#EF_SPARCV9_TSO
 0

	)

1228 
	#EF_SPARCV9_PSO
 1

	)

1229 
	#EF_SPARCV9_RMO
 2

	)

1230 
	#EF_SPARC_LEDATA
 0x800000

	)

1231 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1232 
	#EF_SPARC_32PLUS
 0x000100

	)

1233 
	#EF_SPARC_SUN_US1
 0x000200

	)

1234 
	#EF_SPARC_HAL_R1
 0x000400

	)

1235 
	#EF_SPARC_SUN_US3
 0x000800

	)

1239 
	#R_SPARC_NONE
 0

	)

1240 
	#R_SPARC_8
 1

	)

1241 
	#R_SPARC_16
 2

	)

1242 
	#R_SPARC_32
 3

	)

1243 
	#R_SPARC_DISP8
 4

	)

1244 
	#R_SPARC_DISP16
 5

	)

1245 
	#R_SPARC_DISP32
 6

	)

1246 
	#R_SPARC_WDISP30
 7

	)

1247 
	#R_SPARC_WDISP22
 8

	)

1248 
	#R_SPARC_HI22
 9

	)

1249 
	#R_SPARC_22
 10

	)

1250 
	#R_SPARC_13
 11

	)

1251 
	#R_SPARC_LO10
 12

	)

1252 
	#R_SPARC_GOT10
 13

	)

1253 
	#R_SPARC_GOT13
 14

	)

1254 
	#R_SPARC_GOT22
 15

	)

1255 
	#R_SPARC_PC10
 16

	)

1256 
	#R_SPARC_PC22
 17

	)

1257 
	#R_SPARC_WPLT30
 18

	)

1258 
	#R_SPARC_COPY
 19

	)

1259 
	#R_SPARC_GLOB_DAT
 20

	)

1260 
	#R_SPARC_JMP_SLOT
 21

	)

1261 
	#R_SPARC_RELATIVE
 22

	)

1262 
	#R_SPARC_UA32
 23

	)

1266 
	#R_SPARC_PLT32
 24

	)

1267 
	#R_SPARC_HIPLT22
 25

	)

1268 
	#R_SPARC_LOPLT10
 26

	)

1269 
	#R_SPARC_PCPLT32
 27

	)

1270 
	#R_SPARC_PCPLT22
 28

	)

1271 
	#R_SPARC_PCPLT10
 29

	)

1272 
	#R_SPARC_10
 30

	)

1273 
	#R_SPARC_11
 31

	)

1274 
	#R_SPARC_64
 32

	)

1275 
	#R_SPARC_OLO10
 33

	)

1276 
	#R_SPARC_HH22
 34

	)

1277 
	#R_SPARC_HM10
 35

	)

1278 
	#R_SPARC_LM22
 36

	)

1279 
	#R_SPARC_PC_HH22
 37

	)

1280 
	#R_SPARC_PC_HM10
 38

	)

1281 
	#R_SPARC_PC_LM22
 39

	)

1282 
	#R_SPARC_WDISP16
 40

	)

1283 
	#R_SPARC_WDISP19
 41

	)

1284 
	#R_SPARC_GLOB_JMP
 42

	)

1285 
	#R_SPARC_7
 43

	)

1286 
	#R_SPARC_5
 44

	)

1287 
	#R_SPARC_6
 45

	)

1288 
	#R_SPARC_DISP64
 46

	)

1289 
	#R_SPARC_PLT64
 47

	)

1290 
	#R_SPARC_HIX22
 48

	)

1291 
	#R_SPARC_LOX10
 49

	)

1292 
	#R_SPARC_H44
 50

	)

1293 
	#R_SPARC_M44
 51

	)

1294 
	#R_SPARC_L44
 52

	)

1295 
	#R_SPARC_REGISTER
 53

	)

1296 
	#R_SPARC_UA64
 54

	)

1297 
	#R_SPARC_UA16
 55

	)

1298 
	#R_SPARC_TLS_GD_HI22
 56

	)

1299 
	#R_SPARC_TLS_GD_LO10
 57

	)

1300 
	#R_SPARC_TLS_GD_ADD
 58

	)

1301 
	#R_SPARC_TLS_GD_CALL
 59

	)

1302 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1303 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1304 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1305 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1306 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1307 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1308 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1309 
	#R_SPARC_TLS_IE_HI22
 67

	)

1310 
	#R_SPARC_TLS_IE_LO10
 68

	)

1311 
	#R_SPARC_TLS_IE_LD
 69

	)

1312 
	#R_SPARC_TLS_IE_LDX
 70

	)

1313 
	#R_SPARC_TLS_IE_ADD
 71

	)

1314 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1315 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1316 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1317 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1318 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1319 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1320 
	#R_SPARC_TLS_TPOFF32
 78

	)

1321 
	#R_SPARC_TLS_TPOFF64
 79

	)

1322 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1323 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1324 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1325 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1326 
	#R_SPARC_GOTDATA_OP
 84

	)

1327 
	#R_SPARC_H34
 85

	)

1328 
	#R_SPARC_SIZE32
 86

	)

1329 
	#R_SPARC_SIZE64
 87

	)

1330 
	#R_SPARC_JMP_IREL
 248

	)

1331 
	#R_SPARC_IRELATIVE
 249

	)

1332 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1333 
	#R_SPARC_GNU_VTENTRY
 251

	)

1334 
	#R_SPARC_REV32
 252

	)

1336 
	#R_SPARC_NUM
 253

	)

1340 
	#DT_SPARC_REGISTER
 0x70000001

	)

1341 
	#DT_SPARC_NUM
 2

	)

1347 
	#EF_MIPS_NOREORDER
 1

	)

1348 
	#EF_MIPS_PIC
 2

	)

1349 
	#EF_MIPS_CPIC
 4

	)

1350 
	#EF_MIPS_XGOT
 8

	)

1351 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1352 
	#EF_MIPS_ABI2
 32

	)

1353 
	#EF_MIPS_ABI_ON32
 64

	)

1354 
	#EF_MIPS_ARCH
 0xf0000000

	)

1358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1363 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1364 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1368 
	#E_MIPS_ARCH_1
 0x00000000

	)

1369 
	#E_MIPS_ARCH_2
 0x10000000

	)

1370 
	#E_MIPS_ARCH_3
 0x20000000

	)

1371 
	#E_MIPS_ARCH_4
 0x30000000

	)

1372 
	#E_MIPS_ARCH_5
 0x40000000

	)

1373 
	#E_MIPS_ARCH_32
 0x60000000

	)

1374 
	#E_MIPS_ARCH_64
 0x70000000

	)

1378 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1379 
	#SHN_MIPS_TEXT
 0xff01

	)

1380 
	#SHN_MIPS_DATA
 0xff02

	)

1381 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1382 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1386 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1387 
	#SHT_MIPS_MSYM
 0x70000001

	)

1388 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1389 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1390 
	#SHT_MIPS_UCODE
 0x70000004

	)

1391 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1392 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1393 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1394 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1395 
	#SHT_MIPS_RELD
 0x70000009

	)

1396 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1397 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1398 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1399 
	#SHT_MIPS_SHDR
 0x70000010

	)

1400 
	#SHT_MIPS_FDESC
 0x70000011

	)

1401 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1402 
	#SHT_MIPS_DENSE
 0x70000013

	)

1403 
	#SHT_MIPS_PDESC
 0x70000014

	)

1404 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1405 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1406 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1407 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1408 
	#SHT_MIPS_LINE
 0x70000019

	)

1409 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1410 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1411 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1412 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1413 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1414 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1415 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1416 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1417 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1418 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1419 
	#SHT_MIPS_XLATE
 0x70000024

	)

1420 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1421 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1422 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1423 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1424 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1428 
	#SHF_MIPS_GPREL
 0x10000000

	)

1429 
	#SHF_MIPS_MERGE
 0x20000000

	)

1430 
	#SHF_MIPS_ADDR
 0x40000000

	)

1431 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1432 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1433 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1434 
	#SHF_MIPS_NAMES
 0x02000000

	)

1435 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1441 
	#STO_MIPS_DEFAULT
 0x0

	)

1442 
	#STO_MIPS_INTERNAL
 0x1

	)

1443 
	#STO_MIPS_HIDDEN
 0x2

	)

1444 
	#STO_MIPS_PROTECTED
 0x3

	)

1445 
	#STO_MIPS_PLT
 0x8

	)

1446 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1449 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1457 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1458 
Elf32_W‹d
 
	mgt_unu£d
;

1459 } 
	mgt_hódî
;

1462 
Elf32_W‹d
 
	mgt_g_vÆue
;

1463 
Elf32_W‹d
 
	mgt_byãs
;

1464 } 
	mgt_íåy
;

1465 } 
	tElf32_g±ab
;

1471 
Elf32_W‹d
 
	mri_g¥mask
;

1472 
Elf32_W‹d
 
	mri_˝rmask
[4];

1473 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1474 } 
	tElf32_RegInfo
;

1480 
	mköd
;

1482 
	msize
;

1483 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1485 
Elf32_W‹d
 
	möfo
;

1486 } 
	tElf_O±i⁄s
;

1490 
	#ODK_NULL
 0

	)

1491 
	#ODK_REGINFO
 1

	)

1492 
	#ODK_EXCEPTIONS
 2

	)

1493 
	#ODK_PAD
 3

	)

1494 
	#ODK_HWPATCH
 4

	)

1495 
	#ODK_FILL
 5

	)

1496 
	#ODK_TAGS
 6

	)

1497 
	#ODK_HWAND
 7

	)

1498 
	#ODK_HWOR
 8

	)

1502 
	#OEX_FPU_MIN
 0x1‡

	)

1503 
	#OEX_FPU_MAX
 0x1f00

	)

1504 
	#OEX_PAGE0
 0x10000

	)

1505 
	#OEX_SMM
 0x20000

	)

1506 
	#OEX_FPDBUG
 0x40000

	)

1507 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1508 
	#OEX_DISMISS
 0x80000

	)

1510 
	#OEX_FPU_INVAL
 0x10

	)

1511 
	#OEX_FPU_DIV0
 0x08

	)

1512 
	#OEX_FPU_OFLO
 0x04

	)

1513 
	#OEX_FPU_UFLO
 0x02

	)

1514 
	#OEX_FPU_INEX
 0x01

	)

1518 
	#OHW_R4KEOP
 0x1

	)

1519 
	#OHW_R8KPFETCH
 0x2

	)

1520 
	#OHW_R5KEOP
 0x4

	)

1521 
	#OHW_R5KCVTL
 0x8

	)

1523 
	#OPAD_PREFIX
 0x1

	)

1524 
	#OPAD_POSTFIX
 0x2

	)

1525 
	#OPAD_SYMBOL
 0x4

	)

1531 
Elf32_W‹d
 
	mhwp_Êags1
;

1532 
Elf32_W‹d
 
	mhwp_Êags2
;

1533 } 
	tElf_O±i⁄s_Hw
;

1537 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1538 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1542 
	#R_MIPS_NONE
 0

	)

1543 
	#R_MIPS_16
 1

	)

1544 
	#R_MIPS_32
 2

	)

1545 
	#R_MIPS_REL32
 3

	)

1546 
	#R_MIPS_26
 4

	)

1547 
	#R_MIPS_HI16
 5

	)

1548 
	#R_MIPS_LO16
 6

	)

1549 
	#R_MIPS_GPREL16
 7

	)

1550 
	#R_MIPS_LITERAL
 8

	)

1551 
	#R_MIPS_GOT16
 9

	)

1552 
	#R_MIPS_PC16
 10

	)

1553 
	#R_MIPS_CALL16
 11

	)

1554 
	#R_MIPS_GPREL32
 12

	)

1556 
	#R_MIPS_SHIFT5
 16

	)

1557 
	#R_MIPS_SHIFT6
 17

	)

1558 
	#R_MIPS_64
 18

	)

1559 
	#R_MIPS_GOT_DISP
 19

	)

1560 
	#R_MIPS_GOT_PAGE
 20

	)

1561 
	#R_MIPS_GOT_OFST
 21

	)

1562 
	#R_MIPS_GOT_HI16
 22

	)

1563 
	#R_MIPS_GOT_LO16
 23

	)

1564 
	#R_MIPS_SUB
 24

	)

1565 
	#R_MIPS_INSERT_A
 25

	)

1566 
	#R_MIPS_INSERT_B
 26

	)

1567 
	#R_MIPS_DELETE
 27

	)

1568 
	#R_MIPS_HIGHER
 28

	)

1569 
	#R_MIPS_HIGHEST
 29

	)

1570 
	#R_MIPS_CALL_HI16
 30

	)

1571 
	#R_MIPS_CALL_LO16
 31

	)

1572 
	#R_MIPS_SCN_DISP
 32

	)

1573 
	#R_MIPS_REL16
 33

	)

1574 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1575 
	#R_MIPS_PJUMP
 35

	)

1576 
	#R_MIPS_RELGOT
 36

	)

1577 
	#R_MIPS_JALR
 37

	)

1578 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1579 
	#R_MIPS_TLS_DTPREL32
 39

	)

1580 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1581 
	#R_MIPS_TLS_DTPREL64
 41

	)

1582 
	#R_MIPS_TLS_GD
 42

	)

1583 
	#R_MIPS_TLS_LDM
 43

	)

1584 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1585 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1586 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1587 
	#R_MIPS_TLS_TPREL32
 47

	)

1588 
	#R_MIPS_TLS_TPREL64
 48

	)

1589 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1590 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1591 
	#R_MIPS_GLOB_DAT
 51

	)

1592 
	#R_MIPS_COPY
 126

	)

1593 
	#R_MIPS_JUMP_SLOT
 127

	)

1595 
	#R_MIPS_NUM
 128

	)

1599 
	#PT_MIPS_REGINFO
 0x70000000

	)

1600 
	#PT_MIPS_RTPROC
 0x70000001

	)

1601 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PF_MIPS_LOCAL
 0x10000000

	)

1609 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1610 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1611 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1612 
	#DT_MIPS_IVERSION
 0x70000004

	)

1613 
	#DT_MIPS_FLAGS
 0x70000005

	)

1614 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1615 
	#DT_MIPS_MSYM
 0x70000007

	)

1616 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1617 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1618 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1619 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1620 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1621 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1622 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1623 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1624 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1625 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1626 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1627 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1629 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1630 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1632 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1633 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1635 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1637 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1639 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1641 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1643 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1644 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1645 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1646 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1647 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1648 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1649 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1650 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1651 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1652 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1653 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1654 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1656 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1658 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1659 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1660 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1662 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1666 
	#DT_MIPS_RWPLT
 0x70000034

	)

1667 
	#DT_MIPS_NUM
 0x35

	)

1671 
	#RHF_NONE
 0

	)

1672 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1673 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1674 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1675 
	#RHF_NO_MOVE
 (1 << 3)

	)

1676 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1677 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1678 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1679 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1680 
	#RHF_PIXIE
 (1 << 8)

	)

1681 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1682 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1683 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1684 
	#RHF_CORD
 (1 << 12)

	)

1685 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1686 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1692 
Elf32_W‹d
 
	ml_«me
;

1693 
Elf32_W‹d
 
	ml_time_°amp
;

1694 
Elf32_W‹d
 
	ml_checksum
;

1695 
Elf32_W‹d
 
	ml_vîsi⁄
;

1696 
Elf32_W‹d
 
	ml_Êags
;

1697 } 
	tElf32_Lib
;

1701 
Elf64_W‹d
 
	ml_«me
;

1702 
Elf64_W‹d
 
	ml_time_°amp
;

1703 
Elf64_W‹d
 
	ml_checksum
;

1704 
Elf64_W‹d
 
	ml_vîsi⁄
;

1705 
Elf64_W‹d
 
	ml_Êags
;

1706 } 
	tElf64_Lib
;

1711 
	#LL_NONE
 0

	)

1712 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1713 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1714 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1715 
	#LL_EXPORTS
 (1 << 3)

	)

1716 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1717 
	#LL_DELTA
 (1 << 5)

	)

1721 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1728 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1729 
	#EF_PARISC_EXT
 0x00020000

	)

1730 
	#EF_PARISC_LSB
 0x00040000

	)

1731 
	#EF_PARISC_WIDE
 0x00080000

	)

1732 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1734 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1735 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1739 
	#EFA_PARISC_1_0
 0x020b

	)

1740 
	#EFA_PARISC_1_1
 0x0210

	)

1741 
	#EFA_PARISC_2_0
 0x0214

	)

1745 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1747 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1751 
	#SHT_PARISC_EXT
 0x70000000

	)

1752 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1753 
	#SHT_PARISC_DOC
 0x70000002

	)

1757 
	#SHF_PARISC_SHORT
 0x20000000

	)

1758 
	#SHF_PARISC_HUGE
 0x40000000

	)

1759 
	#SHF_PARISC_SBP
 0x80000000

	)

1763 
	#STT_PARISC_MILLICODE
 13

	)

1765 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1766 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1770 
	#R_PARISC_NONE
 0

	)

1771 
	#R_PARISC_DIR32
 1

	)

1772 
	#R_PARISC_DIR21L
 2

	)

1773 
	#R_PARISC_DIR17R
 3

	)

1774 
	#R_PARISC_DIR17F
 4

	)

1775 
	#R_PARISC_DIR14R
 6

	)

1776 
	#R_PARISC_PCREL32
 9

	)

1777 
	#R_PARISC_PCREL21L
 10

	)

1778 
	#R_PARISC_PCREL17R
 11

	)

1779 
	#R_PARISC_PCREL17F
 12

	)

1780 
	#R_PARISC_PCREL14R
 14

	)

1781 
	#R_PARISC_DPREL21L
 18

	)

1782 
	#R_PARISC_DPREL14R
 22

	)

1783 
	#R_PARISC_GPREL21L
 26

	)

1784 
	#R_PARISC_GPREL14R
 30

	)

1785 
	#R_PARISC_LTOFF21L
 34

	)

1786 
	#R_PARISC_LTOFF14R
 38

	)

1787 
	#R_PARISC_SECREL32
 41

	)

1788 
	#R_PARISC_SEGBASE
 48

	)

1789 
	#R_PARISC_SEGREL32
 49

	)

1790 
	#R_PARISC_PLTOFF21L
 50

	)

1791 
	#R_PARISC_PLTOFF14R
 54

	)

1792 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1793 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1794 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1795 
	#R_PARISC_FPTR64
 64

	)

1796 
	#R_PARISC_PLABEL32
 65

	)

1797 
	#R_PARISC_PLABEL21L
 66

	)

1798 
	#R_PARISC_PLABEL14R
 70

	)

1799 
	#R_PARISC_PCREL64
 72

	)

1800 
	#R_PARISC_PCREL22F
 74

	)

1801 
	#R_PARISC_PCREL14WR
 75

	)

1802 
	#R_PARISC_PCREL14DR
 76

	)

1803 
	#R_PARISC_PCREL16F
 77

	)

1804 
	#R_PARISC_PCREL16WF
 78

	)

1805 
	#R_PARISC_PCREL16DF
 79

	)

1806 
	#R_PARISC_DIR64
 80

	)

1807 
	#R_PARISC_DIR14WR
 83

	)

1808 
	#R_PARISC_DIR14DR
 84

	)

1809 
	#R_PARISC_DIR16F
 85

	)

1810 
	#R_PARISC_DIR16WF
 86

	)

1811 
	#R_PARISC_DIR16DF
 87

	)

1812 
	#R_PARISC_GPREL64
 88

	)

1813 
	#R_PARISC_GPREL14WR
 91

	)

1814 
	#R_PARISC_GPREL14DR
 92

	)

1815 
	#R_PARISC_GPREL16F
 93

	)

1816 
	#R_PARISC_GPREL16WF
 94

	)

1817 
	#R_PARISC_GPREL16DF
 95

	)

1818 
	#R_PARISC_LTOFF64
 96

	)

1819 
	#R_PARISC_LTOFF14WR
 99

	)

1820 
	#R_PARISC_LTOFF14DR
 100

	)

1821 
	#R_PARISC_LTOFF16F
 101

	)

1822 
	#R_PARISC_LTOFF16WF
 102

	)

1823 
	#R_PARISC_LTOFF16DF
 103

	)

1824 
	#R_PARISC_SECREL64
 104

	)

1825 
	#R_PARISC_SEGREL64
 112

	)

1826 
	#R_PARISC_PLTOFF14WR
 115

	)

1827 
	#R_PARISC_PLTOFF14DR
 116

	)

1828 
	#R_PARISC_PLTOFF16F
 117

	)

1829 
	#R_PARISC_PLTOFF16WF
 118

	)

1830 
	#R_PARISC_PLTOFF16DF
 119

	)

1831 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1832 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1833 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1834 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1835 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1836 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1837 
	#R_PARISC_LORESERVE
 128

	)

1838 
	#R_PARISC_COPY
 128

	)

1839 
	#R_PARISC_IPLT
 129

	)

1840 
	#R_PARISC_EPLT
 130

	)

1841 
	#R_PARISC_TPREL32
 153

	)

1842 
	#R_PARISC_TPREL21L
 154

	)

1843 
	#R_PARISC_TPREL14R
 158

	)

1844 
	#R_PARISC_LTOFF_TP21L
 162

	)

1845 
	#R_PARISC_LTOFF_TP14R
 166

	)

1846 
	#R_PARISC_LTOFF_TP14F
 167

	)

1847 
	#R_PARISC_TPREL64
 216

	)

1848 
	#R_PARISC_TPREL14WR
 219

	)

1849 
	#R_PARISC_TPREL14DR
 220

	)

1850 
	#R_PARISC_TPREL16F
 221

	)

1851 
	#R_PARISC_TPREL16WF
 222

	)

1852 
	#R_PARISC_TPREL16DF
 223

	)

1853 
	#R_PARISC_LTOFF_TP64
 224

	)

1854 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1855 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1856 
	#R_PARISC_LTOFF_TP16F
 229

	)

1857 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1858 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1859 
	#R_PARISC_GNU_VTENTRY
 232

	)

1860 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1861 
	#R_PARISC_TLS_GD21L
 234

	)

1862 
	#R_PARISC_TLS_GD14R
 235

	)

1863 
	#R_PARISC_TLS_GDCALL
 236

	)

1864 
	#R_PARISC_TLS_LDM21L
 237

	)

1865 
	#R_PARISC_TLS_LDM14R
 238

	)

1866 
	#R_PARISC_TLS_LDMCALL
 239

	)

1867 
	#R_PARISC_TLS_LDO21L
 240

	)

1868 
	#R_PARISC_TLS_LDO14R
 241

	)

1869 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1870 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1871 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1872 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1873 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1874 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1875 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1876 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1877 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1878 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1879 
	#R_PARISC_HIRESERVE
 255

	)

1883 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1884 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1885 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1886 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1887 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1888 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1889 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1890 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1891 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1892 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1893 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1894 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1895 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1896 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1897 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1899 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1900 
	#PT_PARISC_UNWIND
 0x70000001

	)

1904 
	#PF_PARISC_SBP
 0x08000000

	)

1906 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1907 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1908 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1909 
	#PF_HP_CODE
 0x01000000

	)

1910 
	#PF_HP_MODIFY
 0x02000000

	)

1911 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1912 
	#PF_HP_SBP
 0x08000000

	)

1919 
	#EF_ALPHA_32BIT
 1

	)

1920 
	#EF_ALPHA_CANRELAX
 2

	)

1925 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1926 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1930 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1933 
	#STO_ALPHA_NOPV
 0x80

	)

1934 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1938 
	#R_ALPHA_NONE
 0

	)

1939 
	#R_ALPHA_REFLONG
 1

	)

1940 
	#R_ALPHA_REFQUAD
 2

	)

1941 
	#R_ALPHA_GPREL32
 3

	)

1942 
	#R_ALPHA_LITERAL
 4

	)

1943 
	#R_ALPHA_LITUSE
 5

	)

1944 
	#R_ALPHA_GPDISP
 6

	)

1945 
	#R_ALPHA_BRADDR
 7

	)

1946 
	#R_ALPHA_HINT
 8

	)

1947 
	#R_ALPHA_SREL16
 9

	)

1948 
	#R_ALPHA_SREL32
 10

	)

1949 
	#R_ALPHA_SREL64
 11

	)

1950 
	#R_ALPHA_GPRELHIGH
 17

	)

1951 
	#R_ALPHA_GPRELLOW
 18

	)

1952 
	#R_ALPHA_GPREL16
 19

	)

1953 
	#R_ALPHA_COPY
 24

	)

1954 
	#R_ALPHA_GLOB_DAT
 25

	)

1955 
	#R_ALPHA_JMP_SLOT
 26

	)

1956 
	#R_ALPHA_RELATIVE
 27

	)

1957 
	#R_ALPHA_TLS_GD_HI
 28

	)

1958 
	#R_ALPHA_TLSGD
 29

	)

1959 
	#R_ALPHA_TLS_LDM
 30

	)

1960 
	#R_ALPHA_DTPMOD64
 31

	)

1961 
	#R_ALPHA_GOTDTPREL
 32

	)

1962 
	#R_ALPHA_DTPREL64
 33

	)

1963 
	#R_ALPHA_DTPRELHI
 34

	)

1964 
	#R_ALPHA_DTPRELLO
 35

	)

1965 
	#R_ALPHA_DTPREL16
 36

	)

1966 
	#R_ALPHA_GOTTPREL
 37

	)

1967 
	#R_ALPHA_TPREL64
 38

	)

1968 
	#R_ALPHA_TPRELHI
 39

	)

1969 
	#R_ALPHA_TPRELLO
 40

	)

1970 
	#R_ALPHA_TPREL16
 41

	)

1972 
	#R_ALPHA_NUM
 46

	)

1975 
	#LITUSE_ALPHA_ADDR
 0

	)

1976 
	#LITUSE_ALPHA_BASE
 1

	)

1977 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1978 
	#LITUSE_ALPHA_JSR
 3

	)

1979 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1980 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1983 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1984 
	#DT_ALPHA_NUM
 1

	)

1989 
	#EF_PPC_EMB
 0x80000000

	)

1992 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1993 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1997 
	#R_PPC_NONE
 0

	)

1998 
	#R_PPC_ADDR32
 1

	)

1999 
	#R_PPC_ADDR24
 2

	)

2000 
	#R_PPC_ADDR16
 3

	)

2001 
	#R_PPC_ADDR16_LO
 4

	)

2002 
	#R_PPC_ADDR16_HI
 5

	)

2003 
	#R_PPC_ADDR16_HA
 6

	)

2004 
	#R_PPC_ADDR14
 7

	)

2005 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2006 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2007 
	#R_PPC_REL24
 10

	)

2008 
	#R_PPC_REL14
 11

	)

2009 
	#R_PPC_REL14_BRTAKEN
 12

	)

2010 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2011 
	#R_PPC_GOT16
 14

	)

2012 
	#R_PPC_GOT16_LO
 15

	)

2013 
	#R_PPC_GOT16_HI
 16

	)

2014 
	#R_PPC_GOT16_HA
 17

	)

2015 
	#R_PPC_PLTREL24
 18

	)

2016 
	#R_PPC_COPY
 19

	)

2017 
	#R_PPC_GLOB_DAT
 20

	)

2018 
	#R_PPC_JMP_SLOT
 21

	)

2019 
	#R_PPC_RELATIVE
 22

	)

2020 
	#R_PPC_LOCAL24PC
 23

	)

2021 
	#R_PPC_UADDR32
 24

	)

2022 
	#R_PPC_UADDR16
 25

	)

2023 
	#R_PPC_REL32
 26

	)

2024 
	#R_PPC_PLT32
 27

	)

2025 
	#R_PPC_PLTREL32
 28

	)

2026 
	#R_PPC_PLT16_LO
 29

	)

2027 
	#R_PPC_PLT16_HI
 30

	)

2028 
	#R_PPC_PLT16_HA
 31

	)

2029 
	#R_PPC_SDAREL16
 32

	)

2030 
	#R_PPC_SECTOFF
 33

	)

2031 
	#R_PPC_SECTOFF_LO
 34

	)

2032 
	#R_PPC_SECTOFF_HI
 35

	)

2033 
	#R_PPC_SECTOFF_HA
 36

	)

2036 
	#R_PPC_TLS
 67

	)

2037 
	#R_PPC_DTPMOD32
 68

	)

2038 
	#R_PPC_TPREL16
 69

	)

2039 
	#R_PPC_TPREL16_LO
 70

	)

2040 
	#R_PPC_TPREL16_HI
 71

	)

2041 
	#R_PPC_TPREL16_HA
 72

	)

2042 
	#R_PPC_TPREL32
 73

	)

2043 
	#R_PPC_DTPREL16
 74

	)

2044 
	#R_PPC_DTPREL16_LO
 75

	)

2045 
	#R_PPC_DTPREL16_HI
 76

	)

2046 
	#R_PPC_DTPREL16_HA
 77

	)

2047 
	#R_PPC_DTPREL32
 78

	)

2048 
	#R_PPC_GOT_TLSGD16
 79

	)

2049 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2050 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2051 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2052 
	#R_PPC_GOT_TLSLD16
 83

	)

2053 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2054 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2055 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2056 
	#R_PPC_GOT_TPREL16
 87

	)

2057 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2058 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2059 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2060 
	#R_PPC_GOT_DTPREL16
 91

	)

2061 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2062 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2063 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2067 
	#R_PPC_EMB_NADDR32
 101

	)

2068 
	#R_PPC_EMB_NADDR16
 102

	)

2069 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2070 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2071 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2072 
	#R_PPC_EMB_SDAI16
 106

	)

2073 
	#R_PPC_EMB_SDA2I16
 107

	)

2074 
	#R_PPC_EMB_SDA2REL
 108

	)

2075 
	#R_PPC_EMB_SDA21
 109

	)

2076 
	#R_PPC_EMB_MRKREF
 110

	)

2077 
	#R_PPC_EMB_RELSEC16
 111

	)

2078 
	#R_PPC_EMB_RELST_LO
 112

	)

2079 
	#R_PPC_EMB_RELST_HI
 113

	)

2080 
	#R_PPC_EMB_RELST_HA
 114

	)

2081 
	#R_PPC_EMB_BIT_FLD
 115

	)

2082 
	#R_PPC_EMB_RELSDA
 116

	)

2085 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2086 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2087 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2088 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2089 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2090 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2093 
	#R_PPC_IRELATIVE
 248

	)

2096 
	#R_PPC_REL16
 249

	)

2097 
	#R_PPC_REL16_LO
 250

	)

2098 
	#R_PPC_REL16_HI
 251

	)

2099 
	#R_PPC_REL16_HA
 252

	)

2103 
	#R_PPC_TOC16
 255

	)

2106 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_PPC_NUM
 1

	)

2110 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2111 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2112 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2113 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2114 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2115 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2116 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2117 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2118 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2119 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2120 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2121 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2122 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2123 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2124 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2125 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2126 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2127 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2129 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2130 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2131 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2132 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2134 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2135 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2136 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2137 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2138 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2139 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2140 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2141 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2143 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2144 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2145 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2146 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2147 
	#R_PPC64_ADDR30
 37

	)

2148 
	#R_PPC64_ADDR64
 38

	)

2149 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2150 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2151 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2152 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2153 
	#R_PPC64_UADDR64
 43

	)

2154 
	#R_PPC64_REL64
 44

	)

2155 
	#R_PPC64_PLT64
 45

	)

2156 
	#R_PPC64_PLTREL64
 46

	)

2157 
	#R_PPC64_TOC16
 47

	)

2158 
	#R_PPC64_TOC16_LO
 48

	)

2159 
	#R_PPC64_TOC16_HI
 49

	)

2160 
	#R_PPC64_TOC16_HA
 50

	)

2161 
	#R_PPC64_TOC
 51

	)

2162 
	#R_PPC64_PLTGOT16
 52

	)

2163 
	#R_PPC64_PLTGOT16_LO
 53

	)

2164 
	#R_PPC64_PLTGOT16_HI
 54

	)

2165 
	#R_PPC64_PLTGOT16_HA
 55

	)

2167 
	#R_PPC64_ADDR16_DS
 56

	)

2168 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2169 
	#R_PPC64_GOT16_DS
 58

	)

2170 
	#R_PPC64_GOT16_LO_DS
 59

	)

2171 
	#R_PPC64_PLT16_LO_DS
 60

	)

2172 
	#R_PPC64_SECTOFF_DS
 61

	)

2173 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2174 
	#R_PPC64_TOC16_DS
 63

	)

2175 
	#R_PPC64_TOC16_LO_DS
 64

	)

2176 
	#R_PPC64_PLTGOT16_DS
 65

	)

2177 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2180 
	#R_PPC64_TLS
 67

	)

2181 
	#R_PPC64_DTPMOD64
 68

	)

2182 
	#R_PPC64_TPREL16
 69

	)

2183 
	#R_PPC64_TPREL16_LO
 70

	)

2184 
	#R_PPC64_TPREL16_HI
 71

	)

2185 
	#R_PPC64_TPREL16_HA
 72

	)

2186 
	#R_PPC64_TPREL64
 73

	)

2187 
	#R_PPC64_DTPREL16
 74

	)

2188 
	#R_PPC64_DTPREL16_LO
 75

	)

2189 
	#R_PPC64_DTPREL16_HI
 76

	)

2190 
	#R_PPC64_DTPREL16_HA
 77

	)

2191 
	#R_PPC64_DTPREL64
 78

	)

2192 
	#R_PPC64_GOT_TLSGD16
 79

	)

2193 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2194 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2195 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2196 
	#R_PPC64_GOT_TLSLD16
 83

	)

2197 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2198 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2199 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2200 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2201 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2202 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2203 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2204 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2205 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2206 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2207 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2208 
	#R_PPC64_TPREL16_DS
 95

	)

2209 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2210 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2211 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2212 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2213 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2214 
	#R_PPC64_DTPREL16_DS
 101

	)

2215 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2216 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2217 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2218 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2219 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2222 
	#R_PPC64_JMP_IREL
 247

	)

2223 
	#R_PPC64_IRELATIVE
 248

	)

2224 
	#R_PPC64_REL16
 249

	)

2225 
	#R_PPC64_REL16_LO
 250

	)

2226 
	#R_PPC64_REL16_HI
 251

	)

2227 
	#R_PPC64_REL16_HA
 252

	)

2230 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2231 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2232 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2233 
	#DT_PPC64_NUM
 3

	)

2239 
	#EF_ARM_RELEXEC
 0x01

	)

2240 
	#EF_ARM_HASENTRY
 0x02

	)

2241 
	#EF_ARM_INTERWORK
 0x04

	)

2242 
	#EF_ARM_APCS_26
 0x08

	)

2243 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2244 
	#EF_ARM_PIC
 0x20

	)

2245 
	#EF_ARM_ALIGN8
 0x40

	)

2246 
	#EF_ARM_NEW_ABI
 0x80

	)

2247 
	#EF_ARM_OLD_ABI
 0x100

	)

2248 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2249 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2250 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2255 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2256 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2257 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2258 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2261 
	#EF_ARM_BE8
 0x00800000

	)

2262 
	#EF_ARM_LE8
 0x00400000

	)

2264 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2265 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2266 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2267 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2268 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2269 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2270 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2273 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2274 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2277 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2278 
	#SHF_ARM_COMDEF
 0x80000000

	)

2282 
	#PF_ARM_SB
 0x10000000

	)

2284 
	#PF_ARM_PI
 0x20000000

	)

2285 
	#PF_ARM_ABS
 0x40000000

	)

2288 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2291 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2292 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2293 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2298 
	#R_ARM_NONE
 0

	)

2299 
	#R_ARM_PC24
 1

	)

2300 
	#R_ARM_ABS32
 2

	)

2301 
	#R_ARM_REL32
 3

	)

2302 
	#R_ARM_PC13
 4

	)

2303 
	#R_ARM_ABS16
 5

	)

2304 
	#R_ARM_ABS12
 6

	)

2305 
	#R_ARM_THM_ABS5
 7

	)

2306 
	#R_ARM_ABS8
 8

	)

2307 
	#R_ARM_SBREL32
 9

	)

2308 
	#R_ARM_THM_PC22
 10

	)

2309 
	#R_ARM_THM_PC8
 11

	)

2310 
	#R_ARM_AMP_VCALL9
 12

	)

2311 
	#R_ARM_SWI24
 13

	)

2312 
	#R_ARM_TLS_DESC
 13

	)

2313 
	#R_ARM_THM_SWI8
 14

	)

2314 
	#R_ARM_XPC25
 15

	)

2315 
	#R_ARM_THM_XPC22
 16

	)

2316 
	#R_ARM_TLS_DTPMOD32
 17

	)

2317 
	#R_ARM_TLS_DTPOFF32
 18

	)

2318 
	#R_ARM_TLS_TPOFF32
 19

	)

2319 
	#R_ARM_COPY
 20

	)

2320 
	#R_ARM_GLOB_DAT
 21

	)

2321 
	#R_ARM_JUMP_SLOT
 22

	)

2322 
	#R_ARM_RELATIVE
 23

	)

2323 
	#R_ARM_GOTOFF
 24

	)

2324 
	#R_ARM_GOTPC
 25

	)

2325 
	#R_ARM_GOT32
 26

	)

2326 
	#R_ARM_PLT32
 27

	)

2327 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2328 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2329 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2330 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2331 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2332 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2333 
	#R_ARM_TLS_GOTDESC
 90

	)

2334 
	#R_ARM_TLS_CALL
 91

	)

2335 
	#R_ARM_TLS_DESCSEQ
 92

	)

2336 
	#R_ARM_THM_TLS_CALL
 93

	)

2337 
	#R_ARM_GNU_VTENTRY
 100

	)

2338 
	#R_ARM_GNU_VTINHERIT
 101

	)

2339 
	#R_ARM_THM_PC11
 102

	)

2340 
	#R_ARM_THM_PC9
 103

	)

2341 
	#R_ARM_TLS_GD32
 104

	)

2343 
	#R_ARM_TLS_LDM32
 105

	)

2345 
	#R_ARM_TLS_LDO32
 106

	)

2347 
	#R_ARM_TLS_IE32
 107

	)

2349 
	#R_ARM_TLS_LE32
 108

	)

2351 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2352 
	#R_ARM_IRELATIVE
 160

	)

2353 
	#R_ARM_RXPC25
 249

	)

2354 
	#R_ARM_RSBREL32
 250

	)

2355 
	#R_ARM_THM_RPC22
 251

	)

2356 
	#R_ARM_RREL32
 252

	)

2357 
	#R_ARM_RABS22
 253

	)

2358 
	#R_ARM_RPC24
 254

	)

2359 
	#R_ARM_RBASE
 255

	)

2361 
	#R_ARM_NUM
 256

	)

2366 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2367 
	#EF_IA_64_ABI64
 0x00000010

	)

2368 
	#EF_IA_64_ARCH
 0xff000000

	)

2371 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2372 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2373 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2374 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2375 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2378 
	#PF_IA_64_NORECOV
 0x80000000

	)

2381 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2382 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2385 
	#SHF_IA_64_SHORT
 0x10000000

	)

2386 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2389 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2390 
	#DT_IA_64_NUM
 1

	)

2393 
	#R_IA64_NONE
 0x00

	)

2394 
	#R_IA64_IMM14
 0x21

	)

2395 
	#R_IA64_IMM22
 0x22

	)

2396 
	#R_IA64_IMM64
 0x23

	)

2397 
	#R_IA64_DIR32MSB
 0x24

	)

2398 
	#R_IA64_DIR32LSB
 0x25

	)

2399 
	#R_IA64_DIR64MSB
 0x26

	)

2400 
	#R_IA64_DIR64LSB
 0x27

	)

2401 
	#R_IA64_GPREL22
 0x2®

	)

2402 
	#R_IA64_GPREL64I
 0x2b

	)

2403 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2404 
	#R_IA64_GPREL32LSB
 0x2d

	)

2405 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2406 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2407 
	#R_IA64_LTOFF22
 0x32

	)

2408 
	#R_IA64_LTOFF64I
 0x33

	)

2409 
	#R_IA64_PLTOFF22
 0x3®

	)

2410 
	#R_IA64_PLTOFF64I
 0x3b

	)

2411 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2412 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2413 
	#R_IA64_FPTR64I
 0x43

	)

2414 
	#R_IA64_FPTR32MSB
 0x44

	)

2415 
	#R_IA64_FPTR32LSB
 0x45

	)

2416 
	#R_IA64_FPTR64MSB
 0x46

	)

2417 
	#R_IA64_FPTR64LSB
 0x47

	)

2418 
	#R_IA64_PCREL60B
 0x48

	)

2419 
	#R_IA64_PCREL21B
 0x49

	)

2420 
	#R_IA64_PCREL21M
 0x4®

	)

2421 
	#R_IA64_PCREL21F
 0x4b

	)

2422 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2423 
	#R_IA64_PCREL32LSB
 0x4d

	)

2424 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2425 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2426 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2427 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2428 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2429 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2430 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2431 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2432 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2433 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2434 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2435 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2436 
	#R_IA64_SECREL32MSB
 0x64

	)

2437 
	#R_IA64_SECREL32LSB
 0x65

	)

2438 
	#R_IA64_SECREL64MSB
 0x66

	)

2439 
	#R_IA64_SECREL64LSB
 0x67

	)

2440 
	#R_IA64_REL32MSB
 0x6¯

	)

2441 
	#R_IA64_REL32LSB
 0x6d

	)

2442 
	#R_IA64_REL64MSB
 0x6ê

	)

2443 
	#R_IA64_REL64LSB
 0x6‡

	)

2444 
	#R_IA64_LTV32MSB
 0x74

	)

2445 
	#R_IA64_LTV32LSB
 0x75

	)

2446 
	#R_IA64_LTV64MSB
 0x76

	)

2447 
	#R_IA64_LTV64LSB
 0x77

	)

2448 
	#R_IA64_PCREL21BI
 0x79

	)

2449 
	#R_IA64_PCREL22
 0x7®

	)

2450 
	#R_IA64_PCREL64I
 0x7b

	)

2451 
	#R_IA64_IPLTMSB
 0x80

	)

2452 
	#R_IA64_IPLTLSB
 0x81

	)

2453 
	#R_IA64_COPY
 0x84

	)

2454 
	#R_IA64_SUB
 0x85

	)

2455 
	#R_IA64_LTOFF22X
 0x86

	)

2456 
	#R_IA64_LDXMOV
 0x87

	)

2457 
	#R_IA64_TPREL14
 0x91

	)

2458 
	#R_IA64_TPREL22
 0x92

	)

2459 
	#R_IA64_TPREL64I
 0x93

	)

2460 
	#R_IA64_TPREL64MSB
 0x96

	)

2461 
	#R_IA64_TPREL64LSB
 0x97

	)

2462 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2463 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2464 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2465 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2466 
	#R_IA64_DTPREL14
 0xb1

	)

2467 
	#R_IA64_DTPREL22
 0xb2

	)

2468 
	#R_IA64_DTPREL64I
 0xb3

	)

2469 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2470 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2471 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2472 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2473 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2478 
	#EF_SH_MACH_MASK
 0x1f

	)

2479 
	#EF_SH_UNKNOWN
 0x0

	)

2480 
	#EF_SH1
 0x1

	)

2481 
	#EF_SH2
 0x2

	)

2482 
	#EF_SH3
 0x3

	)

2483 
	#EF_SH_DSP
 0x4

	)

2484 
	#EF_SH3_DSP
 0x5

	)

2485 
	#EF_SH4AL_DSP
 0x6

	)

2486 
	#EF_SH3E
 0x8

	)

2487 
	#EF_SH4
 0x9

	)

2488 
	#EF_SH2E
 0xb

	)

2489 
	#EF_SH4A
 0xc

	)

2490 
	#EF_SH2A
 0xd

	)

2491 
	#EF_SH4_NOFPU
 0x10

	)

2492 
	#EF_SH4A_NOFPU
 0x11

	)

2493 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2494 
	#EF_SH2A_NOFPU
 0x13

	)

2495 
	#EF_SH3_NOMMU
 0x14

	)

2496 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2497 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2498 
	#EF_SH2A_SH4
 0x17

	)

2499 
	#EF_SH2A_SH3E
 0x18

	)

2502 
	#R_SH_NONE
 0

	)

2503 
	#R_SH_DIR32
 1

	)

2504 
	#R_SH_REL32
 2

	)

2505 
	#R_SH_DIR8WPN
 3

	)

2506 
	#R_SH_IND12W
 4

	)

2507 
	#R_SH_DIR8WPL
 5

	)

2508 
	#R_SH_DIR8WPZ
 6

	)

2509 
	#R_SH_DIR8BP
 7

	)

2510 
	#R_SH_DIR8W
 8

	)

2511 
	#R_SH_DIR8L
 9

	)

2512 
	#R_SH_SWITCH16
 25

	)

2513 
	#R_SH_SWITCH32
 26

	)

2514 
	#R_SH_USES
 27

	)

2515 
	#R_SH_COUNT
 28

	)

2516 
	#R_SH_ALIGN
 29

	)

2517 
	#R_SH_CODE
 30

	)

2518 
	#R_SH_DATA
 31

	)

2519 
	#R_SH_LABEL
 32

	)

2520 
	#R_SH_SWITCH8
 33

	)

2521 
	#R_SH_GNU_VTINHERIT
 34

	)

2522 
	#R_SH_GNU_VTENTRY
 35

	)

2523 
	#R_SH_TLS_GD_32
 144

	)

2524 
	#R_SH_TLS_LD_32
 145

	)

2525 
	#R_SH_TLS_LDO_32
 146

	)

2526 
	#R_SH_TLS_IE_32
 147

	)

2527 
	#R_SH_TLS_LE_32
 148

	)

2528 
	#R_SH_TLS_DTPMOD32
 149

	)

2529 
	#R_SH_TLS_DTPOFF32
 150

	)

2530 
	#R_SH_TLS_TPOFF32
 151

	)

2531 
	#R_SH_GOT32
 160

	)

2532 
	#R_SH_PLT32
 161

	)

2533 
	#R_SH_COPY
 162

	)

2534 
	#R_SH_GLOB_DAT
 163

	)

2535 
	#R_SH_JMP_SLOT
 164

	)

2536 
	#R_SH_RELATIVE
 165

	)

2537 
	#R_SH_GOTOFF
 166

	)

2538 
	#R_SH_GOTPC
 167

	)

2540 
	#R_SH_NUM
 256

	)

2546 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2550 
	#R_390_NONE
 0

	)

2551 
	#R_390_8
 1

	)

2552 
	#R_390_12
 2

	)

2553 
	#R_390_16
 3

	)

2554 
	#R_390_32
 4

	)

2555 
	#R_390_PC32
 5

	)

2556 
	#R_390_GOT12
 6

	)

2557 
	#R_390_GOT32
 7

	)

2558 
	#R_390_PLT32
 8

	)

2559 
	#R_390_COPY
 9

	)

2560 
	#R_390_GLOB_DAT
 10

	)

2561 
	#R_390_JMP_SLOT
 11

	)

2562 
	#R_390_RELATIVE
 12

	)

2563 
	#R_390_GOTOFF32
 13

	)

2564 
	#R_390_GOTPC
 14

	)

2565 
	#R_390_GOT16
 15

	)

2566 
	#R_390_PC16
 16

	)

2567 
	#R_390_PC16DBL
 17

	)

2568 
	#R_390_PLT16DBL
 18

	)

2569 
	#R_390_PC32DBL
 19

	)

2570 
	#R_390_PLT32DBL
 20

	)

2571 
	#R_390_GOTPCDBL
 21

	)

2572 
	#R_390_64
 22

	)

2573 
	#R_390_PC64
 23

	)

2574 
	#R_390_GOT64
 24

	)

2575 
	#R_390_PLT64
 25

	)

2576 
	#R_390_GOTENT
 26

	)

2577 
	#R_390_GOTOFF16
 27

	)

2578 
	#R_390_GOTOFF64
 28

	)

2579 
	#R_390_GOTPLT12
 29

	)

2580 
	#R_390_GOTPLT16
 30

	)

2581 
	#R_390_GOTPLT32
 31

	)

2582 
	#R_390_GOTPLT64
 32

	)

2583 
	#R_390_GOTPLTENT
 33

	)

2584 
	#R_390_PLTOFF16
 34

	)

2585 
	#R_390_PLTOFF32
 35

	)

2586 
	#R_390_PLTOFF64
 36

	)

2587 
	#R_390_TLS_LOAD
 37

	)

2588 
	#R_390_TLS_GDCALL
 38

	)

2590 
	#R_390_TLS_LDCALL
 39

	)

2592 
	#R_390_TLS_GD32
 40

	)

2594 
	#R_390_TLS_GD64
 41

	)

2596 
	#R_390_TLS_GOTIE12
 42

	)

2598 
	#R_390_TLS_GOTIE32
 43

	)

2600 
	#R_390_TLS_GOTIE64
 44

	)

2602 
	#R_390_TLS_LDM32
 45

	)

2604 
	#R_390_TLS_LDM64
 46

	)

2606 
	#R_390_TLS_IE32
 47

	)

2608 
	#R_390_TLS_IE64
 48

	)

2610 
	#R_390_TLS_IEENT
 49

	)

2612 
	#R_390_TLS_LE32
 50

	)

2614 
	#R_390_TLS_LE64
 51

	)

2616 
	#R_390_TLS_LDO32
 52

	)

2618 
	#R_390_TLS_LDO64
 53

	)

2620 
	#R_390_TLS_DTPMOD
 54

	)

2621 
	#R_390_TLS_DTPOFF
 55

	)

2622 
	#R_390_TLS_TPOFF
 56

	)

2624 
	#R_390_20
 57

	)

2625 
	#R_390_GOT20
 58

	)

2626 
	#R_390_GOTPLT20
 59

	)

2627 
	#R_390_TLS_GOTIE20
 60

	)

2630 
	#R_390_NUM
 61

	)

2634 
	#R_CRIS_NONE
 0

	)

2635 
	#R_CRIS_8
 1

	)

2636 
	#R_CRIS_16
 2

	)

2637 
	#R_CRIS_32
 3

	)

2638 
	#R_CRIS_8_PCREL
 4

	)

2639 
	#R_CRIS_16_PCREL
 5

	)

2640 
	#R_CRIS_32_PCREL
 6

	)

2641 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2642 
	#R_CRIS_GNU_VTENTRY
 8

	)

2643 
	#R_CRIS_COPY
 9

	)

2644 
	#R_CRIS_GLOB_DAT
 10

	)

2645 
	#R_CRIS_JUMP_SLOT
 11

	)

2646 
	#R_CRIS_RELATIVE
 12

	)

2647 
	#R_CRIS_16_GOT
 13

	)

2648 
	#R_CRIS_32_GOT
 14

	)

2649 
	#R_CRIS_16_GOTPLT
 15

	)

2650 
	#R_CRIS_32_GOTPLT
 16

	)

2651 
	#R_CRIS_32_GOTREL
 17

	)

2652 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2653 
	#R_CRIS_32_PLT_PCREL
 19

	)

2655 
	#R_CRIS_NUM
 20

	)

2659 
	#R_X86_64_NONE
 0

	)

2660 
	#R_X86_64_64
 1

	)

2661 
	#R_X86_64_PC32
 2

	)

2662 
	#R_X86_64_GOT32
 3

	)

2663 
	#R_X86_64_PLT32
 4

	)

2664 
	#R_X86_64_COPY
 5

	)

2665 
	#R_X86_64_GLOB_DAT
 6

	)

2666 
	#R_X86_64_JUMP_SLOT
 7

	)

2667 
	#R_X86_64_RELATIVE
 8

	)

2668 
	#R_X86_64_GOTPCREL
 9

	)

2670 
	#R_X86_64_32
 10

	)

2671 
	#R_X86_64_32S
 11

	)

2672 
	#R_X86_64_16
 12

	)

2673 
	#R_X86_64_PC16
 13

	)

2674 
	#R_X86_64_8
 14

	)

2675 
	#R_X86_64_PC8
 15

	)

2676 
	#R_X86_64_DTPMOD64
 16

	)

2677 
	#R_X86_64_DTPOFF64
 17

	)

2678 
	#R_X86_64_TPOFF64
 18

	)

2679 
	#R_X86_64_TLSGD
 19

	)

2681 
	#R_X86_64_TLSLD
 20

	)

2683 
	#R_X86_64_DTPOFF32
 21

	)

2684 
	#R_X86_64_GOTTPOFF
 22

	)

2686 
	#R_X86_64_TPOFF32
 23

	)

2687 
	#R_X86_64_PC64
 24

	)

2688 
	#R_X86_64_GOTOFF64
 25

	)

2689 
	#R_X86_64_GOTPC32
 26

	)

2691 
	#R_X86_64_GOT64
 27

	)

2692 
	#R_X86_64_GOTPCREL64
 28

	)

2694 
	#R_X86_64_GOTPC64
 29

	)

2695 
	#R_X86_64_GOTPLT64
 30

	)

2696 
	#R_X86_64_PLTOFF64
 31

	)

2698 
	#R_X86_64_SIZE32
 32

	)

2699 
	#R_X86_64_SIZE64
 33

	)

2700 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2701 
	#R_X86_64_TLSDESC_CALL
 35

	)

2703 
	#R_X86_64_TLSDESC
 36

	)

2704 
	#R_X86_64_IRELATIVE
 37

	)

2706 
	#R_X86_64_NUM
 38

	)

2710 
	#R_MN10300_NONE
 0

	)

2711 
	#R_MN10300_32
 1

	)

2712 
	#R_MN10300_16
 2

	)

2713 
	#R_MN10300_8
 3

	)

2714 
	#R_MN10300_PCREL32
 4

	)

2715 
	#R_MN10300_PCREL16
 5

	)

2716 
	#R_MN10300_PCREL8
 6

	)

2717 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2718 
	#R_MN10300_GNU_VTENTRY
 8

	)

2719 
	#R_MN10300_24
 9

	)

2720 
	#R_MN10300_GOTPC32
 10

	)

2721 
	#R_MN10300_GOTPC16
 11

	)

2722 
	#R_MN10300_GOTOFF32
 12

	)

2723 
	#R_MN10300_GOTOFF24
 13

	)

2724 
	#R_MN10300_GOTOFF16
 14

	)

2725 
	#R_MN10300_PLT32
 15

	)

2726 
	#R_MN10300_PLT16
 16

	)

2727 
	#R_MN10300_GOT32
 17

	)

2728 
	#R_MN10300_GOT24
 18

	)

2729 
	#R_MN10300_GOT16
 19

	)

2730 
	#R_MN10300_COPY
 20

	)

2731 
	#R_MN10300_GLOB_DAT
 21

	)

2732 
	#R_MN10300_JMP_SLOT
 22

	)

2733 
	#R_MN10300_RELATIVE
 23

	)

2735 
	#R_MN10300_NUM
 24

	)

2739 
	#R_M32R_NONE
 0

	)

2740 
	#R_M32R_16
 1

	)

2741 
	#R_M32R_32
 2

	)

2742 
	#R_M32R_24
 3

	)

2743 
	#R_M32R_10_PCREL
 4

	)

2744 
	#R_M32R_18_PCREL
 5

	)

2745 
	#R_M32R_26_PCREL
 6

	)

2746 
	#R_M32R_HI16_ULO
 7

	)

2747 
	#R_M32R_HI16_SLO
 8

	)

2748 
	#R_M32R_LO16
 9

	)

2749 
	#R_M32R_SDA16
 10

	)

2750 
	#R_M32R_GNU_VTINHERIT
 11

	)

2751 
	#R_M32R_GNU_VTENTRY
 12

	)

2753 
	#R_M32R_16_RELA
 33

	)

2754 
	#R_M32R_32_RELA
 34

	)

2755 
	#R_M32R_24_RELA
 35

	)

2756 
	#R_M32R_10_PCREL_RELA
 36

	)

2757 
	#R_M32R_18_PCREL_RELA
 37

	)

2758 
	#R_M32R_26_PCREL_RELA
 38

	)

2759 
	#R_M32R_HI16_ULO_RELA
 39

	)

2760 
	#R_M32R_HI16_SLO_RELA
 40

	)

2761 
	#R_M32R_LO16_RELA
 41

	)

2762 
	#R_M32R_SDA16_RELA
 42

	)

2763 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2764 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2765 
	#R_M32R_REL32
 45

	)

2767 
	#R_M32R_GOT24
 48

	)

2768 
	#R_M32R_26_PLTREL
 49

	)

2769 
	#R_M32R_COPY
 50

	)

2770 
	#R_M32R_GLOB_DAT
 51

	)

2771 
	#R_M32R_JMP_SLOT
 52

	)

2772 
	#R_M32R_RELATIVE
 53

	)

2773 
	#R_M32R_GOTOFF
 54

	)

2774 
	#R_M32R_GOTPC24
 55

	)

2775 
	#R_M32R_GOT16_HI_ULO
 56

	)

2777 
	#R_M32R_GOT16_HI_SLO
 57

	)

2779 
	#R_M32R_GOT16_LO
 58

	)

2780 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2782 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2784 
	#R_M32R_GOTPC_LO
 61

	)

2786 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2788 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2790 
	#R_M32R_GOTOFF_LO
 64

	)

2791 
	#R_M32R_NUM
 256

	)

2794 
	g__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@uop1.dat

24 
	$UOP
(
n›
, 
n⁄e
, 0)

26 
	$UOP
(
move
, 
n⁄e
, 
FICOMP
)

27 
	$UOP
(
add
, 
öèdd
, 
FICOMP
)

28 
	$UOP
(
sub
, 
ötsub
, 
FICOMP
)

29 
	$UOP
(
mu…
, 
ötmu…
, 
FICOMP
)

30 
	$UOP
(
div
, 
ötdiv
, 
FICOMP
)

31 
	$UOP
(
efÁddr
,ÉfÁddr, 
FICOMP
)

33 
	$UOP
(
™d
, 
logiˇl
, 
FLCOMP
)

34 
	$UOP
(
‹
, 
logiˇl
, 
FLCOMP
)

35 
	$UOP
(
x‹
, 
logiˇl
, 
FLCOMP
)

36 
	$UOP
(
nŸ
, 
logiˇl
, 
FLCOMP
)

37 
	$UOP
(
shi·
, 
logiˇl
, 
FLCOMP
)

38 
	$UOP
(
sign
, 
logiˇl
, 
FLCOMP
)

40 
	$UOP
(
Âmove
, 
n⁄e
, 
FFCOMP
)

41 
	$UOP
(
Âsim∂e
, 
Âadd
, 
FFCOMP
)

42 
	$UOP
(
Âadd
, f∑dd, 
FFCOMP
)

43 
	$UOP
(
Âcomp
, 
Âadd
, 
FFCOMP
)

44 
	$UOP
(
Âmu…
, fpmu…, 
FFCOMP
)

45 
	$UOP
(
Âdiv
, fpdiv, 
FFCOMP
)

46 
	$UOP
(
Âcom∂ex
, fpcom∂ex, 
FFCOMP
)

48 
	`UOP
(
lﬂd
, 
n⁄e
, 
FLOAD
 | 
FMEM
)

49 
	`UOP
(
°‹e
, 
n⁄e
, 
FSTORE
 | 
FMEM
)

51 
	`UOP
(
ˇŒ
, 
n⁄e
, 
FCTRL
 | 
FCALL
)

52 
	`UOP
(
ªt
, 
n⁄e
, 
FCTRL
 | 
FRET
)

53 
	$UOP
(
jump
, 
n⁄e
, 
FCTRL
)

54 
	`UOP
(
bønch
, 
n⁄e
, 
FCTRL
 | 
FCOND
)

56 
	`UOP
(
sysˇŒ
, 
n⁄e
, 0)

	@uop2.dat

23 
	$X86_INST
(
adc_Æ_imm8
)

24 
	$UOP
(
add
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

25 
	$X86_INST
(
adc_ax_imm16
)

26 
	$UOP
(
add
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

27 
	$X86_INST
(
adc_óx_imm32
)

28 
	$UOP
(
add
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

29 
	$X86_INST
(
adc_rm8_imm8
)

30 
	$UOP
(
add
, 
DRM8
, 
DCF
, 0, DRM8, 
DZPS
, DCF, 
DOF
)

31 
	$X86_INST
(
adc_rm16_imm16
)

32 
	$UOP
(
add
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

33 
	$X86_INST
(
adc_rm32_imm32
)

34 
	$UOP
(
add
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

35 
	$X86_INST
(
adc_rm16_imm8
)

36 
	$UOP
(
add
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

37 
	$X86_INST
(
adc_rm32_imm8
)

38 
	$UOP
(
add
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

39 
	$X86_INST
(
adc_rm8_r8
)

40 
	$UOP
(
add
, 
DRM8
, 
DR8
, 
DCF
, DRM8, 
DZPS
, DCF, 
DOF
)

41 
	$X86_INST
(
adc_rm16_r16
)

42 
	$UOP
(
add
, 
DRM16
, 
DR16
, 
DCF
, DRM16, 
DZPS
, DCF, 
DOF
)

43 
	$X86_INST
(
adc_rm32_r32
)

44 
	$UOP
(
add
, 
DRM32
, 
DR32
, 
DCF
, DRM32, 
DZPS
, DCF, 
DOF
)

45 
	$X86_INST
(
adc_r8_rm8
)

46 
	$UOP
(
add
, 
DR8
, 
DRM8
, 
DCF
, DR8, 
DZPS
, DCF, 
DOF
)

47 
	$X86_INST
(
adc_r16_rm16
)

48 
	$UOP
(
add
, 
DR16
, 
DRM16
, 
DCF
, DR16, 
DZPS
, DCF, 
DOF
)

49 
	$X86_INST
(
adc_r32_rm32
)

50 
	$UOP
(
add
, 
DR32
, 
DRM32
, 
DCF
, DR32, 
DZPS
, DCF, 
DOF
)

52 
	$X86_INST
(
add_Æ_imm8
)

53 
	$UOP
(
add
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

54 
	$X86_INST
(
add_ax_imm16
)

55 
	$UOP
(
add
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

56 
	$X86_INST
(
add_óx_imm32
)

57 
	$UOP
(
add
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

58 
	$X86_INST
(
add_rm8_imm8
)

59 
	$UOP
(
add
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

60 
	$X86_INST
(
add_rm16_imm16
)

61 
	$UOP
(
add
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

62 
	$X86_INST
(
add_rm32_imm32
)

63 
	$UOP
(
add
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

64 
	$X86_INST
(
add_rm16_imm8
)

65 
	$UOP
(
add
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

66 
	$X86_INST
(
add_rm32_imm8
)

67 
	$UOP
(
add
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

68 
	$X86_INST
(
add_rm8_r8
)

69 
	$UOP
(
add
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

70 
	$X86_INST
(
add_rm16_r16
)

71 
	$UOP
(
add
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

72 
	$X86_INST
(
add_rm32_r32
)

73 
	$UOP
(
add
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

74 
	$X86_INST
(
add_r8_rm8
)

75 
	$UOP
(
add
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

76 
	$X86_INST
(
add_r16_rm16
)

77 
	$UOP
(
add
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

78 
	$X86_INST
(
add_r32_rm32
)

79 
	$UOP
(
add
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

81 
	$X86_INST
(
™d_Æ_imm8
)

82 
	$UOP
(
™d
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

83 
	$X86_INST
(
™d_ax_imm16
)

84 
	$UOP
(
™d
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

85 
	$X86_INST
(
™d_óx_imm32
)

86 
	$UOP
(
™d
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

87 
	$X86_INST
(
™d_rm8_imm8
)

88 
	$UOP
(
™d
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

89 
	$X86_INST
(
™d_rm16_imm16
)

90 
	$UOP
(
™d
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

91 
	$X86_INST
(
™d_rm32_imm32
)

92 
	$UOP
(
™d
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

93 
	$X86_INST
(
™d_rm16_imm8
)

94 
	$UOP
(
™d
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

95 
	$X86_INST
(
™d_rm32_imm8
)

96 
	$UOP
(
™d
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

97 
	$X86_INST
(
™d_rm8_r8
)

98 
	$UOP
(
™d
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

99 
	$X86_INST
(
™d_rm16_r16
)

100 
	$UOP
(
™d
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

101 
	$X86_INST
(
™d_rm32_r32
)

102 
	$UOP
(
™d
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

103 
	$X86_INST
(
™d_r8_rm8
)

104 
	$UOP
(
™d
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

105 
	$X86_INST
(
™d_r16_rm16
)

106 
	$UOP
(
™d
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

107 
	$X86_INST
(
™d_r32_rm32
)

108 
	$UOP
(
™d
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

110 
	$X86_INST
(
bsf_r32_rm32
)

111 
	$UOP
(
shi·
, 
DRM32
, 0, 0, 
DR32
, 
DZPS
, 0, 0)

112 
	$X86_INST
(
b§_r32_rm32
)

113 
	$UOP
(
shi·
, 
DRM32
, 0, 0, 
DR32
, 
DZPS
, 0, 0)

115 
	$X86_INST
(
bsw≠_ú32
)

116 
	$UOP
(
shi·
, 
DIR32
, 0, 0, DIR32, 0, 0, 0)

118 
	$X86_INST
(
bt_rm32_r32
)

119 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 0, 
DCF
, 0, 0, 0)

120 
	$X86_INST
(
bt_rm32_imm8
)

121 
	$UOP
(
shi·
, 
DRM32
, 0, 0, 
DCF
, 0, 0, 0)

123 
	$X86_INST
(
bts_rm32_imm8
)

124 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DCF
, 0, 0)

126 
	$X86_INST
(
ˇŒ_ªl32
)

127 
	$UOP
(
ˇŒ
, 0, 0, 0, 0, 0, 0, 0)

128 
	$X86_INST
(
ˇŒ_rm32
)

129 
	$UOP
(
ˇŒ
, 
DRM32
, 0, 0, 0, 0, 0, 0)

131 
	$X86_INST
(
cbw
)

132 
	$UOP
(
sign
, 
DEAX
, 0, 0, DEAX, 0, 0, 0)

133 
	$X86_INST
(
cwde
)

134 
	$UOP
(
sign
, 
DEAX
, 0, 0, DEAX, 0, 0, 0)

136 
	$X86_INST
(
cdq
)

137 
	$UOP
(
sign
, 
DEAX
, 0, 0, 
DEDX
, 0, 0, 0)

139 
	$X86_INST
(
˛d
)

140 
	$UOP
(
move
, 0, 0, 0, 0, 
DDF
, 0, 0)

142 
	$X86_INST
(
cmova_r16_rm16
)

143 
	$UOP
(
move
, 
DRM16
, 
DCF
, 
DZPS
, 
DR16
, 0, 0, 0)

144 
	$X86_INST
(
cmova_r32_rm32
)

145 
	$UOP
(
move
, 
DRM32
, 
DCF
, 
DZPS
, 
DR32
, 0, 0, 0)

146 
	$X86_INST
(
cmov´_r16_rm16
)

147 
	$UOP
(
move
, 
DRM16
, 
DCF
, 0, 
DR16
, 0, 0, 0)

148 
	$X86_INST
(
cmov´_r32_rm32
)

149 
	$UOP
(
move
, 
DRM32
, 
DCF
, 0, 
DR32
, 0, 0, 0)

150 
	$X86_INST
(
cmovb_r16_rm16
)

151 
	$UOP
(
move
, 
DRM16
, 
DCF
, 0, 
DR16
, 0, 0, 0)

152 
	$X86_INST
(
cmovb_r32_rm32
)

153 
	$UOP
(
move
, 
DRM32
, 
DCF
, 0, 
DR32
, 0, 0, 0)

154 
	$X86_INST
(
cmovbe_r16_rm16
)

155 
	$UOP
(
move
, 
DRM16
, 
DCF
, 
DZPS
, 
DR16
, 0, 0, 0)

156 
	$X86_INST
(
cmovbe_r32_rm32
)

157 
	$UOP
(
move
, 
DRM32
, 
DCF
, 
DZPS
, 
DR32
, 0, 0, 0)

158 
	$X86_INST
(
cmove_r16_rm16
)

159 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

160 
	$X86_INST
(
cmove_r32_rm32
)

161 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

162 
	$X86_INST
(
cmovg_r16_rm16
)

163 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

164 
	$X86_INST
(
cmovg_r32_rm32
)

165 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

166 
	$X86_INST
(
cmovge_r16_rm16
)

167 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

168 
	$X86_INST
(
cmovge_r32_rm32
)

169 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

170 
	$X86_INST
(
cmovl_r16_rm16
)

171 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

172 
	$X86_INST
(
cmovl_r32_rm32
)

173 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

174 
	$X86_INST
(
cmovÀ_r16_rm16
)

175 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

176 
	$X86_INST
(
cmovÀ_r32_rm32
)

177 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

178 
	$X86_INST
(
cmov√_r16_rm16
)

179 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

180 
	$X86_INST
(
cmov√_r32_rm32
)

181 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

182 
	$X86_INST
(
cmovno_r16_rm16
)

183 
	$UOP
(
move
, 
DRM16
, 
DOF
, 0, 
DR16
, 0, 0, 0)

184 
	$X86_INST
(
cmovno_r32_rm32
)

185 
	$UOP
(
move
, 
DRM32
, 
DOF
, 0, 
DR32
, 0, 0, 0)

186 
	$X86_INST
(
cmov≈_r16_rm16
)

187 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

188 
	$X86_INST
(
cmov≈_r32_rm32
)

189 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

190 
	$X86_INST
(
cmovns_r16_rm16
)

191 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

192 
	$X86_INST
(
cmovns_r32_rm32
)

193 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

194 
	$X86_INST
(
cmovo_r16_rm16
)

195 
	$UOP
(
move
, 
DRM16
, 
DOF
, 0, 
DR16
, 0, 0, 0)

196 
	$X86_INST
(
cmovo_r32_rm32
)

197 
	$UOP
(
move
, 
DRM32
, 
DOF
, 0, 
DR32
, 0, 0, 0)

198 
	$X86_INST
(
cmovp_r16_rm16
)

199 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

200 
	$X86_INST
(
cmovp_r32_rm32
)

201 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

202 
	$X86_INST
(
cmovs_r16_rm16
)

203 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

204 
	$X86_INST
(
cmovs_r32_rm32
)

205 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

207 
	$X86_INST
(
cmp_Æ_imm8
)

208 
	$UOP
(
sub
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

209 
	$X86_INST
(
cmp_ax_imm16
)

210 
	$UOP
(
sub
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

211 
	$X86_INST
(
cmp_óx_imm32
)

212 
	$UOP
(
sub
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

213 
	$X86_INST
(
cmp_rm8_imm8
)

214 
	$UOP
(
sub
, 
DRM8
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

215 
	$X86_INST
(
cmp_rm16_imm16
)

216 
	$UOP
(
sub
, 
DRM16
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

217 
	$X86_INST
(
cmp_rm32_imm32
)

218 
	$UOP
(
sub
, 
DRM32
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

219 
	$X86_INST
(
cmp_rm16_imm8
)

220 
	$UOP
(
sub
, 
DRM16
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

221 
	$X86_INST
(
cmp_rm32_imm8
)

222 
	$UOP
(
sub
, 
DRM32
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

223 
	$X86_INST
(
cmp_rm8_r8
)

224 
	$UOP
(
sub
, 
DRM8
, 
DR8
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

225 
	$X86_INST
(
cmp_rm16_r16
)

226 
	$UOP
(
sub
, 
DRM16
, 
DR16
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

227 
	$X86_INST
(
cmp_rm32_r32
)

228 
	$UOP
(
sub
, 
DRM32
, 
DR32
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

229 
	$X86_INST
(
cmp_r8_rm8
)

230 
	$UOP
(
sub
, 
DR8
, 
DRM8
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

231 
	$X86_INST
(
cmp_r16_rm16
)

232 
	$UOP
(
sub
, 
DR16
, 
DRM16
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

233 
	$X86_INST
(
cmp_r32_rm32
)

234 
	$UOP
(
sub
, 
DR32
, 
DRM32
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

236 
	$X86_INST
(
cmpsb
)

237 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

238 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

239 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

240 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

241 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

242 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

243 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

244 
	$X86_INST
(
cmpsd
)

245 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

246 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

247 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

248 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

249 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

250 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

251 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

253 
	$X86_INST
(
cmpxchg_rm32_r32
)

254 
	$UOP
(
sub
, 
DEAX
, 
DRM32
, 0, 
DZPS
, 
DCF
, 
DOF
, 0)

255 
	$UOP
(
move
, 
DZPS
, 
DR32
, 0, 
DRM32
, 0, 0, 0)

256 
	$UOP
(
move
, 
DCF
, 
DRM32
, 0, 
DEAX
, 0, 0, 0)

258 
	$X86_INST
(
˝uid
)

259 
	$UOP
(
move
, 
DEAX
, 0, 0, 
DAUX
, 0, 0, 0)

260 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DEAX
, 0, 0, 0)

261 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DEBX
, 0, 0, 0)

262 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DECX
, 0, 0, 0)

263 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DEDX
, 0, 0, 0)

265 
	$X86_INST
(
dec_rm8
)

266 
	$UOP
(
sub
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DOF
, 0)

267 
	$X86_INST
(
dec_rm32
)

268 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DOF
, 0)

269 
	$X86_INST
(
dec_ú16
)

270 
	$UOP
(
sub
, 
DIR16
, 0, 0, DIR16, 
DZPS
, 
DOF
, 0)

271 
	$X86_INST
(
dec_ú32
)

272 
	$UOP
(
sub
, 
DIR32
, 0, 0, DIR32, 
DZPS
, 
DOF
, 0)

274 
	$X86_INST
(
div_rm8
)

275 
	$UOP
(
div
, 
DEAX
, 
DRM8
, 0, DEAX, 0, 0, 0)

276 
	$X86_INST
(
div_rm32
)

277 
	$UOP
(
div
, 
DEDX
, 
DEAX
, 
DRM32
, DEAX, DEDX, 0, 0)

279 
	$X86_INST
(
f2xm1
)

280 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

282 
	$X86_INST
(
Ábs
)

283 
	$UOP
(
Âsim∂e
, 
DST0
, 0, 0, DST0, 0, 0, 0)

285 
	$X86_INST
(
Ádd_m32
)

286 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

287 
	$X86_INST
(
Ádd_m64
)

288 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

289 
	$X86_INST
(
Ádd_°0_°i
)

290 
	$UOP
(
Âadd
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

291 
	$X86_INST
(
Ádd_°i_°0
)

292 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DST0, 0, 0, 0)

293 
	$X86_INST
(
Áddp_°i_°0
)

294 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, 
DST1
, 
DFPOP
, 0, 0)

296 
	$X86_INST
(
fchs
)

297 
	$UOP
(
Âsim∂e
, 
DST0
, 0, 0, DST0, 0, 0, 0)

299 
	$X86_INST
(
fcmovb_°0_°i
)

300 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 0, 
DST0
, 0, 0, 0)

301 
	$X86_INST
(
fcmove_°0_°i
)

302 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

303 
	$X86_INST
(
fcmovbe_°0_°i
)

304 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 
DZPS
, 
DST0
, 0, 0, 0)

305 
	$X86_INST
(
fcmovu_°0_°i
)

306 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

307 
	$X86_INST
(
fcmovnb_°0_°i
)

308 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 0, 
DST0
, 0, 0, 0)

309 
	$X86_INST
(
fcmov√_°0_°i
)

310 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

311 
	$X86_INST
(
fcmovnbe_°0_°i
)

312 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 
DZPS
, 
DST0
, 0, 0, 0)

313 
	$X86_INST
(
fcmovnu_°0_°i
)

314 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

316 
	$X86_INST
(
fcom_m32
)

317 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 0, 0, 0)

318 
	$X86_INST
(
fcom_m64
)

319 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 0, 0, 0)

320 
	$X86_INST
(
fcom_°i
)

321 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

322 
	$X86_INST
(
fcomp_m32
)

323 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 
DFPOP
, 0, 0)

324 
	$X86_INST
(
fcomp_m64
)

325 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 
DFPOP
, 0, 0)

326 
	$X86_INST
(
fcomp_°i
)

327 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

328 
	$X86_INST
(
fcomµ
)

329 
	$UOP
(
Âcomp
, 
DST0
, 
DST1
, 0, 
DFPST
, 
DFPOP2
, 0, 0)

331 
	$X86_INST
(
fcomi_°0_°i
)

332 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 0, 0, 0)

333 
	$X86_INST
(
fcomù_°0_°i
)

334 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

335 
	$X86_INST
(
fucomi_°0_°i
)

336 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 0, 0, 0)

337 
	$X86_INST
(
fucomù_°0_°i
)

338 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

340 
	$X86_INST
(
fcos
)

341 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

343 
	$X86_INST
(
fdiv_m32
)

344 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

345 
	$X86_INST
(
fdiv_m64
)

346 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

347 
	$X86_INST
(
fdiv_°0_°i
)

348 
	$UOP
(
Âdiv
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

349 
	$X86_INST
(
fdiv_°i_°0
)

350 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

351 
	$X86_INST
(
fdivp_°i_°0
)

352 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

354 
	$X86_INST
(
fdivr_m32
)

355 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

356 
	$X86_INST
(
fdivr_m64
)

357 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

358 
	$X86_INST
(
fdivr_°0_°i
)

359 
	$UOP
(
Âdiv
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

360 
	$X86_INST
(
fdivr_°i_°0
)

361 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

362 
	$X86_INST
(
fdivΩ_°i_°0
)

363 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

365 
	$X86_INST
(
fûd_m16
)

366 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

367 
	$X86_INST
(
fûd_m32
)

368 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

369 
	$X86_INST
(
fûd_m64
)

370 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

372 
	$X86_INST
(
fi°_m16
)

373 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

374 
	$X86_INST
(
fi°_m32
)

375 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

376 
	$X86_INST
(
fi°p_m16
)

377 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

378 
	$X86_INST
(
fi°p_m32
)

379 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

380 
	$X86_INST
(
fi°p_m64
)

381 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

383 
	$X86_INST
(
Êd1
)

384 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

385 
	$X86_INST
(
Êdl2t
)

386 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

387 
	$X86_INST
(
Êdl2e
)

388 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

389 
	$X86_INST
(
Êdpi
)

390 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

391 
	$X86_INST
(
Êdlg2
)

392 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

393 
	$X86_INST
(
Êd 2
)

394 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

395 
	$X86_INST
(
Êdz
)

396 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

398 
	$X86_INST
(
Êd_m32
)

399 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

400 
	$X86_INST
(
Êd_m64
)

401 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

402 
	$X86_INST
(
Êd_m80
)

403 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

404 
	$X86_INST
(
Êd_°i
)

405 
	$UOP
(
Âmove
, 
DSTI
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

407 
	$X86_INST
(
Êdcw_m16
)

408 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPCW
, 0, 0, 0)

410 
	$X86_INST
(
fmul_m32
)

411 
	$UOP
(
Âmu…
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

412 
	$X86_INST
(
fmul_m64
)

413 
	$UOP
(
Âmu…
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

414 
	$X86_INST
(
fmul_°0_°i
)

415 
	$UOP
(
Âmu…
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

416 
	$X86_INST
(
fmul_°i_°0
)

417 
	$UOP
(
Âmu…
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

418 
	$X86_INST
(
fmuÕ_°i_°0
)

419 
	$UOP
(
Âmu…
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

421 
	$X86_INST
(
Â©™
)

422 
	$UOP
(
Âcom∂ex
, 
DST0
, 
DST1
, 0, DST1, 
DFPOP
, 0, 0)

424 
	$X86_INST
(
Âªm
)

425 
	$UOP
(
Âdiv
, 
DST0
, 
DST1
, 0, DST0, 0, 0, 0)

427 
	$X86_INST
(
Âªm1
)

428 
	$UOP
(
Âdiv
, 
DST0
, 
DST1
, 0, DST0, 0, 0, 0)

430 
	$X86_INST
(
Âèn
)

431 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, 
DFPUSH
, DST0, 
DST1
, 0)

433 
	$X86_INST
(
‰ndöt
)

434 
	$UOP
(
Âsim∂e
, 
DST0
, 0, 0, DST0, 0, 0, 0)

436 
	$X86_INST
(
fsˇÀ
)

437 
	$UOP
(
Âcom∂ex
, 
DST1
, 0, 0, 
DST0
, 0, 0, 0)

439 
	$X86_INST
(
fsö
)

440 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

442 
	$X86_INST
(
fsöcos
)

443 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, 
DFPUSH
, DST0, 
DST1
, 0)

445 
	$X86_INST
(
fsqπ
)

446 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

448 
	$X86_INST
(
f°cw_m16
)

449 
	$UOP
(
Âmove
, 
DFPCW
, 0, 0, 
DMEM
, 0, 0, 0)

450 
	$X86_INST
(
‚°cw_m16
)

451 
	$UOP
(
Âmove
, 
DFPCW
, 0, 0, 
DMEM
, 0, 0, 0)

453 
	$X86_INST
(
f°_m32
)

454 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

455 
	$X86_INST
(
f°_m64
)

456 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

457 
	$X86_INST
(
f°_°i
)

458 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DSTI
, 0, 0, 0)

459 
	$X86_INST
(
f°p_m32
)

460 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

461 
	$X86_INST
(
f°p_m64
)

462 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

463 
	$X86_INST
(
f°p_m80
)

464 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

465 
	$X86_INST
(
f°p_°i
)

466 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DSTI
, 
DFPOP
, 0, 0)

468 
	$X86_INST
(
f°sw_ax
)

469 
	$UOP
(
Âmove
, 
DFPST
, 0, 0, 
DEAX
, 0, 0, 0)

470 
	$X86_INST
(
‚°sw_ax
)

471 
	$UOP
(
Âmove
, 
DFPST
, 0, 0, 
DEAX
, 0, 0, 0)

473 
	$X86_INST
(
fsub_m32
)

474 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

475 
	$X86_INST
(
fsub_m64
)

476 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

477 
	$X86_INST
(
fsub_°0_°i
)

478 
	$UOP
(
Âadd
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

479 
	$X86_INST
(
fsub_°i_°0
)

480 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

481 
	$X86_INST
(
fsubp_°i_°0
)

482 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

484 
	$X86_INST
(
fsubr_m32
)

485 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

486 
	$X86_INST
(
fsubr_m64
)

487 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

488 
	$X86_INST
(
fsubr_°0_°i
)

489 
	$UOP
(
Âadd
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

490 
	$X86_INST
(
fsubr_°i_°0
)

491 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

492 
	$X86_INST
(
fsubΩ_°i_°0
)

493 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

495 
	$X86_INST
(
·°
)

496 
	$UOP
(
Âcomp
, 
DST0
, 0, 0, 
DFPST
, 0, 0, 0)

498 
	$X86_INST
(
fucom_°i
)

499 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 0, 0, 0)

500 
	$X86_INST
(
fucomp_°i
)

501 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

502 
	$X86_INST
(
fucomµ
)

503 
	$UOP
(
Âcomp
, 
DST0
, 
DST1
, 0, 
DFPST
, 
DFPOP2
, 0, 0)

505 
	$X86_INST
(
fxam
)

506 
	$UOP
(
Âcomp
, 
DST0
, 0, 0, 
DFPST
, 0, 0, 0)

508 
	$X86_INST
(
fxch_°i
)

509 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DFPAUX
, 0, 0, 0)

510 
	$UOP
(
Âmove
, 
DSTI
, 0, 0, 
DST0
, 0, 0, 0)

511 
	$UOP
(
Âmove
, 
DFPAUX
, 0, 0, 
DSTI
, 0, 0, 0)

513 
	$X86_INST
(
fyl2x
)

514 
	$UOP
(
Âcom∂ex
, 
DST0
, 
DST1
, 0, DST1, 
DFPOP
, 0, 0)

516 
	$X86_INST
(
fyl2xp1
)

517 
	$UOP
(
Âcom∂ex
, 
DST0
, 
DST1
, 0, DST1, 
DFPOP
, 0, 0)

519 
	$X86_INST
(
h…
)

520 
	$UOP
(
n›
, 0, 0, 0, 0, 0, 0, 0)

522 
	$X86_INST
(
idiv_rm32
)

523 
	$UOP
(
div
, 
DRM32
, 
DEAX
, 0, DEAX, 
DEDX
, 0, 0)

525 
	$X86_INST
(
imul_rm32
)

526 
	$UOP
(
mu…
, 
DRM32
, 
DEAX
, 0, DEAX, 
DEDX
, 
DCF
, 
DOF
)

527 
	$X86_INST
(
imul_r32_rm32
)

528 
	$UOP
(
mu…
, 
DR32
, 
DRM32
, 0, DR32, 0, 
DCF
, 
DOF
)

529 
	$X86_INST
(
imul_r32_rm32_imm8
)

530 
	$UOP
(
mu…
, 
DRM32
, 0, 0, 
DR32
, 0, 
DCF
, 
DOF
)

531 
	$X86_INST
(
imul_r32_rm32_imm32
)

532 
	$UOP
(
mu…
, 
DRM32
, 0, 0, 
DR32
, 0, 
DCF
, 
DOF
)

534 
	$X86_INST
(
öc_rm8
)

535 
	$UOP
(
add
, 
DRM8
, 0, 0, DRM8, 0, 
DZPS
, 
DOF
)

536 
	$X86_INST
(
öc_rm32
)

537 
	$UOP
(
add
, 
DRM32
, 0, 0, DRM32, 0, 
DZPS
, 
DOF
)

538 
	$X86_INST
(
öc_ú16
)

539 
	$UOP
(
add
, 
DIR16
, 0, 0, DIR16, 0, 
DZPS
, 
DOF
)

540 
	$X86_INST
(
öc_ú32
)

541 
	$UOP
(
add
, 
DIR32
, 0, 0, DIR32, 0, 
DZPS
, 
DOF
)

543 
	$X86_INST
(
öt_imm8
)

544 
	$UOP
(
sysˇŒ
, 0, 0, 0, 0, 0, 0, 0)

546 
	$X86_INST
(
ja_ªl8
)

547 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

548 
	$X86_INST
(
j´_ªl8
)

549 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

550 
	$X86_INST
(
jb_ªl8
)

551 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

552 
	$X86_INST
(
jbe_ªl8
)

553 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

554 
	$X86_INST
(
je_ªl8
)

555 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

556 
	$X86_INST
(
jcxz_ªl8
)

557 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

558 
	$X86_INST
(
jecxz_ªl8
)

559 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

560 
	$X86_INST
(
jg_ªl8
)

561 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

562 
	$X86_INST
(
jge_ªl8
)

563 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

564 
	$X86_INST
(
jl_ªl8
)

565 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

566 
	$X86_INST
(
jÀ_ªl8
)

567 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

568 
	$X86_INST
(
j√_ªl8
)

569 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

570 
	$X86_INST
(
jno_ªl8
)

571 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

572 
	$X86_INST
(
j≈_ªl8
)

573 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

574 
	$X86_INST
(
jns_ªl8
)

575 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

576 
	$X86_INST
(
jo_ªl8
)

577 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

578 
	$X86_INST
(
jp_ªl8
)

579 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

580 
	$X86_INST
(
js_ªl8
)

581 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

583 
	$X86_INST
(
ja_ªl32
)

584 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

585 
	$X86_INST
(
j´_ªl32
)

586 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

587 
	$X86_INST
(
jb_ªl32
)

588 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

589 
	$X86_INST
(
jbe_ªl32
)

590 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

591 
	$X86_INST
(
je_ªl32
)

592 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

593 
	$X86_INST
(
jg_ªl32
)

594 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

595 
	$X86_INST
(
jge_ªl32
)

596 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

597 
	$X86_INST
(
jl_ªl32
)

598 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

599 
	$X86_INST
(
jÀ_ªl32
)

600 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

601 
	$X86_INST
(
j√_ªl32
)

602 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

603 
	$X86_INST
(
jno_ªl32
)

604 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

605 
	$X86_INST
(
j≈_ªl32
)

606 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

607 
	$X86_INST
(
jns_ªl32
)

608 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

609 
	$X86_INST
(
jo_ªl32
)

610 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

611 
	$X86_INST
(
jp_ªl32
)

612 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

613 
	$X86_INST
(
js_ªl32
)

614 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

616 
	$X86_INST
(
jmp_ªl8
)

617 
	$UOP
(
jump
, 0, 0, 0, 0, 0, 0, 0)

618 
	$X86_INST
(
jmp_ªl32
)

619 
	$UOP
(
jump
, 0, 0, 0, 0, 0, 0, 0)

620 
	$X86_INST
(
jmp_rm32
)

621 
	$UOP
(
jump
, 
DRM32
, 0, 0, 0, 0, 0, 0)

623 
	$X86_INST
(
Àa_r32_m
)

624 
	$UOP
(
efÁddr
, 
DEASEG
, 
DEABAS
, 
DEAIDX
, 
DR32
, 0, 0, 0)

626 
	$X86_INST
(
Àave
)

627 
	$UOP
(
move
, 
DEBP
, 0, 0, 
DESP
, 0, 0, 0)

628 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

629 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DEBP
, 0, 0, 0)

630 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

632 
	$X86_INST
(
lodsb
)

633 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

634 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DEAX
, 0, 0, 0)

635 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

636 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

637 
	$X86_INST
(
lodsd
)

638 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

639 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DEAX
, 0, 0, 0)

640 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

641 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

643 
	$X86_INST
(
mov_rm8_r8
)

644 
	$UOP
(
move
, 
DR8
, 0, 0, 
DRM8
, 0, 0, 0)

645 
	$X86_INST
(
mov_rm16_r16
)

646 
	$UOP
(
move
, 
DR16
, 0, 0, 
DRM16
, 0, 0, 0)

647 
	$X86_INST
(
mov_rm32_r32
)

648 
	$UOP
(
move
, 
DR32
, 0, 0, 
DRM32
, 0, 0, 0)

649 
	$X86_INST
(
mov_r8_rm8
)

650 
	$UOP
(
move
, 
DRM8
, 0, 0, 
DR8
, 0, 0, 0)

651 
	$X86_INST
(
mov_r16_rm16
)

652 
	$UOP
(
move
, 
DRM16
, 0, 0, 
DR16
, 0, 0, 0)

653 
	$X86_INST
(
mov_r32_rm32
)

654 
	$UOP
(
move
, 
DRM32
, 0, 0, 
DR32
, 0, 0, 0)

655 
	$X86_INST
(
mov_Æ_moffs8
)

656 
	$UOP
(
lﬂd
, 0, 0, 0, 
DEAX
, 0, 0, 0)

657 
	$X86_INST
(
mov_ax_moffs16
)

658 
	$UOP
(
lﬂd
, 0, 0, 0, 
DEAX
, 0, 0, 0)

659 
	$X86_INST
(
mov_óx_moffs32
)

660 
	$UOP
(
lﬂd
, 0, 0, 0, 
DEAX
, 0, 0, 0)

661 
	$X86_INST
(
mov_moffs8_Æ
)

662 
	$UOP
(
°‹e
, 
DEAX
, 0, 0, 0, 0, 0, 0)

663 
	$X86_INST
(
mov_moffs16_ax
)

664 
	$UOP
(
°‹e
, 
DEAX
, 0, 0, 0, 0, 0, 0)

665 
	$X86_INST
(
mov_moffs32_óx
)

666 
	$UOP
(
°‹e
, 
DEAX
, 0, 0, 0, 0, 0, 0)

667 
	$X86_INST
(
mov_ú8_imm8
)

668 
	$UOP
(
move
, 0, 0, 0, 
DIR8
, 0, 0, 0)

669 
	$X86_INST
(
mov_ú16_imm16
)

670 
	$UOP
(
move
, 0, 0, 0, 
DIR16
, 0, 0, 0)

671 
	$X86_INST
(
mov_ú32_imm32
)

672 
	$UOP
(
move
, 0, 0, 0, 
DIR32
, 0, 0, 0)

673 
	$X86_INST
(
mov_rm8_imm8
)

674 
	$UOP
(
move
, 0, 0, 0, 
DRM8
, 0, 0, 0)

675 
	$X86_INST
(
mov_rm16_imm16
)

676 
	$UOP
(
move
, 0, 0, 0, 
DRM16
, 0, 0, 0)

677 
	$X86_INST
(
mov_rm32_imm32
)

678 
	$UOP
(
move
, 0, 0, 0, 
DRM32
, 0, 0, 0)

679 
	$X86_INST
(
mov_§eg_rm16
)

680 
	$UOP
(
move
, 
DRM16
, 0, 0, 
DSREG
, 0, 0, 0)

681 
	$X86_INST
(
mov_§eg_rm32
)

682 
	$UOP
(
move
, 
DRM32
, 0, 0, 
DSREG
, 0, 0, 0)

683 
	$X86_INST
(
mov_rm16_§eg
)

684 
	$UOP
(
move
, 
DSREG
, 0, 0, 
DRM16
, 0, 0, 0)

685 
	$X86_INST
(
mov_rm32_§eg
)

686 
	$UOP
(
move
, 
DSREG
, 0, 0, 
DRM32
, 0, 0, 0)

688 
	$X86_INST
(
movsb
)

689 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

690 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

691 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

692 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

693 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

694 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

695 
	$X86_INST
(
movsw
)

696 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

697 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

698 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

699 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

700 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

701 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

702 
	$X86_INST
(
movsd
)

703 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

704 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

705 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

706 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

707 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

708 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

710 
	$X86_INST
(
movsx_r16_rm8
)

711 
	$UOP
(
sign
, 
DRM8
, 0, 0, 
DR16
, 0, 0, 0)

712 
	$X86_INST
(
movsx_r32_rm8
)

713 
	$UOP
(
sign
, 
DRM8
, 0, 0, 
DR32
, 0, 0, 0)

714 
	$X86_INST
(
movsx_r32_rm16
)

715 
	$UOP
(
sign
, 
DRM16
, 0, 0, 
DR32
, 0, 0, 0)

717 
	$X86_INST
(
movzx_r16_rm8
)

718 
	$UOP
(
move
, 
DRM8
, 0, 0, 
DR16
, 0, 0, 0)

719 
	$X86_INST
(
movzx_r32_rm8
)

720 
	$UOP
(
move
, 
DRM8
, 0, 0, 
DR32
, 0, 0, 0)

721 
	$X86_INST
(
movzx_r32_rm16
)

722 
	$UOP
(
move
, 
DRM16
, 0, 0, 
DR32
, 0, 0, 0)

724 
	$X86_INST
(
mul_rm32
)

725 
	$UOP
(
mu…
, 
DRM32
, 
DEAX
, 0, 
DEDX
, DEAX, 
DOF
, 
DCF
)

727 
	$X86_INST
(
√g_rm8
)

728 
	$UOP
(
sub
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

729 
	$X86_INST
(
√g_rm32
)

730 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

732 
	$X86_INST
(
n›
)

733 
	$UOP
(
n›
, 0, 0, 0, 0, 0, 0, 0)

735 
	$X86_INST
(
nŸ_rm8
)

736 
	$UOP
(
nŸ
, 
DRM8
, 0, 0, DRM8, 0, 0, 0)

737 
	$X86_INST
(
nŸ_rm16
)

738 
	$UOP
(
nŸ
, 
DRM16
, 0, 0, DRM16, 0, 0, 0)

739 
	$X86_INST
(
nŸ_rm32
)

740 
	$UOP
(
nŸ
, 
DRM32
, 0, 0, DRM32, 0, 0, 0)

742 
	$X86_INST
(
‹_Æ_imm8
)

743 
	$UOP
(
‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

744 
	$X86_INST
(
‹_ax_imm16
)

745 
	$UOP
(
‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

746 
	$X86_INST
(
‹_óx_imm32
)

747 
	$UOP
(
‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

748 
	$X86_INST
(
‹_rm8_imm8
)

749 
	$UOP
(
‹
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

750 
	$X86_INST
(
‹_rm16_imm16
)

751 
	$UOP
(
‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

752 
	$X86_INST
(
‹_rm32_imm32
)

753 
	$UOP
(
‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

754 
	$X86_INST
(
‹_rm16_imm8
)

755 
	$UOP
(
‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

756 
	$X86_INST
(
‹_rm32_imm8
)

757 
	$UOP
(
‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

758 
	$X86_INST
(
‹_rm8_r8
)

759 
	$UOP
(
‹
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

760 
	$X86_INST
(
‹_rm16_r16
)

761 
	$UOP
(
‹
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

762 
	$X86_INST
(
‹_rm32_r32
)

763 
	$UOP
(
‹
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

764 
	$X86_INST
(
‹_r8_rm8
)

765 
	$UOP
(
‹
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

766 
	$X86_INST
(
‹_r16_rm16
)

767 
	$UOP
(
‹
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

768 
	$X86_INST
(
‹_r32_rm32
)

769 
	$UOP
(
‹
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

771 
	$X86_INST
(
p›_ú32
)

772 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

773 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DIR32
, 0, 0, 0)

774 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

776 
	$X86_INST
(
p›f
)

777 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

778 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
, 0)

779 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

781 
	$X86_INST
(
¥e„tcht0
)

782 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

783 
	$X86_INST
(
¥e„tcht1
)

784 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

785 
	$X86_INST
(
¥e„tcht2
)

786 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

787 
	$X86_INST
(
¥e„tch¡a
)

788 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

790 
	$X86_INST
(
push_rm32
)

791 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

792 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

793 
	$UOP
(
°‹e
, 
DAUX
, 
DRM32
, 0, 0, 0, 0, 0)

794 
	$X86_INST
(
push_imm8
)

795 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

796 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

797 
	$UOP
(
°‹e
, 
DAUX
, 0, 0, 0, 0, 0, 0)

798 
	$X86_INST
(
push_imm32
)

799 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

800 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

801 
	$UOP
(
°‹e
, 
DAUX
, 0, 0, 0, 0, 0, 0)

802 
	$X86_INST
(
push_ú32
)

803 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

804 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

805 
	$UOP
(
°‹e
, 
DAUX
, 
DIR32
, 0, 0, 0, 0, 0)

807 
	$X86_INST
(
pushf
)

808 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

809 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

810 
	$UOP
(
move
, 
DZPS
, 
DCF
, 
DOF
, 
DAUX2
, 0, 0, 0)

811 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

813 
	$X86_INST
(
r˛_rm8_1
)

814 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

815 
	$X86_INST
(
r˛_rm8_˛
)

816 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 
DCF
, DRM8, DCF, 
DOF
, 0)

817 
	$X86_INST
(
r˛_rm8_imm8
)

818 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

819 
	$X86_INST
(
r˛_rm16_1
)

820 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

821 
	$X86_INST
(
r˛_rm16_˛
)

822 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 
DCF
, DRM16, DCF, 
DOF
, 0)

823 
	$X86_INST
(
r˛_rm16_imm8
)

824 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

825 
	$X86_INST
(
r˛_rm32_1
)

826 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

827 
	$X86_INST
(
r˛_rm32_˛
)

828 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 
DCF
, DRM32, DCF, 
DOF
, 0)

829 
	$X86_INST
(
r˛_rm32_imm8
)

830 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

832 
	$X86_INST
(
r¸_rm8_1
)

833 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

834 
	$X86_INST
(
r¸_rm8_˛
)

835 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 
DCF
, DRM8, DCF, 
DOF
, 0)

836 
	$X86_INST
(
r¸_rm8_imm8
)

837 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

838 
	$X86_INST
(
r¸_rm16_1
)

839 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

840 
	$X86_INST
(
r¸_rm16_˛
)

841 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 
DCF
, DRM16, DCF, 
DOF
, 0)

842 
	$X86_INST
(
r¸_rm16_imm8
)

843 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

844 
	$X86_INST
(
r¸_rm32_1
)

845 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

846 
	$X86_INST
(
r¸_rm32_˛
)

847 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 
DCF
, DRM32, DCF, 
DOF
, 0)

848 
	$X86_INST
(
r¸_rm32_imm8
)

849 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

851 
	$X86_INST
(
rﬁ_rm8_1
)

852 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

853 
	$X86_INST
(
rﬁ_rm8_˛
)

854 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DCF
, 
DOF
, 0)

855 
	$X86_INST
(
rﬁ_rm8_imm8
)

856 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

857 
	$X86_INST
(
rﬁ_rm16_1
)

858 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

859 
	$X86_INST
(
rﬁ_rm16_˛
)

860 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DCF
, 
DOF
, 0)

861 
	$X86_INST
(
rﬁ_rm16_imm8
)

862 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

863 
	$X86_INST
(
rﬁ_rm32_1
)

864 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

865 
	$X86_INST
(
rﬁ_rm32_˛
)

866 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DCF
, 
DOF
, 0)

867 
	$X86_INST
(
rﬁ_rm32_imm8
)

868 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

870 
	$X86_INST
(
r‹_rm8_1
)

871 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

872 
	$X86_INST
(
r‹_rm8_˛
)

873 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DCF
, 
DOF
, 0)

874 
	$X86_INST
(
r‹_rm8_imm8
)

875 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

876 
	$X86_INST
(
r‹_rm16_1
)

877 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

878 
	$X86_INST
(
r‹_rm16_˛
)

879 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DCF
, 
DOF
, 0)

880 
	$X86_INST
(
r‹_rm16_imm8
)

881 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

882 
	$X86_INST
(
r‹_rm32_1
)

883 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

884 
	$X86_INST
(
r‹_rm32_˛
)

885 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DCF
, 
DOF
, 0)

886 
	$X86_INST
(
r‹_rm32_imm8
)

887 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

889 
	$X86_INST
(
ªp_movsb
)

890 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

891 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

892 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

893 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

894 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

895 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

896 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

897 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

898 
	$X86_INST
(
ªp_movsd
)

899 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

900 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

901 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

902 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

903 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

904 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

905 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

906 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

907 
	$X86_INST
(
ªp_°osb
)

908 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

909 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

910 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

911 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

912 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

913 
	$X86_INST
(
ªp_°osd
)

914 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

915 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

916 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

917 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

918 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

919 
	$X86_INST
(
ªpz_cmpsb
)

920 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

921 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

922 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

923 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

924 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

925 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

926 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

927 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

928 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

929 
	$X86_INST
(
ªpz_cmpsd
)

930 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

931 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

932 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

933 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

934 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

935 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

936 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

937 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

938 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

939 
	$X86_INST
(
ªpz_sˇsb
)

940 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

941 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

942 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

943 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

944 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

945 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

946 
	$X86_INST
(
ªpz_sˇsd
)

947 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

948 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

949 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

950 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

951 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

952 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

953 
	$X86_INST
(
ª≤z_cmpsb
)

954 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

955 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

956 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

957 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

958 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

959 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

960 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

961 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

962 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

963 
	$X86_INST
(
ª≤z_cmpsd
)

964 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

965 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

966 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

967 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

968 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

969 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

970 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

971 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

972 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

973 
	$X86_INST
(
ª≤z_sˇsb
)

974 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

975 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

976 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

977 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

978 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

979 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

980 
	$X86_INST
(
ª≤z_sˇsd
)

981 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

982 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

983 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

984 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

985 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

986 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

988 
	$X86_INST
(
ªpz_ªt
)

989 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

990 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

991 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

992 
	$UOP
(
ªt
, 
DAUX
, 0, 0, 0, 0, 0, 0)

993 
	$X86_INST
(
ªt
)

994 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

995 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

996 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

997 
	$UOP
(
ªt
, 
DAUX
, 0, 0, 0, 0, 0, 0)

998 
	$X86_INST
(
ªt_imm16
)

999 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

1000 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

1001 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

1002 
	$UOP
(
ªt
, 
DAUX
, 0, 0, 0, 0, 0, 0)

1004 
	$X86_INST
(
rdtsc
)

1005 
	$UOP
(
move
, 0, 0, 0, 
DEAX
, 
DEDX
, 0, 0)

1007 
	$X86_INST
(
ßhf
)

1008 
	$UOP
(
move
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1010 
	$X86_INST
(
£è_rm8
)

1011 
	$UOP
(
move
, 
DCF
, 
DZPS
, 0, 
DRM8
, 0, 0, 0)

1012 
	$X86_INST
(
£èe_rm8
)

1013 
	$UOP
(
move
, 
DCF
, 0, 0, 
DRM8
, 0, 0, 0)

1014 
	$X86_INST
(
£tb_rm8
)

1015 
	$UOP
(
move
, 
DCF
, 0, 0, 
DRM8
, 0, 0, 0)

1016 
	$X86_INST
(
£tbe_rm8
)

1017 
	$UOP
(
move
, 
DCF
, 
DZPS
, 0, 
DRM8
, 0, 0, 0)

1018 
	$X86_INST
(
£ã_rm8
)

1019 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1020 
	$X86_INST
(
£tg_rm8
)

1021 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1022 
	$X86_INST
(
£tge_rm8
)

1023 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1024 
	$X86_INST
(
£é_rm8
)

1025 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1026 
	$X86_INST
(
£ée_rm8
)

1027 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1028 
	$X86_INST
(
£äe_rm8
)

1029 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1030 
	$X86_INST
(
£äo_rm8
)

1031 
	$UOP
(
move
, 
DOF
, 0, 0, 
DRM8
, 0, 0, 0)

1032 
	$X86_INST
(
£äp_rm8
)

1033 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1034 
	$X86_INST
(
£äs_rm8
)

1035 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1036 
	$X86_INST
(
£to_rm8
)

1037 
	$UOP
(
move
, 
DOF
, 0, 0, 
DRM8
, 0, 0, 0)

1038 
	$X86_INST
(
£ç_rm8
)

1039 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1040 
	$X86_INST
(
£ts_rm8
)

1041 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1043 
	$X86_INST
(
ßr_rm8_1
)

1044 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1045 
	$X86_INST
(
ßr_rm8_˛
)

1046 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1047 
	$X86_INST
(
ßr_rm8_imm8
)

1048 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1049 
	$X86_INST
(
ßr_rm16_1
)

1050 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1051 
	$X86_INST
(
ßr_rm16_˛
)

1052 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1053 
	$X86_INST
(
ßr_rm16_imm8
)

1054 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1055 
	$X86_INST
(
ßr_rm32_1
)

1056 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1057 
	$X86_INST
(
ßr_rm32_˛
)

1058 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1059 
	$X86_INST
(
ßr_rm32_imm8
)

1060 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1061 
	$X86_INST
(
shl_rm8_1
)

1062 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1063 
	$X86_INST
(
shl_rm8_˛
)

1064 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1065 
	$X86_INST
(
shl_rm8_imm8
)

1066 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1067 
	$X86_INST
(
shl_rm16_1
)

1068 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1069 
	$X86_INST
(
shl_rm16_˛
)

1070 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1071 
	$X86_INST
(
shl_rm16_imm8
)

1072 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1073 
	$X86_INST
(
shl_rm32_1
)

1074 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1075 
	$X86_INST
(
shl_rm32_˛
)

1076 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1077 
	$X86_INST
(
shl_rm32_imm8
)

1078 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1079 
	$X86_INST
(
shr_rm8_1
)

1080 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1081 
	$X86_INST
(
shr_rm8_˛
)

1082 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1083 
	$X86_INST
(
shr_rm8_imm8
)

1084 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1085 
	$X86_INST
(
shr_rm16_1
)

1086 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1087 
	$X86_INST
(
shr_rm16_˛
)

1088 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1089 
	$X86_INST
(
shr_rm16_imm8
)

1090 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1091 
	$X86_INST
(
shr_rm32_1
)

1092 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1093 
	$X86_INST
(
shr_rm32_˛
)

1094 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1095 
	$X86_INST
(
shr_rm32_imm8
)

1096 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1098 
	$X86_INST
(
sbb_Æ_imm8
)

1099 
	$UOP
(
sub
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

1100 
	$X86_INST
(
sbb_ax_imm16
)

1101 
	$UOP
(
sub
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

1102 
	$X86_INST
(
sbb_óx_imm32
)

1103 
	$UOP
(
sub
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

1104 
	$X86_INST
(
sbb_rm8_imm8
)

1105 
	$UOP
(
sub
, 
DRM8
, 
DCF
, 0, DRM8, 
DZPS
, DCF, 
DOF
)

1106 
	$X86_INST
(
sbb_rm16_imm16
)

1107 
	$UOP
(
sub
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

1108 
	$X86_INST
(
sbb_rm32_imm32
)

1109 
	$UOP
(
sub
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

1110 
	$X86_INST
(
sbb_rm16_imm8
)

1111 
	$UOP
(
sub
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

1112 
	$X86_INST
(
sbb_rm32_imm8
)

1113 
	$UOP
(
sub
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

1114 
	$X86_INST
(
sbb_rm8_r8
)

1115 
	$UOP
(
sub
, 
DRM8
, 
DR8
, 
DCF
, DRM8, 
DZPS
, DCF, 
DOF
)

1116 
	$X86_INST
(
sbb_rm16_r16
)

1117 
	$UOP
(
sub
, 
DRM16
, 
DR16
, 
DCF
, DRM16, 
DZPS
, DCF, 
DOF
)

1118 
	$X86_INST
(
sbb_rm32_r32
)

1119 
	$UOP
(
sub
, 
DRM32
, 
DR32
, 
DCF
, DRM32, 
DZPS
, DCF, 
DOF
)

1120 
	$X86_INST
(
sbb_r8_rm8
)

1121 
	$UOP
(
sub
, 
DR8
, 
DRM8
, 
DCF
, DR8, 
DZPS
, DCF, 
DOF
)

1122 
	$X86_INST
(
sbb_r16_rm16
)

1123 
	$UOP
(
sub
, 
DR16
, 
DRM16
, 
DCF
, DR16, 
DZPS
, DCF, 
DOF
)

1124 
	$X86_INST
(
sbb_r32_rm32
)

1125 
	$UOP
(
sub
, 
DR32
, 
DRM32
, 
DCF
, DR32, 
DZPS
, DCF, 
DOF
)

1127 
	$X86_INST
(
sˇsb
)

1128 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1129 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

1130 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1131 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1132 
	$X86_INST
(
sˇsd
)

1133 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1134 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

1135 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1136 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1138 
	$X86_INST
(
shld_rm32_r32_imm8
)

1139 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1140 
	$X86_INST
(
shld_rm32_r32_˛
)

1141 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 
DECX
, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1143 
	$X86_INST
(
shrd_rm32_r32_imm8
)

1144 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1145 
	$X86_INST
(
shrd_rm32_r32_˛
)

1146 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 
DECX
, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1148 
	$X86_INST
(
°d
)

1149 
	$UOP
(
move
, 0, 0, 0, 0, 
DDF
, 0, 0)

1151 
	$X86_INST
(
°osb
)

1152 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1153 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

1154 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1155 
	$X86_INST
(
°osd
)

1156 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1157 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

1158 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1160 
	$X86_INST
(
sub_Æ_imm8
)

1161 
	$UOP
(
sub
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1162 
	$X86_INST
(
sub_ax_imm16
)

1163 
	$UOP
(
sub
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1164 
	$X86_INST
(
sub_óx_imm32
)

1165 
	$UOP
(
sub
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1166 
	$X86_INST
(
sub_rm8_imm8
)

1167 
	$UOP
(
sub
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1168 
	$X86_INST
(
sub_rm16_imm16
)

1169 
	$UOP
(
sub
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1170 
	$X86_INST
(
sub_rm32_imm32
)

1171 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1172 
	$X86_INST
(
sub_rm16_imm8
)

1173 
	$UOP
(
sub
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1174 
	$X86_INST
(
sub_rm32_imm8
)

1175 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1176 
	$X86_INST
(
sub_rm8_r8
)

1177 
	$UOP
(
sub
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1178 
	$X86_INST
(
sub_rm16_r16
)

1179 
	$UOP
(
sub
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1180 
	$X86_INST
(
sub_rm32_r32
)

1181 
	$UOP
(
sub
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1182 
	$X86_INST
(
sub_r8_rm8
)

1183 
	$UOP
(
sub
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

1184 
	$X86_INST
(
sub_r16_rm16
)

1185 
	$UOP
(
sub
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

1186 
	$X86_INST
(
sub_r32_rm32
)

1187 
	$UOP
(
sub
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

1189 
	$X86_INST
(
ã°_Æ_imm8
)

1190 
	$UOP
(
™d
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1191 
	$X86_INST
(
ã°_ax_imm16
)

1192 
	$UOP
(
™d
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1193 
	$X86_INST
(
ã°_óx_imm32
)

1194 
	$UOP
(
™d
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1195 
	$X86_INST
(
ã°_rm8_imm8
)

1196 
	$UOP
(
™d
, 
DRM8
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1197 
	$X86_INST
(
ã°_rm16_imm16
)

1198 
	$UOP
(
™d
, 
DRM16
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1199 
	$X86_INST
(
ã°_rm32_imm32
)

1200 
	$UOP
(
™d
, 
DRM32
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1201 
	$X86_INST
(
ã°_rm8_r8
)

1202 
	$UOP
(
™d
, 
DRM8
, 
DR8
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1203 
	$X86_INST
(
ã°_rm16_r16
)

1204 
	$UOP
(
™d
, 
DRM16
, 
DR16
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1205 
	$X86_INST
(
ã°_rm32_r32
)

1206 
	$UOP
(
™d
, 
DRM32
, 
DR32
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1208 
	$X86_INST
(
xadd_rm8_r8
)

1209 
	$UOP
(
add
, 
DRM8
, 
DR8
, 0, 
DAUX
, 
DZPS
, 
DCF
, 
DOF
)

1210 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DRM8
, 0, 0, 0)

1211 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DR8
, 0, 0, 0)

1212 
	$X86_INST
(
xadd_rm32_r32
)

1213 
	$UOP
(
add
, 
DRM32
, 
DR32
, 0, 
DAUX
, 
DZPS
, 
DCF
, 
DOF
)

1214 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DRM32
, 0, 0, 0)

1215 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DR32
, 0, 0, 0)

1217 
	$X86_INST
(
x‹_Æ_imm8
)

1218 
	$UOP
(
x‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1219 
	$X86_INST
(
x‹_ax_imm16
)

1220 
	$UOP
(
x‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1221 
	$X86_INST
(
x‹_óx_imm32
)

1222 
	$UOP
(
x‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1223 
	$X86_INST
(
x‹_rm8_imm8
)

1224 
	$UOP
(
x‹
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1225 
	$X86_INST
(
x‹_rm16_imm16
)

1226 
	$UOP
(
x‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1227 
	$X86_INST
(
x‹_rm32_imm32
)

1228 
	$UOP
(
x‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1229 
	$X86_INST
(
x‹_rm16_imm8
)

1230 
	$UOP
(
x‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1231 
	$X86_INST
(
x‹_rm32_imm8
)

1232 
	$UOP
(
x‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1233 
	$X86_INST
(
x‹_rm8_r8
)

1234 
	$UOP
(
x‹
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1235 
	$X86_INST
(
x‹_rm16_r16
)

1236 
	$UOP
(
x‹
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1237 
	$X86_INST
(
x‹_rm32_r32
)

1238 
	$UOP
(
x‹
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1239 
	$X86_INST
(
x‹_r8_rm8
)

1240 
	$UOP
(
x‹
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

1241 
	$X86_INST
(
x‹_r16_rm16
)

1242 
	$UOP
(
x‹
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

1243 
	$X86_INST
(
x‹_r32_rm32
)

1244 
	$UOP
(
x‹
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

1246 
	$X86_INST
(
xchg_ú16_ax
)

1247 
	$UOP
(
move
, 
DIR16
, 
DEAX
, 0, DIR16, DEAX, 0, 0)

1248 
	$X86_INST
(
xchg_ú32_óx
)

1249 
	$UOP
(
move
, 
DIR32
, 
DEAX
, 0, DIR32, DEAX, 0, 0)

1250 
	$X86_INST
(
xchg_rm8_r8
)

1251 
	$UOP
(
move
, 
DRM8
, 
DR8
, 0, DRM8, DR8, 0, 0)

1252 
	$X86_INST
(
xchg_rm16_r16
)

1253 
	$UOP
(
move
, 
DRM16
, 
DR16
, 0, DRM16, DR16, 0, 0)

1254 
	$X86_INST
(
xchg_rm32_r32
)

1255 
	`UOP
(
move
, 
DRM32
, 
DR32
, 0, DRM32, DR32, 0, 0)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
117
2218
bpred.c
commit.c
decode.c
dispatch.c
fetch.c
fu.c
guestos.c
issue.c
libcachesystem/cache.c
libcachesystem/cachesystem.c
libcachesystem/cachesystem.h
libcachesystem/directory.c
libcachesystem/mmu.c
libcachesystem/moesi.c
libdisasm/disasm.c
libdisasm/disasm.h
libesim/esim.c
libesim/esim.h
libgpudisasm/gpudisasm.c
libgpudisasm/gpudisasm.h
libgpudisasm/gpudump.c
libgpukernel/cal-abi.c
libgpukernel/gpuisa.c
libgpukernel/gpukernel-local.h
libgpukernel/gpukernel.c
libgpukernel/gpukernel.h
libgpukernel/gpumachine.c
libgpukernel/opencl-obj.c
libgpukernel/opencl.c
libm2skernel/context.c
libm2skernel/elf.c
libm2skernel/fs.c
libm2skernel/isa.c
libm2skernel/loader.c
libm2skernel/m2skernel.c
libm2skernel/m2skernel.h
libm2skernel/machine-ctrl.c
libm2skernel/machine-fp.c
libm2skernel/machine-rot.c
libm2skernel/machine-std.c
libm2skernel/machine-str.c
libm2skernel/machine.c
libm2skernel/memory.c
libm2skernel/regs.c
libm2skernel/signal.c
libm2skernel/syscall.c
libmhandle/mhandle.c
libmhandle/mhandle.h
libmisc/misc.c
libmisc/misc.h
libnetwork/network.c
libnetwork/network.h
libopt/options.c
libopt/options.h
libstruct/buffer.c
libstruct/buffer.h
libstruct/chrono.c
libstruct/chrono.h
libstruct/config.c
libstruct/config.h
libstruct/debug.c
libstruct/debug.h
libstruct/hash.c
libstruct/hash.h
libstruct/heap.c
libstruct/heap.h
libstruct/list.c
libstruct/list.h
libstruct/lnlist.c
libstruct/lnlist.h
libstruct/repos.c
libstruct/repos.h
m2s-fast.c
m2s-objdump.c
m2s.c
m2s.h
processor.c
queues.c
recover.c
rf.c
rob.c
sched.c
tcache.c
uop.c
writeback.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/linux/unistd.h
/usr/include/math.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
uop1.dat
uop2.dat
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
